// Generated by Haxe 4.0.5
(function ($hx_exports, $global) { "use strict";
$hx_exports["kha"] = $hx_exports["kha"] || {};
$hx_exports["kha"]["input"] = $hx_exports["kha"]["input"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Crashlytics = function() { };
$hxClasses["Crashlytics"] = Crashlytics;
Crashlytics.__name__ = "Crashlytics";
Crashlytics.logException = function(msg) {
	throw new js__$Boot_HaxeError(msg);
};
Crashlytics.setInt = function(key,value) {
	var v = "" + value;
	var _this = Crashlytics.keys;
	if(__map_reserved[key] != null) {
		_this.setReserved(key,v);
	} else {
		_this.h[key] = v;
	}
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.has = function(it,elt) {
	var x = $getIterator(it);
	while(x.hasNext()) if(x.next() == elt) {
		return true;
	}
	return false;
};
Lambda.exists = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) if(f(x.next())) {
		return true;
	}
	return false;
};
var Loader = function() {
};
$hxClasses["Loader"] = Loader;
Loader.__name__ = "Loader";
Loader.initDefaultSettings = function(save) {
	if(save.gameScale != null) {
		khm_Screen.defaultScale = save.gameScale;
	} else {
		Loader.setDefaultScale();
	}
	Loader.isAdsRemoved = save.isAdsRemoved;
	khm_Lang.set(save.lang);
	kha_graphics2_Graphics.fontGlyphs = khm_Lang.fontGlyphs;
	game_Game.vibrationEnabled = save.vibration;
	game_Game.cloudsEnabled = save.clouds;
	game_Game.trasnparentGui = save.trasnparentGui;
	game_gui_Touch.isReversed = save.padOnRight;
	if(save.buttonSize == null) {
		game_gui_Touch.buttonSize = game_gui_Touch.getDefaultButtonSize();
	} else {
		game_gui_Touch.buttonSize = save.buttonSize;
	}
	game_gui_Touch.controlType = save.controlType;
	var volume = save.musicVolume;
	if(volume == null) {
		volume = 0.5;
	}
	Music.setVolume(volume);
	Sound.soundVolume = save.soundVolume;
};
Loader.generateAtlas = function() {
	var tileset = new khm_tilemap_Tileset(kha_Assets.blobs.tiles_json);
	khm_utils_Atlas.init(function(name) {
		if(new EReg("(ground|walls|spikes|mines|powerups|buildings|triggers)$","").match(name)) {
			return false;
		}
		if(new EReg("^editor_","").match(name)) {
			return false;
		}
		if(new EReg("(gui_sound_on|gui_sound_off|gui_icon_wait)$","").match(name)) {
			return false;
		}
		if(new EReg("(favicon)$","").match(name)) {
			return false;
		}
		switch(name) {
		case "gui_billet":
			var prop = new khm_utils_AtlasProps(game_gui_Ui.getInvScale() / 6.9,null);
			var _this = khm_utils_Atlas.props;
			if(__map_reserved[name] != null) {
				_this.setReserved(name,prop);
			} else {
				_this.h[name] = prop;
			}
			return true;
		case "gui_digits":
			var prop1 = new khm_utils_AtlasProps(game_gui_Ui.getInvScale() / 8,game_gui_Text.numbersW);
			var _this1 = khm_utils_Atlas.props;
			if(__map_reserved[name] != null) {
				_this1.setReserved(name,prop1);
			} else {
				_this1.h[name] = prop1;
			}
			return true;
		case "gui_hp":case "gui_hp_inact":
			var prop2 = new khm_utils_AtlasProps(game_gui_Ui.getHpScale(),null);
			var _this2 = khm_utils_Atlas.props;
			if(__map_reserved[name] != null) {
				_this2.setReserved(name,prop2);
			} else {
				_this2.h[name] = prop2;
			}
			return true;
		case "gui_icons":
			var prop3 = new khm_utils_AtlasProps(game_gui_Ui.getInvScale() / 5,null);
			var _this3 = khm_utils_Atlas.props;
			if(__map_reserved[name] != null) {
				_this3.setReserved(name,prop3);
			} else {
				_this3.h[name] = prop3;
			}
			return true;
		case "gui_panel":
			var prop4 = new khm_utils_AtlasProps(game_gui_Ui.getInvScale() / 1.2 / 4,null);
			var _this4 = khm_utils_Atlas.props;
			if(__map_reserved[name] != null) {
				_this4.setReserved(name,prop4);
			} else {
				_this4.h[name] = prop4;
			}
			return true;
		case "gui_ts_home":
			var prop5 = new khm_utils_AtlasProps(game_gui_Touch.buttonSize * 0.7 / kha_Assets.images.gui_ts_home.get_width(),null);
			var _this5 = khm_utils_Atlas.props;
			if(__map_reserved[name] != null) {
				_this5.setReserved(name,prop5);
			} else {
				_this5.h[name] = prop5;
			}
			return true;
		case "gui_ts_joystick":
			var scale = 2.4;
			scale = game_gui_Touch.buttonSize * 2.4 / kha_Assets.images.gui_ts_joystick.get_width();
			if(scale > 1.5) {
				scale = 1.5;
			}
			var prop6 = new khm_utils_AtlasProps(scale,null);
			var _this6 = khm_utils_Atlas.props;
			if(__map_reserved[name] != null) {
				_this6.setReserved(name,prop6);
			} else {
				_this6.h[name] = prop6;
			}
			return true;
		default:
		}
		if(new EReg("gui_ts_","").match(name) && !new EReg("(joystick|home)","").match(name)) {
			var scale1 = game_gui_Touch.buttonSize / kha_Assets.images.gui_ts_base.get_width();
			if(scale1 > 1.5) {
				scale1 = 1.5;
			}
			var prop7 = new khm_utils_AtlasProps(scale1,null);
			var _this7 = khm_utils_Atlas.props;
			if(__map_reserved[name] != null) {
				_this7.setReserved(name,prop7);
			} else {
				_this7.h[name] = prop7;
			}
			return true;
		}
		return true;
	},0,tileset.img.get_height() + 1);
	var g = khm_utils_Atlas.atlas.get_g2();
	g.begin(false);
	g.drawImage(tileset.img,0,0);
	g.end();
};
Loader.savePatcher = function(data,version) {
	switch(version) {
	case 1:
		throw new js__$Boot_HaxeError("unsupported version " + version);
	case 2:
		var save = data;
		save.hasClassicCampaign = false;
		var _g = [];
		var _g1 = 0;
		var _g2 = save.slots;
		while(_g1 < _g2.length) _g.push(_g2[_g1++]);
		var _g3 = 0;
		var _g4 = save.bonusSlots;
		while(_g3 < _g4.length) _g.push(_g4[_g3++]);
		if(save.currentSlot != null) {
			_g.push(save.currentSlot);
		}
		var _g5 = 0;
		while(_g5 < _g.length) _g[_g5++].type = 0;
		break;
	case 3:
		var save1 = data;
		save1.isAdsRemoved = data.hasClassicCampaign;
		Loader.isAdsRemoved = save1.isAdsRemoved;
		break;
	case 4:
		var save2 = data;
		if(save2.completedOnlineMaps == null) {
			save2.completedOnlineMaps = new haxe_ds_StringMap();
		}
		break;
	case 5:
		var save3 = data;
		var _g6 = [];
		var _g11 = 0;
		var _g21 = save3.slots;
		while(_g11 < _g21.length) _g6.push(_g21[_g11++]);
		var _g31 = 0;
		var _g41 = save3.bonusSlots;
		while(_g31 < _g41.length) _g6.push(_g41[_g31++]);
		if(save3.currentSlot != null) {
			_g6.push(save3.currentSlot);
		}
		if(save3.onlineSlot != null) {
			_g6.push(save3.onlineSlot);
		}
		var _g51 = 0;
		while(_g51 < _g6.length) {
			var slot = _g6[_g51];
			++_g51;
			if(slot.stats.exp == null) {
				slot.stats.exp = 0;
			}
		}
		game_gui_Menu.showNews = true;
		break;
	case 6:
		throw new js__$Boot_HaxeError("skipped version " + version);
	default:
		throw new js__$Boot_HaxeError("skipped version " + version);
	}
	return data;
};
Loader.resetDefaultSlot = function() {
	khm_Settings.set({ currentSlot : Loader.defSlot});
};
Loader.resetOnlineSlot = function() {
	khm_Settings.set({ onlineSlot : Loader.defSlot});
};
Loader.resetSettings = function() {
	var save = khm_Settings.read();
	khm_Settings.reset();
	khm_Settings.set({ currentSlot : save.currentSlot, slots : save.slots, bonusSlots : save.bonusSlots, isAdsRemoved : save.isAdsRemoved, onlineSlot : save.onlineSlot, completedOnlineMaps : save.completedOnlineMaps});
	Loader.initDefaultSettings(khm_Settings.read());
	Loader.soundScreen();
};
Loader.showInterstitial = function() {
	if(Loader.isAdsRemoved) {
		return;
	}
	admob_Admob.showInterstitial(Loader.admobInterstitialId,function() {
		return;
	},function(code) {
		return;
	},function() {
		return;
	},function() {
		return;
	});
};
Loader.setDefaultScale = function() {
	var min = Math.min(kha_System.windowWidth(),kha_System.windowHeight());
	min += kha_Display.get_primary().get_pixelsPerInch();
	var scale = min / 320 | 0;
	if(scale < 1) {
		scale = 1;
	}
	khm_Screen.defaultScale = scale;
};
Loader.newMenu = function() {
	var menu = new game_gui_Menu();
	menu.show();
	menu.init();
};
Loader.newGame = function() {
	var game1 = new game_Game();
	game1.show();
	game1.init();
	game1.continueCampaign();
};
Loader.soundScreen = function() {
	var screen = new game_gui_SoundScreen();
	screen.show();
	screen.init();
};
Loader.prototype = {
	init: function() {
		kha_System.notifyOnFrames($bind(this,this.onRender));
		kha_Assets.loadEverything($bind(this,this.loadComplete),function(asset) {
			if(asset.name.indexOf("music_track") != -1 || asset.name.indexOf("music_final") != -1) {
				return false;
			}
			return true;
		},function(asset1) {
			if(asset1.name.indexOf("music_") != -1) {
				return false;
			}
			return true;
		});
	}
	,loadComplete: function() {
		kha_System.removeFramesListener($bind(this,this.onRender));
		khm_Settings.init({ version : 6, gameScale : null, buttonSize : null, clouds : true, trasnparentGui : false, musicVolume : null, soundVolume : 0.5, vibration : true, controlType : 2, padOnRight : false, showFps : false, currentSlot : null, slots : [], bonusSlots : [], isAdsRemoved : false, onlineSlot : null, completedOnlineMaps : new haxe_ds_StringMap()},Loader.savePatcher);
		var save = khm_Settings.read();
		if(save.onlineSlot == null) {
			Loader.resetOnlineSlot();
			save = khm_Settings.read();
		}
		if(save.onlineSlot.money < 0) {
			save.onlineSlot.money = 10000;
			khm_Settings.write(save);
		}
		khm_Screen.init(new khm_ScreenSets(null,save.showFps,null));
		khm_Lang.loadFolder("langs");
		Loader.initDefaultSettings(save);
		Loader.generateAtlas();
		var nav = HxOverrides.substr(window.location.hash,1,null);
		switch(nav) {
		case "editor":
			var editor = new khm_editor_Editor(new khm_tilemap_Tileset(kha_Assets.blobs.tiles_json));
			editor.show();
			editor.init();
			break;
		case "game":
			Loader.newGame();
			break;
		case "practice":
			var game1 = new game_Game();
			game1.show();
			game1.init();
			game1.loadPractice();
			break;
		case "shop":
			var game2 = new game_Game();
			game2.show();
			game2.init();
			game2.continueCampaign();
			var shop = new game_gui_Shop();
			shop.show();
			shop.init(game2,game2.player);
			break;
		case "sound":
			Loader.soundScreen();
			break;
		default:
			if(nav.length > 0) {
				var save1 = khm_Settings.read();
				save1.currentSlot.level = Std.parseInt(nav);
				khm_Settings.write(save1);
				Loader.newGame();
				return;
			}
			this.nextScreen();
		}
	}
	,nextScreen: function() {
		if(kha_Assets.sounds.get("music_briefing") == null) {
			Loader.newMenu();
			return;
		}
		if(khm_Settings.read().musicVolume != null) {
			Loader.newMenu();
			return;
		}
		Loader.soundScreen();
	}
	,onRender: function(fbs) {
		var g = fbs[0].get_g2();
		g.begin(true,-13825271);
		g.set_font(kha_Assets.fonts.RobotoCondensed_Regular);
		var h = kha_System.windowHeight() / 20;
		var w = kha_Assets.progress * kha_System.windowWidth();
		var y = kha_System.windowHeight() / 2 - h;
		g.set_color(-65536);
		g.fillRect(0,y,w,h * 2);
		g.end();
	}
	,__class__: Loader
};
var Main = function() { };
$hxClasses["Main"] = Main;
Main.__name__ = "Main";
Main.main = function() {
	haxe_Log.trace("2020-06-13 14:24:53",{ fileName : "Main.hx", lineNumber : 17, className : "Main", methodName : "main"});
	Main.setFullWindowCanvas();
	kha_System.start(new kha_SystemOptions("Tankzors Lux",800,600,null,null),Main.init);
};
Main.init = function($window) {
	new Loader().init();
};
Main.setFullWindowCanvas = function() {
	window.document.documentElement.style.padding = "0";
	window.document.documentElement.style.margin = "0";
	window.document.body.style.padding = "0";
	window.document.body.style.margin = "0";
	var canvas = window.document.getElementById("khanvas");
	canvas.style.display = "block";
	var resize = function() {
		canvas.width = window.innerWidth * window.devicePixelRatio | 0;
		canvas.height = window.innerHeight * window.devicePixelRatio | 0;
		canvas.style.width = window.document.documentElement.clientWidth + "px";
		canvas.style.height = window.document.documentElement.clientHeight + "px";
	};
	window.onresize = resize;
	resize();
};
Math.__name__ = "Math";
var Music = function() { };
$hxClasses["Music"] = Music;
Music.__name__ = "Music";
Music.play = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	if(!Music.isEnabled) {
		return;
	}
	if(sound == null) {
		return;
	}
	Music.stop();
	if(sound.uncompressedData != null) {
		haxe_Log.trace("music is uncompressed",{ fileName : "Music.hx", lineNumber : 18, className : "Music", methodName : "play"});
		Music.channel = kha_audio2_Audio1.play(sound,loop);
	} else {
		Music.channel = kha_audio2_Audio1.stream(sound,loop);
	}
	Music.setVolume(Music.volume);
};
Music.setVolume = function(value) {
	Music.volume = value;
	Music.isEnabled = Music.volume > 0;
	if(Music.channel == null) {
		return;
	}
	Music.channel.set_volume(value);
};
Music.getPosition = function() {
	if(Music.channel == null) {
		return 0.0;
	}
	return Music.channel.get_position();
};
Music.setPosition = function(pos) {
	if(Music.channel == null) {
		return;
	}
	Music.channel.pause();
	Music.channel.set_position(pos);
	Music.channel.play();
};
Music.stop = function() {
	if(Music.channel == null) {
		return;
	}
	Music.channel.pause();
	Music.channel.stop();
};
var OldMap = function() { };
$hxClasses["OldMap"] = OldMap;
OldMap.__name__ = "OldMap";
OldMap.parse = function(tileset,json) {
	var v = json.vers;
	var map;
	switch(v) {
	case 4:case 5:
		map = OldMap.parseMap5(tileset,json);
		break;
	case 6:
		map = OldMap.parseMap(tileset,json);
		break;
	default:
		throw new js__$Boot_HaxeError("unsupported map version: " + v);
	}
	OldMap.fixSpawnCounts(map);
	return map;
};
OldMap.fixSpawnCounts = function(map) {
	var redBases = [];
	var _g = 0;
	var _g1 = map.objects;
	while(_g < _g1.length) {
		var obj = _g1[_g];
		++_g;
		if(obj.type != "base" || obj.data.team != 2) {
			continue;
		}
		redBases.push(obj);
	}
	var count = 0;
	var _g2 = 0;
	var _g3 = map.data.teamCounts[2];
	while(_g2 < _g3.length) count += _g3[_g2++];
	var spawnLimit = 0;
	var _g4 = 0;
	while(_g4 < redBases.length) spawnLimit += redBases[_g4++].data.count;
	if(redBases.length > 0) {
		var _g5 = spawnLimit;
		var _g6 = count;
		while(_g5 < _g6) {
			++_g5;
			var id = Std.random(redBases.length);
			redBases[id].data.count++;
		}
	}
};
OldMap.fixMapParams = function(p) {
	if(p.musicTrack == 0) {
		p.musicTrack = 1 + Std.random(17);
	}
	if(p.radarHP < 1) {
		p.radarHP = 7;
	}
	if(p.reactorHP < 1) {
		p.reactorHP = 3;
	}
};
OldMap.parseMap = function(tileset,json) {
	var p = json.parameters;
	var params = p[9] + 1;
	var p1 = p[0];
	var _g = [];
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	var _g1 = [];
	_g1.push(p[10]);
	_g1.push(p[11]);
	_g1.push(p[12]);
	_g1.push(p[13]);
	_g1.push(p[14]);
	_g1.push(p[15]);
	_g1.push(p[16]);
	_g1.push(p[17]);
	var _g2 = [];
	_g2.push(p[1]);
	_g2.push(p[2]);
	_g2.push(p[3]);
	_g2.push(p[4]);
	_g2.push(p[5]);
	_g2.push(p[6]);
	_g2.push(p[7]);
	_g2.push(p[8]);
	var _g3 = [];
	_g3.push(0);
	_g3.push(0);
	_g3.push(0);
	_g3.push(0);
	_g3.push(0);
	_g3.push(0);
	_g3.push(0);
	_g3.push(0);
	var p2 = p[18];
	var p3 = p[19];
	var p4 = p[18];
	var p5 = p[18];
	var p6 = p[20];
	var p7 = p[21];
	var p8 = p[22];
	var p9 = p[23];
	var p10 = p[24];
	var p11 = p[25];
	var p12 = p[26];
	var p13 = p[27];
	var p14 = p[28];
	var p15 = p[29];
	var p16 = p[30];
	var p17 = p[31];
	var p18 = p[65];
	var p19 = p[66];
	var p20 = p[67];
	var p21 = p[68];
	var params1 = p[69] != 0;
	var _g4 = [];
	_g4.push(p[69]);
	_g4.push(p[70]);
	_g4.push(p[71]);
	_g4.push(p[72]);
	_g4.push(p[73]);
	_g4.push(p[74]);
	_g4.push(p[75]);
	_g4.push(p[76]);
	_g4.push(p[77]);
	_g4.push(p[78]);
	var params2 = { teamLimits : [0,params,p1,0], teamCounts : [_g,_g1,_g2,_g3], teamTurretTypes : [p2,p3,p4,p5], turretHeight : p6, turretDistance : p7, friendlyFire : p8, enemyDifficulty : p9, enemyAIType : p10, winCondition : p11, blueFlagCount : 0, blueFlags : [], airSupport : [{ x : p12, y : p13},{ x : p14, y : p15},{ x : p16, y : p17}], boxesContent : [], radarHP : p18, reactorHP : p19, musicTrack : p20, enemySightDistance : p21, enemySpawnOrdered : params1, enemySpawnOrder : _g4, playerSpawnMode : p[79], disableFreeze : (p[95] & 1) != 0, oneLifeMode : (p[95] & 4) != 0, disableClouds : (p[95] & 64) != 0, disableDebriefing : (p[95] & 128) != 0};
	OldMap.fixMapParams(params2);
	var json1 = json.name;
	var json2 = json.briefing;
	var json3 = json.debriefing;
	var json4 = json.map_arr[0].length;
	var json5 = json.map_arr.length;
	var _g5 = [];
	var _g6 = 0;
	var _g7 = tileset.layersLength;
	while(_g6 < _g7) {
		++_g6;
		_g5.push([]);
	}
	var map = { name : json1, briefing : json2, debriefing : json3, w : json4, h : json5, layers : _g5, objects : [], floatObjects : [], data : params2};
	var _g8 = 0;
	var _g9 = map.layers;
	while(_g8 < _g9.length) {
		var layer = _g9[_g8];
		++_g8;
		var _g81 = 0;
		var _g91 = map.h;
		while(_g81 < _g91) {
			var iy = _g81++;
			layer[iy] = [];
			var _g82 = 0;
			var _g92 = map.w;
			while(_g82 < _g92) layer[iy][_g82++] = 0;
		}
	}
	var getNextBg = function(ix,iy1) {
		var tile = 1;
		if(ix < map.w) {
			tile = json.map_arr[iy1][ix + 1];
		} else if(iy1 < map.h) {
			tile = json.map_arr[iy1 + 1][ix];
		}
		if(tile > 249) {
			tile -= 149;
		}
		if(tile <= 0 || tile > 106) {
			tile = 1;
		}
		return tile;
	};
	var _g10 = [];
	_g10.push(0);
	_g10.push(0);
	_g10.push(0);
	_g10.push(0);
	var triggerId = 0;
	var theme = [1,34,56];
	var bg = map.layers[0];
	var tg = map.layers[1];
	var fg = map.layers[2];
	var _g11 = 0;
	var _g12 = map.h;
	while(_g11 < _g12) {
		var iy2 = _g11++;
		var _g111 = 0;
		var _g121 = map.w;
		while(_g111 < _g121) {
			var ix1 = _g111++;
			var tile1 = json.map_arr[iy2][ix1];
			if(tile1 < 91) {
				bg[iy2][ix1] = tile1;
				continue;
			}
			if(tile1 > 249) {
				bg[iy2][ix1] = tile1 - 149;
				continue;
			}
			if(tile1 < 93) {
				if(ix1 > 0) {
					bg[iy2][ix1] = bg[iy2][ix1 - 1];
				} else if(iy2 > 0) {
					bg[iy2][ix1] = bg[iy2 - 1][ix1];
				} else {
					bg[iy2][ix1] = 1;
				}
				map.objects.push({ type : "reactor", x : ix1, y : iy2, layer : 1, data : { team : 1 + (tile1 - 91), hp : params2.reactorHP}});
				continue;
			}
			if(tile1 > 92 && tile1 < 95) {
				if(ix1 > 0) {
					bg[iy2][ix1] = bg[iy2][ix1 - 1];
				} else if(iy2 > 0) {
					bg[iy2][ix1] = bg[iy2 - 1][ix1];
				} else {
					bg[iy2][ix1] = 1;
				}
				map.objects.push({ type : "radar", x : ix1, y : iy2, layer : 1, data : { team : 1 + (tile1 - 93), hp : params2.radarHP}});
				continue;
			}
			if(tile1 > 94 && tile1 < 99) {
				var road = tile1 - 95;
				switch(road) {
				case 1:case 3:
					bg[iy2][ix1] = 29;
					break;
				case 0:case 2:
					bg[iy2][ix1] = 25;
					break;
				}
				if(road < 2) {
					tg[iy2][ix1] = 22;
				} else {
					tg[iy2][ix1] = 23;
				}
				continue;
			}
			if(tile1 == 99) {
				bg[iy2][ix1] = getNextBg(ix1,iy2);
				map.objects.push({ type : "palm", x : ix1, y : iy2, layer : 1, data : { }});
				continue;
			}
			if(tile1 > 99 && tile1 < 115) {
				var bgId = (tile1 - 100) / 5 | 0;
				if(bgId > 2) {
					bgId = 2;
				}
				bg[iy2][ix1] = theme[bgId];
				var base = (tile1 - 100) % 5;
				if(base < 2) {
					tg[iy2][ix1] = 34 + base;
					var team = base == 1 ? 2 : 1;
					var count = 0;
					var aiType = 0;
					var isActive = true;
					var i = _g10[team];
					switch(team) {
					case 1:
						if(i < 5) {
							count = p[80 + i];
							aiType = p[85 + i];
							isActive = p[90 + i] == 1;
						}
						break;
					case 2:
						if(i < 10) {
							count = p[32 + i];
							aiType = p[42 + i];
							isActive = p[52 + i] == 1;
						}
						break;
					}
					map.objects.push({ type : "base", x : ix1, y : iy2, layer : 1, data : { team : team, count : count, aiType : aiType, isActive : isActive}});
					_g10[team]++;
					continue;
				}
				if(base == 2) {
					var trigger = json.triggers[triggerId];
					var param = trigger[1];
					var delay = trigger[2];
					if(delay >= 128) {
						delay = (delay - 128) * 60;
					} else {
						delay *= 2;
					}
					var sensetivity = trigger[3];
					var color = 40 + ((trigger[4] & 48) >> 4);
					var state = { isActive : (trigger[4] & 1) != 0, isPressed : (trigger[4] & 2) != 0, isReusable : (trigger[4] & 4) != 0, isVisible : (trigger[4] & 8) != 0, color : color};
					var dirs = [{ x : 0, y : 1},{ x : -1, y : 0},{ x : 0, y : -1},{ x : 1, y : 0}];
					var type;
					switch(trigger[0]) {
					case 0:
						type = game_TriggerType.None;
						break;
					case 1:case 2:case 3:case 4:
						type = game_TriggerType.WallRow(dirs[trigger[0] - 1],OldMap.getWallRowTypes(param & 15),(param & 16) == 16,(param & 32) == 32);
						break;
					case 5:case 6:case 7:case 8:
						var power = param / 4 | 0;
						type = game_TriggerType.ExplWall(dirs[trigger[0] - 5],OldMap.explRadiusFromPower(power),power);
						break;
					case 9:case 10:case 11:
						var id = param % 128 - 1;
						var team1 = 2;
						if(param / 128 >= 1) {
							team1 = 1;
						}
						switch(trigger[0]) {
						case 9:
							type = game_TriggerType.EnableSpawn(team1,id);
							break;
						case 10:
							type = game_TriggerType.DisableSpawn(team1,id);
							break;
						case 11:
							type = game_TriggerType.ToggleSpawn(team1,id);
							break;
						default:
							throw new js__$Boot_HaxeError("unknown spawn trigger");
						}
						break;
					case 15:case 16:case 17:
						var dist = param % 128;
						var reload = param / 128 >= 1;
						switch(trigger[0]) {
						case 15:
							type = game_TriggerType.EnableSpawnsArea(dist,reload);
							break;
						case 16:
							type = game_TriggerType.DisableSpawnsArea(dist,reload);
							break;
						case 17:
							type = game_TriggerType.ToggleSpawnsArea(dist,reload);
							break;
						default:
							throw new js__$Boot_HaxeError("unknown spawn area trigger");
						}
						break;
					case 12:case 18:
						var power1 = param / 4 | 0;
						var id1 = param - power1 * 4 - 1;
						if(power1 == 0) {
							power1 = 10;
						}
						var radius = OldMap.explRadiusFromPower(power1) + 1;
						switch(trigger[0]) {
						case 12:
							type = game_TriggerType.AirSupport(id1,radius,power1);
							break;
						case 18:
							type = game_TriggerType.ForcedAirSupport(id1,radius,power1);
							break;
						default:
							throw new js__$Boot_HaxeError("unknown air support trigger");
						}
						break;
					case 19:
						var cords = { x : ix1, y : iy2};
						if(param % 4 != 0) {
							cords = params2.airSupport[param % 4 - 1];
						}
						var power2 = param / 4 | 0;
						if(power2 == 0) {
							power2 = 10;
						}
						type = game_TriggerType.Explosion(cords,OldMap.explRadiusFromPower(power2),power2 + 1);
						break;
					case 20:
						var hintId = param % 128 - 1;
						var text = null;
						if(hintId >= 0) {
							text = json.triggers_msg[hintId];
						}
						type = game_TriggerType.LevelComplete(param >= 128,text);
						break;
					case 21:case 22:case 23:case 24:case 25:case 26:case 27:
						type = game_TriggerType.Text(json.triggers_msg[trigger[0] - 21],param == 0 ? 120 : param * 60);
						break;
					case 31:
						var count1 = param / 32 | 0;
						if(count1 > 0) {
							--count1;
						}
						type = game_TriggerType.Trigger(param % 32 - 1,count1,(param / 32 | 0) == 1);
						break;
					case 32:
						var count2 = param / 32 | 0;
						if(count2 > 0) {
							--count2;
						}
						type = game_TriggerType.TriggerArea(param % 32,count2,(param / 32 | 0) == 1);
						break;
					case 33:
						type = game_TriggerType.EnableTrigger(param - 1);
						break;
					case 34:
						type = game_TriggerType.DisableTrigger(param - 1);
						break;
					case 35:
						type = game_TriggerType.ToggleTrigger(param - 1);
						break;
					case 36:
						type = game_TriggerType.EnableTriggerArea(param);
						break;
					case 37:
						type = game_TriggerType.DisableTriggerArea(param);
						break;
					case 38:
						type = game_TriggerType.ToggleTriggerArea(param);
						break;
					case 40:
						type = game_TriggerType.EnableTurretsArea(param);
						break;
					case 41:
						type = game_TriggerType.DisableTurretsArea(param);
						break;
					case 42:
						type = game_TriggerType.ToggleTurretsArea(param);
						break;
					case 43:
						type = game_TriggerType.SetTanksAI;
						break;
					case 44:
						type = game_TriggerType.SetTanksDistance(param);
						break;
					case 45:
						type = game_TriggerType.SetMusicTrack(param);
						break;
					case 46:
						type = game_TriggerType.TankCountTriggerArea(param % 128,param / 128 >= 1);
						break;
					case 72:
						type = game_TriggerType.DualTurretsArea(param);
						break;
					default:
						type = game_TriggerType.Unknown(trigger[0]);
					}
					map.objects.push({ type : "trigger", x : ix1, y : iy2, layer : 1, data : { type : type, delay : delay, sensetivity : sensetivity, state : state}});
					++triggerId;
					if(state.isVisible) {
						tg[iy2][ix1] = color;
					}
					fg[iy2][ix1] = 1;
					continue;
				}
			}
			if(tile1 > 114 && tile1 < 130) {
				var bgId1 = (tile1 - 115) / 5 | 0;
				if(bgId1 > 2) {
					bgId1 = 2;
				}
				bg[iy2][ix1] = theme[bgId1];
				tg[iy2][ix1] = 37 + (tile1 - 115) % 5;
				if(tg[iy2][ix1] == 38) {
					var id2 = params2.blueFlagCount;
					params2.blueFlags.push({ id : id2, x : ix1, y : iy2});
					var tmp;
					switch(params2.winCondition) {
					case 6:case 35:case 36:case 37:
						tmp = true;
						break;
					default:
						tmp = false;
					}
					if(!tmp && id2 < params2.airSupport.length) {
						params2.airSupport[id2].y--;
					}
					params2.blueFlagCount++;
				}
				continue;
			}
			if(tile1 > 129 && tile1 < 250) {
				var bgId2 = (tile1 - 130) / 40 | 0;
				if(bgId2 > 2) {
					bgId2 = 2;
				}
				bg[iy2][ix1] = theme[bgId2];
				var tile2 = (tile1 - 130) % 40 + 1;
				if(tile2 < 16) {
					tg[iy2][ix1] = tile2;
				} else if(tile2 == 16) {
					var bush = 16 + Std.random(3);
					tg[iy2][ix1] = bush;
				} else if(tile2 > 16 && tile2 < 20) {
					tg[iy2][ix1] = tile2 + 2;
				} else if(tile2 > 19 && tile2 < 22) {
					tg[iy2][ix1] = 22 + (tile2 - 20);
				} else if(tile2 > 21 && tile2 < 32) {
					var turretId = tile2 - 22;
					var team2 = turretId == 9 ? 1 : 2;
					var dir;
					switch(turretId) {
					case 0:
						dir = { x : 0, y : 1};
						break;
					case 1:
						dir = { x : -1, y : 0};
						break;
					case 2:
						dir = { x : 0, y : -1};
						break;
					case 3:
						dir = { x : 1, y : 0};
						break;
					default:
						dir = null;
					}
					var type1 = params2.teamTurretTypes[team2];
					if(turretId > 3 && turretId < 8) {
						type1 = [2,4,6,9][turretId - 4];
					}
					map.objects.push({ type : "turret", x : ix1, y : iy2, layer : 1, data : { team : team2, type : type1, groundHeight : params2.turretHeight, distance : params2.turretDistance, isStatic : turretId < 4, dir : dir}});
				} else if(tile2 > 31 && tile2 < 38) {
					tg[iy2][ix1] = 26 + (tile2 - 32);
					switch(tg[iy2][ix1]) {
					case 26:
						map.objects.push({ type : "speedup", layer : 1, x : ix1, y : iy2, data : { }});
						break;
					case 27:
						map.objects.push({ type : "life", layer : 1, x : ix1, y : iy2, data : { }});
						break;
					case 28:
						map.objects.push({ type : "freeze", layer : 1, x : ix1, y : iy2, data : { }});
						break;
					case 29:
						map.objects.push({ type : "repair", layer : 1, x : ix1, y : iy2, data : { }});
						break;
					case 30:
						map.objects.push({ type : "star", layer : 1, x : ix1, y : iy2, data : { }});
						break;
					case 31:
						map.objects.push({ type : "coin", layer : 1, x : ix1, y : iy2, data : { }});
						break;
					default:
					}
				} else if(tile2 > 37 && tile2 < 41) {
					var box = tile2;
					if(tile2 == 40) {
						box = tile2 - 1;
					}
					var types = [p[62],p[63],p[64]];
					tg[iy2][ix1] = 32 + (box - 38);
					params2.boxesContent.push({ item : OldMap.getBoxItem(types[tile2 - 38]), x : ix1, y : iy2});
				}
			} else {
				haxe_Log.trace("unknown tile: " + tile1 + " | x: " + ix1 + " | y: " + iy2,{ fileName : "OldMap.hx", lineNumber : 521, className : "OldMap", methodName : "parseMap"});
			}
		}
	}
	var getMapCell = function(x,y) {
		if(x > -1 && y > -1 && x < map.w && y < map.h) {
			return bg[y][x];
		}
		return -1;
	};
	var isGrassBg = function(a) {
		if(!(a >= 1 && a <= 10 || a >= 15 && a <= 23 || a >= 53 && a <= 55 || a >= 100 && a <= 102 || a >= 115 && a <= 117 || a >= 130 && a <= 169)) {
			if(a >= 250) {
				return a <= 255;
			} else {
				return false;
			}
		} else {
			return true;
		}
	};
	var isSandBg = function(a1) {
		if(!(a1 >= 56 && a1 <= 60 || a1 >= 110 && a1 <= 112 || a1 >= 125 && a1 <= 127)) {
			if(a1 >= 210) {
				return a1 <= 249;
			} else {
				return false;
			}
		} else {
			return true;
		}
	};
	var _g13 = 0;
	var _g14 = map.h;
	while(_g13 < _g14) {
		var iy3 = _g13++;
		var _g131 = 0;
		var _g141 = map.w;
		while(_g131 < _g141) {
			var ix2 = _g131++;
			if(!isSandBg(bg[iy3][ix2])) {
				continue;
			}
			var a2 = isGrassBg(getMapCell(ix2,iy3 - 1));
			var b = isGrassBg(getMapCell(ix2,iy3 + 1));
			var c = isGrassBg(getMapCell(ix2 - 1,iy3));
			var d = isGrassBg(getMapCell(ix2 + 1,iy3));
			var e = isGrassBg(getMapCell(ix2 - 1,iy3 - 1));
			var f = isGrassBg(getMapCell(ix2 - 1,iy3 + 1));
			var g = isGrassBg(getMapCell(ix2 + 1,iy3 - 1));
			var h = isGrassBg(getMapCell(ix2 + 1,iy3 + 1));
			if(a2 && g && d) {
				bg[iy3][ix2] = 70;
			} else if(d && h && b) {
				bg[iy3][ix2] = 71;
			} else if(c && f && b) {
				bg[iy3][ix2] = 68;
			} else if(a2 && e && c) {
				bg[iy3][ix2] = 69;
			} else if(a2) {
				bg[iy3][ix2] = 64 + Std.random(2);
			} else if(b) {
				bg[iy3][ix2] = 61 + Std.random(2);
			} else if(c) {
				bg[iy3][ix2] = 63;
			} else if(d) {
				bg[iy3][ix2] = 66 + Std.random(2);
			} else if(e) {
				bg[iy3][ix2] = 73;
			} else if(g) {
				bg[iy3][ix2] = 74;
			} else if(f) {
				bg[iy3][ix2] = 72;
			} else if(h) {
				bg[iy3][ix2] = 75;
			}
		}
	}
	return map;
};
OldMap.parseMap5 = function(tileset,json) {
	var p = json.parameters;
	var enemyCounts = [p[1],p[2],p[3],0,p[4],p[5],0,p[6]];
	var allyCounts = [p[8],p[9],p[10],0,p[11],p[12],0,p[13]];
	var params = p[7] + 1;
	var p1 = p[0];
	var _g = [];
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	var _g1 = [];
	_g1.push(0);
	_g1.push(0);
	_g1.push(0);
	_g1.push(0);
	_g1.push(0);
	_g1.push(0);
	_g1.push(0);
	_g1.push(0);
	var p2 = p[14];
	var p3 = p[15];
	var p4 = p[14];
	var p5 = p[14];
	var p6 = p[16];
	var p7 = p[17];
	var p8 = p[18];
	var p9 = p[19];
	var p10 = p[20];
	var p11 = p[21];
	var p12 = p[22];
	var p13 = p[23];
	var p14 = p[24];
	var p15 = p[25];
	var p16 = p[26];
	var p17 = p[27];
	var p18 = p[39];
	var p19 = p[40];
	var params1 = 1 + Std.random(17);
	var params2 = p[28] != 0;
	var _g2 = [];
	_g2.push(p[28]);
	_g2.push(p[29]);
	_g2.push(p[30]);
	_g2.push(p[31]);
	var params3 = { teamLimits : [0,params,p1,0], teamCounts : [_g,allyCounts,enemyCounts,_g1], teamTurretTypes : [p2,p3,p4,p5], turretHeight : p6, turretDistance : p7, friendlyFire : p8, enemyDifficulty : p9, enemyAIType : p10, winCondition : p11, blueFlagCount : 0, blueFlags : [], airSupport : [{ x : p12, y : p13},{ x : p14, y : p15},{ x : p16, y : p17}], boxesContent : [], radarHP : p18, reactorHP : p19, musicTrack : params1, enemySightDistance : 5, enemySpawnOrdered : params2, enemySpawnOrder : _g2, playerSpawnMode : 0, disableFreeze : false, oneLifeMode : false, disableClouds : true, disableDebriefing : false};
	OldMap.fixMapParams(params3);
	var json1 = json.name;
	var json2 = json.briefing;
	var json3 = json.debriefing;
	var json4 = json.map_arr[0].length;
	var json5 = json.map_arr.length;
	var _g3 = [];
	var _g4 = 0;
	var _g5 = tileset.layersLength;
	while(_g4 < _g5) {
		++_g4;
		_g3.push([]);
	}
	var map = { name : json1, briefing : json2, debriefing : json3, w : json4, h : json5, layers : _g3, objects : [], floatObjects : [], data : params3};
	var _g6 = 0;
	var _g7 = map.layers;
	while(_g6 < _g7.length) {
		var layer = _g7[_g6];
		++_g6;
		var _g61 = 0;
		var _g71 = map.h;
		while(_g61 < _g71) {
			var iy = _g61++;
			layer[iy] = [];
			var _g62 = 0;
			var _g72 = map.w;
			while(_g62 < _g72) layer[iy][_g62++] = 0;
		}
	}
	var getNextBg = function(ix,iy1) {
		var tile = 1;
		if(ix < map.w) {
			tile = json.map_arr[iy1][ix + 1];
		} else if(iy1 < map.h) {
			tile = json.map_arr[iy1 + 1][ix];
		}
		if(tile > 249) {
			tile -= 149;
		}
		if(tile <= 0 || tile > 106) {
			tile = 1;
		}
		return tile;
	};
	var _g8 = [];
	_g8.push(0);
	_g8.push(0);
	_g8.push(0);
	_g8.push(0);
	var theme = [1,34,56];
	var bg = map.layers[0];
	var tg = map.layers[1];
	var _g9 = 0;
	var _g10 = map.h;
	while(_g9 < _g10) {
		var iy2 = _g9++;
		var _g91 = 0;
		var _g101 = map.w;
		while(_g91 < _g101) {
			var ix1 = _g91++;
			var tile1 = json.map_arr[iy2][ix1];
			if(tile1 < 91) {
				bg[iy2][ix1] = tile1;
				if(tile1 < 34 || tile1 > 52) {
					if(params3.disableClouds) {
						params3.disableClouds = false;
					}
				}
				continue;
			}
			if(tile1 < 93) {
				if(ix1 > 0) {
					bg[iy2][ix1] = bg[iy2][ix1 - 1];
				} else if(iy2 > 0) {
					bg[iy2][ix1] = bg[iy2 - 1][ix1];
				} else {
					bg[iy2][ix1] = 1;
				}
				map.objects.push({ type : "reactor", x : ix1, y : iy2, layer : 1, data : { team : 1 + (tile1 - 91), hp : params3.reactorHP}});
				continue;
			}
			if(tile1 > 92 && tile1 < 95) {
				if(ix1 > 0) {
					bg[iy2][ix1] = bg[iy2][ix1 - 1];
				} else if(iy2 > 0) {
					bg[iy2][ix1] = bg[iy2 - 1][ix1];
				} else {
					bg[iy2][ix1] = 1;
				}
				map.objects.push({ type : "radar", x : ix1, y : iy2, layer : 1, data : { team : 1 + (tile1 - 93), hp : params3.radarHP}});
				continue;
			}
			if(tile1 > 94 && tile1 < 99) {
				var road = tile1 - 95;
				switch(road) {
				case 1:case 3:
					bg[iy2][ix1] = 29;
					break;
				case 0:case 2:
					bg[iy2][ix1] = 25;
					break;
				}
				if(road < 2) {
					tg[iy2][ix1] = 22;
				} else {
					tg[iy2][ix1] = 23;
				}
				continue;
			}
			if(tile1 == 99) {
				bg[iy2][ix1] = getNextBg(ix1,iy2);
				map.objects.push({ type : "palm", x : ix1, y : iy2, layer : 1, data : { }});
				continue;
			}
			if(tile1 > 99 && tile1 < 115) {
				var bgId = (tile1 - 100) / 5 | 0;
				if(bgId > 2) {
					bgId = 2;
				}
				bg[iy2][ix1] = theme[bgId];
				var base = (tile1 - 100) % 5;
				if(base < 2) {
					tg[iy2][ix1] = 34 + base;
					var team = base == 1 ? 2 : 1;
					var count = 0;
					var i = _g8[team];
					switch(team) {
					case 1:
						if(i < 5) {
							count = p[7] + 1;
						}
						break;
					case 2:
						if(i < 10) {
							if(i > 3) {
								i = 0;
							}
							count = p[32 + i];
						}
						break;
					}
					map.objects.push({ type : "base", x : ix1, y : iy2, layer : 1, data : { team : team, count : count, aiType : 0, isActive : true}});
					_g8[team]++;
					continue;
				}
			}
			if(tile1 > 114 && tile1 < 130) {
				var bgId1 = (tile1 - 115) / 5 | 0;
				if(bgId1 > 2) {
					bgId1 = 2;
				}
				bg[iy2][ix1] = theme[bgId1];
				tg[iy2][ix1] = 37 + (tile1 - 115) % 5;
				if(tg[iy2][ix1] == 38) {
					var id = params3.blueFlagCount;
					params3.blueFlags.push({ id : id, x : ix1, y : iy2});
					var tmp;
					switch(params3.winCondition) {
					case 6:case 35:case 36:case 37:
						tmp = true;
						break;
					default:
						tmp = false;
					}
					if(!tmp && id < params3.airSupport.length) {
						params3.airSupport[id].y--;
					}
					params3.blueFlagCount++;
				}
				continue;
			}
			if(tile1 > 129 && tile1 < 250) {
				var bgId2 = (tile1 - 130) / 40 | 0;
				if(bgId2 > 2) {
					bgId2 = 2;
				}
				bg[iy2][ix1] = theme[bgId2];
				var tile2 = (tile1 - 130) % 40 + 1;
				if(tile2 < 16) {
					tg[iy2][ix1] = tile2;
				} else if(tile2 == 16) {
					var bush = 16 + Std.random(3);
					tg[iy2][ix1] = bush;
				} else if(tile2 > 16 && tile2 < 20) {
					tg[iy2][ix1] = tile2 + 2;
				} else if(tile2 > 19 && tile2 < 22) {
					tg[iy2][ix1] = 22 + (tile2 - 20);
				} else if(tile2 > 21 && tile2 < 32) {
					var turretId = tile2 - 22;
					var team1 = turretId == 9 ? 1 : 2;
					var dir;
					switch(turretId) {
					case 0:
						dir = { x : 0, y : 1};
						break;
					case 1:
						dir = { x : -1, y : 0};
						break;
					case 2:
						dir = { x : 0, y : -1};
						break;
					case 3:
						dir = { x : 1, y : 0};
						break;
					default:
						dir = null;
					}
					var type = params3.teamTurretTypes[team1];
					if(turretId > 3 && turretId < 8) {
						type = [2,4,6,9][turretId - 4];
					}
					map.objects.push({ type : "turret", x : ix1, y : iy2, layer : 1, data : { team : team1, type : type, groundHeight : params3.turretHeight, distance : params3.turretDistance, isStatic : turretId < 4, dir : dir}});
				} else if(tile2 > 31 && tile2 < 38) {
					tg[iy2][ix1] = 26 + (tile2 - 32);
					switch(tg[iy2][ix1]) {
					case 26:
						map.objects.push({ type : "speedup", layer : 1, x : ix1, y : iy2, data : { }});
						break;
					case 27:
						map.objects.push({ type : "life", layer : 1, x : ix1, y : iy2, data : { }});
						break;
					case 28:
						map.objects.push({ type : "freeze", layer : 1, x : ix1, y : iy2, data : { }});
						break;
					case 29:
						map.objects.push({ type : "repair", layer : 1, x : ix1, y : iy2, data : { }});
						break;
					case 30:
						map.objects.push({ type : "star", layer : 1, x : ix1, y : iy2, data : { }});
						break;
					case 31:
						map.objects.push({ type : "coin", layer : 1, x : ix1, y : iy2, data : { }});
						break;
					default:
					}
				} else if(tile2 > 37 && tile2 < 41) {
					var box = tile2;
					if(tile2 == 40) {
						box = tile2 - 1;
					}
					var types = [p[36],p[37],p[38]];
					tg[iy2][ix1] = 32 + (box - 38);
					params3.boxesContent.push({ item : OldMap.getBoxItem(types[tile2 - 38]), x : ix1, y : iy2});
				}
			} else {
				haxe_Log.trace("unknown tile: " + tile1 + " | x: " + ix1 + " | y: " + iy2,{ fileName : "OldMap.hx", lineNumber : 888, className : "OldMap", methodName : "parseMap5"});
			}
		}
	}
	var getMapCell = function(x,y) {
		if(x > -1 && y > -1 && x < map.w && y < map.h) {
			return bg[y][x];
		}
		return -1;
	};
	var isGrassBg = function(a) {
		if(!(a >= 1 && a <= 10 || a >= 15 && a <= 23 || a >= 53 && a <= 55 || a >= 100 && a <= 102 || a >= 115 && a <= 117 || a >= 130 && a <= 169)) {
			if(a >= 250) {
				return a <= 255;
			} else {
				return false;
			}
		} else {
			return true;
		}
	};
	var isSandBg = function(a1) {
		if(!(a1 >= 56 && a1 <= 60 || a1 >= 110 && a1 <= 112 || a1 >= 125 && a1 <= 127)) {
			if(a1 >= 210) {
				return a1 <= 249;
			} else {
				return false;
			}
		} else {
			return true;
		}
	};
	var _g11 = 0;
	var _g12 = map.h;
	while(_g11 < _g12) {
		var iy3 = _g11++;
		var _g111 = 0;
		var _g121 = map.w;
		while(_g111 < _g121) {
			var ix2 = _g111++;
			if(!isSandBg(bg[iy3][ix2])) {
				continue;
			}
			var a2 = isGrassBg(getMapCell(ix2,iy3 - 1));
			var b = isGrassBg(getMapCell(ix2,iy3 + 1));
			var c = isGrassBg(getMapCell(ix2 - 1,iy3));
			var d = isGrassBg(getMapCell(ix2 + 1,iy3));
			var e = isGrassBg(getMapCell(ix2 - 1,iy3 - 1));
			var f = isGrassBg(getMapCell(ix2 - 1,iy3 + 1));
			var g = isGrassBg(getMapCell(ix2 + 1,iy3 - 1));
			var h = isGrassBg(getMapCell(ix2 + 1,iy3 + 1));
			if(a2 && g && d) {
				bg[iy3][ix2] = 70;
			} else if(d && h && b) {
				bg[iy3][ix2] = 71;
			} else if(c && f && b) {
				bg[iy3][ix2] = 68;
			} else if(a2 && e && c) {
				bg[iy3][ix2] = 69;
			} else if(a2) {
				bg[iy3][ix2] = 64 + Std.random(2);
			} else if(b) {
				bg[iy3][ix2] = 61 + Std.random(2);
			} else if(c) {
				bg[iy3][ix2] = 63;
			} else if(d) {
				bg[iy3][ix2] = 66 + Std.random(2);
			} else if(e) {
				bg[iy3][ix2] = 73;
			} else if(g) {
				bg[iy3][ix2] = 74;
			} else if(f) {
				bg[iy3][ix2] = 72;
			} else if(h) {
				bg[iy3][ix2] = 75;
			}
		}
	}
	return map;
};
OldMap.explRadiusFromPower = function(power) {
	if(power >= 16) {
		return 4;
	} else if(power >= 5) {
		return 3;
	} else if(power >= 1) {
		return 2;
	}
	return 1;
};
OldMap.getWallRowTypes = function(id) {
	switch(id) {
	case 1:
		return [1,2];
	case 2:
		return [9,10];
	case 3:
		return [11];
	case 4:
		return [12];
	case 5:
		return [13];
	case 6:
		return [14,15];
	case 7:
		return [16,17,18];
	case 8:
		return [13];
	case 9:
		return [7,8];
	case 10:
		var _g = [];
		var _g1 = 1;
		while(_g1 < 9) _g.push(_g1++);
		return _g;
	case 11:
		return [19];
	default:
		return [1,2];
	}
};
OldMap.getBoxItem = function(id) {
	switch(id) {
	case 0:
		return { id : -1, count : 0};
	case 1:
		return { id : 0, count : 30};
	case 2:
		return { id : 1, count : 20};
	case 3:
		return { id : 3, count : 20};
	case 4:
		return { id : 2, count : 20};
	case 5:
		return { id : 4, count : 10};
	case 6:
		return { id : 5, count : 10};
	case 7:
		return { id : 10, count : 10};
	case 8:
		return { id : 11, count : 5};
	case 9:
		return { id : 12, count : 3};
	case 10:
		return { id : 13, count : 2};
	case 11:
		return { id : 14, count : 1};
	case 12:
		return { id : 6, count : 2};
	case 13:
		return { id : 8, count : 1};
	case 14:
		return { id : 7, count : 2};
	case 15:
		return { id : 9, count : 1};
	case 16:
		return { id : 25, count : 1};
	case 17:
		return { id : 20, count : 3};
	case 18:
		return { id : 21, count : 1};
	case 19:
		return { id : -2, count : 1};
	default:
		return { id : 0, count : 30};
	}
};
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
Reflect.copy = function(o) {
	if(o == null) {
		return null;
	}
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
var Sound = function(sound,loop) {
	this.playSmoothTime = -1;
	this.playAfterTime = -1;
	this.pauseSmoothTime = -1;
	this.pauseAfterTime = -1;
	this.sound = sound;
	if(sound.uncompressedData != null) {
		this.channel = kha_audio2_Audio1.play(sound,loop);
	} else {
		haxe_Log.trace("sound is compressed",{ fileName : "Sound.hx", lineNumber : 27, className : "Sound", methodName : "new"});
		this.channel = kha_audio2_Audio1.stream(sound,loop);
	}
	if(this.channel == null) {
		return;
	}
	this.channel.set_volume(0);
	this.channel.pause();
	this.channel.stop();
};
$hxClasses["Sound"] = Sound;
Sound.__name__ = "Sound";
Sound.updateAll = function() {
	var i = 0;
	while(i < Sound.sounds.length) {
		if(Sound.sounds[i].update()) {
			continue;
		}
		++i;
	}
};
Sound.forcePlay = function(sound,loop,volume) {
	if(volume == null) {
		volume = 1.0;
	}
	if(loop == null) {
		loop = false;
	}
	volume *= Sound.soundVolume;
	if(volume == 0) {
		return;
	}
	var channel;
	if(sound.uncompressedData != null) {
		channel = kha_audio2_Audio1.play(sound,loop);
	} else {
		haxe_Log.trace("sound is compressed",{ fileName : "Sound.hx", lineNumber : 158, className : "Sound", methodName : "forcePlay"});
		channel = kha_audio2_Audio1.stream(sound,loop);
	}
	channel.set_volume(volume);
};
Sound.prototype = {
	sound: null
	,channel: null
	,pauseAfterTime: null
	,pauseSmoothTime: null
	,pauseSmoothVolume: null
	,playAfterTime: null
	,playAfterVolume: null
	,playSmoothTime: null
	,playSmoothVolume: null
	,isOverLimit: function() {
		var count = 0;
		var _g1 = 0;
		var _g2 = Sound.sounds;
		while(_g1 < _g2.length) if(_g2[_g1++].sound == this.sound) {
			++count;
			if(count > 5) {
				break;
			}
		}
		return count > 5;
	}
	,play: function(volume) {
		if(this.channel == null) {
			return;
		}
		if(this.isOverLimit()) {
			return;
		}
		volume *= Sound.soundVolume;
		if(volume == 0) {
			return;
		}
		this.channel.set_volume(volume);
		this.channel.play();
		this.pauseAfterTime = -1;
		this.pauseSmoothTime = -1;
		if(Sound.sounds.indexOf(this) == -1) {
			Sound.sounds.push(this);
		}
	}
	,playAfter: function(volume,ms) {
		if(this.channel == null) {
			return;
		}
		this.playAfterTime = ms / 60 | 0;
		this.playAfterVolume = volume;
		if(Sound.sounds.indexOf(this) == -1) {
			Sound.sounds.push(this);
		}
	}
	,pause: function() {
		this.channel.pause();
		this.playSmoothTime = -1;
		HxOverrides.remove(Sound.sounds,this);
	}
	,stop: function() {
		this.channel.pause();
		this.channel.stop();
		HxOverrides.remove(Sound.sounds,this);
	}
	,update: function() {
		if(this.playAfterTime < 0 && this.playSmoothTime < 0 && this.channel.get_finished()) {
			this.stop();
			return true;
		}
		if(this.playAfterTime == 0) {
			this.play(this.playAfterVolume);
		}
		if(this.playAfterTime >= 0) {
			this.playAfterTime--;
		}
		if(this.playSmoothTime > 0) {
			this.playSmoothTime--;
			this.play(this.channel.get_volume() + this.playSmoothVolume);
		} else if(this.playSmoothTime == 0) {
			this.playSmoothTime = -1;
		}
		if(this.pauseAfterTime > 0) {
			this.pauseAfterTime--;
		} else if(this.pauseAfterTime == 0) {
			this.pause();
			this.pauseAfterTime = -1;
			return true;
		}
		if(this.pauseSmoothTime > 0) {
			this.pauseSmoothTime--;
			var _g = this.channel;
			_g.set_volume(_g.get_volume() - this.pauseSmoothVolume);
		} else if(this.pauseSmoothTime == 0) {
			this.pause();
			this.pauseSmoothTime = -1;
			return true;
		}
		return false;
	}
	,__class__: Sound
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var v = parseInt(x, (x[(i + 1)]=="x" || x[(i + 1)]=="X") ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var ValueType = $hxEnums["ValueType"] = { __ename__ : "ValueType", __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = "_UInt.UInt_Impl_";
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	if(aNeg != b < 0) {
		return aNeg;
	} else {
		return a > b;
	}
};
_$UInt_UInt_$Impl_$.gte = function(a,b) {
	var aNeg = a < 0;
	if(aNeg != b < 0) {
		return aNeg;
	} else {
		return a >= b;
	}
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	if(this1 < 0) {
		return 4294967296.0 + this1;
	} else {
		return this1 + 0.0;
	}
};
var admob_Admob = function() { };
$hxClasses["admob.Admob"] = admob_Admob;
admob_Admob.__name__ = "admob.Admob";
admob_Admob.showInterstitial = function(id,onOpen,onError,onClick,onClose) {
	onOpen();
	onClose();
};
var game_BaseSets = function(x,y,team,count,aiType,isActive) {
	this.isActive = true;
	this.aiType = 0;
	this.x = x;
	this.y = y;
	this.team = team;
	this.count = count;
	if(aiType != null) {
		this.aiType = aiType;
	}
	if(isActive != null) {
		this.isActive = isActive;
	}
};
$hxClasses["game.BaseSets"] = game_BaseSets;
game_BaseSets.__name__ = "game.BaseSets";
game_BaseSets.prototype = {
	x: null
	,y: null
	,team: null
	,count: null
	,aiType: null
	,isActive: null
	,__class__: game_BaseSets
};
var game_Base = function(game1,tilemap,sets) {
	this.game = game1;
	this.tilemap = tilemap;
	this.x = sets.x;
	this.y = sets.y;
	this.team = sets.team;
	this.count = sets.count;
	this.aiType = sets.aiType;
	this.isActive = sets.isActive;
	this.timeout = Std.random(game_Base.SPAWN_TIMEOUT);
	if((game1.params.enemyAIType & 16) != 0) {
		this.timeout = 1;
	}
};
$hxClasses["game.Base"] = game_Base;
game_Base.__name__ = "game.Base";
game_Base.prototype = {
	game: null
	,tilemap: null
	,x: null
	,y: null
	,team: null
	,count: null
	,aiType: null
	,isActive: null
	,timeout: null
	,update: function() {
		if(!this.isActive || this.count == 0) {
			return;
		}
		if(this.game.teamsGrid[this.y][this.x] != -1) {
			return;
		}
		if(this.game.teams[this.team].onBase == 0) {
			return;
		}
		if(this.game.teams[this.team].onField >= this.game.params.teamLimits[this.team]) {
			return;
		}
		if(this.timeout > 0) {
			this.timeout--;
			return;
		}
		this.timeout = game_Base.SPAWN_TIMEOUT;
		var bot = this.createBot();
		if(bot.team != this.game.playerTeam) {
			var _this = this.game;
			if(_this.params.winCondition >= 50 && _this.params.winCondition <= 55) {
				var radar = this.game.getEnemyRadar(bot.team);
				if(radar != null) {
					bot.setDestination({ x : radar.cell.x, y : radar.cell.y},true);
				}
			} else {
				var _this1 = this.game;
				if(_this1.params.winCondition >= 7 && _this1.params.winCondition <= 11) {
					var layer = this.tilemap.map.layers[1];
					var _g = 0;
					var _g1 = this.tilemap.map.h;
					while(_g < _g1) {
						var iy = _g++;
						var _g2 = 0;
						var _g11 = this.tilemap.map.w;
						while(_g2 < _g11) {
							var ix = _g2++;
							if(layer[iy][ix]._id != 37) {
								continue;
							}
							bot.setDestination({ x : ix, y : iy},true);
							break;
						}
					}
				}
			}
		}
		var aiType = game_BotAiType.None;
		if(this.team == this.game.playerTeam) {
			if(this.aiType == 1) {
				aiType = game_BotAiType.FollowPlayer;
			}
		}
		bot.setAiType(aiType);
		this.game.addTank(bot);
		this.count--;
	}
	,createBot: function() {
		var typeId = this.getTankType(this.team);
		var arrId = typeId * 5 + this.game.params.enemyDifficulty - 1;
		var type = game_Base.tankTypes[typeId];
		var hp = game_Base.hps[arrId];
		var shieldHp = game_Base.shieldHps[arrId];
		var bulletType = game_Base.bulletTypes[arrId];
		var speed = 2.0 + game_Base.speedBonuses[arrId];
		var rotationDelay = type == "heavy" ? 5 : 4;
		switch(typeId) {
		case 3:
			--rotationDelay;
			speed += 2;
			break;
		case 7:
			speed -= 0.5;
			break;
		}
		var tmp = this.game.params.teamCounts[this.team];
		tmp[typeId]--;
		return new game_Bot(this.game,this.tilemap,new game_TankSets(this.x,this.y,this.team,type,null,hp,shieldHp,speed,60,rotationDelay,bulletType,null,typeId));
	}
	,getTankType: function(team) {
		if((this.game.params.enemyAIType & 8) != 0) {
			return this.getRandomTankType(team);
		}
		var teamCounts = this.game.params.teamCounts;
		var _g = 0;
		var _g1 = teamCounts[team].length;
		while(_g < _g1) {
			var i = _g++;
			if(teamCounts[team][i] > 0) {
				return i;
			}
		}
		haxe_Log.trace("unknown tank type for team " + team,{ fileName : "game/Base.hx", lineNumber : 167, className : "game.Base", methodName : "getTankType"});
		haxe_Log.trace(teamCounts[team],{ fileName : "game/Base.hx", lineNumber : 168, className : "game.Base", methodName : "getTankType"});
		return -1;
	}
	,getRandomTankType: function(team) {
		var teamCounts = this.game.params.teamCounts;
		var options = [];
		var _g = 0;
		var _g1 = teamCounts[team].length;
		while(_g < _g1) {
			var i = _g++;
			if(teamCounts[team][i] > 0) {
				options.push(i);
			}
		}
		var len = options.length;
		if(len > 0) {
			return options[Std.random(len)];
		}
		haxe_Log.trace("unknown tank type for team " + team,{ fileName : "game/Base.hx", lineNumber : 180, className : "game.Base", methodName : "getRandomTankType"});
		haxe_Log.trace(teamCounts[team],{ fileName : "game/Base.hx", lineNumber : 181, className : "game.Base", methodName : "getRandomTankType"});
		return -1;
	}
	,render: function(g) {
		var frame = this.team - 1;
		if(frame > 1) {
			return;
		}
		var image = kha_Assets.images.overlay;
		var camX = this.tilemap.camera.get_x();
		var camY = this.tilemap.camera.get_y();
		var tileSize = this.tilemap.tileset.tileSize;
		g.set_color(frame == 0 ? 1615134464 : -2130771968);
		khm_utils_Atlas.drawImage(g,image,this.x * tileSize + tileSize / 2 - image.get_width() / 2 + camX,this.y * tileSize + tileSize / 2 - image.get_height() / 2 + camY);
	}
	,__class__: game_Base
};
var game_BotAiType = $hxEnums["game.BotAiType"] = { __ename__ : "game.BotAiType", __constructs__ : ["None","FollowPlayer"]
	,None: {_hx_index:0,__enum__:"game.BotAiType",toString:$estr}
	,FollowPlayer: {_hx_index:1,__enum__:"game.BotAiType",toString:$estr}
};
var game__$Bot_BotState = $hxEnums["game._Bot.BotState"] = { __ename__ : "game._Bot.BotState", __constructs__ : ["Searching","ForceRotation","Attack"]
	,Searching: {_hx_index:0,__enum__:"game._Bot.BotState",toString:$estr}
	,ForceRotation: ($_=function(dir) { return {_hx_index:1,dir:dir,__enum__:"game._Bot.BotState",toString:$estr}; },$_.__params__ = ["dir"],$_)
	,Attack: {_hx_index:2,__enum__:"game._Bot.BotState",toString:$estr}
};
var game_Tank = function(game1,tilemap,sets) {
	this.prevReverse = false;
	this.smokingTime = 0;
	this.frame = 0;
	this.speedUpTime = 0.0;
	this.reloadDelay = 0;
	this.shieldDamageDelay = 0;
	this.nextCellRef = { x : 0, y : 0};
	this.isKamikazeFire = false;
	this.isActive = true;
	this.isAlive = true;
	this.shieldHp = 0;
	this.game = game1;
	this.tilemap = tilemap;
	this.cell = { x : sets.x, y : sets.y};
	this.x = this.cell.x * this.tilemap.tileset.tileSize;
	this.y = this.cell.y * this.tilemap.tileset.tileSize;
	this.type = sets.type;
	this.team = sets.team;
	this.level = sets.level;
	this.bulletType = sets.bulletType;
	this.maxReloadDelay = sets.reloadDelay;
	this.defRotationDelay = this.maxRotationDelay = sets.rotationDelay;
	this.rotationDelay = this.maxRotationDelay;
	this.groundHeight = sets.groundHeight;
	if(sets.dir == null) {
		var randAngle = Std.random(4) * 90 * Math.PI / 180;
		this.dir = { x : Math.cos(randAngle) | 0, y : Math.sin(randAngle) | 0};
	} else {
		this.dir = sets.dir;
	}
	this.angle = Math.atan2(this.dir.y,this.dir.x) * 180 / Math.PI;
	this.prevAngle = this.angle;
	this.setFrame();
	this.maxHp = this.hp = sets.hp;
	this.maxShieldHp = sets.shieldHp;
	this.shieldRegenDelay = this.getRegenDelay();
	this.speed = sets.speed;
	this.game.teamsGrid[this.cell.y][this.cell.x] = this.team;
	this.image = kha_Assets.images.get("tanks_" + this.type);
	this.setState(game_TankState.Standing);
};
$hxClasses["game.Tank"] = game_Tank;
game_Tank.__name__ = "game.Tank";
game_Tank.prototype = {
	game: null
	,tilemap: null
	,x: null
	,y: null
	,dir: null
	,team: null
	,type: null
	,level: null
	,bulletType: null
	,groundHeight: null
	,hp: null
	,maxHp: null
	,shieldHp: null
	,maxShieldHp: null
	,speed: null
	,speedRatio: null
	,maxReloadDelay: null
	,cell: null
	,isAlive: null
	,isActive: null
	,isKamikazeFire: null
	,state: null
	,nextCell: null
	,nextCellRef: null
	,image: null
	,angle: null
	,rotationDelay: null
	,defRotationDelay: null
	,maxRotationDelay: null
	,shieldRegenDelay: null
	,shieldDamageDelay: null
	,reloadDelay: null
	,speedUpTime: null
	,frame: null
	,smokingTime: null
	,prevAngle: null
	,prevReverse: null
	,damage: function(dmg,isExpl) {
		if(dmg == 0) {
			return;
		}
		if(isExpl) {
			dmg *= 2;
		}
		var sound = Std.random(2) == 0 ? kha_Assets.sounds.sounds_hit_metal01 : kha_Assets.sounds.sounds_hit_metal02;
		if(!isExpl && dmg >= 3) {
			sound = kha_Assets.sounds.sounds_hit_ap;
		}
		this.shieldHp -= dmg;
		if(this.shieldHp >= 0) {
			this.playShieldDamage();
			return;
		}
		if(isExpl && this.type != "turret") {
			this.shieldHp = this.shieldHp / 2 | 0;
		}
		this.hp += this.shieldHp;
		this.shieldHp = 0;
		if(this.hp < Math.ceil(this.maxHp / 2)) {
			this.smokingTime = 600;
		}
		if(this.hp > 0) {
			var volume = this.game.playerDistVolume(this.cell.x,this.cell.y);
			new Sound(sound,false).play(volume);
			return;
		}
		this.death();
	}
	,playShieldDamage: function() {
		var sound = Std.random(2) == 0 ? kha_Assets.sounds.sounds_hit_energy_field_1 : kha_Assets.sounds.sounds_hit_energy_field_2;
		var volume = this.game.playerDistVolume(this.cell.x,this.cell.y);
		new Sound(sound,false).play(volume);
		this.shieldDamageDelay = 20;
	}
	,isInCell: function(x,y) {
		if(this.cell.x == x && this.cell.y == y) {
			return true;
		}
		if(this.nextCell == null) {
			return false;
		}
		if(this.nextCell.x == x && this.nextCell.y == y) {
			return true;
		}
		return false;
	}
	,attackedSide: function(dir) {
	}
	,death: function() {
		var sound = Std.random(2) == 0 ? kha_Assets.sounds.sounds_explosion_small01 : kha_Assets.sounds.sounds_explosion_small02;
		var volume = this.game.playerDistVolume(this.cell.x,this.cell.y);
		new Sound(sound,false).play(volume);
		this.addPlayerMoney();
		this.isAlive = false;
		this.game.addBigExplosion(this.x + this.tilemap.tileset.tileSize / 2,this.y + this.tilemap.tileset.tileSize / 2);
		this.game.removeTank(this);
		if(this.nextCell != null) {
			this.game.teamsGrid[this.nextCell.y][this.nextCell.x] = -1;
		}
		this.game.teamsGrid[this.cell.y][this.cell.x] = -1;
		if(this.type == "kamikaze") {
			this.game.addExplosion(new game_Explosion(this.game,this.tilemap,new game_ExplSets(this.cell.x,this.cell.y - 1,null,1,5,null,5,true)));
		}
	}
	,addPlayerMoney: function() {
		if(this.team == this.game.playerTeam || this.isKamikazeFire) {
			return;
		}
		var n = this.level * 5 + this.game.params.enemyDifficulty - 1;
		if(n < 0 || n >= game_Tank.killScores.length) {
			return;
		}
		this.game.addPlayerMoney(game_Tank.killScores[n]);
	}
	,update: function() {
		if(this.reloadDelay > 0) {
			this.reloadDelay--;
		}
		if(this.shieldDamageDelay > 0) {
			this.shieldDamageDelay--;
		}
		if(this.speedUpTime > 0) {
			if(this.speedRatio <= 0.5) {
				this.speedUpTime -= 0.66;
			} else {
				this.speedUpTime--;
			}
		}
		if(this.smokingTime > 0) {
			if(this.smokingTime % 8 == 0) {
				var tmp = this.game;
				var game1 = this.game;
				var tilemap = this.tilemap;
				var x = this.x;
				var y = this.y;
				var image = kha_Assets.images.expl_small;
				var _this = game_effects_Smoke.pool;
				var sprite = _this.pool.length == 0 ? _this.allocFunc() : _this.pool.pop();
				sprite.x = x;
				sprite.y = y;
				sprite.image = image;
				sprite.start = 7;
				sprite.current = -1;
				sprite.end = -1;
				sprite.length = -1;
				sprite.delay = sprite.frameDelay = 8;
				sprite.isReversed = false;
				sprite.afterInit(game1,tilemap,false);
				tmp.addSprite(sprite);
				this.smokingTime--;
			} else if(Std.random(4) != 0) {
				this.smokingTime--;
			}
		}
		if(this.shieldHp < this.maxShieldHp) {
			if(this.shieldRegenDelay > 0) {
				this.shieldRegenDelay--;
			} else {
				this.shieldRegenDelay = this.getRegenDelay();
				this.shieldHp++;
			}
		}
		switch(this.state._hx_index) {
		case 0:
			break;
		case 1:
			this.moveToNextCell(false);
			break;
		case 2:
			this.moveToNextCell(true);
			break;
		case 3:
			this.rotationDelay--;
			if(this.rotationDelay > 0) {
				return;
			}
			this.rotationDelay = this.maxRotationDelay;
			var a = Math.atan2(this.dir.y,this.dir.x) * 180 / Math.PI - this.angle;
			if(a < -180) {
				a += 360;
			}
			if(a > 180) {
				a -= 360;
			}
			var dist = a;
			if(dist != 0) {
				this.angle += 22.5 * (dist > 0 ? 1 : -1);
				if(this.angle > 359) {
					this.angle -= 360;
				}
				if(this.angle < 0) {
					this.angle += 360;
				}
				this.setFrame();
				return;
			}
			this.setState(game_TankState.Standing);
			break;
		}
		if(!this.isAlive) {
			return;
		}
		this.afterUpdate();
	}
	,getRegenDelay: function() {
		var level = this.game.params.enemyDifficulty;
		if(level > 4) {
			level = 4;
		}
		var coef;
		switch(level) {
		case 1:case 2:
			coef = 8;
			break;
		case 3:
			coef = 6;
			break;
		case 4:
			coef = 3;
			break;
		default:
			throw new js__$Boot_HaxeError("unknown level " + level);
		}
		return (30 + (this.maxShieldHp - this.shieldHp) * coef) * this.maxHp / this.hp * 3 | 0;
	}
	,moveToNextCell: function(isReverse) {
		var speed = this.speed * this.speedRatio;
		if(this.speedUpTime > 0) {
			speed += 2;
		}
		var s = 100 / speed | 0;
		if(s < 1) {
			s = 1;
		}
		var dirX = isReverse ? -this.dir.x : this.dir.x;
		var dirY = isReverse ? -this.dir.y : this.dir.y;
		this.x += this.tilemap.tileset.tileSize / s * dirX;
		this.y += this.tilemap.tileset.tileSize / s * dirY;
		var intX = Math.round(this.x);
		var intY = Math.round(this.y);
		var tileX = this.nextCell.x * this.tilemap.tileset.tileSize;
		var tileY = this.nextCell.y * this.tilemap.tileset.tileSize;
		if(dirY == -1 && intY < tileY) {
			intY = tileY;
		} else if(dirY == 1 && intY > tileY) {
			intY = tileY;
		}
		if(dirX == -1 && intX < tileX) {
			intX = tileX;
		} else if(dirX == 1 && intX > tileX) {
			intX = tileX;
		}
		if(intX == tileX && intY == tileY) {
			this.x = intX;
			this.y = intY;
			this.game.teamsGrid[this.cell.y][this.cell.x] = -1;
			this.cell.x = this.nextCell.x;
			this.cell.y = this.nextCell.y;
			this.game.teamsGrid[this.cell.y][this.cell.x] = this.team;
			this.setState(game_TankState.Standing);
			this.nextCell = null;
			this.getCellItem();
		}
	}
	,moveOver: function(fromX,fromY) {
	}
	,setState: function(newState) {
		switch(newState._hx_index) {
		case 0:
			var props = this.tilemap.getTile(0,this.cell.x,this.cell.y).props;
			this.speedRatio = props.speedRatio;
			if(props.speedRatio == null) {
				this.speedRatio = 1;
			}
			if(this.speedRatio <= 0.5) {
				this.maxRotationDelay = this.defRotationDelay + 1;
			} else {
				this.maxRotationDelay = this.defRotationDelay;
			}
			this.rotationDelay = this.maxRotationDelay;
			break;
		case 3:
			break;
		default:
		}
		this.state = newState;
	}
	,afterUpdate: function() {
	}
	,move: function(dirX,dirY) {
		this.setDirection(dirX,dirY);
		if(this.state != game_TankState.Standing) {
			return;
		}
		var tx = this.cell.x + dirX;
		var ty = this.cell.y + dirY;
		var _this = this.tilemap;
		if(!(tx > -1 && ty > -1 && tx < _this.map.w && ty < _this.map.h) || this.tilemap.getTile(1,tx,ty).props.collide || this.game.teamsGrid[ty][tx] != -1) {
			return;
		}
		this.setState(game_TankState.Moving);
		this.setNextCell(tx,ty);
		this.game.teamsGrid[this.nextCell.y][this.nextCell.x] = this.team;
		this.addTrace(false);
	}
	,reverseMove: function() {
		if(this.state != game_TankState.Standing) {
			return;
		}
		var tx = this.cell.x - this.dir.x;
		var ty = this.cell.y - this.dir.y;
		var _this = this.tilemap;
		if(!(tx > -1 && ty > -1 && tx < _this.map.w && ty < _this.map.h) || this.tilemap.getTile(1,tx,ty).props.collide || this.game.teamsGrid[ty][tx] != -1) {
			return;
		}
		this.setState(game_TankState.ReverseMoving);
		this.setNextCell(tx,ty);
		this.game.teamsGrid[this.nextCell.y][this.nextCell.x] = this.team;
		this.addTrace(true);
	}
	,setNextCell: function(x,y) {
		this.nextCell = this.nextCellRef;
		this.nextCell.x = x;
		this.nextCell.y = y;
	}
	,setDirection: function(dirX,dirY) {
		if(this.state != game_TankState.Standing) {
			return;
		}
		if(this.dir.x == dirX && this.dir.y == dirY) {
			return;
		}
		this.setState(game_TankState.Rotating);
		this.dir.x = dirX;
		this.dir.y = dirY;
	}
	,setFrame: function() {
		var imgAngle = this.angle - 90;
		if(imgAngle > 359) {
			imgAngle -= 360;
		}
		if(imgAngle < 0) {
			imgAngle += 360;
		}
		this.frame = imgAngle / 22.5 | 0;
	}
	,addTrace: function(isReverse) {
		this.addTraceEffect(isReverse,150);
	}
	,addTraceEffect: function(isReverse,delay) {
		var start = this.dir.y == 0 ? 0 : 4;
		var end = start + 3;
		var ang = this.angle + 90 | 0;
		var prev = this.prevAngle + 90 | 0;
		if(isReverse) {
			ang += 180;
		}
		if(ang > 359) {
			ang -= 360;
		}
		if(isReverse) {
			prev += 180;
		}
		if(prev > 359) {
			prev -= 360;
		}
		if(prev % 180 != ang % 180) {
			var start1 = 0;
			if(prev == 0 && ang == 90) {
				start1 = 14;
			} else if(prev == 0 && ang == 270) {
				start1 = 17;
			} else if(prev == 90 && ang == 0) {
				start1 = 8;
			} else if(prev == 90 && ang == 180) {
				start1 = 17;
			} else if(prev == 180 && ang == 90) {
				start1 = 11;
			} else if(prev == 180 && ang == 270) {
				start1 = 8;
			} else if(prev == 270 && ang == 180) {
				start1 = 14;
			} else if(prev == 270 && ang == 0) {
				start1 = 11;
			}
			start = start1;
			end = start + 2;
		}
		var frameDelay = delay / (end - start) | 0;
		var tmp = this.game;
		var game1 = this.game;
		var tilemap = this.tilemap;
		var x = this.cell.x * this.tilemap.tileset.tileSize;
		var y = this.cell.y * this.tilemap.tileset.tileSize;
		var image = kha_Assets.images.tracks;
		var start2 = start;
		var end1 = end;
		var frameDelay1 = frameDelay;
		if(frameDelay == null) {
			frameDelay1 = 1;
		}
		if(end1 == null) {
			end1 = -1;
		}
		if(start2 == null) {
			start2 = 0;
		}
		var sets_start = 0;
		var sets_end = -1;
		var sets_frameDelay = 1;
		sets_start = start2;
		sets_end = end1;
		sets_frameDelay = frameDelay1;
		var _this = game_effects_Trace.pool;
		var sprite = _this.pool.length == 0 ? _this.allocFunc() : _this.pool.pop();
		sprite.x = x;
		sprite.y = y;
		sprite.image = image;
		sprite.start = sets_start;
		sprite.current = -1;
		sprite.end = sets_end;
		sprite.length = -1;
		sprite.delay = sprite.frameDelay = sets_frameDelay;
		sprite.isReversed = false;
		sprite.afterInit(game1,tilemap,false);
		tmp.addTraceEffect(sprite);
		if(this.prevReverse != isReverse && end - start == 2) {
			var start3 = this.dir.x == 0 ? 0 : 4;
			var end2 = start3 + 3;
			var tmp1 = this.game;
			var game2 = this.game;
			var tilemap1 = this.tilemap;
			var x1 = this.cell.x * this.tilemap.tileset.tileSize;
			var y1 = this.cell.y * this.tilemap.tileset.tileSize;
			var image1 = kha_Assets.images.tracks;
			var start4 = start3;
			var end3 = end2;
			var frameDelay2 = frameDelay;
			if(frameDelay == null) {
				frameDelay2 = 1;
			}
			if(end2 == null) {
				end3 = -1;
			}
			if(start4 == null) {
				start4 = 0;
			}
			var sets_start1 = 0;
			var sets_end1 = -1;
			var sets_frameDelay1 = 1;
			sets_start1 = start4;
			sets_end1 = end3;
			sets_frameDelay1 = frameDelay2;
			var _this1 = game_effects_Trace.pool;
			var sprite1 = _this1.pool.length == 0 ? _this1.allocFunc() : _this1.pool.pop();
			sprite1.x = x1;
			sprite1.y = y1;
			sprite1.image = image1;
			sprite1.start = sets_start1;
			sprite1.current = -1;
			sprite1.end = sets_end1;
			sprite1.length = -1;
			sprite1.delay = sprite1.frameDelay = sets_frameDelay1;
			sprite1.isReversed = false;
			sprite1.afterInit(game2,tilemap1,false);
			tmp1.addTraceEffect(sprite1);
		}
		this.prevAngle = this.angle;
		this.prevReverse = isReverse;
	}
	,getCellItem: function() {
		var id = this.tilemap.getTile(1,this.cell.x,this.cell.y)._id;
		switch(id) {
		case 22:case 23:case 24:
			var dmg = 0;
			if(id == 22 && this.team == this.game.playerTeam) {
				dmg = 3;
			} else if(id == 23 && this.team != this.game.playerTeam) {
				dmg = 5;
			} else if(id == 24 && this.team != this.game.playerTeam) {
				dmg = 9;
			}
			if(dmg == 0) {
				return;
			}
			this.game.damageTankMine(this,dmg);
			if(this.isAlive) {
				this.game.addSmallExplosion(this.x + this.tilemap.tileset.tileSize / 2,this.y + this.tilemap.tileset.tileSize / 2);
			}
			this.tilemap.setTileId(1,this.cell.x,this.cell.y,0);
			break;
		case 26:
			this.useBonus(id);
			this.game.removeBonus(1,this.cell.x,this.cell.y);
			break;
		case 29:
			if(this.hp == this.maxHp) {
				return;
			}
			this.useBonus(id);
			this.game.removeBonus(1,this.cell.x,this.cell.y);
			break;
		case 37:
			var _this = this.game;
			if(!(_this.params.winCondition >= 7 && _this.params.winCondition <= 11)) {
				return;
			}
			if(this.team == this.game.playerTeam) {
				return;
			}
			this.tilemap.setTileId(1,this.cell.x,this.cell.y,0);
			this.game.levelFailed();
			break;
		default:
		}
	}
	,useBonus: function(type) {
		switch(type) {
		case 26:
			if(this.speedUpTime < 2100) {
				this.speedUpTime = 2100;
			} else {
				this.speedUpTime = 2700;
			}
			break;
		case 29:
			this.hp = this.maxHp;
			this.smokingTime = 0;
			break;
		default:
		}
		var sound;
		switch(type) {
		case 26:
			sound = kha_Assets.sounds.sounds_fx_powerup_use_speed;
			break;
		case 29:
			sound = kha_Assets.sounds.sounds_fx_powerup_use_repair;
			break;
		default:
			sound = null;
		}
		if(sound == null) {
			return;
		}
		var volume = this.game.playerDistVolume(this.cell.x,this.cell.y);
		new Sound(sound,false).play(volume);
	}
	,fire: function() {
		if(this.state == game_TankState.Rotating) {
			return;
		}
		if(this.type == "kamikaze") {
			this.kamikazeFire();
			return;
		}
		if(this.reloadDelay > 0) {
			return;
		}
		this.game.createBullet(this);
		this.reloadDelay = this.maxReloadDelay;
		switch(this.bulletType) {
		case 1:case 3:
			this.reloadDelay -= 10;
			break;
		case 6:
			this.reloadDelay = this.reloadDelay * 1.5 | 0;
			break;
		default:
		}
		if(this.speedUpTime > 0) {
			this.reloadDelay -= 10;
		}
		var sound;
		switch(this.bulletType) {
		case 0:
			sound = kha_Assets.sounds.sounds_shell_default;
			break;
		case 1:
			sound = kha_Assets.sounds.sounds_shell_plasma;
			break;
		case 2:
			sound = kha_Assets.sounds.sounds_shell_double;
			break;
		case 3:
			sound = kha_Assets.sounds.sounds_shell_plasma_double;
			break;
		case 4:case 5:
			sound = kha_Assets.sounds.sounds_shell_ap;
			break;
		case 6:
			sound = kha_Assets.sounds.sounds_shell_warhead;
			break;
		}
		var volume = this.game.playerDistVolume(this.cell.x,this.cell.y);
		new Sound(sound,false).play(volume);
		this.fireCompleted();
	}
	,fireCompleted: function() {
	}
	,kamikazeFire: function() {
		this.isKamikazeFire = true;
		this.death();
		this.game.addExplosion(new game_Explosion(this.game,this.tilemap,new game_ExplSets(this.cell.x,this.cell.y,null,3,5,8,8,null)));
		this.game.addExplosion(new game_Explosion(this.game,this.tilemap,new game_ExplSets(this.cell.x,this.cell.y,null,3,5,null,35,null)));
	}
	,renderCircle: function(g) {
		this.drawCircleImage(g,this.team);
	}
	,drawCircleImage: function(g,frame) {
		var img = kha_Assets.images.rings;
		var length = img.get_width() / img.get_height() | 0;
		var frameW = img.get_width() / length | 0;
		var offX = (this.tilemap.tileset.tileSize - frameW) / 2 | 0;
		var offY = (this.tilemap.tileset.tileSize - img.get_height()) / 2 | 0;
		var scale = this.tilemap.scale;
		var camX = this.tilemap.camera.get_x();
		var camY = this.tilemap.camera.get_y();
		g.set_color(-1);
		khm_utils_Atlas.drawSubImage(g,img,(this.x * scale | 0) / scale + camX + offX,(this.y * scale | 0) / scale + camY + offY,frameW * frame,0,frameW,img.get_height());
		if(this.shieldHp == 0) {
			return;
		}
		khm_utils_Atlas.drawSubImage(g,img,(this.x * scale | 0) / scale + camX + offX,(this.y * scale | 0) / scale + camY + offY,frameW * (length - (this.shieldDamageDelay > 0 ? 1 : 2)),0,frameW,img.get_height());
	}
	,render: function(g) {
		var frameW = this.image.get_width() / 16 | 0;
		var offX = (this.tilemap.tileset.tileSize - frameW) / 2 | 0;
		var offY = (this.tilemap.tileset.tileSize - this.image.get_height()) / 2 | 0;
		var scale = this.tilemap.scale;
		var camX = this.tilemap.camera.get_x();
		var camY = this.tilemap.camera.get_y();
		g.set_color(-1);
		khm_utils_Atlas.drawSubImage(g,this.image,(this.x * scale | 0) / scale + camX + offX,(this.y * scale | 0) / scale + camY + offY,frameW * this.frame,0,frameW,this.image.get_height());
	}
	,renderHp: function(g) {
		var img = kha_Assets.images.get("gui_health_" + this.team);
		var frameW = img.get_width() / 12 | 0;
		var frame = (this.hp * 12 / this.maxHp | 0) - 1;
		if(frame < 0) {
			frame = 0;
		}
		var scale = this.tilemap.scale;
		var camX = this.tilemap.camera.get_x();
		var camY = this.tilemap.camera.get_y();
		g.set_color(-1);
		khm_utils_Atlas.drawSubImage(g,img,(this.x * scale | 0) / scale - 2 + camX,(this.y * scale | 0) / scale - 3 + camY,frameW * frame,0,frameW,img.get_height());
	}
	,__class__: game_Tank
};
var game_Bot = function(game1,tilemap,sets) {
	this.downRotation = { x : 0, y : 0};
	this.rightRotation = { x : 0, y : 0};
	this.leftRotation = { x : 0, y : 0};
	this.noWallCheck = false;
	this.enemyDist = 0;
	this.pathCooldown = 0;
	this.nextTurns = [];
	this.aiState = game__$Bot_BotState.Searching;
	this.aiType = game_BotAiType.None;
	game_Tank.call(this,game1,tilemap,sets);
	if(game_Bot.depthMap == null || game_Bot.depthMap.length != tilemap.map.h) {
		var _g = [];
		var _g1 = 0;
		var _g2 = tilemap.map.h;
		while(_g1 < _g2) {
			++_g1;
			_g.push([]);
		}
		game_Bot.depthMap = _g;
	}
	this.shieldHp = this.maxShieldHp;
};
$hxClasses["game.Bot"] = game_Bot;
game_Bot.__name__ = "game.Bot";
game_Bot.__super__ = game_Tank;
game_Bot.prototype = $extend(game_Tank.prototype,{
	iconType: null
	,aiType: null
	,aiState: null
	,nextTurns: null
	,globalTarget: null
	,pathCooldown: null
	,enemyDist: null
	,inventory: null
	,noWallCheck: null
	,setAiType: function(aiType) {
		this.aiType = aiType;
	}
	,setInventory: function(inv) {
		this.inventory = inv;
	}
	,afterUpdate: function() {
		if(this.pathCooldown > 0) {
			this.pathCooldown--;
		} else if(this.aiState != game__$Bot_BotState.Attack && this.aiType == game_BotAiType.FollowPlayer) {
			this.setDestination(this.game.player.cell);
		}
		var _g = this.aiState;
		switch(_g._hx_index) {
		case 0:
			if(this.level == 7) {
				this.tryMakeMine();
			}
			this.findEnemy();
			if((this.nextTurns.length / 2 | 0) > 0) {
				this.updatePath();
			}
			if(this.aiState == game__$Bot_BotState.Attack) {
				return;
			}
			this.move(this.dir.x,this.dir.y);
			if(this.state == game_TankState.Standing) {
				var newDir = this.findRotation();
				if(newDir != null) {
					this.setDirection(newDir.x,newDir.y);
				}
			}
			break;
		case 1:
			var _g1 = _g.dir;
			if(this.state == game_TankState.Standing) {
				this.setDirection(_g1.x,_g1.y);
				this.aiState = game__$Bot_BotState.Searching;
			}
			break;
		case 2:
			this.findEnemy();
			if((this.nextTurns.length / 2 | 0) > 0) {
				this.updatePath();
			}
			if(this.type == "kamikaze") {
				this.move(this.dir.x,this.dir.y);
				var x = this.cell.x + this.dir.x;
				var y = this.cell.y + this.dir.y;
				var tmp;
				var _this = this.tilemap;
				if(!(x > -1 && y > -1 && x < _this.map.w && y < _this.map.h)) {
					tmp = false;
				} else {
					var toTeam = this.game.teamsGrid[y][x];
					tmp = toTeam > -1 && this.team != toTeam;
				}
				if(!tmp) {
					return;
				}
			}
			if(this.aiState == game__$Bot_BotState.Attack) {
				if(this.type == "siege") {
					this.siegeFire();
				} else {
					this.fire();
				}
			}
			break;
		}
	}
	,moveOver: function(fromX,fromY) {
		if(this.state != game_TankState.Standing) {
			return;
		}
		var x = this.cell.x + this.dir.x;
		var y = this.cell.y + this.dir.y;
		var _this = this.tilemap;
		if(!(!(x > -1 && y > -1 && x < _this.map.w && y < _this.map.h) || this.tilemap.getTile(1,x,y).props.collide || this.game.teamsGrid[y][x] != -1)) {
			this.move(this.dir.x,this.dir.y);
			return;
		}
		var rx = this.cell.x - this.dir.x;
		var ry = this.cell.y - this.dir.y;
		var _this1 = this.tilemap;
		if(!(!(rx > -1 && ry > -1 && rx < _this1.map.w && ry < _this1.map.h) || this.tilemap.getTile(1,rx,ry).props.collide || this.game.teamsGrid[ry][rx] != -1)) {
			this.reverseMove();
			return;
		}
		if(this.moveOverAllyTank(x,y,fromX,fromY)) {
			return;
		}
		if(this.moveOverAllyTank(rx,ry,fromX,fromY)) {
			return;
		}
	}
	,moveOverAllyTank: function(x,y,fromX,fromY) {
		if(x == fromX && y == fromY) {
			return false;
		}
		var _this = this.tilemap;
		if(!(x > -1 && y > -1 && x < _this.map.w && y < _this.map.h)) {
			return false;
		}
		var toTeam = this.team;
		if(!(toTeam < -1 || this.game.teamsGrid[y][x] == toTeam)) {
			return false;
		}
		var tank = this.game.getTank(x,y);
		if(tank == null || tank.team != this.team) {
			return false;
		}
		tank.moveOver(this.cell.x,this.cell.y);
		return true;
	}
	,fire: function() {
		if(this.hasCustomWeapon()) {
			var temp = this.bulletType;
			this.bulletType = game__$Bullet_BulletType_$Impl_$.fromIcon(this.inventory.get()[0].id);
			game_Tank.prototype.fire.call(this);
			this.bulletType = temp;
		} else {
			game_Tank.prototype.fire.call(this);
		}
	}
	,fireCompleted: function() {
		if(this.hasCustomWeapon()) {
			var items = this.inventory.get();
			items[0].count--;
			if(items[0].count <= 0) {
				HxOverrides.remove(items,items[0]);
				this.inventory.currentId = 0;
			}
		}
	}
	,hasCustomWeapon: function() {
		if(this.inventory == null) {
			return false;
		}
		if(this.inventory.get().length == 0) {
			return false;
		}
		switch(this.inventory.get()[0].id) {
		case 0:case 1:case 2:case 3:case 4:case 5:
			return true;
		default:
			return false;
		}
	}
	,siegeFire: function() {
		var dist = this.enemyDist;
		if(dist >= 3 && dist <= 7) {
			if(this.reloadDelay > 0) {
				return;
			}
			this.reloadDelay = this.maxReloadDelay * 2;
			this.game.addArtillery(this.x,this.y,this.dir,5,3,5,2);
			this.enemyDist = 0;
			return;
		}
		this.fire();
	}
	,updatePath: function() {
		if(this.state._hx_index == 0) {
			if(this.aiState == game__$Bot_BotState.Attack) {
				return;
			}
			var this1 = this.nextTurns;
			var i = (this.nextTurns.length / 2 | 0) - 1;
			var nextDir_x = this1[i * 2] - this.cell.x;
			var nextDir_y = this1[i * 2 + 1] - this.cell.y;
			if((Math.abs(nextDir_x + nextDir_y) | 0) != 1) {
				this.nextTurns.length = 0;
				this.pathCooldown = game_Bot.PATH_COOLDOWN;
				return;
			}
			if(this.dir.x == nextDir_x && this.dir.y == nextDir_y) {
				this.move(this.dir.x,this.dir.y);
				if(this.state == game_TankState.Moving) {
					var this2 = this.nextTurns;
					this2.pop();
					this2.pop();
				} else if(this.game.teamsGrid[this.cell.y + this.dir.y][this.cell.x + this.dir.x] == -1) {
					if(this.type == "kamikaze") {
						this.nextTurns.length = 0;
						this.pathCooldown = game_Bot.PATH_COOLDOWN;
					} else {
						this.aiState = game__$Bot_BotState.Attack;
					}
				} else {
					this.nextTurns.length = 0;
					this.pathCooldown = game_Bot.PATH_COOLDOWN;
				}
			} else {
				this.setDirection(nextDir_x,nextDir_y);
			}
		}
	}
	,tryMakeMine: function() {
		if(this.state != game_TankState.Standing) {
			return;
		}
		if(this.tilemap.getTile(1,this.cell.x,this.cell.y)._id != 0) {
			return;
		}
		var player = this.game.player;
		if(this.team == player.team) {
			return;
		}
		if((Math.abs(player.cell.x - this.cell.x) + Math.abs(player.cell.y - this.cell.y) | 0) > 4) {
			return;
		}
		if(Std.random(4) == 0) {
			this.tilemap.setTileId(1,this.cell.x,this.cell.y,22);
		}
	}
	,setDestination: function(end,isGlobalTarget) {
		if(isGlobalTarget == null) {
			isGlobalTarget = false;
		}
		var cell = this.nextCell == null ? this.cell : this.nextCell;
		var depthMap = this.genDepthMap(99999);
		this.nextTurns.length = 0;
		game_Dijkstra.createPath(this.nextTurns,cell,end,depthMap,99999);
		var this1 = this.nextTurns;
		this1.pop();
		this1.pop();
		if(isGlobalTarget) {
			this.globalTarget = end;
		}
		this.pathCooldown = game_Bot.PATH_COOLDOWN;
	}
	,genDepthMap: function(maxInt) {
		var _g = 0;
		var _g1 = this.tilemap.map.h;
		while(_g < _g1) {
			var iy = _g++;
			var _g2 = 0;
			var _g11 = this.tilemap.map.w;
			while(_g2 < _g11) {
				var ix = _g2++;
				var id = this.tilemap.getTile(1,ix,iy)._id;
				var newId = 1;
				if(id >= 9 && id <= 13) {
					newId = maxInt;
				}
				if(id >= 19 && id <= 21) {
					newId = maxInt;
				}
				if(id >= 1 && id <= 8) {
					newId = 1 + ((10 - id) / 2 | 0);
				}
				if(id >= 14 && id <= 18) {
					newId = 2;
				}
				if(this.team == this.game.playerTeam) {
					if(id == 22) {
						newId = 6;
					}
				} else if(id >= 23 && id <= 24) {
					newId = 6 + id - 23;
				}
				if(this.type == "kamikaze" && newId > 1) {
					newId = maxInt;
				}
				game_Bot.depthMap[iy][ix] = newId;
			}
		}
		return game_Bot.depthMap;
	}
	,renderHp: function(g) {
		game_Tank.prototype.renderHp.call(this,g);
	}
	,attackedSide: function(dir) {
		if(this.aiState == game__$Bot_BotState.Attack) {
			return;
		}
		this.aiState = game__$Bot_BotState.ForceRotation({ x : -dir.x, y : -dir.y});
	}
	,leftRotation: null
	,rightRotation: null
	,downRotation: null
	,findRotation: function() {
		var left = this.leftRotation;
		var right = this.rightRotation;
		left.x = this.dir.x == 0 ? -1 : 0;
		left.y = this.dir.y == 0 ? -1 : 0;
		right.x = this.dir.x == 0 ? 1 : 0;
		right.y = this.dir.y == 0 ? 1 : 0;
		if(Std.random(2) == 0) {
			var temp = left;
			left = right;
			right = temp;
		}
		var tx = this.cell.x + left.x;
		var ty = this.cell.y + left.y;
		var _this = this.tilemap;
		if(!(!(tx > -1 && ty > -1 && tx < _this.map.w && ty < _this.map.h) || this.tilemap.getTile(1,tx,ty).props.collide || this.game.teamsGrid[ty][tx] != -1)) {
			return left;
		}
		var tx1 = this.cell.x + right.x;
		var ty1 = this.cell.y + right.y;
		var _this1 = this.tilemap;
		if(!(!(tx1 > -1 && ty1 > -1 && tx1 < _this1.map.w && ty1 < _this1.map.h) || this.tilemap.getTile(1,tx1,ty1).props.collide || this.game.teamsGrid[ty1][tx1] != -1)) {
			return right;
		}
		var down = this.downRotation;
		down.x = -this.dir.x;
		down.y = -this.dir.y;
		var tx2 = this.cell.x + down.x;
		var ty2 = this.cell.y + down.y;
		var _this2 = this.tilemap;
		if(!(!(tx2 > -1 && ty2 > -1 && tx2 < _this2.map.w && ty2 < _this2.map.h) || this.tilemap.getTile(1,tx2,ty2).props.collide || this.game.teamsGrid[ty2][tx2] != -1)) {
			return down;
		}
		return null;
	}
	,findEnemy: function() {
		var _gthis = this;
		if(this.state == game_TankState.Moving || this.state == game_TankState.Rotating) {
			return;
		}
		if(this.type == "siege") {
			this.noWallCheck = true;
			this.checkSightLines();
			if(this.aiState != game__$Bot_BotState.Attack) {
				this.noWallCheck = false;
				var dist = this.enemyDist;
				if(!(dist >= 3 && dist <= 7)) {
					this.checkSightLines();
				}
			}
		} else {
			this.checkSightLines();
		}
		if(this.aiState == game__$Bot_BotState.Attack) {
			if((this.nextTurns.length / 2 | 0) > 0 && this.globalTarget == null) {
				this.nextTurns.length = 0;
				this.pathCooldown = game_Bot.PATH_COOLDOWN;
			}
			return;
		}
		if(this.pathCooldown > 0) {
			return;
		}
		if((this.nextTurns.length / 2 | 0) > 0) {
			return;
		}
		if(this.globalTarget != null && this.aiState == game__$Bot_BotState.Searching) {
			this.setDestination(this.globalTarget);
			return;
		}
		var dist1 = this.game.params.enemySightDistance;
		var _g1 = 1;
		var _g2 = dist1 + 1;
		while(_g1 < _g2) {
			var i = _g1++;
			var _g11 = this.cell.x - i;
			var _g21 = this.cell.x + i + 1;
			while(_g11 < _g21) {
				var ix = _g11++;
				var iy = this.cell.y - i;
				var tmp;
				if((Math.abs(_gthis.cell.x - ix) + Math.abs(_gthis.cell.y - iy) | 0) > dist1) {
					tmp = false;
				} else {
					var tmp1;
					var _this = _gthis.tilemap;
					if(!(ix > -1 && iy > -1 && ix < _this.map.w && iy < _this.map.h)) {
						tmp1 = false;
					} else {
						var toTeam = _gthis.game.teamsGrid[iy][ix];
						tmp1 = toTeam > -1 && _gthis.team != toTeam;
					}
					if(tmp1) {
						_gthis.setDestination({ x : ix, y : iy});
						tmp = true;
					} else {
						tmp = false;
					}
				}
				if(tmp) {
					return;
				}
				var iy1 = this.cell.y + i;
				var tmp2;
				if((Math.abs(_gthis.cell.x - ix) + Math.abs(_gthis.cell.y - iy1) | 0) > dist1) {
					tmp2 = false;
				} else {
					var tmp3;
					var _this1 = _gthis.tilemap;
					if(!(ix > -1 && iy1 > -1 && ix < _this1.map.w && iy1 < _this1.map.h)) {
						tmp3 = false;
					} else {
						var toTeam1 = _gthis.game.teamsGrid[iy1][ix];
						tmp3 = toTeam1 > -1 && _gthis.team != toTeam1;
					}
					if(tmp3) {
						_gthis.setDestination({ x : ix, y : iy1});
						tmp2 = true;
					} else {
						tmp2 = false;
					}
				}
				if(tmp2) {
					return;
				}
			}
			var _g3 = this.cell.y - i + 1;
			var _g4 = this.cell.y + i;
			while(_g3 < _g4) {
				var iy2 = _g3++;
				var ix1 = this.cell.x - i;
				var tmp4;
				if((Math.abs(_gthis.cell.x - ix1) + Math.abs(_gthis.cell.y - iy2) | 0) > dist1) {
					tmp4 = false;
				} else {
					var tmp5;
					var _this2 = _gthis.tilemap;
					if(!(ix1 > -1 && iy2 > -1 && ix1 < _this2.map.w && iy2 < _this2.map.h)) {
						tmp5 = false;
					} else {
						var toTeam2 = _gthis.game.teamsGrid[iy2][ix1];
						tmp5 = toTeam2 > -1 && _gthis.team != toTeam2;
					}
					if(tmp5) {
						_gthis.setDestination({ x : ix1, y : iy2});
						tmp4 = true;
					} else {
						tmp4 = false;
					}
				}
				if(tmp4) {
					return;
				}
				var ix2 = this.cell.x + i;
				var tmp6;
				if((Math.abs(_gthis.cell.x - ix2) + Math.abs(_gthis.cell.y - iy2) | 0) > dist1) {
					tmp6 = false;
				} else {
					var tmp7;
					var _this3 = _gthis.tilemap;
					if(!(ix2 > -1 && iy2 > -1 && ix2 < _this3.map.w && iy2 < _this3.map.h)) {
						tmp7 = false;
					} else {
						var toTeam3 = _gthis.game.teamsGrid[iy2][ix2];
						tmp7 = toTeam3 > -1 && _gthis.team != toTeam3;
					}
					if(tmp7) {
						_gthis.setDestination({ x : ix2, y : iy2});
						tmp6 = true;
					} else {
						tmp6 = false;
					}
				}
				if(tmp6) {
					return;
				}
			}
		}
	}
	,checkSightLines: function() {
		if(this.state == game_TankState.Moving || this.state == game_TankState.Rotating) {
			return;
		}
		if(this.checkSightLine(0,-1,10)) {
			return;
		}
		if(this.checkSightLine(0,1,10)) {
			return;
		}
		if(this.checkSightLine(-1,0,10)) {
			return;
		}
		if(this.checkSightLine(1,0,10)) {
			return;
		}
		this.aiState = game__$Bot_BotState.Searching;
	}
	,checkSightLine: function(sx,sy,dist) {
		if(this.dir.x != sx || this.dir.y != sy) {
			dist = Math.ceil(dist / 2) + 1;
		}
		var ix = sx;
		var iy = sy;
		while(ix * sx != dist && iy * sy != dist) {
			if(this.isViewWall(this.cell.x + ix,this.cell.y + iy)) {
				break;
			}
			var x = this.cell.x + ix;
			var y = this.cell.y + iy;
			var tmp;
			var _this = this.tilemap;
			if(!(x > -1 && y > -1 && x < _this.map.w && y < _this.map.h)) {
				tmp = false;
			} else {
				var toTeam = this.game.teamsGrid[y][x];
				tmp = toTeam > -1 && this.team != toTeam;
			}
			if(tmp) {
				this.enemyDist = ix * sx + iy * sy;
				var tmp1;
				if(this.type == "siege" && this.noWallCheck) {
					var dist1 = this.enemyDist;
					tmp1 = !(dist1 >= 3 && dist1 <= 7);
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					return false;
				}
				this.setDirection(sx,sy);
				if(this.aiState != game__$Bot_BotState.Attack && this.type != "siege") {
					this.reloadDelay = 20;
				}
				this.aiState = game__$Bot_BotState.Attack;
				return true;
			}
			ix += sx;
			iy += sy;
		}
		return false;
	}
	,isViewWall: function(x,y) {
		if(this.noWallCheck) {
			return false;
		}
		var tile = this.tilemap.getTile(1,x,y);
		if(this.groundHeight == 1) {
			var id = tile._id;
			if(id != 12) {
				return id == 13;
			} else {
				return true;
			}
		}
		return !tile.props.permeable;
	}
	,__class__: game_Bot
});
var game_Dijkstra = function() { };
$hxClasses["game.Dijkstra"] = game_Dijkstra;
game_Dijkstra.__name__ = "game.Dijkstra";
game_Dijkstra.initGrids = function(w,h,maxInt) {
	if(game_Dijkstra.costs.length != h) {
		var _g = game_Dijkstra.costs.length;
		while(_g < h) {
			var iy = _g++;
			game_Dijkstra.costs[iy] = [];
			game_Dijkstra.visited[iy] = [];
			game_Dijkstra.added[iy] = [];
		}
	}
	var _g1 = 0;
	while(_g1 < h) {
		var iy1 = _g1++;
		var _g2 = 0;
		while(_g2 < w) {
			var ix = _g2++;
			game_Dijkstra.costs[iy1][ix] = maxInt;
			game_Dijkstra.visited[iy1][ix] = false;
			game_Dijkstra.added[iy1][ix] = false;
		}
	}
};
game_Dijkstra.createPath = function(turns,start,end,depthMap,maxInt) {
	var w = depthMap[0].length;
	var h = depthMap.length;
	var cells = [];
	cells.push(start.x);
	cells.push(start.y);
	game_Dijkstra.initGrids(w,h,maxInt);
	game_Dijkstra.costs[start.y][start.x] = 0;
	game_Dijkstra.added[start.y][start.x] = true;
	while(true) {
		var id = -1;
		var min = maxInt;
		var _g = 0;
		var _g1 = cells.length / 2 | 0;
		while(_g < _g1) {
			var i = _g++;
			var inlobj_x = cells[i * 2];
			var inlobj_y = cells[i * 2 + 1];
			if(game_Dijkstra.visited[inlobj_y][inlobj_x]) {
				continue;
			}
			if(game_Dijkstra.costs[inlobj_y][inlobj_x] >= min) {
				continue;
			}
			min = game_Dijkstra.costs[inlobj_y][inlobj_x];
			id = i;
		}
		var id1 = id;
		if(id1 == -1) {
			break;
		}
		var p_x = cells[id1 * 2];
		var p_y = cells[id1 * 2 + 1];
		var tmp;
		if(p_x == end.x && p_y == end.y) {
			tmp = true;
		} else {
			game_Dijkstra.visited[p_y][p_x] = true;
			var _g2 = 0;
			while(_g2 < 4) {
				var i1 = _g2++;
				var x = p_x + game_Dijkstra.offX[i1];
				var y = p_y + game_Dijkstra.offY[i1];
				if(!(x > -1 && y > -1 && x < w && y < h)) {
					continue;
				}
				if(game_Dijkstra.costs[y][x] > game_Dijkstra.costs[p_y][p_x] + depthMap[y][x]) {
					game_Dijkstra.costs[y][x] = game_Dijkstra.costs[p_y][p_x] + depthMap[y][x];
				}
				if(game_Dijkstra.added[y][x]) {
					continue;
				}
				cells.push(x);
				cells.push(y);
				game_Dijkstra.added[y][x] = true;
			}
			tmp = false;
		}
		if(tmp) {
			break;
		}
	}
	if(game_Dijkstra.costs[end.y][end.x] >= maxInt) {
		return;
	}
	var startCost = game_Dijkstra.costs[start.y][start.x];
	var currentCost = game_Dijkstra.costs[end.y][end.x];
	var currentX = end.x;
	var currentY = end.y;
	turns.push(currentX);
	turns.push(currentY);
	while(currentCost != startCost) {
		var origX = currentX;
		var origY = currentY;
		var _g3 = 0;
		while(_g3 < 4) {
			var i2 = _g3++;
			var x1 = origX + game_Dijkstra.offX[i2];
			var y1 = origY + game_Dijkstra.offY[i2];
			if(!(x1 > -1 && y1 > -1 && x1 < w && y1 < h)) {
				continue;
			}
			if(game_Dijkstra.costs[y1][x1] < currentCost) {
				currentCost = game_Dijkstra.costs[y1][x1];
				currentX = x1;
				currentY = y1;
			}
		}
		turns.push(currentX);
		turns.push(currentY);
	}
};
var game_BuildingType = $hxEnums["game.BuildingType"] = { __ename__ : "game.BuildingType", __constructs__ : ["Radar","Reactor"]
	,Radar: {_hx_index:0,__enum__:"game.BuildingType",toString:$estr}
	,Reactor: {_hx_index:1,__enum__:"game.BuildingType",toString:$estr}
};
var game_BuildingSets = function(x,y,type,team,hp) {
	this.x = x;
	this.y = y;
	this.type = type;
	this.team = team;
	this.hp = hp;
};
$hxClasses["game.BuildingSets"] = game_BuildingSets;
game_BuildingSets.__name__ = "game.BuildingSets";
game_BuildingSets.prototype = {
	x: null
	,y: null
	,type: null
	,team: null
	,hp: null
	,__class__: game_BuildingSets
};
var game_Building = function(game1,tilemap,sets) {
	this.smokingTime = 0;
	this.isAlive = true;
	this.game = game1;
	this.tilemap = tilemap;
	this.cell = { x : sets.x, y : sets.y};
	this.x = sets.x * this.tilemap.tileset.tileSize;
	this.y = sets.y * this.tilemap.tileset.tileSize;
	this.team = sets.team;
	if(!(game1.params.winCondition >= 50 && game1.params.winCondition <= 55) && this.team == game1.playerTeam) {
		this.team = -3;
	}
	this.type = sets.type;
	this.maxHp = this.hp = sets.hp;
	var _g = this.cell.x;
	var _g1 = this.cell.x + 2;
	while(_g < _g1) {
		var ix = _g++;
		var _g2 = this.cell.y;
		var _g11 = this.cell.y + 2;
		while(_g2 < _g11) this.game.teamsGrid[_g2++][ix] = this.team;
	}
};
$hxClasses["game.Building"] = game_Building;
game_Building.__name__ = "game.Building";
game_Building.prototype = {
	game: null
	,tilemap: null
	,isAlive: null
	,x: null
	,y: null
	,cell: null
	,team: null
	,maxHp: null
	,hp: null
	,type: null
	,smokingTime: null
	,isInCell: function(x,y) {
		if(x >= this.cell.x && y >= this.cell.y && x <= this.cell.x + 1 && y <= this.cell.y + 1) {
			return true;
		}
		return false;
	}
	,restore: function() {
		this.smokingTime = 0;
		this.hp = this.maxHp;
	}
	,damage: function(dmg) {
		if(dmg == 0) {
			return;
		}
		this.hp -= dmg;
		if(this.hp < Math.ceil(this.maxHp / 2)) {
			this.smokingTime = 600;
		}
		if(this.hp > 0) {
			var sound = Std.random(2) == 0 ? kha_Assets.sounds.sounds_hit_metal01 : kha_Assets.sounds.sounds_hit_metal02;
			if(dmg >= 3) {
				sound = kha_Assets.sounds.sounds_hit_ap;
			}
			var volume = this.game.playerDistVolume(this.cell.x,this.cell.y);
			new Sound(sound,false).play(volume);
			return;
		}
		this.death();
	}
	,death: function() {
		this.isAlive = false;
		var _g = this.cell.x;
		var _g1 = this.cell.x + 2;
		while(_g < _g1) {
			var ix = _g++;
			var _g2 = this.cell.y;
			var _g11 = this.cell.y + 2;
			while(_g2 < _g11) {
				var iy = _g2++;
				this.game.teamsGrid[iy][ix] = -1;
				this.game.addBigExplosion(ix * this.tilemap.tileset.tileSize + this.tilemap.tileset.tileSize / 2,iy * this.tilemap.tileset.tileSize + this.tilemap.tileset.tileSize / 2);
			}
		}
		switch(this.type._hx_index) {
		case 0:
			var sound = Std.random(2) == 0 ? kha_Assets.sounds.sounds_explosion_small01 : kha_Assets.sounds.sounds_explosion_small02;
			var volume = this.game.playerDistVolume(this.cell.x,this.cell.y);
			new Sound(sound,false).play(volume);
			break;
		case 1:
			this.addReactorExplosions();
			break;
		}
		this.game.removeBuilding(this);
		this.addPlayerMoney();
	}
	,addPlayerMoney: function() {
		if(this.team == this.game.playerTeam) {
			return;
		}
		this.game.addPlayerMoney(3 * this.maxHp);
	}
	,addReactorExplosions: function() {
		var offX = Std.random(2);
		var power = 4 * this.game.params.enemyDifficulty;
		var radius = 1;
		if(power >= 16) {
			radius = 4;
		} else if(power >= 5) {
			radius = 3;
		} else if(power >= 1) {
			radius = 2;
		}
		this.game.addExplosion(new game_Explosion(this.game,this.tilemap,new game_ExplSets(this.cell.x + 1 - offX,this.cell.y,null,radius,power,null,8,null)));
		this.game.addExplosion(new game_Explosion(this.game,this.tilemap,new game_ExplSets(this.cell.x + offX,this.cell.y + 1,null,radius,power,null,20,null)));
		var power1 = 19 * this.game.params.enemyDifficulty;
		this.game.addExplosion(new game_Explosion(this.game,this.tilemap,new game_ExplSets(this.cell.x + 1 - offX,this.cell.y,null,4,power1,null,31,null)));
		this.game.addExplosion(new game_Explosion(this.game,this.tilemap,new game_ExplSets(this.cell.x + offX,this.cell.y + 1,null,4,power1,null,45,null)));
	}
	,renderOverlay: function(g) {
		var frame = this.team == -3 ? this.game.playerTeam - 1 : this.team - 1;
		if(frame < 0 || frame > 1) {
			return;
		}
		var image = kha_Assets.images.overlay;
		var camX = this.tilemap.camera.get_x();
		var camY = this.tilemap.camera.get_y();
		g.set_color(frame == 0 ? 1615134464 : -2130771968);
		khm_utils_Atlas.drawImage(g,image,this.x + this.tilemap.tileset.tileSize - image.get_width() / 2 + camX,this.y + this.tilemap.tileset.tileSize - image.get_height() / 2 + camY);
	}
	,update: function() {
		if(this.smokingTime > 0) {
			this.smokingTime--;
			if(this.smokingTime % 8 == 0) {
				var tmp = this.game;
				var game1 = this.game;
				var tilemap = this.tilemap;
				var x = this.x;
				var y = this.y + this.tilemap.tileset.tileSize / 2;
				var image = kha_Assets.images.expl_big;
				var _this = game_effects_Smoke.pool;
				var sprite = _this.pool.length == 0 ? _this.allocFunc() : _this.pool.pop();
				sprite.x = x;
				sprite.y = y;
				sprite.image = image;
				sprite.start = 20;
				sprite.current = -1;
				sprite.end = -1;
				sprite.length = -1;
				sprite.delay = sprite.frameDelay = 6;
				sprite.isReversed = false;
				sprite.afterInit(game1,tilemap,false);
				tmp.addSprite(sprite);
			}
		}
	}
	,render: function(g) {
		var image = kha_Assets.images.big_builds;
		var frameW = image.get_width() / (image.get_width() / image.get_height() | 0) | 0;
		khm_utils_Atlas.drawSubImage(g,image,this.x + this.tilemap.tileset.tileSize - frameW / 2 + this.tilemap.camera.get_x(),this.y + this.tilemap.tileset.tileSize - image.get_height() / 2 + this.tilemap.camera.get_y(),this.type._hx_index * frameW,0,frameW,image.get_height());
		this.renderHp(g);
	}
	,renderHp: function(g) {
		var img = kha_Assets.images.get("gui_health_" + (this.team == -3 ? this.game.playerTeam : this.team));
		var frameW = img.get_width() / 12 | 0;
		var frame = (this.hp * 12 / this.maxHp | 0) - 1;
		if(frame < 0) {
			frame = 0;
		}
		var camX = this.tilemap.camera.get_x();
		var camY = this.tilemap.camera.get_y();
		var tileSize = this.tilemap.tileset.tileSize;
		g.set_color(-1);
		khm_utils_Atlas.drawSubImage(g,img,(this.x + tileSize / 4 | 0) - 2 + camX,(this.y | 0) - 3 + camY,frameW * frame,0,frameW,img.get_height());
	}
	,__class__: game_Building
};
var game__$Bullet_BulletType_$Impl_$ = {};
$hxClasses["game._Bullet.BulletType_Impl_"] = game__$Bullet_BulletType_$Impl_$;
game__$Bullet_BulletType_$Impl_$.__name__ = "game._Bullet.BulletType_Impl_";
game__$Bullet_BulletType_$Impl_$.fromIcon = function(icon) {
	switch(icon) {
	case 0:
		return 0;
	case 1:
		return 1;
	case 2:
		return 2;
	case 3:
		return 3;
	case 4:
		return 4;
	case 5:
		return 5;
	case 7:
		return 6;
	default:
		throw new js__$Boot_HaxeError("unknown icon " + game_gui__$Icon_Icon_$Impl_$.toString(icon));
	}
};
var khm_utils_Pool_$game_$Bullet = function(allocFunc) {
	this.allocFunc = allocFunc;
	this.pool = [];
};
$hxClasses["khm.utils.Pool_game_Bullet"] = khm_utils_Pool_$game_$Bullet;
khm_utils_Pool_$game_$Bullet.__name__ = "khm.utils.Pool_game_Bullet";
khm_utils_Pool_$game_$Bullet.prototype = {
	pool: null
	,allocFunc: null
	,__class__: khm_utils_Pool_$game_$Bullet
};
var game_Bullet = function() {
	this.smokeTime = 0;
	this.dir = { x : 0, y : 0};
};
$hxClasses["game.Bullet"] = game_Bullet;
game_Bullet.__name__ = "game.Bullet";
game_Bullet.make = function(game1,tilemap,parent,type) {
	var _this = game_Bullet.pool;
	var sprite = _this.pool.length == 0 ? _this.allocFunc() : _this.pool.pop();
	sprite.init(game1,tilemap,parent,type);
	return sprite;
};
game_Bullet.prototype = {
	game: null
	,tilemap: null
	,parent: null
	,x: null
	,y: null
	,w: null
	,h: null
	,dir: null
	,type: null
	,damage: null
	,mode: null
	,groundHeight: null
	,frame: null
	,speed: null
	,init: function(game1,tilemap,parent,type) {
		this.game = game1;
		this.tilemap = tilemap;
		this.parent = parent;
		this.type = type;
		this.mode = game1.params.friendlyFire;
		var tmp;
		switch(type) {
		case 0:
			tmp = 1;
			break;
		case 1:
			tmp = 1;
			break;
		case 2:
			tmp = 2;
			break;
		case 3:
			tmp = 2;
			break;
		case 4:
			tmp = 3;
			break;
		case 5:
			tmp = 5;
			break;
		case 6:
			tmp = 9;
			break;
		}
		this.damage = tmp;
		var tmp1;
		switch(type) {
		case 0:
			tmp1 = 2;
			break;
		case 1:
			tmp1 = 3.5;
			break;
		case 2:
			tmp1 = 2;
			break;
		case 3:
			tmp1 = 3.5;
			break;
		case 4:
			tmp1 = 2.8;
			break;
		case 5:
			tmp1 = 2.8;
			break;
		case 6:
			tmp1 = 0;
			break;
		}
		this.speed = tmp1;
		this.dir.x = parent.dir.x;
		this.dir.y = parent.dir.y;
		this.groundHeight = parent.groundHeight;
		this.w = 4;
		this.h = 8;
		if(this.dir.x != 0) {
			var temp = this.w;
			this.w = this.h;
			this.h = temp;
		}
		this.x = parent.x + this.dir.x * this.tilemap.tileset.tileSize / 4 + this.tilemap.tileset.tileSize / 2 - this.w / 2;
		this.y = parent.y + this.dir.y * this.tilemap.tileset.tileSize / 4 + this.tilemap.tileset.tileSize / 2 - this.h / 2 + (-3);
		if(this.dir.y == 1) {
			this.frame = 0;
		} else if(this.dir.x == -1) {
			this.frame = 1;
		} else if(this.dir.y == -1) {
			this.frame = 2;
		} else if(this.dir.x == 1) {
			this.frame = 3;
		} else {
			throw new js__$Boot_HaxeError("unknown bullet direction (" + Std.string(this.dir) + ")");
		}
		var tmp2 = this;
		var tmp3 = tmp2.frame;
		var tmp4;
		switch(type) {
		case 0:
			tmp4 = 0;
			break;
		case 1:
			tmp4 = 4;
			break;
		case 2:
			tmp4 = 0;
			break;
		case 3:
			tmp4 = 4;
			break;
		case 4:
			tmp4 = 13;
			break;
		case 5:
			tmp4 = 13;
			break;
		case 6:
			tmp4 = 8;
			break;
		}
		tmp2.frame = tmp3 + tmp4;
	}
	,getBulletExplSprite: function() {
		switch(this.type) {
		case 0:
			return kha_Assets.images.expl_small;
		case 1:
			return kha_Assets.images.expl_plasma;
		case 2:
			return kha_Assets.images.expl_small;
		case 3:
			return kha_Assets.images.expl_big_plasma;
		case 4:
			return kha_Assets.images.expl_big_red;
		case 5:
			return kha_Assets.images.expl_big_red;
		case 6:
			return kha_Assets.images.expl_big;
		}
	}
	,isWallCollision: function(x,y) {
		var _this = this.tilemap;
		if(!(x > -1 && y > -1 && x < _this.map.w && y < _this.map.h) || !this.tilemap.getTile(1,x,y).props.permeable) {
			if(this.groundHeight == 1) {
				var id = this.tilemap.getTile(1,x,y)._id;
				var _this1 = this.tilemap;
				if(x > -1 && y > -1 && x < _this1.map.w && y < _this1.map.h && id != 12 && id != 13) {
					return false;
				}
			}
			if(this.type == 6) {
				this.game.addExplosion(new game_Explosion(this.game,this.tilemap,new game_ExplSets(x,y,null,2,this.damage,null,null,null)));
				this.remove();
				return true;
			}
			this.damage = this.game.damageWall(x,y,this.damage);
			if(this.tilemap.getTile(1,x,y)._id != 0) {
				this.game.addBulletExplosion(this);
			}
			if(this.damage <= 0) {
				this.remove();
			}
			return true;
		}
		return false;
	}
	,smokeTime: null
	,updateWarhead: function() {
		if(this.smokeTime > 10 - this.speed * 2) {
			var x = this.x + this.w / 2 - this.dir.x * this.w;
			var y = this.y + this.h / 2 - this.dir.y * (this.h + (-3));
			var tmp = this.game;
			var game1 = this.game;
			var tilemap = this.tilemap;
			var image = kha_Assets.images.expl_small;
			var _this = game_effects_RocketSmoke.pool;
			var sprite = _this.pool.length == 0 ? _this.allocFunc() : _this.pool.pop();
			sprite.x = x;
			sprite.y = y;
			sprite.image = image;
			sprite.start = 9;
			sprite.current = -1;
			sprite.end = -1;
			sprite.length = -1;
			sprite.delay = sprite.frameDelay = 16;
			sprite.isReversed = false;
			sprite.afterInit(game1,tilemap,true);
			tmp.addSprite(sprite);
			this.smokeTime = 0;
		}
		this.smokeTime++;
		this.speed += 0.015;
		if(this.speed > 4) {
			this.speed = 4;
		}
	}
	,update: function(game1,bullets,tanks,buildings) {
		this.x += this.speed * this.dir.x;
		this.y += this.speed * this.dir.y;
		if(this.type == 6) {
			this.updateWarhead();
		}
		if(this.isWallCollision(this.x / this.tilemap.tileset.tileSize | 0,this.y / this.tilemap.tileset.tileSize | 0)) {
			return;
		}
		var tx = (this.x + this.w) / this.tilemap.tileset.tileSize | 0;
		var ty = (this.y + this.h) / this.tilemap.tileset.tileSize | 0;
		if(this.isWallCollision(tx,ty)) {
			return;
		}
		var _g = 0;
		while(_g < bullets.length) {
			var bullet = bullets[_g];
			++_g;
			if(bullet == this) {
				continue;
			}
			var tmp;
			if(this.mode != 4) {
				var toTeam = bullet.parent.team;
				tmp = !(toTeam > -1 && this.parent.team != toTeam);
			} else {
				tmp = false;
			}
			if(tmp) {
				continue;
			}
			var a_x = this.x;
			var a_y = this.y;
			var b_x = bullet.x;
			var b_y = bullet.y;
			if(!(a_y + this.h < b_y || a_y > b_y + bullet.h || a_x + this.w < b_x || a_x > b_x + bullet.w)) {
				var sound = Std.random(2) == 0 ? kha_Assets.sounds.sounds_shell_rico_1 : kha_Assets.sounds.sounds_shell_rico_2;
				var volume = game1.playerDistVolume(tx,ty);
				new Sound(sound,false).play(volume);
				this.x = (this.x + bullet.x) / 2;
				this.y = (this.y + bullet.y) / 2;
				game1.addBulletExplosion(this);
				var temp = this.damage;
				this.damage -= bullet.damage;
				bullet.damage -= temp;
				if(bullet.damage <= 0) {
					bullet.remove();
				}
				if(this.damage <= 0) {
					this.remove();
				}
				return;
			}
		}
		var _g1 = 0;
		while(_g1 < tanks.length) {
			var tank = tanks[_g1];
			++_g1;
			if(tank == this.parent) {
				continue;
			}
			var tmp1;
			if(this.mode == 1) {
				var toTeam1 = tank.team;
				tmp1 = !(toTeam1 > -1 && this.parent.team != toTeam1);
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				continue;
			}
			var a_x1 = this.x;
			var a_y1 = this.y;
			var b_x1 = tank.x;
			var b_y1 = tank.y;
			if(!(a_y1 + this.h < b_y1 || a_y1 > b_y1 + this.tilemap.tileset.tileSize || a_x1 + this.w < b_x1 || a_x1 > b_x1 + this.tilemap.tileset.tileSize)) {
				if(this.type == 6) {
					this.game.addExplosion(new game_Explosion(this.game,this.tilemap,new game_ExplSets(Math.round((this.x + tank.x) / 2 / this.tilemap.tileset.tileSize),Math.round((this.y + tank.y) / 2 / this.tilemap.tileset.tileSize),null,2,this.damage,null,null,null)));
					this.remove();
					return;
				}
				var tmp2;
				if(this.mode == 2) {
					var toTeam2 = tank.team;
					tmp2 = !(toTeam2 > -1 && this.parent.team != toTeam2);
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					game1.addBulletExplosion(this);
					this.remove();
					return;
				}
				game1.damageTank(tank,this);
				if(tank.isAlive) {
					game1.addBulletExplosion(this);
				}
				this.remove();
				return;
			}
		}
		var _g2 = 0;
		while(_g2 < buildings.length) {
			var building = buildings[_g2];
			++_g2;
			var tmp3;
			if(this.mode == 1) {
				var toTeam3 = building.team;
				tmp3 = !(toTeam3 > -1 && this.parent.team != toTeam3);
			} else {
				tmp3 = false;
			}
			if(tmp3) {
				continue;
			}
			var a_x2 = this.x;
			var a_y2 = this.y;
			var b_x2 = building.x;
			var b_y2 = building.y;
			if(!(a_y2 + this.h < b_y2 || a_y2 > b_y2 + this.tilemap.tileset.tileSize * 2 || a_x2 + this.w < b_x2 || a_x2 > b_x2 + this.tilemap.tileset.tileSize * 2)) {
				var tmp4;
				if(this.mode == 2) {
					var toTeam4 = building.team;
					tmp4 = !(toTeam4 > -1 && this.parent.team != toTeam4);
				} else {
					tmp4 = false;
				}
				if(tmp4) {
					game1.addBulletExplosion(this);
					this.remove();
					return;
				}
				game1.damageBuilding(building,this.damage,this.parent);
				if(building.isAlive) {
					game1.addBulletExplosion(this);
				}
				this.remove();
				return;
			}
		}
	}
	,remove: function() {
		game_Bullet.pool.pool.push(this);
		this.game.removeBullet(this);
	}
	,render: function(g) {
		var img = kha_Assets.images.bullets;
		var frameW = img.get_width() / (img.get_width() / img.get_height() | 0) | 0;
		var offX = (this.w - frameW) / 2 | 0;
		var offY = (this.h - img.get_height()) / 2 | 0;
		var camX = this.tilemap.camera.get_x();
		var camY = this.tilemap.camera.get_y();
		var scale = this.tilemap.scale;
		g.set_color(-1);
		if(this.type == 2 || this.type == 3) {
			if(this.damage == 1) {
				g.set_color(-1593835521);
			}
			khm_utils_Atlas.drawSubImage(g,img,(this.x * scale | 0) / scale + camX + offX + this.dir.y * 3,(this.y * scale | 0) / scale + camY + offY + this.dir.x * 3,this.frame * frameW,0,frameW,img.get_height());
			khm_utils_Atlas.drawSubImage(g,img,(this.x * scale | 0) / scale + camX + offX - this.dir.y * 3,(this.y * scale | 0) / scale + camY + offY - this.dir.x * 3,this.frame * frameW,0,frameW,img.get_height());
			return;
		}
		g.set_color(-1);
		khm_utils_Atlas.drawSubImage(g,img,(this.x * scale | 0) / scale + camX + offX,(this.y * scale | 0) / scale + camY + offY,this.frame * frameW,0,frameW,img.get_height());
	}
	,__class__: game_Bullet
};
var khm_tilemap_TsCustomizer = function() {
};
$hxClasses["khm.tilemap.TsCustomizer"] = khm_tilemap_TsCustomizer;
khm_tilemap_TsCustomizer.__name__ = "khm.tilemap.TsCustomizer";
khm_tilemap_TsCustomizer.prototype = {
	initProps: function(data) {
		return data.props;
	}
	,objectTemplate: function(layer,tile) {
		if(layer == 0) {
			return null;
		} else {
			return null;
		}
	}
	,__class__: khm_tilemap_TsCustomizer
};
var game_CustomData = function() {
	khm_tilemap_TsCustomizer.call(this);
};
$hxClasses["game.CustomData"] = game_CustomData;
game_CustomData.__name__ = "game.CustomData";
game_CustomData.__super__ = khm_tilemap_TsCustomizer;
game_CustomData.prototype = $extend(khm_tilemap_TsCustomizer.prototype,{
	initProps: function(data) {
		var props = data.props;
		if(data.file == "ground") {
			var id = data.id;
			if(id >= 11 && id <= 14) {
				props.speedRatio = 0.45;
			} else if(id >= 24 && id <= 33) {
				props.speedRatio = 1.2;
			} else if(id >= 34 && id <= 52) {
				props.speedRatio = 1.0;
			} else if(id >= 56 && id <= 90) {
				props.speedRatio = 0.45;
			} else if(id >= 91 && id <= 100) {
				props.speedRatio = 1.2;
			} else {
				props.speedRatio = 0.8;
			}
		}
		if(data.file == "walls") {
			props.collide = true;
		}
		if(props.collide == null) {
			props.collide = false;
		}
		if(props.permeable == null) {
			props.permeable = !props.collide;
		}
		return props;
	}
	,objectTemplate: function(layer,tile) {
		switch(layer) {
		case 0:
			return null;
		case 1:
			return null;
		case 2:
			return null;
		default:
			return null;
		}
	}
	,__class__: game_CustomData
});
var game_ExplSets = function(x,y,team,radius,power,delay,startDelay,larger) {
	this.larger = false;
	this.startDelay = 0;
	this.delay = 7;
	this.team = -2;
	this.x = x;
	this.y = y;
	if(team != null) {
		this.team = team;
	}
	this.radius = radius;
	this.power = power;
	if(delay != null) {
		this.delay = delay;
	}
	if(startDelay != null) {
		this.startDelay = startDelay;
	}
	if(larger != null) {
		this.larger = larger;
	}
};
$hxClasses["game.ExplSets"] = game_ExplSets;
game_ExplSets.__name__ = "game.ExplSets";
game_ExplSets.prototype = {
	x: null
	,y: null
	,team: null
	,radius: null
	,power: null
	,delay: null
	,startDelay: null
	,larger: null
	,__class__: game_ExplSets
};
var game_Explosion = function(game1,tilemap,sets) {
	this.damagedBuildings = [];
	this.damagedTanks = [];
	this.delay = 0;
	this.game = game1;
	this.tilemap = tilemap;
	this.x = sets.x;
	this.y = sets.y;
	this.team = sets.team;
	this.radius = sets.radius;
	this.power = sets.power;
	this.maxDelay = sets.delay;
	this.startDelay = sets.startDelay;
	this.larger = sets.larger;
	var size = this.radius * 2 - 1;
	if(this.larger) {
		size += 2;
	}
	var _g = [];
	var _g1 = 0;
	var _g2 = size;
	while(_g1 < _g2) {
		++_g1;
		var _g11 = [];
		var _g21 = 0;
		var _g3 = size;
		while(_g21 < _g3) {
			++_g21;
			_g11.push(false);
		}
		_g.push(_g11);
	}
	this.grid = _g;
	var center = this.radius - 1;
	if(this.larger) {
		++center;
	}
	this.cells = [{ x : center, y : center, radius : sets.radius, power : sets.power}];
};
$hxClasses["game.Explosion"] = game_Explosion;
game_Explosion.__name__ = "game.Explosion";
game_Explosion.prototype = {
	game: null
	,tilemap: null
	,x: null
	,y: null
	,team: null
	,radius: null
	,power: null
	,larger: null
	,maxDelay: null
	,delay: null
	,startDelay: null
	,grid: null
	,cells: null
	,damagedTanks: null
	,damagedBuildings: null
	,playSound: function() {
		var type;
		switch(this.radius) {
		case 0:case 1:
			type = "explosion_small0" + (1 + Std.random(2));
			break;
		case 2:case 3:
			type = "explosion_medium0" + (1 + Std.random(2));
			break;
		default:
			type = "explosion_large";
		}
		var volume = this.game.playerDistVolume(this.x,this.y);
		new Sound(kha_Assets.sounds.get("sounds_" + type),false).playAfter(volume,this.startDelay * 60);
	}
	,update: function(bullets,tanks,buildings,triggers) {
		if(this.startDelay > 0) {
			this.startDelay--;
			return;
		}
		this.delay--;
		if(this.delay > 0) {
			return;
		}
		this.delay = this.maxDelay;
		var newCells = [];
		var _g = 0;
		var _g1 = this.cells;
		while(_g < _g1.length) {
			var cell = _g1[_g];
			++_g;
			var minRadius = this.larger ? 0 : 1;
			if(cell.radius < minRadius) {
				continue;
			}
			if(this.grid[cell.x][cell.y]) {
				continue;
			}
			if(cell.power < 0) {
				cell.power = 0;
			}
			if(this.larger) {
				if(cell.radius == 0) {
					cell.power = 0;
				}
			}
			this.grid[cell.x][cell.y] = true;
			this.tilemap.camera.shake(5 * this.game.playerDistVolume(this.x,this.y),10);
			newCells.push({ x : cell.x + 1, y : cell.y, power : cell.power - 1, radius : cell.radius - 1});
			newCells.push({ x : cell.x - 1, y : cell.y, power : cell.power - 1, radius : cell.radius - 1});
			newCells.push({ x : cell.x, y : cell.y + 1, power : cell.power - 1, radius : cell.radius - 1});
			newCells.push({ x : cell.x, y : cell.y - 1, power : cell.power - 1, radius : cell.radius - 1});
			var tx = this.x + cell.x - this.radius + 1;
			var ty = this.y + cell.y - this.radius + 1;
			if(this.larger) {
				--tx;
				--ty;
			}
			var _this = this.tilemap;
			if(!(tx > -1 && ty > -1 && tx < _this.map.w && ty < _this.map.h)) {
				continue;
			}
			var id = this.tilemap.getTile(1,tx,ty)._id;
			this.game.damageWall(tx,ty,cell.power,false);
			var newId = this.tilemap.getTile(1,tx,ty)._id;
			if(id == 0 || newId != 0) {
				if(cell.radius == minRadius) {
					this.game.addSmallExplosion((tx + 0.5) * this.tilemap.tileset.tileSize,(ty + 0.5) * this.tilemap.tileset.tileSize);
				} else {
					this.game.addBigExplosion((tx + 0.5) * this.tilemap.tileset.tileSize,(ty + 0.5) * this.tilemap.tileset.tileSize);
				}
			}
			if(id == 11) {
				this.tilemap.setTileId(1,tx,ty,0);
			}
			if(newId != 25) {
				if(newId >= 19 && newId <= 33) {
					if(cell.power > 0) {
						this.tilemap.setTileId(1,tx,ty,0);
					}
				}
			}
			if(cell.power == 0) {
				continue;
			}
			var _g2 = 0;
			while(_g2 < bullets.length) {
				var bullet = bullets[_g2];
				++_g2;
				var a_x = tx * this.tilemap.tileset.tileSize;
				var a_y = ty * this.tilemap.tileset.tileSize;
				var b_x = bullet.x;
				var b_y = bullet.y;
				if(!(a_y + this.tilemap.tileset.tileSize < b_y || a_y > b_y + bullet.h || a_x + this.tilemap.tileset.tileSize < b_x || a_x > b_x + bullet.w)) {
					this.game.addBulletExplosion(bullet);
					this.game.removeBullet(bullet);
				}
			}
			var _g11 = 0;
			while(_g11 < triggers.length) {
				var trigger = triggers[_g11];
				++_g11;
				if(trigger.x == tx && trigger.y == ty && trigger.explCheck) {
					trigger.action(triggers);
					break;
				}
			}
			if(this.game.teamsGrid[ty][tx] == -1) {
				continue;
			}
			var _g21 = 0;
			while(_g21 < tanks.length) {
				var tank = tanks[_g21];
				++_g21;
				var a_x1 = tx * this.tilemap.tileset.tileSize;
				var a_y1 = ty * this.tilemap.tileset.tileSize;
				var b_x1 = tank.x;
				var b_y1 = tank.y;
				if(!(a_y1 + this.tilemap.tileset.tileSize <= b_y1 || a_y1 >= b_y1 + this.tilemap.tileset.tileSize || a_x1 + this.tilemap.tileset.tileSize <= b_x1 || a_x1 >= b_x1 + this.tilemap.tileset.tileSize)) {
					if(this.damagedTanks.indexOf(tank) != -1) {
						break;
					}
					this.damagedTanks.push(tank);
					this.game.damageTankExpl(tank,cell.power);
					break;
				}
			}
			var _g3 = 0;
			while(_g3 < buildings.length) {
				var building = buildings[_g3];
				++_g3;
				var a_x2 = tx * this.tilemap.tileset.tileSize;
				var a_y2 = ty * this.tilemap.tileset.tileSize;
				var b_x2 = building.x;
				var b_y2 = building.y;
				if(!(a_y2 + this.tilemap.tileset.tileSize <= b_y2 || a_y2 >= b_y2 + this.tilemap.tileset.tileSize * 2 || a_x2 + this.tilemap.tileset.tileSize <= b_x2 || a_x2 >= b_x2 + this.tilemap.tileset.tileSize * 2)) {
					if(this.damagedBuildings.indexOf(building) != -1) {
						break;
					}
					this.damagedBuildings.push(building);
					this.game.damageBuildingExpl(building,cell.power);
					break;
				}
			}
		}
		this.cells = newCells;
		if(this.cells.length == 0) {
			this.game.removeExplosion(this);
		}
	}
	,__class__: game_Explosion
};
var khm__$Screen_Fps = function() {
	this.lastTime = 0.0;
	this.time = 0.0;
	this.frames = 0;
	this.fps = 0;
};
$hxClasses["khm._Screen.Fps"] = khm__$Screen_Fps;
khm__$Screen_Fps.__name__ = "khm._Screen.Fps";
khm__$Screen_Fps.prototype = {
	fps: null
	,frames: null
	,time: null
	,lastTime: null
	,update: function() {
		var deltaTime = kha_Scheduler.realTime() - this.lastTime;
		this.lastTime = kha_Scheduler.realTime();
		this.time += deltaTime;
		if(this.time >= 1) {
			this.fps = this.frames;
			this.frames = 0;
			this.time = 0;
		}
		return this.fps;
	}
	,render: function(screen,g) {
		if(g.get_font() == null) {
			return;
		}
		g.begin(false);
		var _this = g.transformations[g.transformationIndex];
		_this._00 = 1;
		_this._10 = 0;
		_this._20 = 0;
		_this._01 = 0;
		_this._11 = 1;
		_this._21 = 0;
		_this._02 = 0;
		_this._12 = 0;
		_this._22 = 1;
		g.set_color(-1);
		g.set_fontSize(24);
		var w = kha_System.windowWidth();
		var h = kha_System.windowHeight();
		var txt = "" + this.fps + " | " + w + "x" + h + " " + screen.scale + "x";
		g.drawString(txt,w - g.get_font().width(g.get_fontSize(),txt),h - g.get_font().height(g.get_fontSize()));
		g.end();
	}
	,__class__: khm__$Screen_Fps
};
var khm_Screen = function() {
	var _g = [];
	_g.push(new khm_Pointer(0));
	_g.push(new khm_Pointer(1));
	_g.push(new khm_Pointer(2));
	_g.push(new khm_Pointer(3));
	_g.push(new khm_Pointer(4));
	_g.push(new khm_Pointer(5));
	_g.push(new khm_Pointer(6));
	_g.push(new khm_Pointer(7));
	_g.push(new khm_Pointer(8));
	_g.push(new khm_Pointer(9));
	this.pointers = _g;
	this.keys = new haxe_ds_IntMap();
	this.scale = 1.0;
};
$hxClasses["khm.Screen"] = khm_Screen;
khm_Screen.__name__ = "khm.Screen";
khm_Screen.init = function(sets) {
	khm_Screen.isTouch = "ontouchstart" in window;
	if(sets == null) {
		sets = new khm_ScreenSets(null,null,null);
	}
	if(sets.isTouch != null) {
		khm_Screen.isTouch = sets.isTouch;
	}
	khm_Screen.showFps = sets.showFps;
	khm_Screen.defaultScale = sets.defaultScale;
	khm_Screen.defaultScale = khm_Screen.defaultScale;
	kha_input_Gamepad.notifyOnConnect(function(id) {
		if(khm_Screen.gamepads[id]) {
			return;
		}
		khm_Screen.gamepads[id] = true;
		haxe_Log.trace("Gamepad " + id + " connected",{ fileName : "khm/Screen.hx", lineNumber : 123, className : "khm.Screen", methodName : "init"});
		kha_input_Gamepad.get(id).notify(khm_Screen._onGamepadAxis,khm_Screen._onGamepadButton);
		return;
	},function(id1) {
		if(!khm_Screen.gamepads[id1]) {
			return;
		}
		khm_Screen.gamepads[id1] = false;
		haxe_Log.trace("Gamepad " + id1 + " disconnected",{ fileName : "khm/Screen.hx", lineNumber : 128, className : "khm.Screen", methodName : "init"});
		kha_input_Gamepad.get(id1).remove(khm_Screen._onGamepadAxis,khm_Screen._onGamepadButton);
		return;
	});
	var _g = 0;
	while(_g < 4) {
		var id2 = _g++;
		if(khm_Screen.gamepads[id2]) {
			continue;
		}
		var gamepad = kha_input_Gamepad.get(id2);
		if(gamepad == null) {
			continue;
		}
		khm_Screen.gamepads[id2] = true;
		gamepad.notify(khm_Screen._onGamepadAxis,khm_Screen._onGamepadButton);
	}
	khm_Screen.w = kha_System.windowWidth() / khm_Screen.defaultScale | 0;
	khm_Screen.h = kha_System.windowHeight() / khm_Screen.defaultScale | 0;
	khm_Screen.isInited = true;
};
khm_Screen._onGamepadAxis = function(id,value) {
	if(khm_Screen.screen != null) {
		khm_Screen.screen.onGamepadAxis(id,value);
	}
};
khm_Screen._onGamepadButton = function(id,value) {
	if(khm_Screen.screen != null) {
		khm_Screen.screen.onGamepadButton(id,value);
	}
};
khm_Screen.prototype = {
	scale: null
	,keys: null
	,pointers: null
	,show: function() {
		if(!khm_Screen.isInited) {
			khm_Screen.init();
		}
		if(khm_Screen.screen != null) {
			khm_Screen.screen.hide();
		}
		khm_Screen.screen = this;
		this.scale = khm_Screen.defaultScale;
		khm_Screen.taskId = kha_Scheduler.addTimeTask($bind(this,this._onUpdate),0,0.0166666666666666664);
		kha_System.notifyOnFrames($bind(this,this._onRender));
		if(kha_input_Keyboard.get() != null) {
			kha_input_Keyboard.get().notify($bind(this,this._onKeyDown),$bind(this,this._onKeyUp),$bind(this,this.onKeyPress));
		}
		if(khm_Screen.isTouch && kha_input_Surface.get() != null) {
			kha_input_Surface.get().notify($bind(this,this._onTouchDown),$bind(this,this._onTouchUp),$bind(this,this._onTouchMove));
		} else if(kha_input_Mouse.get() != null) {
			kha_input_Mouse.get().notify($bind(this,this._onMouseDown),$bind(this,this._onMouseUp),$bind(this,this._onMouseMove),$bind(this,this.onMouseWheel),$bind(this,this.onMouseLeave));
		}
		var i = this.keys.keys();
		while(i.hasNext()) {
			var i1 = i.next();
			this.keys.h[i1] = false;
		}
		var _g = 0;
		var _g1 = this.pointers;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.isDown = false;
			p.scale = this.scale;
		}
	}
	,hide: function() {
		kha_Scheduler.removeTimeTask(khm_Screen.taskId);
		kha_System.removeFramesListener($bind(this,this._onRender));
		if(kha_input_Keyboard.get() != null) {
			kha_input_Keyboard.get().remove($bind(this,this._onKeyDown),$bind(this,this._onKeyUp),$bind(this,this.onKeyPress));
		}
		if(khm_Screen.isTouch && kha_input_Surface.get() != null) {
			kha_input_Surface.get().remove($bind(this,this._onTouchDown),$bind(this,this._onTouchUp),$bind(this,this._onTouchMove));
		} else if(kha_input_Mouse.get() != null) {
			kha_input_Mouse.get().remove($bind(this,this._onMouseDown),$bind(this,this._onMouseUp),$bind(this,this._onMouseMove),$bind(this,this.onMouseWheel),$bind(this,this.onMouseLeave));
		}
	}
	,_onUpdate: function() {
		if((kha_System.windowWidth() / this.scale | 0) != khm_Screen.w || (kha_System.windowHeight() / this.scale | 0) != khm_Screen.h) {
			khm_Screen.w = kha_System.windowWidth() / this.scale | 0;
			khm_Screen.h = kha_System.windowHeight() / this.scale | 0;
			this.onResize();
		}
		this.onUpdate();
		khm_Screen.fps.update();
	}
	,_onRender: function(framebuffers) {
		khm_Screen.frame = framebuffers[0];
		var g = khm_Screen.frame.get_g2();
		var _this = g.transformations[g.transformationIndex];
		_this._00 = this.scale;
		_this._10 = 0;
		_this._20 = 0;
		_this._01 = 0;
		_this._11 = this.scale;
		_this._21 = 0;
		_this._02 = 0;
		_this._12 = 0;
		_this._22 = 1;
		this.onRender(khm_Screen.frame);
		khm_Screen.fps.frames++;
		if(khm_Screen.showFps) {
			khm_Screen.fps.render(this,g);
		}
		if(khm_Screen.showFps) {
			return;
		}
		var g1 = khm_Screen.frame.get_g2();
		g1.begin(false);
		g1.end();
	}
	,_onKeyDown: function(key) {
		this.keys.h[key] = true;
		this.onKeyDown(key);
	}
	,_onKeyUp: function(key) {
		this.keys.h[key] = false;
		this.onKeyUp(key);
	}
	,_onMouseDown: function(button,x,y) {
		x = x / this.scale | 0;
		y = y / this.scale | 0;
		this.pointers[0].scale = this.scale;
		this.pointers[0].startX = x;
		this.pointers[0].startY = y;
		this.pointers[0].x = x;
		this.pointers[0].y = y;
		this.pointers[0].type = button;
		this.pointers[0].isDown = true;
		this.pointers[0].isActive = true;
		this.pointers[0].isTouch = false;
		this.onMouseDown(this.pointers[0]);
	}
	,_onMouseMove: function(x,y,mx,my) {
		x = x / this.scale | 0;
		y = y / this.scale | 0;
		this.pointers[0].scale = this.scale;
		this.pointers[0].x = x;
		this.pointers[0].y = y;
		this.pointers[0].moveX = mx;
		this.pointers[0].moveY = my;
		this.pointers[0].isActive = true;
		this.onMouseMove(this.pointers[0]);
	}
	,_onMouseUp: function(button,x,y) {
		if(!this.pointers[0].isActive) {
			return;
		}
		x = x / this.scale | 0;
		y = y / this.scale | 0;
		this.pointers[0].scale = this.scale;
		this.pointers[0].x = x;
		this.pointers[0].y = y;
		this.pointers[0].type = button;
		this.pointers[0].isDown = false;
		this.onMouseUp(this.pointers[0]);
	}
	,_onTouchDown: function(id,x,y) {
		if(id > 9) {
			return;
		}
		x = x / this.scale | 0;
		y = y / this.scale | 0;
		this.pointers[id].scale = this.scale;
		this.pointers[id].startX = x;
		this.pointers[id].startY = y;
		this.pointers[id].x = x;
		this.pointers[id].y = y;
		this.pointers[id].isDown = true;
		this.pointers[id].isActive = true;
		this.pointers[id].isTouch = true;
		this.onMouseDown(this.pointers[id]);
	}
	,_onTouchMove: function(id,x,y) {
		if(id > 9) {
			return;
		}
		x = x / this.scale | 0;
		y = y / this.scale | 0;
		this.pointers[id].scale = this.scale;
		this.pointers[id].moveX = x - this.pointers[id].x;
		this.pointers[id].moveY = y - this.pointers[id].y;
		this.pointers[id].x = x;
		this.pointers[id].y = y;
		this.pointers[id].isDown = true;
		this.pointers[id].isActive = true;
		this.onMouseMove(this.pointers[id]);
	}
	,_onTouchUp: function(id,x,y) {
		if(id > 9) {
			return;
		}
		x = x / this.scale | 0;
		y = y / this.scale | 0;
		if(!this.pointers[id].isActive) {
			return;
		}
		this.pointers[id].x = x;
		this.pointers[id].y = y;
		this.pointers[id].isDown = false;
		this.pointers[id].isActive = false;
		this.onMouseUp(this.pointers[id]);
	}
	,onGamepadAxis: function(axis,value) {
		var dz = khm_Screen.gamepadDeadZone;
		if(value < dz && value > -dz) {
			value = 0;
		}
		if(value > 1 - dz) {
			value = 1;
		}
		if(value < -1 + dz) {
			value = -1;
		}
		haxe_Log.trace("onGamepadAxis " + axis + " " + value,{ fileName : "khm/Screen.hx", lineNumber : 326, className : "khm.Screen", methodName : "onGamepadAxis"});
		if(axis == 0) {
			if(value < 0) {
				var key = 37;
				this.keys.h[key] = true;
				this.onKeyDown(key);
			} else if(value > 0) {
				var key1 = 39;
				this.keys.h[key1] = true;
				this.onKeyDown(key1);
			} else {
				var _g = this.keys.h[39];
				if(_g == null ? false : _g) {
					var key2 = 39;
					this.keys.h[key2] = false;
					this.onKeyUp(key2);
				}
				var _g1 = this.keys.h[37];
				if(_g1 == null ? false : _g1) {
					var key3 = 37;
					this.keys.h[key3] = false;
					this.onKeyUp(key3);
				}
			}
		}
		if(axis == 1) {
			if(value < 0) {
				var key4 = 38;
				this.keys.h[key4] = true;
				this.onKeyDown(key4);
			} else if(value > 0) {
				var key5 = 40;
				this.keys.h[key5] = true;
				this.onKeyDown(key5);
			} else {
				var _g2 = this.keys.h[40];
				if(_g2 == null ? false : _g2) {
					var key6 = 40;
					this.keys.h[key6] = false;
					this.onKeyUp(key6);
				}
				var _g3 = this.keys.h[38];
				if(_g3 == null ? false : _g3) {
					var key7 = 38;
					this.keys.h[key7] = false;
					this.onKeyUp(key7);
				}
			}
		}
	}
	,onGamepadButton: function(id,value) {
		var dz = khm_Screen.gamepadDeadZone;
		if(value < dz) {
			value = 0;
		}
		if(value > 1 - dz) {
			value = 1;
		}
		haxe_Log.trace("onGamepadButton " + id + " " + value,{ fileName : "khm/Screen.hx", lineNumber : 349, className : "khm.Screen", methodName : "onGamepadButton"});
		switch(id) {
		case 0:
			if(value > 0) {
				var key = 88;
				this.keys.h[key] = true;
				this.onKeyDown(key);
			} else {
				var key1 = 88;
				this.keys.h[key1] = false;
				this.onKeyUp(key1);
			}
			break;
		case 1:
			if(value > 0) {
				var key2 = 69;
				this.keys.h[key2] = true;
				this.onKeyDown(key2);
			} else {
				var key3 = 69;
				this.keys.h[key3] = false;
				this.onKeyUp(key3);
			}
			break;
		case 2:
			if(value > 0) {
				var key4 = 32;
				this.keys.h[key4] = true;
				this.onKeyDown(key4);
			} else {
				var key5 = 32;
				this.keys.h[key5] = false;
				this.onKeyUp(key5);
			}
			break;
		case 3:
			if(value > 0) {
				var key6 = 81;
				this.keys.h[key6] = true;
				this.onKeyDown(key6);
			} else {
				var key7 = 81;
				this.keys.h[key7] = false;
				this.onKeyUp(key7);
			}
			break;
		case 4:
			break;
		case 5:
			if(value > 0) {
				var key8 = 88;
				this.keys.h[key8] = true;
				this.onKeyDown(key8);
			} else {
				var key9 = 88;
				this.keys.h[key9] = false;
				this.onKeyUp(key9);
			}
			break;
		case 6:
			break;
		case 7:
			if(value > 0) {
				var key10 = 82;
				this.keys.h[key10] = true;
				this.onKeyDown(key10);
			} else {
				var key11 = 82;
				this.keys.h[key11] = false;
				this.onKeyUp(key11);
			}
			break;
		case 8:
			if(value > 0) {
				var key12 = 27;
				this.keys.h[key12] = true;
				this.onKeyDown(key12);
			} else {
				var key13 = 27;
				this.keys.h[key13] = false;
				this.onKeyUp(key13);
			}
			break;
		case 9:
			if(value > 0) {
				var key14 = 13;
				this.keys.h[key14] = true;
				this.onKeyDown(key14);
			} else {
				var key15 = 13;
				this.keys.h[key15] = false;
				this.onKeyUp(key15);
			}
			break;
		case 12:
			this.onGamepadAxis(1,-(value > 0 ? value : 0));
			break;
		case 13:
			this.onGamepadAxis(1,value > 0 ? value : 0);
			break;
		case 14:
			this.onGamepadAxis(0,-(value > 0 ? value : 0));
			break;
		case 15:
			this.onGamepadAxis(0,value > 0 ? value : 0);
			break;
		default:
		}
	}
	,setScale: function(scale) {
		this.setScaleSilent(scale);
		this.onRescale(scale);
		this.onResize();
	}
	,setScaleSilent: function(scale) {
		var _g = 0;
		var _g1 = this.pointers;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			if(p.isActive) {
				p.toGlobalCords(this.scale);
				p.toLocalCords(scale);
				p.scale = scale;
			}
		}
		this.scale = scale;
		khm_Screen.w = kha_System.windowWidth() / scale | 0;
		khm_Screen.h = kha_System.windowHeight() / scale | 0;
	}
	,setGraphicScale: function(g,scale) {
		var _this = g.transformations[g.transformationIndex];
		_this._00 = scale;
		_this._10 = 0;
		_this._20 = 0;
		_this._01 = 0;
		_this._11 = scale;
		_this._21 = 0;
		_this._02 = 0;
		_this._12 = 0;
		_this._22 = 1;
		khm_Screen.w = kha_System.windowWidth() / scale | 0;
		khm_Screen.h = kha_System.windowHeight() / scale | 0;
	}
	,onRescale: function(scale) {
	}
	,onResize: function() {
	}
	,onUpdate: function() {
	}
	,onRender: function(frame) {
	}
	,onKeyDown: function(key) {
	}
	,onKeyUp: function(key) {
	}
	,onKeyPress: function(char) {
	}
	,onMouseDown: function(p) {
	}
	,onMouseMove: function(p) {
	}
	,onMouseUp: function(p) {
	}
	,onMouseWheel: function(delta) {
	}
	,onMouseLeave: function() {
	}
	,__class__: khm_Screen
};
var game_Game = function() {
	this.musicTracksQueue = [-2];
	this.playerCameraPos = { x : 0, y : 0, w : 0, h : 0};
	this.playerCamera = new khm_tilemap_Camera(1);
	this.timeLimit = 0;
	this.timer = new game_Timer();
	this.textHints = [];
	this.clouds = [];
	this.traces = [];
	this.effects = [];
	this.bullets = [];
	this.playerTeam = 1;
	this.levelType = 0;
	this.currentLevel = -1;
	khm_Screen.call(this);
};
$hxClasses["game.Game"] = game_Game;
game_Game.__name__ = "game.Game";
game_Game.__super__ = khm_Screen;
game_Game.prototype = $extend(khm_Screen.prototype,{
	tilemap: null
	,map: null
	,tileset: null
	,currentLevel: null
	,levelType: null
	,ui: null
	,touch: null
	,params: null
	,teams: null
	,teamsGrid: null
	,playerTeam: null
	,debriefing: null
	,hasConditionTrigger: null
	,tanks: null
	,bullets: null
	,artilleries: null
	,rockets: null
	,effects: null
	,traces: null
	,tileSprites: null
	,explosions: null
	,buildings: null
	,triggers: null
	,bases: null
	,palms: null
	,aircrafts: null
	,clouds: null
	,textHints: null
	,timer: null
	,timeLimit: null
	,player: null
	,playerSpawnId: null
	,playerCamera: null
	,playerCameraPos: null
	,isLevelComplete: null
	,isLevelFailed: null
	,save: null
	,init: function() {
		this.tileset = new khm_tilemap_Tileset(kha_Assets.blobs.tiles_json,new game_CustomData());
		this.tileset.setCustomTexture(khm_utils_Atlas.atlas);
		this.tilemap = new khm_tilemap_Tilemap(this.tileset);
		this.save = khm_Settings.read();
		if(this.save.currentSlot == null) {
			Loader.resetDefaultSlot();
		}
		this.ui = new khm_imgui_Imgui(new khm_imgui_ImguiSets(false,null,null));
		this.touch = new game_gui_Touch(this,this.ui,this.tilemap);
		if(khm_Screen.isTouch) {
			this.touch.init();
		}
	}
	,loadPractice: function() {
		this.levelType = 1;
		this.loadMap(game_Practice.genMap(this.tileset));
		this.playMusicTrack(this.params.musicTrack);
		this.onRescale(this.scale);
		this.onResize();
	}
	,lastOnlineMap: null
	,onlineMapId: null
	,loadOnlineMap: function(json,mapId) {
		this.levelType = 2;
		this.lastOnlineMap = json;
		this.onlineMapId = mapId;
		this.currentLevel = 0;
		var _this = this.save.completedOnlineMaps;
		var map = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(map.hasNext()) {
			map.next();
			this.currentLevel++;
		}
		var map1 = OldMap.parse(this.tileset,json);
		if(khm_Lang.iso != "ru" || map1.name == "map name" || map1.name == "Ingenious name.") {
			map1.name = mapId;
		}
		this.loadMap(map1);
		this.onRescale(this.scale);
		this.onResize();
	}
	,newCampaign: function(type) {
		this.save.currentSlot.type = type;
		khm_Settings.write(this.save);
		this.continueCampaign();
	}
	,continueCampaign: function() {
		var type = this.save.currentSlot.type;
		var id = this.save.currentSlot.level;
		this.currentLevel = id;
		this.levelType = 0;
		var stringId = this.getStringId(id);
		if(this.getMapFile(type,stringId) == null) {
			return;
		}
		var json = JSON.parse(this.getMapFile(type,stringId).toString());
		this.loadMap(OldMap.parse(this.tileset,json));
		this.textHints.push(new game_effects_TextHint(this,khm_Lang.get("mission") + " " + (id + 1),120));
		this.onRescale(this.scale);
		this.onResize();
	}
	,restartLevel: function() {
		switch(this.levelType) {
		case 0:
			this.continueCampaign();
			break;
		case 1:
			this.loadPractice();
			break;
		case 2:
			this.loadOnlineMap(this.lastOnlineMap,this.onlineMapId);
			break;
		}
	}
	,getStringId: function(id) {
		var stringId = "" + id;
		var _g = stringId.length;
		while(_g < 3) {
			++_g;
			stringId = "0" + stringId;
		}
		return stringId;
	}
	,loadMap: function(map) {
		this.map = map;
		this.params = map.data;
		this.tilemap.loadJSON(map);
		this.teams = [];
		var total = 0;
		var _g = 0;
		var _g1 = this.params.teamCounts[0];
		while(_g < _g1.length) total += _g1[_g++];
		this.teams[0] = { onField : 0, onBase : total};
		var total1 = 0;
		var _g2 = 0;
		var _g11 = this.params.teamCounts[1];
		while(_g2 < _g11.length) total1 += _g11[_g2++];
		this.teams[1] = { onField : 0, onBase : total1};
		var total2 = 0;
		var _g3 = 0;
		var _g12 = this.params.teamCounts[2];
		while(_g3 < _g12.length) total2 += _g12[_g3++];
		this.teams[2] = { onField : 0, onBase : total2};
		var total3 = 0;
		var _g4 = 0;
		var _g13 = this.params.teamCounts[3];
		while(_g4 < _g13.length) total3 += _g13[_g4++];
		this.teams[3] = { onField : 0, onBase : total3};
		while(this.bullets.length > 0) this.bullets[0].remove();
		this.artilleries = [];
		this.rockets = [];
		while(this.effects.length > 0) this.effects[0].remove();
		while(this.traces.length > 0) this.traces[0].remove();
		this.tileSprites = [];
		this.explosions = [];
		this.buildings = [];
		this.hasConditionTrigger = false;
		this.triggers = [];
		this.bases = [];
		this.palms = [];
		this.aircrafts = [];
		while(this.clouds.length > 0) this.clouds[0].remove();
		this.clearTextHints();
		var _g5 = [];
		var _g14 = 0;
		var _g21 = this.tilemap.map.h;
		while(_g14 < _g21) {
			++_g14;
			var _g15 = [];
			var _g22 = 0;
			var _g31 = this.tilemap.map.w;
			while(_g22 < _g31) {
				++_g22;
				_g15.push(-1);
			}
			_g5.push(_g15);
		}
		this.teamsGrid = _g5;
		this.tanks = [];
		var _g32 = 0;
		var _g41 = this.tilemap.map.objects;
		while(_g32 < _g41.length) {
			var obj = _g41[_g32];
			++_g32;
			switch(obj.type) {
			case "base":
				this.bases.push(new game_Base(this,this.tilemap,new game_BaseSets(obj.x,obj.y,obj.data.team,obj.data.count,obj.data.aiType,obj.data.isActive)));
				break;
			case "palm":
				var tmp = this.palms;
				var tmp1 = this.tilemap;
				var _g51 = obj.x;
				var _g42 = obj.y;
				var _g33 = Std.random(3);
				tmp.push(new game_effects_Palm(this,tmp1,new game_SpriteSets(_g51,_g42,kha_Assets.images.palms,null,_g33,null,3 + Std.random(2),null,null,null)));
				break;
			case "radar":
				this.buildings.push(new game_Building(this,this.tilemap,new game_BuildingSets(obj.x,obj.y,game_BuildingType.Radar,obj.data.team,obj.data.hp)));
				break;
			case "reactor":
				this.buildings.push(new game_Building(this,this.tilemap,new game_BuildingSets(obj.x,obj.y,game_BuildingType.Reactor,obj.data.team,obj.data.hp)));
				break;
			case "trigger":
				this.triggers.push(new game_Trigger(this,this.tilemap,new game_TriggerSets(obj.x,obj.y,obj.data.type,obj.data.delay,obj.data.sensetivity,obj.data.state)));
				var _g34 = obj.data.type;
				if(_g34._hx_index == 13) {
					if(_g34.hasCondition) {
						this.hasConditionTrigger = true;
					}
				}
				break;
			case "turret":
				var sets = new game_TankSets(obj.x,obj.y,null,null,null,null,null,null,null,null,null,null,null);
				this.tanks.push(new game_Turret(this,this.tilemap,new game_TurretSets(obj.data.type,obj.data.distance,obj.data.isStatic,3,obj.data.groundHeight,sets.bulletType,4,sets.reloadDelay + 10,sets.speed,sets.shieldHp,sets.hp,obj.data.dir,sets.type,obj.data.team,obj.y,obj.x)));
				break;
			default:
				var type;
				switch(obj.type) {
				case "coin":
					type = 31;
					break;
				case "freeze":
					type = 28;
					break;
				case "life":
					type = 27;
					break;
				case "repair":
					type = 29;
					break;
				case "speedup":
					type = 26;
					break;
				case "star":
					type = 30;
					break;
				default:
					type = 0;
				}
				this.tileSprites.push(new game_TileSprite(this,this.tilemap,new game_TileSpriteSets(obj.x,obj.y,type,0,null,2,6,true)));
			}
		}
		this.isLevelComplete = false;
		this.isLevelFailed = false;
		this.debriefing = null;
		this.timer.time = 0;
		var tmp2;
		switch(this.params.winCondition) {
		case 7:
			tmp2 = 120;
			break;
		case 8:
			tmp2 = 180;
			break;
		case 9:
			tmp2 = 300;
			break;
		case 10:
			tmp2 = 420;
			break;
		case 20:
			tmp2 = 40;
			break;
		case 21:
			tmp2 = 60;
			break;
		case 22:
			tmp2 = 120;
			break;
		case 23:
			tmp2 = 180;
			break;
		case 24:
			tmp2 = 300;
			break;
		case 29:
			tmp2 = 50;
			break;
		case 30:
			tmp2 = 60;
			break;
		case 31:
			tmp2 = 120;
			break;
		case 32:
			tmp2 = 180;
			break;
		case 35:
			tmp2 = 60;
			break;
		case 36:
			tmp2 = 120;
			break;
		case 37:
			tmp2 = 180;
			break;
		case 38:
			tmp2 = 90;
			break;
		case 50:
			tmp2 = 60;
			break;
		case 51:
			tmp2 = 120;
			break;
		case 52:
			tmp2 = 180;
			break;
		case 53:
			tmp2 = 300;
			break;
		case 54:
			tmp2 = 420;
			break;
		default:
			tmp2 = -1;
		}
		this.timeLimit = 1 + tmp2;
		this.playerSpawnId = -1;
		var base = this.getPlayerSpawn(false);
		this.player = new game_Player(this,this.tilemap,new game_TankSets(base.x,base.y,null,null,null,null,null,null,null,null,null,null,null));
		this.addPlayer(this.player,true);
		var slot;
		switch(this.levelType) {
		case 0:
			slot = this.save.currentSlot;
			break;
		case 1:
			slot = game_Practice.slot;
			break;
		case 2:
			slot = this.save.onlineSlot;
			break;
		}
		this.player.loadFrom(slot);
		switch(this.levelType) {
		case 0:
			break;
		case 1:
			return;
		case 2:
			if(khm_Lang.iso != "ru") {
				map.briefing = "";
				map.debriefing = "Mission '" + map.name + "' completed.";
			} else {
				map.briefing += "~~";
			}
			var mission = khm_Lang.get("missionType" + this.params.winCondition);
			map.briefing += "^A " + khm_Lang.get("task") + ": " + mission;
			break;
		}
		var briefing = new game_gui_Briefing();
		briefing.init(this,map.briefing,this.currentLevel,map.name);
		briefing.show();
		briefing.onResize();
		switch(this.levelType) {
		case 0:
			break;
		case 1:
			break;
		case 2:
			break;
		}
	}
	,getPlayerSpawn: function(isRespawn) {
		var spawnMode = this.params.playerSpawnMode;
		var wantClosest = spawnMode >= 128;
		if(wantClosest) {
			spawnMode -= 128;
		}
		var playerBases = 0;
		var _g = 0;
		var _g1 = this.bases;
		while(_g < _g1.length) if(_g1[_g++].team == this.playerTeam) {
			++playerBases;
		}
		var spawnId = 0;
		if(spawnMode == 0 || spawnMode == 6) {
			spawnId = Std.random(playerBases);
		} else {
			spawnId = spawnMode - 1;
		}
		if(this.playerSpawnId != -1) {
			spawnId = this.playerSpawnId;
		} else if(spawnMode == 6) {
			this.playerSpawnId = spawnId;
		}
		if(isRespawn && wantClosest) {
			var min = Infinity;
			var playerBaseId = 0;
			var _g2 = 0;
			var _g3 = this.bases;
			while(_g2 < _g3.length) {
				var base = _g3[_g2];
				++_g2;
				if(base.team != this.playerTeam) {
					continue;
				}
				var dist = Math.abs(this.player.cell.x - base.x) + Math.abs(this.player.cell.y - base.y) | 0;
				if(min > dist) {
					min = dist;
					spawnId = playerBaseId;
				}
				++playerBaseId;
			}
		}
		var playerBaseId1 = 0;
		var _g21 = 0;
		var _g31 = this.bases;
		while(_g21 < _g31.length) {
			var base1 = _g31[_g21];
			++_g21;
			if(base1.team != this.playerTeam) {
				continue;
			}
			if(playerBaseId1 != spawnId) {
				++playerBaseId1;
				continue;
			}
			return base1;
		}
		throw new js__$Boot_HaxeError("player spawn not found (" + spawnId + ", " + playerBaseId1 + ")");
	}
	,getMapFile: function(type,id) {
		var folder;
		switch(type) {
		case 0:
			folder = "maps";
			break;
		case 1:
			folder = "maps2";
			break;
		}
		return kha_Assets.blobs.get("" + folder + "_" + khm_Lang.iso + "_" + Std.string(id) + "_json");
	}
	,openDebriefing: function() {
		switch(this.levelType) {
		case 0:
			break;
		case 1:
			Loader.showInterstitial();
			var menu = new game_gui_Menu();
			menu.show();
			menu.init();
			menu.setMenu(2);
			return;
		case 2:
			break;
		}
		if(this.levelType == 0) {
			if(this.getMapFile(this.save.currentSlot.type,this.getStringId(this.currentLevel + 1)) == null) {
				var about = new game_gui_About();
				about.show();
				about.init();
				return;
			}
		}
		if(this.params.disableDebriefing) {
			switch(this.levelType) {
			case 0:
				this.writeCampaignSave(true);
				this.continueCampaign();
				break;
			case 1:
				break;
			case 2:
				this.writeOnlineSave();
				var menu1 = new game_gui_Menu();
				menu1.show();
				menu1.init();
				menu1.setMenu(12);
				break;
			}
			return;
		}
		switch(this.levelType) {
		case 0:
			this.writeCampaignSave(false);
			break;
		case 1:
			break;
		case 2:
			this.writeOnlineSave();
			break;
		}
		if(this.debriefing == null) {
			this.debriefing = new game_gui_Briefing();
			this.debriefing.show();
			this.debriefing.init(this,this.map.debriefing,this.currentLevel,null,true);
		} else {
			this.debriefing.show();
			this.debriefing.onResize();
		}
	}
	,writeCampaignSave: function(copyToNextSlot) {
		var nextLevel = this.currentLevel + 1;
		if(this.getMapFile(this.save.currentSlot.type,this.getStringId(nextLevel)) == null) {
			return;
		}
		var slot = this.save.currentSlot;
		this.player.saveTo(slot);
		slot.level = nextLevel;
		if(copyToNextSlot) {
			this.save.slots.unshift(slot);
			if(this.save.slots.length > 20) {
				this.save.slots.pop();
			}
		}
		this.save.trasnparentGui = game_Game.trasnparentGui;
		khm_Settings.write(this.save);
	}
	,writeOnlineSave: function() {
		var k = this.onlineMapId;
		var _this = this.save.completedOnlineMaps;
		if(__map_reserved[k] != null) {
			_this.setReserved(k,true);
		} else {
			_this.h[k] = true;
		}
		this.player.saveTo(this.save.onlineSlot);
		this.save.trasnparentGui = game_Game.trasnparentGui;
		khm_Settings.write(this.save);
	}
	,onKeyDown: function(key) {
		if(this.ui.onKeyDown(key)) {
			return;
		}
		if(khm_utils_ScreenTools.onRescaleKeys(this,key)) {
			return;
		}
		if(this.player.aimMode.isActive) {
			this.player.aimMode.update();
		} else if(this.player.radar.isActive) {
			this.player.radar.update();
		} else if(this.player.inventory.isOpen) {
			this.player.inventory.update();
		} else {
			this.player.updateControl();
		}
		if(key == 27 || key == 1) {
			this.showPauseMenu();
		}
		var _g = this.keys.h[key];
		if(!(_g == null ? false : _g)) {
			return;
		}
		if(this.isLevelComplete) {
			if(key == 13) {
				this.openDebriefing();
			}
		} else if(this.isLevelFailed && key == 13) {
			this.restartLevel();
		}
		if(key == 82 && this.canOpenShop()) {
			if(game_gui_Shop.canFastRepair(this.player)) {
				game_gui_Shop.fastRepair(this.player);
			}
		}
		if(key == 69 && this.canOpenShop()) {
			var shop = new game_gui_Shop();
			shop.show();
			shop.init(this,this.player);
		}
	}
	,musicTracksQueue: null
	,playMusicTrack: function(id) {
		if(!Music.isEnabled) {
			return;
		}
		Music.stop();
		if(this.musicTracksQueue[0] == id) {
			var name = this.getMusicTrackName(id);
			Music.play(kha_Assets.sounds.get(name),true);
			return;
		}
		this.musicTracksQueue.push(id);
		if(this.musicTracksQueue.length == 2) {
			this.loadNextMusicTrack();
		}
	}
	,loadNextMusicTrack: function() {
		var _gthis = this;
		var name = this.getMusicTrackName(this.musicTracksQueue[1]);
		kha_Assets.loadSound(name,function(sound) {
			var prev = _gthis.musicTracksQueue.shift();
			if(prev != -2) {
				var prevName = _gthis.getMusicTrackName(prev);
				kha_Assets.sounds.get(prevName).unload();
			}
			if(_gthis.musicTracksQueue.length == 1) {
				Music.play(kha_Assets.sounds.get(name),true);
			} else {
				var latest = _gthis.musicTracksQueue.pop();
				_gthis.musicTracksQueue.length = 1;
				_gthis.musicTracksQueue.push(latest);
				_gthis.loadNextMusicTrack();
			}
			return;
		},null,{ fileName : "game/Game.hx", lineNumber : 703, className : "game.Game", methodName : "loadNextMusicTrack"});
	}
	,getMusicTrackName: function(id) {
		switch(id) {
		case -2:
			throw new js__$Boot_HaxeError("bad track id: " + id);
		case -1:
			return "music_final";
		default:
			return "music_track" + id;
		}
	}
	,showPauseMenu: function() {
		var menu = new game_gui_Menu();
		menu.show();
		menu.init(this);
	}
	,onKeyUp: function(key) {
		if(this.ui.onKeyUp(key)) {
			return;
		}
	}
	,getTank: function(x,y) {
		var _g = 0;
		var _g1 = this.tanks;
		while(_g < _g1.length) {
			var tank = _g1[_g];
			++_g;
			if(tank.isInCell(x,y)) {
				return tank;
			}
		}
		return null;
	}
	,getBuilding: function(x,y) {
		var _g = 0;
		var _g1 = this.buildings;
		while(_g < _g1.length) {
			var building = _g1[_g];
			++_g;
			if(building.isInCell(x,y)) {
				return building;
			}
		}
		return null;
	}
	,getBoxItem: function(x,y) {
		var _g = 0;
		var _g1 = this.params.boxesContent;
		while(_g < _g1.length) {
			var box = _g1[_g];
			++_g;
			if(box.x == x && box.y == y) {
				return box.item;
			}
		}
		return null;
	}
	,playerDistVolume: function(tx,ty) {
		var volume = (20 - (Math.abs(this.player.cell.x - tx) + Math.abs(this.player.cell.y - ty) | 0)) / 20;
		if(volume < 0) {
			volume = 0;
		}
		if(volume > 1) {
			volume = 1;
		}
		return volume;
	}
	,getEnemyRadar: function(myTeam) {
		var _g = 0;
		var _g1 = this.buildings;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			var tmp;
			if(b.type == game_BuildingType.Radar) {
				var toTeam = b.team;
				tmp = toTeam > -1 && myTeam != toTeam;
			} else {
				tmp = false;
			}
			if(tmp) {
				return b;
			}
		}
		return null;
	}
	,getBlueFlag: function(x,y) {
		var _g = 0;
		var _g1 = this.params.blueFlags;
		while(_g < _g1.length) {
			var flag = _g1[_g];
			++_g;
			if(flag.x == x && flag.y == y) {
				return flag;
			}
		}
		return null;
	}
	,onMouseDown: function(p) {
		if(this.touch.onDown(p)) {
			return;
		}
		if(this.ui.onPointerDown(p)) {
			return;
		}
		if(this.player.aimMode.isActive) {
			return;
		}
		if(this.player.inventory.isOpen) {
			return;
		}
		if(this.player.radar.isActive) {
			this.player.radar.isActive = false;
			return;
		}
	}
	,onMouseUp: function(p) {
		if(this.touch.onUp(p)) {
			return;
		}
		if(this.ui.onPointerUp(p)) {
			return;
		}
	}
	,onMouseMove: function(p) {
		if(this.touch.onMove(p)) {
			return;
		}
		if(this.ui.onPointerMove(p)) {
			return;
		}
	}
	,onResize: function() {
		this.tilemap.camera.set_w(khm_Screen.w);
		this.tilemap.camera.set_h(khm_Screen.h);
		this.playerCamera.set_w(khm_Screen.w);
		this.playerCamera.set_h(khm_Screen.h);
		this.tilemap.camera.center(this.tilemap,this.playerCameraPos);
		if(khm_Screen.isTouch) {
			this.touch.resize();
		}
	}
	,onRescale: function(scale) {
		this.playerCamera.scale = scale;
		this.tilemap.set_scale(scale);
		khm_Screen.defaultScale = scale;
	}
	,canOpenShop: function() {
		if(!(this.player.isAlive || this.player.lives > 0)) {
			return false;
		}
		return this.tilemap.getTile(1,this.player.cell.x,this.player.cell.y)._id == 34;
	}
	,addPlayer: function(tank,isFirstSpawn) {
		this.player = tank;
		this.playerCameraPos.x = this.player.x;
		this.playerCameraPos.y = this.player.y;
		this.playerCameraPos.w = this.tilemap.tileset.tileSize;
		this.playerCameraPos.h = this.tilemap.tileset.tileSize;
		this.playerCamera.smooth = true;
		this.playerCamera.center(this.tilemap,this.playerCameraPos);
		if(isFirstSpawn) {
			this.tilemap.camera.center(this.tilemap,this.playerCameraPos);
		}
		this.tanks.push(tank);
		this.teams[tank.team].onField++;
	}
	,addPlayerMoney: function(count) {
		this.player.stats.exp += count / 3 | 0;
		this.player.money += count / this.moneyDownCoef() | 0;
	}
	,moneyDownCoef: function() {
		if(this.player.money < 100) {
			return 0.75;
		} else if(this.player.money < 300) {
			return 0.85;
		} else if(this.player.money < 500) {
			return 0.9;
		} else if(this.player.money < 1000) {
			return 1.0;
		} else if(this.player.money < 1500) {
			return 1.1;
		} else if(this.player.money < 2300) {
			return 1.2;
		} else if(this.player.money < 3000) {
			return 1.8;
		} else if(this.player.money < 4500) {
			return 1.1;
		} else if(this.player.money < 7000) {
			return 2.5;
		} else if(this.player.money < 10000) {
			return 3;
		} else if(this.player.money < 15000) {
			return 3.5;
		} else if(this.player.money < 20000) {
			return 4;
		} else {
			return 5;
		}
	}
	,addTank: function(tank) {
		this.tanks.push(tank);
		this.teams[tank.team].onBase--;
		this.teams[tank.team].onField++;
	}
	,addExplosion: function(expl) {
		expl.playSound();
		this.explosions.push(expl);
	}
	,createBullet: function(tank) {
		this.bullets.push(game_Bullet.make(this,this.tilemap,tank,tank.bulletType));
	}
	,removeBullet: function(bullet) {
		HxOverrides.remove(this.bullets,bullet);
	}
	,removeTank: function(tank) {
		if(tank.type != "turret") {
			this.teams[tank.team].onField--;
		}
		this.tilemap.camera.shake(10 * this.playerDistVolume(tank.cell.x,tank.cell.y),20);
		HxOverrides.remove(this.tanks,tank);
	}
	,removeBuilding: function(building) {
		HxOverrides.remove(this.buildings,building);
	}
	,removeExplosion: function(explosion) {
		HxOverrides.remove(this.explosions,explosion);
	}
	,damageWall: function(x,y,dmg,withSound) {
		if(withSound == null) {
			withSound = true;
		}
		if(dmg <= 0) {
			return dmg;
		}
		var id = this.tilemap.getTile(1,x,y)._id;
		var volume = this.playerDistVolume(x,y);
		if(id > 0 && id < 9) {
			var newId = id + dmg * 2;
			dmg += Math.ceil(id / 2) - 5;
			if(newId > 8) {
				newId = 0;
				this.tilemap.camera.shake(5 * volume,10);
				if(withSound) {
					new Sound(Std.random(2) == 0 ? kha_Assets.sounds.sounds_explosion_small01 : kha_Assets.sounds.sounds_explosion_small02,false).play(volume);
				}
				this.addBigExplosion((x + 0.5) * this.tilemap.tileset.tileSize,(y + 0.5) * this.tilemap.tileset.tileSize);
			} else if(withSound) {
				new Sound(Std.random(2) == 0 ? kha_Assets.sounds.sounds_hit_wall_def01 : kha_Assets.sounds.sounds_hit_wall_def02,false).play(volume);
			}
			this.tilemap.setTileId(1,x,y,newId);
			return dmg;
		}
		if(id > 13 && id < 19) {
			if(withSound) {
				new Sound(kha_Assets.sounds.sounds_hit_bush,false).play(volume);
			}
			this.addBigExplosion((x + 0.5) * this.tilemap.tileset.tileSize,(y + 0.5) * this.tilemap.tileset.tileSize);
			this.tilemap.setTileId(1,x,y,0);
			return dmg - 1;
		}
		if(withSound) {
			var sound;
			switch(id) {
			case 9:case 10:case 11:
				sound = kha_Assets.sounds.sounds_hit_wall_concrete;
				break;
			case 12:case 13:
				sound = kha_Assets.sounds.sounds_hit_metal_rico;
				break;
			default:
				sound = null;
			}
			if(sound != null) {
				new Sound(sound,false).play(volume);
			}
		}
		return 0;
	}
	,damageBg: function(x,y) {
		var bg = this.tilemap.getTile(0,x,y)._id;
		if(bg >= 1 && bg <= 6) {
			bg = 53 + Std.random(3);
		} else if(bg >= 19 && bg <= 23) {
			bg = 53 + Std.random(3);
		} else if(bg >= 40 && bg <= 47) {
			bg = 53 + Std.random(3);
		} else if(bg >= 53 && bg <= 55) {
			bg = 53 + Std.random(3);
		} else if(bg >= 34 && bg <= 39) {
			bg = 50 + Std.random(3);
		} else if(bg >= 48 && bg <= 49) {
			bg = 80 + Std.random(3);
		} else if(bg >= 50 && bg <= 52) {
			bg = this.pickBgCrater(x,y);
		} else if(bg >= 56 && bg <= 60) {
			bg = 80 + Std.random(3);
		}
		this.tilemap.setTileId(0,x,y,bg);
	}
	,pickBgCrater: function(x,y) {
		var _g = 1;
		while(_g < 10) {
			var i = _g++;
			var _g1 = 0;
			while(_g1 < 8) {
				var rx = x;
				var ry = y;
				switch(_g1++) {
				case 0:
					ry = y + i;
					break;
				case 1:
					rx = x - i;
					break;
				case 2:
					ry = y - i;
					break;
				case 3:
					rx = x + i;
					break;
				case 4:
					ry = y + i;
					rx = x - i;
					break;
				case 5:
					rx = x - i;
					ry = y - i;
					break;
				case 6:
					rx = x + i;
					ry = y - i;
					break;
				case 7:
					ry = y + i;
					rx = x + i;
					break;
				}
				var _this = this.tilemap;
				if(rx > -1 && ry > -1 && rx < _this.map.w && ry < _this.map.h) {
					var idx = this.tilemap.getTile(0,rx,ry)._id;
					if(idx >= 1 && idx <= 6 || idx >= 19 && idx <= 23 || idx >= 40 && idx <= 47 || idx >= 53 && idx <= 55) {
						return 53 + Std.random(3);
					} else if(idx >= 56 && idx <= 60 || idx >= 80 && idx < 83 || idx >= 60 && idx <= 90) {
						return 80 + Std.random(3);
					}
				}
			}
		}
		return 53 + Std.random(3);
	}
	,damageTank: function(tank,bullet) {
		if(bullet.damage == 0) {
			return;
		}
		tank.damage(bullet.damage,false);
		tank.attackedSide(bullet.dir);
		if(!tank.isAlive) {
			return;
		}
		if(bullet.parent == this.player) {
			this.player.tankTarget = tank;
			this.player.buildingTarget = null;
		}
		if(this.player == tank) {
			this.player.tankTarget = bullet.parent;
			this.player.buildingTarget = null;
		}
	}
	,damageTankExpl: function(tank,dmg) {
		tank.damage(dmg,true);
	}
	,damageTankMine: function(tank,dmg) {
		tank.damage(dmg,false);
	}
	,damageBuilding: function(building,dmg,parent) {
		if(dmg == 0) {
			return;
		}
		building.damage(dmg);
		this.afterBuildingDamage(building);
		if(!building.isAlive) {
			return;
		}
		if(parent == this.player) {
			this.player.buildingTarget = building;
			this.player.tankTarget = null;
		}
	}
	,damageBuildingExpl: function(building,dmg) {
		if(dmg == 0) {
			return;
		}
		building.damage(dmg);
		this.afterBuildingDamage(building);
	}
	,afterBuildingDamage: function(building) {
		if(!building.isAlive) {
			this.tilemap.camera.shake(10 * this.playerDistVolume(building.cell.x,building.cell.y),20);
		}
	}
	,addBulletExplosion: function(bullet) {
		var tmp = this.effects;
		var tilemap = this.tilemap;
		var _g1 = bullet.x + bullet.w / 2;
		var _g = bullet.y + bullet.h / 2;
		var image = bullet.getBulletExplSprite();
		var _this = game_Sprite.pool;
		var sprite = _this.pool.length == 0 ? _this.allocFunc() : _this.pool.pop();
		sprite.x = _g1;
		sprite.y = _g;
		sprite.image = image;
		sprite.start = 0;
		sprite.current = -1;
		sprite.end = -1;
		sprite.length = -1;
		sprite.delay = sprite.frameDelay = 1;
		sprite.isReversed = false;
		sprite.afterInit(this,tilemap,true);
		tmp.push(sprite);
	}
	,addSmallExplosion: function(x,y) {
		var tmp = this.effects;
		var tilemap = this.tilemap;
		var image = kha_Assets.images.expl_small;
		var _this = game_Sprite.pool;
		var sprite = _this.pool.length == 0 ? _this.allocFunc() : _this.pool.pop();
		sprite.x = x;
		sprite.y = y;
		sprite.image = image;
		sprite.start = 0;
		sprite.current = -1;
		sprite.end = -1;
		sprite.length = -1;
		sprite.delay = sprite.frameDelay = 1;
		sprite.isReversed = false;
		sprite.afterInit(this,tilemap,true);
		tmp.push(sprite);
	}
	,addBigExplosion: function(x,y) {
		if(Std.random(2) == 0) {
			this.damageBg(x / this.tilemap.tileset.tileSize | 0,y / this.tilemap.tileset.tileSize | 0);
		}
		var tmp = this.effects;
		var tilemap = this.tilemap;
		var image = kha_Assets.images.expl_big;
		var _this = game_effects_ExplEffect.pool;
		var sprite = _this.pool.length == 0 ? _this.allocFunc() : _this.pool.pop();
		var image1 = kha_Assets.images.overlay;
		sprite.overlayTime = 20;
		sprite.overlayFrame = 0;
		sprite.overlayColor = -24576;
		sprite.overlayX = x - image1.get_width() / 2;
		sprite.overlayY = y - image1.get_height() / 2;
		sprite.x = x;
		sprite.y = y;
		sprite.image = image;
		sprite.start = 0;
		sprite.current = -1;
		sprite.end = -1;
		sprite.length = -1;
		sprite.delay = sprite.frameDelay = 1;
		sprite.isReversed = false;
		sprite.afterInit(this,tilemap,true);
		tmp.push(sprite);
	}
	,addTraceEffect: function(sprite) {
		this.traces.push(sprite);
	}
	,removeTraceEffect: function(sprite) {
		HxOverrides.remove(this.traces,sprite);
	}
	,addSprite: function(sprite) {
		this.effects.push(sprite);
	}
	,removeSprite: function(sprite) {
		HxOverrides.remove(this.effects,sprite);
	}
	,removeTileSprite: function(sprite) {
		HxOverrides.remove(this.tileSprites,sprite);
	}
	,removeBonus: function(layer,x,y) {
		var _g = 0;
		var _g1 = this.tileSprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite.x != x || sprite.y != y) {
				continue;
			}
			this.tilemap.setTileId(1,x,y,0);
			this.removeTileSprite(sprite);
			break;
		}
	}
	,addDynamite: function(x,y,type,time) {
		this.tilemap.setTileId(1,x,y,25);
		this.tileSprites.push(new game_effects_Dynamite(this,this.tilemap,new game_TileSpriteSets(x,y,25,0,null,1,6,null),type,time));
	}
	,addArtillery: function(x,y,dir,dist,radius,power,speed) {
		this.artilleries.push(new game_effects_Artillery(this,this.tilemap,x,y,dir,dist,radius,power,speed));
	}
	,removeArtillery: function(art) {
		HxOverrides.remove(this.artilleries,art);
	}
	,addRocket: function(x,y,dir) {
		var rocket = new game_effects_Rocket(this,this.tilemap,x,y,dir);
		this.rockets.push(rocket);
		return rocket;
	}
	,removeRocket: function(rocket) {
		HxOverrides.remove(this.rockets,rocket);
	}
	,addAllyTank: function(player,inv,id) {
		var base = this.getPlayerSpawn(true);
		if(this.teamsGrid[base.y][base.x] != -1) {
			return null;
		}
		this.teams[player.team].onField++;
		var hp;
		switch(id) {
		case 26:
			hp = 15;
			break;
		case 27:
			hp = 25;
			break;
		default:
			hp = 8;
		}
		var bot = new game_Bot(this,this.tilemap,new game_TankSets(base.x,base.y,player.team,id == 27 ? "heavy" : "light",null,hp,null,4,60,3,0,null,null));
		bot.setAiType(game_BotAiType.FollowPlayer);
		bot.setInventory(inv);
		bot.iconType = id;
		this.tanks.push(bot);
		return bot;
	}
	,addTextHint: function(text,time) {
		this.textHints.push(new game_effects_TextHint(this,text,time));
	}
	,removeTextHint: function(hint) {
		HxOverrides.remove(this.textHints,hint);
	}
	,clearTextHints: function() {
		this.textHints.length = 0;
	}
	,callAirSupport: function(x,y,radius,power,bombs) {
		if(bombs == null) {
			bombs = 5;
		}
		this.aircrafts.push(new game_effects_Aircraft(this,this.tilemap,new game_effects_AircraftSets(x,y,radius,power,bombs)));
	}
	,removeAircraft: function(aircraft) {
		HxOverrides.remove(this.aircrafts,aircraft);
	}
	,removeCloud: function(cloud) {
		HxOverrides.remove(this.clouds,cloud);
	}
	,respawnPlayer: function() {
		if(this.params.winCondition == 66) {
			this.levelComplete();
			return;
		}
		if(this.params.oneLifeMode) {
			this.levelFailed();
			return;
		}
		if(this.player.lives == 0) {
			return;
		}
		var base = this.getPlayerSpawn(true);
		if(this.teamsGrid[base.y][base.x] != -1) {
			return;
		}
		this.player.respawn(base.x,base.y);
		this.addPlayer(this.player,false);
	}
	,onUpdate: function() {
		Sound.updateAll();
		if(this.player.aimMode.isActive) {
			this.player.aimMode.update();
			var _g1 = this.textHints;
			while(0 < _g1.length) {
				_g1[0].update();
				break;
			}
			return;
		}
		if(this.player.inventory.isOpen) {
			this.player.inventory.update();
			this.updateCamera();
			return;
		}
		if(this.player.radar.isActive) {
			this.player.radar.update();
			return;
		}
		if(!this.player.isAlive) {
			this.respawnPlayer();
		}
		this.checkWinCondition();
		this.updateBases();
		if(this.player.isTimeFrozen()) {
			var _g = 0;
			var _g11 = this.tanks;
			while(_g < _g11.length) {
				var tank = _g11[_g];
				++_g;
				if(tank.team == this.player.team || tank.level == 7) {
					tank.update();
				}
			}
			var _g2 = 0;
			var _g3 = this.bullets;
			while(_g2 < _g3.length) {
				var bullet = _g3[_g2];
				++_g2;
				if(bullet.parent.team != this.player.team && bullet.parent.level != 7) {
					continue;
				}
				bullet.update(this,this.bullets,this.tanks,this.buildings);
			}
		} else {
			var _g4 = 0;
			var _g12 = this.tanks;
			while(_g4 < _g12.length) _g12[_g4++].update();
			var _g21 = 0;
			var _g31 = this.bullets;
			while(_g21 < _g31.length) _g31[_g21++].update(this,this.bullets,this.tanks,this.buildings);
		}
		var _g5 = 0;
		var _g13 = this.artilleries;
		while(_g5 < _g13.length) _g13[_g5++].update();
		var _g22 = 0;
		var _g32 = this.rockets;
		while(_g22 < _g32.length) _g32[_g22++].update();
		var _g41 = 0;
		var _g51 = this.buildings;
		while(_g41 < _g51.length) _g51[_g41++].update();
		var _g6 = 0;
		var _g7 = this.traces;
		while(_g6 < _g7.length) _g7[_g6++].update();
		var _g8 = 0;
		var _g9 = this.effects;
		while(_g8 < _g9.length) _g9[_g8++].update();
		var _g10 = 0;
		var _g111 = this.tileSprites;
		while(_g10 < _g111.length) _g111[_g10++].update();
		var _g121 = 0;
		var _g131 = this.triggers;
		while(_g121 < _g131.length) _g131[_g121++].update(this.triggers,this.bullets,this.tanks);
		var _g14 = 0;
		var _g15 = this.explosions;
		while(_g14 < _g15.length) _g15[_g14++].update(this.bullets,this.tanks,this.buildings,this.triggers);
		var _g17 = this.textHints;
		while(0 < _g17.length) {
			_g17[0].update();
			break;
		}
		var _g18 = 0;
		var _g19 = this.aircrafts;
		while(_g18 < _g19.length) _g19[_g18++].update();
		this.updateClouds();
		if(!this.isLevelComplete) {
			this.timer.time += 0.0166666666666666664;
		}
		this.updateCamera();
	}
	,updateClouds: function() {
		if(!game_Game.cloudsEnabled) {
			while(this.clouds.length > 0) this.clouds[0].remove();
			return;
		}
		if(this.params.disableClouds) {
			return;
		}
		var _g = 0;
		var _g1 = this.clouds;
		while(_g < _g1.length) _g1[_g++].update();
		if(this.clouds.length > 4) {
			return;
		}
		if(Std.random(800 * this.clouds.length) != 0) {
			return;
		}
		var maxX = khm_Screen.w;
		var maxY = khm_Screen.h;
		var camY = this.tilemap.camera.get_y();
		var camX = this.tilemap.camera.get_x();
		var tmp = this.clouds;
		var tilemap = this.tilemap;
		var _g4 = Std.random(maxX * 1.25 | 0) - (maxX * 0.25 | 0) - camX;
		var _g2 = kha_Assets.images.clouds;
		var start = Std.random(3) * 2;
		if(start == null) {
			start = 0;
		}
		var sets_start = 0;
		sets_start = start;
		var _this = game_effects_Cloud.pool;
		var sprite = _this.pool.length == 0 ? _this.allocFunc() : _this.pool.pop();
		sprite.x = _g4;
		sprite.y = maxY - camY;
		sprite.image = _g2;
		sprite.start = sets_start;
		sprite.current = -1;
		sprite.end = -1;
		sprite.length = 6;
		sprite.delay = sprite.frameDelay = 1;
		sprite.isReversed = false;
		sprite.afterInit(this,tilemap,false);
		tmp.push(sprite);
	}
	,updateCamera: function() {
		var off = Math.min(khm_Screen.w,khm_Screen.h) / 5 | 0;
		if(this.player.rocket != null) {
			var rocket = this.player.rocket;
			this.playerCameraPos.x = rocket.x + rocket.dir.x * off;
			this.playerCameraPos.y = rocket.y + rocket.dir.y * off;
		} else {
			this.playerCameraPos.x = this.player.x + this.player.dir.x * off;
			this.playerCameraPos.y = this.player.y + this.player.dir.y * off;
		}
		var prevCameraW = this.playerCamera.get_w();
		var prevCameraH = this.playerCamera.get_h();
		if(khm_Screen.isTouch) {
			var _g = this.playerCamera;
			_g.set_h(_g.get_h() - this.touch.getOffsetY());
			var playerX = (this.player.x + this.tilemap.camera.get_x()) * this.scale;
			var size = game_gui_Touch.buttonSize * 3;
			if(!game_gui_Touch.isReversed ? playerX < size : playerX + this.tilemap.tileset.tileSize > kha_System.windowWidth() - size) {
				var _g1 = this.playerCamera;
				_g1.set_h(_g1.get_h() - this.touch.getOffsetY());
			}
			if(!game_gui_Touch.isReversed) {
				var _g2 = this.playerCamera;
				_g2.set_x(_g2.get_x() - this.touch.getOffsetY());
			}
			var _g3 = this.playerCamera;
			_g3.set_w(_g3.get_w() - this.touch.getOffsetY());
		}
		this.playerCamera.center(this.tilemap,this.playerCameraPos);
		if(khm_Screen.isTouch) {
			if(!game_gui_Touch.isReversed) {
				var _g4 = this.playerCamera;
				_g4.set_x(_g4.get_x() + this.touch.getOffsetY());
			}
			this.playerCamera.set_w(prevCameraW);
			this.playerCamera.set_h(prevCameraH);
		}
		var camera = this.tilemap.camera;
		camera.smooth = true;
		camera.set_x(camera.get_x() + (this.playerCamera.get_x() - camera.get_x()) / 40);
		camera.set_y(camera.get_y() + (this.playerCamera.get_y() - camera.get_y()) / 40);
		camera.update();
		camera.smooth = false;
	}
	,updateBases: function() {
		if(this.params.enemySpawnOrdered) {
			var max = this.bases.length;
			var minId = 0;
			var min = max;
			var _g = 0;
			var _g1 = this.params.enemySpawnOrder.length;
			while(_g < _g1) {
				var i = _g++;
				var id = this.params.enemySpawnOrder[i];
				if(id > 0 && id < min) {
					min = id;
					minId = i;
				}
			}
			if(min == max) {
				this.params.enemySpawnOrdered = false;
				return;
			}
			var redBaseId = 0;
			var _g2 = 0;
			var _g3 = this.bases;
			while(_g2 < _g3.length) {
				var base = _g3[_g2];
				++_g2;
				if(base.team == 2) {
					if(redBaseId == minId) {
						base.update();
						if(base.count == 0) {
							this.params.enemySpawnOrder[redBaseId] = 0;
						}
					}
					++redBaseId;
				} else {
					base.update();
				}
			}
		} else {
			var _g4 = 0;
			var _g11 = this.bases;
			while(_g4 < _g11.length) _g11[_g4++].update();
		}
	}
	,getAllyCount: function(team) {
		var total = 0;
		var _g = 0;
		var _g1 = this.teams.length;
		while(_g < _g1) {
			var i = _g++;
			if(i != team) {
				continue;
			}
			total += this.teams[i].onBase + this.teams[i].onField;
		}
		if(!this.player.isAlive && this.player.lives >= 0) {
			++total;
		}
		return total;
	}
	,getEnemyCount: function(team) {
		var total = 0;
		var _g = 0;
		var _g1 = this.teams.length;
		while(_g < _g1) {
			var i = _g++;
			if(i == team) {
				continue;
			}
			total += this.teams[i].onBase + this.teams[i].onField;
		}
		return total;
	}
	,getAllyTurretsCount: function(team) {
		var total = 0;
		var _g = 0;
		var _g1 = this.tanks;
		while(_g < _g1.length) {
			var tank = _g1[_g];
			++_g;
			if(tank.team != team || tank.type != "turret") {
				continue;
			}
			++total;
		}
		return total;
	}
	,getEnemyTurretsCount: function(team) {
		var total = 0;
		var _g = 0;
		var _g1 = this.tanks;
		while(_g < _g1.length) {
			var tank = _g1[_g];
			++_g;
			if(tank.team == team || tank.type != "turret") {
				continue;
			}
			++total;
		}
		return total;
	}
	,isRadarAlive: function() {
		var _g = 0;
		var _g1 = this.buildings;
		while(_g < _g1.length) {
			var building = _g1[_g];
			++_g;
			if(building.type == game_BuildingType.Radar && building.team == this.player.team) {
				return true;
			}
		}
		return false;
	}
	,triggerLevelComplete: function() {
		this.hasConditionTrigger = false;
		this.checkWinCondition();
		this.hasConditionTrigger = true;
		return this.isLevelComplete;
	}
	,checkWinCondition: function() {
		if(!(this.player.isAlive || this.player.lives > 0)) {
			this.levelFailed();
		}
		if(this.isLevelFailed || this.isLevelComplete) {
			return;
		}
		switch(this.params.winCondition) {
		case 1:
			if(this.getEnemyCount(this.player.team) > 0) {
				return;
			}
			this.levelComplete();
			break;
		case 2:
			if(this.tilemap.getTile(1,this.player.cell.x,this.player.cell.y)._id == 37) {
				this.levelComplete();
			}
			break;
		case 3:
			if(!this.player.hasRedFlag) {
				return;
			}
			if(this.tilemap.getTile(1,this.player.cell.x,this.player.cell.y)._id == 34) {
				this.player.hasRedFlag = false;
				this.levelComplete();
			}
			break;
		case 4:case 5:
			if(this.getEnemyCount(this.player.team) > 0) {
				return;
			}
			if(this.tilemap.getTile(1,this.player.cell.x,this.player.cell.y)._id == 37) {
				this.levelComplete();
			}
			break;
		case 6:
			if(this.player.blueFlagCount == this.params.blueFlagCount) {
				this.levelComplete();
			}
			break;
		case 7:case 8:case 9:case 10:
			if(this.getEnemyCount(this.player.team) == 0 || this.timeLimit - this.timer.time < 0) {
				this.levelComplete();
			}
			break;
		case 11:
			if(this.getEnemyCount(this.player.team) > 0) {
				return;
			}
			this.levelComplete();
			break;
		case 12:case 13:case 14:
			if(this.getAllyCount(this.player.team) <= this.params.winCondition - 11) {
				this.levelFailed();
				return;
			}
			if(this.getEnemyCount(this.player.team) > 0) {
				return;
			}
			this.levelComplete();
			break;
		case 15:case 16:case 17:
			if(this.getAllyCount(this.player.team) <= this.params.winCondition - 14) {
				this.levelFailed();
				return;
			}
			if(this.getEnemyCount(this.player.team) > 0) {
				return;
			}
			if(this.tilemap.getTile(1,this.player.cell.x,this.player.cell.y)._id == 37) {
				this.levelComplete();
			}
			break;
		case 20:case 21:case 22:case 23:case 24:
			if(this.getEnemyCount(this.player.team) == 0 || this.timeLimit - this.timer.time < 0) {
				this.levelComplete();
			}
			break;
		case 29:case 30:case 31:case 32:
			if(this.timeLimit - this.timer.time < 0) {
				this.levelFailed();
				return;
			}
			if(this.getEnemyCount(this.player.team) > 0) {
				return;
			}
			this.levelComplete();
			break;
		case 35:case 36:case 37:case 38:
			if(this.timeLimit - this.timer.time < 0) {
				this.levelFailed();
				return;
			}
			if(this.player.blueFlagCount == this.params.blueFlagCount) {
				this.levelComplete();
			}
			break;
		case 50:case 51:case 52:case 53:case 54:
			if(!this.isRadarAlive()) {
				this.levelFailed();
				return;
			}
			if(this.getEnemyCount(this.player.team) == 0 || this.timeLimit - this.timer.time < 0) {
				this.levelComplete();
			}
			break;
		case 55:
			if(!this.isRadarAlive()) {
				this.levelFailed();
				return;
			}
			if(this.getEnemyCount(this.player.team) > 0) {
				return;
			}
			this.levelComplete();
			break;
		case 56:case 57:
			var isComplete = true;
			var type = this.params.winCondition == 56 ? game_BuildingType.Radar : game_BuildingType.Reactor;
			var _g = 0;
			var _g1 = this.buildings;
			while(_g < _g1.length) {
				var building = _g1[_g];
				++_g;
				var tmp;
				if(building.type == type) {
					var toTeam = building.team;
					tmp = toTeam > -1 && this.player.team != toTeam;
				} else {
					tmp = false;
				}
				if(tmp) {
					isComplete = false;
					break;
				}
			}
			if(isComplete) {
				this.levelComplete();
			}
			break;
		case 58:
			var isComplete1 = true;
			var _g2 = 0;
			var _g11 = this.buildings;
			while(_g2 < _g11.length) {
				var toTeam1 = _g11[_g2++].team;
				if(toTeam1 > -1 && this.player.team != toTeam1) {
					isComplete1 = false;
					break;
				}
			}
			if(isComplete1) {
				this.levelComplete();
			}
			break;
		case 59:
			if(this.getEnemyTurretsCount(this.player.team) > 0) {
				return;
			}
			this.levelComplete();
			break;
		case 60:
			if(this.getEnemyCount(this.player.team) > 0) {
				return;
			}
			if(this.getEnemyTurretsCount(this.player.team) > 0) {
				return;
			}
			this.levelComplete();
			break;
		case 66:
			if(this.getEnemyCount(this.player.team) > 0) {
				return;
			}
			this.levelComplete();
			break;
		default:
		}
	}
	,levelFailed: function() {
		if(this.isLevelFailed || this.isLevelComplete) {
			return;
		}
		this.isLevelFailed = true;
		Music.play(kha_Assets.sounds.get("music_defeat"));
	}
	,levelComplete: function() {
		if(this.hasConditionTrigger) {
			return;
		}
		if(this.isLevelFailed || this.isLevelComplete) {
			return;
		}
		this.isLevelComplete = true;
		this.textHints.push(new game_effects_TextHint(this,khm_Lang.get("missionCompletedHint"),120));
		if(this.params.musicTrack == -1) {
			return;
		}
		Music.play(kha_Assets.sounds.get("music_victory"));
	}
	,onRender: function(canvas) {
		var g = canvas.get_g2();
		g.begin();
		g.set_font(kha_Assets.fonts.RobotoCondensed_Regular);
		g.set_color(-1);
		this.tilemap.drawLayer(g,0);
		game_effects_Border.drawBorders(g,this.tilemap);
		var _g = 0;
		var _g1 = this.tanks;
		while(_g < _g1.length) _g1[_g++].renderCircle(g);
		var _g2 = 0;
		var _g3 = this.tileSprites;
		while(_g2 < _g3.length) _g3[_g2++].render(g);
		var _g4 = 0;
		var _g5 = this.bases;
		while(_g4 < _g5.length) _g5[_g4++].render(g);
		var _g6 = 0;
		var _g7 = this.buildings;
		while(_g6 < _g7.length) _g7[_g6++].renderOverlay(g);
		this.tilemap.drawLayer(g,1);
		var _g8 = 0;
		var _g9 = this.traces;
		while(_g8 < _g9.length) _g9[_g8++].render(g);
		var _g10 = 0;
		var _g11 = this.buildings;
		while(_g10 < _g11.length) _g11[_g10++].render(g);
		var _g12 = 0;
		var _g13 = this.tanks;
		while(_g12 < _g13.length) {
			var tank = _g13[_g12];
			++_g12;
			tank.render(g);
			tank.renderHp(g);
		}
		var _g14 = 0;
		var _g15 = this.bullets;
		while(_g14 < _g15.length) _g15[_g14++].render(g);
		var _g16 = 0;
		var _g17 = this.effects;
		while(_g16 < _g17.length) _g17[_g16++].render(g);
		var _g18 = 0;
		var _g19 = this.rockets;
		while(_g18 < _g19.length) _g19[_g18++].render(g);
		var _g20 = 0;
		var _g21 = this.artilleries;
		while(_g20 < _g21.length) _g21[_g20++].render(g);
		var _g22 = 0;
		var _g23 = this.palms;
		while(_g22 < _g23.length) _g23[_g22++].render(g);
		var _g24 = 0;
		var _g25 = this.aircrafts;
		while(_g24 < _g25.length) _g25[_g24++].render(g);
		var _g26 = 0;
		var _g27 = this.clouds;
		while(_g26 < _g27.length) _g27[_g26++].render(g);
		var _this = this.player;
		if(_this.aimMode.isActive) {
			_this.aimMode.render(g);
		}
		var _g29 = this.textHints;
		while(0 < _g29.length) {
			_g29[0].render(g);
			break;
		}
		this.ui.begin(g);
		if(game_Game.smoothingEnabled) {
			g.set_imageScaleQuality(1);
		}
		this.player.renderHud(g,this.ui);
		this.timerPanel(g);
		if(this.isLevelComplete) {
			this.winOverlay(g);
		} else if(this.isLevelFailed) {
			this.loseOverlay(g);
		}
		if(!this.isLevelFailed) {
			this.touch.render(g);
		}
		if(game_Game.smoothingEnabled) {
			g.set_imageScaleQuality(0);
		}
		var _this1 = this.player;
		if(_this1.radar.isActive) {
			_this1.radar.render(g);
		}
		this.ui.end();
		g.end();
		this.ui.executeCallbacks();
	}
	,timerPanel: function(g) {
		if(this.timeLimit == 0) {
			return;
		}
		this.setGraphicScale(g,game_gui_Touch.buttonSize / 50);
		var offX = 5;
		var y = khm_Screen.h - 20 - 5;
		game_gui_Ui.drawScaledIcon(g,39,5,y - 8,20,20);
		offX = 25;
		var time = this.timeLimit - this.timer.time;
		if(time < 0) {
			time = 0;
		}
		var minutes = time / 60 | 0;
		game_gui_Text.drawNumber(g,0,minutes,25,y);
		offX = 25 + (game_gui_Text.numbersWidth("" + minutes) - 2);
		game_gui_Text.drawSymbol(g,0,":",offX,y);
		offX += 8;
		var secs = time % 60 | 0;
		if(secs < 10) {
			game_gui_Text.drawNumber(g,0,0,offX,y);
			offX += 8;
		}
		game_gui_Text.drawNumber(g,0,secs,offX,y);
		this.setGraphicScale(g,this.scale);
	}
	,winOverlay: function(g) {
		this.setGraphicScale(g,Math.ceil(game_gui_Touch.buttonSize / 50));
		g.set_color(1610612736);
		khm_utils_Atlas.drawScaledSubImage(g,kha_Assets.images.gui_pixel,1,1,1,1,0,khm_Screen.h - 25,khm_Screen.w,25);
		g.set_color(-1);
		var s = khm_Lang.get("missionCompletedEnter");
		if(khm_Screen.isTouch) {
			s = khm_Lang.get("missionCompletedTouch");
		}
		var x = khm_Screen.w / 2 - game_gui_Text.width(s) / 2 + 10. | 0;
		game_gui_Ui.drawScaledIcon(g,31,x - 20,khm_Screen.h - 10. - 12.5 - 1 | 0,20,20);
		var line = kha_Assets.images.gui_horiz_line;
		khm_utils_Atlas.drawScaledImage(g,line,khm_Screen.w / 4,khm_Screen.h - 25,khm_Screen.w / 2,line.get_height());
		game_gui_Text.drawString(g,s,x,khm_Screen.h - 12.5 - game_gui_Text.height(s) / 2 - 2 | 0,khm_Screen.w);
		if(game_gui_Widgets.rect(this.ui,0,khm_Screen.h - 25,khm_Screen.w,25)) {
			this.openDebriefing();
			return;
		}
		this.setGraphicScale(g,this.scale);
	}
	,loseOverlay: function(g) {
		this.setGraphicScale(g,Math.ceil(game_gui_Touch.buttonSize / 50));
		g.set_color(1610612736);
		khm_utils_Atlas.drawScaledSubImage(g,kha_Assets.images.gui_pixel,1,1,1,1,0,0,khm_Screen.w,khm_Screen.h);
		g.set_color(-65536);
		var s = khm_Lang.get("missionFailed") + " " + khm_Lang.get("tryAgain");
		var textH = game_gui_Text.height(s);
		var x = khm_Screen.w / 2 - game_gui_Text.width(s) / 2;
		var y = khm_Screen.h / 2 - textH * 2;
		if(y < 0) {
			y = 0;
		}
		game_gui_Text.drawString(g,s,x,y,khm_Screen.w);
		this.setGraphicScale(g,1);
		var size = game_gui_Touch.buttonSize;
		var x1 = khm_Screen.w / 2 - size * 2 | 0;
		var y1 = khm_Screen.h / 2 - textH | 0;
		if(x1 < 0) {
			x1 = 0;
		}
		if(y1 > khm_Screen.h - size) {
			y1 = khm_Screen.h - size;
		}
		if(game_gui_Widgets.atlasScaledButton(this.ui,kha_Assets.images.gui_ts_ok,x1,y1,size,size)) {
			this.setGraphicScale(g,this.scale);
			this.restartLevel();
			return;
		}
		var x2 = khm_Screen.w / 2 + size | 0;
		if(x2 > khm_Screen.w - size) {
			x2 = khm_Screen.w - size;
		}
		if(game_gui_Widgets.atlasScaledButton(this.ui,kha_Assets.images.gui_ts_cancel,x2,y1,size,size)) {
			var menu = new game_gui_Menu();
			menu.show();
			menu.init();
			return;
		}
		this.setGraphicScale(g,this.scale);
	}
	,__class__: game_Game
});
var game_Player = function(game1,tilemap,sets) {
	this.freezeTime = 0;
	this.invulnerableTime = 0;
	this.hudOffset = 8;
	this.hasRedFlag = false;
	this.blueFlagCount = 0;
	this.stars = 0;
	this.money = 0;
	this.lives = 2;
	this.allys = [];
	this.armor = 0;
	this.tempArmor = 0;
	this.exChassis = false;
	this.inventory = new game_gui_Inventory(game1,this);
	this.aimMode = new game_gui_AimMode(game1,tilemap,this);
	this.radar = new game_effects_Radar(game1,tilemap);
	this.keys = game1.keys;
	game_Tank.call(this,game1,tilemap,sets);
};
$hxClasses["game.Player"] = game_Player;
game_Player.__name__ = "game.Player";
game_Player.__super__ = game_Tank;
game_Player.prototype = $extend(game_Tank.prototype,{
	rocket: null
	,exChassis: null
	,tempArmor: null
	,armor: null
	,allys: null
	,tankTarget: null
	,buildingTarget: null
	,stats: null
	,research: null
	,lives: null
	,money: null
	,stars: null
	,blueFlagCount: null
	,hasRedFlag: null
	,keys: null
	,hudOffset: null
	,invulnerableTime: null
	,freezeTime: null
	,inventory: null
	,aimMode: null
	,radar: null
	,afterUpdate: function() {
		if(this.freezeTime > 0) {
			this.freezeTime--;
		}
		if(this.invulnerableTime > 0) {
			this.invulnerableTime--;
		}
		this.updateControl();
	}
	,fireCompleted: function() {
		this.inventory.removeCurrentItem();
		this.stats.shots++;
		if(this.research.shellResearch > 5) {
			this.reloadDelay -= 2 * (this.research.shellResearch - 5);
		}
		var item = this.inventory.getItem();
		if(item == null) {
			return;
		}
		switch(item.id) {
		case 0:case 1:case 2:case 3:case 4:case 5:case 7:
			break;
		default:
			this.keys.h[32] = false;
			this.keys.h[90] = false;
		}
	}
	,updateControl: function() {
		if(!this.isAlive) {
			return;
		}
		if(this.rocket != null) {
			if(this.keys.h[87] || this.keys.h[38]) {
				this.rocket.setNextDir(0,-1);
			}
			if(this.keys.h[65] || this.keys.h[37]) {
				this.rocket.setNextDir(-1,0);
			}
			if(this.keys.h[83] || this.keys.h[40]) {
				this.rocket.setNextDir(0,1);
			}
			if(this.keys.h[68] || this.keys.h[39]) {
				this.rocket.setNextDir(1,0);
			}
			if(this.keys.h[32] || this.keys.h[90]) {
				this.rocket.explode();
				this.keys.h[32] = false;
				this.keys.h[90] = false;
			}
			if(!this.rocket.isAlive) {
				this.rocket = null;
			}
			return;
		}
		if(this.keys.h[81]) {
			if(this.inventory.isOpen) {
				this.inventory.close();
			} else {
				this.inventory.open();
			}
			this.aimMode.isActive = false;
			this.keys.h[81] = false;
		}
		if(this.keys.h[16] || this.keys.h[88]) {
			if(this.keys.h[87] || this.keys.h[38]) {
				this.setDirection(0,-1);
			}
			if(this.keys.h[65] || this.keys.h[37]) {
				this.setDirection(-1,0);
			}
			if(this.keys.h[83] || this.keys.h[40]) {
				this.setDirection(0,1);
			}
			if(this.keys.h[68] || this.keys.h[39]) {
				this.setDirection(1,0);
			}
			this.reverseMove();
		}
		if(this.keys.h[87] || this.keys.h[38]) {
			this.move(0,-1);
		}
		if(this.keys.h[65] || this.keys.h[37]) {
			this.move(-1,0);
		}
		if(this.keys.h[83] || this.keys.h[40]) {
			this.move(0,1);
		}
		if(this.keys.h[68] || this.keys.h[39]) {
			this.move(1,0);
		}
		if(this.keys.h[32] || this.keys.h[90]) {
			var item = this.inventory.getItem();
			if(item != null) {
				this.useItem(item);
			}
		}
	}
	,useItem: function(item) {
		var id = item.id;
		switch(id) {
		case 0:case 1:case 2:case 3:case 4:case 5:case 7:
			this.bulletType = game__$Bullet_BulletType_$Impl_$.fromIcon(id);
			this.fire();
			break;
		case 6:
			if(this.reloadDelay > 0) {
				return;
			}
			var dist = this.getArtilleryDist();
			var radius = this.getArtilleryRadius();
			var power = this.getArtilleryPower();
			var speed;
			switch(this.research.artilleryResearch) {
			case 4:case 5:
				speed = 5;
				break;
			default:
				speed = 2;
			}
			this.game.addArtillery(this.x,this.y,this.dir,dist,radius,power,speed);
			this.inventory.removeCurrentItem();
			this.reloadDelay = this.maxReloadDelay * 1.5 | 0;
			break;
		case 8:
			this.rocket = this.game.addRocket(this.x,this.y,this.dir);
			this.inventory.removeCurrentItem();
			this.keys.h[32] = false;
			this.keys.h[90] = false;
			break;
		case 9:
			this.aimMode.enable(9);
			this.keys.h[32] = false;
			this.keys.h[90] = false;
			break;
		case 10:case 11:
			var cell = this.getClosestCell();
			if(this.tilemap.getTile(1,cell.x,cell.y)._id != 0) {
				return;
			}
			new Sound(kha_Assets.sounds.sounds_fx_mine_deploy,false).play(1);
			this.tilemap.setTileId(1,cell.x,cell.y,id == 10 ? 23 : 24);
			this.inventory.removeCurrentItem();
			this.keys.h[32] = false;
			this.keys.h[90] = false;
			break;
		case 12:case 13:case 14:
			var cell1 = this.getClosestCell();
			if(this.tilemap.getTile(1,cell1.x,cell1.y)._id != 0) {
				return;
			}
			new Sound(kha_Assets.sounds.sounds_fx_mine_deploy,false).play(1);
			var power1;
			switch(id) {
			case 13:
				power1 = 1;
				break;
			case 14:
				power1 = 2;
				break;
			default:
				power1 = 0;
			}
			this.game.addDynamite(cell1.x,cell1.y,power1,180);
			this.inventory.removeCurrentItem();
			this.keys.h[32] = false;
			this.keys.h[90] = false;
			break;
		case 15:
			if(this.game.params.disableFreeze) {
				return;
			}
			this.useBonus(28);
			this.afterBonusUsed();
			break;
		case 17:
			this.useSpeedUpBonus(2700);
			this.afterBonusUsed();
			break;
		case 19:
			this.useRepairItem();
			break;
		case 20:
			while(this.maxShieldHp < this.getItemLimit(id)) {
				var item1 = this.inventory.getItem();
				if(item1 == null || item1.id != id) {
					break;
				}
				this.maxShieldHp++;
				this.inventory.removeCurrentItem();
			}
			this.inventory.currentId = 0;
			this.keys.h[32] = false;
			this.keys.h[90] = false;
			break;
		case 21:
			while(this.tempArmor < this.getItemLimit(id)) {
				var item2 = this.inventory.getItem();
				if(item2 == null || item2.id != id) {
					break;
				}
				this.addTempArmor(1);
				this.inventory.removeCurrentItem();
			}
			this.inventory.currentId = 0;
			this.keys.h[32] = false;
			this.keys.h[90] = false;
			break;
		case 23:
			this.radar.isActive = true;
			this.keys.h[32] = false;
			this.keys.h[90] = false;
			break;
		case 25:case 26:case 27:
			var tank = this.game.addAllyTank(this,this.inventory,id);
			if(tank == null) {
				return;
			}
			this.allys.push(tank);
			this.inventory.removeCurrentItem();
			this.keys.h[32] = false;
			this.keys.h[90] = false;
			break;
		default:
		}
	}
	,getArtilleryDist: function() {
		switch(this.research.artilleryResearch) {
		case 3:case 4:case 5:
			return 5;
		default:
			return 4;
		}
	}
	,getArtilleryRadius: function() {
		if(this.research.artilleryResearch == 5) {
			return 4;
		} else {
			return 3;
		}
	}
	,getArtilleryPower: function() {
		switch(this.research.artilleryResearch) {
		case 2:case 3:
			return 11;
		case 4:
			return 14;
		case 5:
			return 17;
		default:
			return 9;
		}
	}
	,getItemLimit: function(item) {
		switch(item) {
		case 2:case 3:
			if(this.exChassis) {
				return 99;
			} else {
				return 40;
			}
			break;
		case 4:case 5:
			if(this.exChassis) {
				return 99;
			} else {
				return 10;
			}
			break;
		case 20:
			if(this.research.powerFieldResearch == 4) {
				return 7;
			} else {
				return 5;
			}
			break;
		case 21:case 22:
			if(this.research.armorResearch == 3) {
				return 5;
			} else {
				return 4;
			}
			break;
		default:
			return 99;
		}
	}
	,getAllyDamageCount: function() {
		var count = 0;
		var _g = 0;
		var _g1 = this.allys;
		while(_g < _g1.length) {
			var tank = _g1[_g];
			++_g;
			if(!tank.isAlive) {
				continue;
			}
			count += tank.maxHp - tank.hp;
		}
		return count;
	}
	,repairAllys: function() {
		var _g = 0;
		var _g1 = this.allys;
		while(_g < _g1.length) _g1[_g++].useBonus(29);
	}
	,useRepairItem: function() {
		if(this.game.teams[this.team].onField == 1 && this.game.getAllyTurretsCount(this.team) == 0) {
			if(this.hp == this.maxHp) {
				return;
			}
			this.useBonus(29);
			this.afterBonusUsed();
			return;
		}
		this.aimMode.enable(19);
		this.keys.h[32] = false;
		this.keys.h[90] = false;
	}
	,useAimModeItem: function(x,y,id) {
		var _gthis = this;
		switch(id) {
		case 9:
			this.game.callAirSupport(x,y,this.getAirSupportRadius(),this.getAirSupportPower(),this.getAirSupportBombs());
			this.inventory.removeCurrentItem();
			this.aimMode.isActive = false;
			break;
		case 19:
			var cancelText = khm_Lang.get("repairCancel");
			var tank = this.game.getTank(x,y);
			if(tank == null) {
				var building = this.game.getBuilding(x,y);
				if(building == null) {
					_gthis.game.clearTextHints();
					_gthis.game.addTextHint("" + khm_Lang.get("targetNotSelected") + " " + cancelText,120);
					return;
				}
				if(building.team != this.team) {
					_gthis.game.clearTextHints();
					_gthis.game.addTextHint("" + khm_Lang.get("enemyRepairNotPossible") + " " + cancelText,120);
					return;
				}
				if(building.hp == building.maxHp) {
					_gthis.game.clearTextHints();
					_gthis.game.addTextHint("" + khm_Lang.get("targetNotDamaged") + " " + cancelText,120);
					return;
				}
				building.restore();
				this.inventory.removeCurrentItem();
				this.aimMode.isActive = false;
				return;
			}
			if(tank.team != this.team) {
				_gthis.game.clearTextHints();
				_gthis.game.addTextHint("" + khm_Lang.get("enemyRepairNotPossible") + " " + cancelText,120);
				return;
			}
			if(tank.hp == tank.maxHp) {
				_gthis.game.clearTextHints();
				_gthis.game.addTextHint("" + khm_Lang.get("targetNotDamaged") + " " + cancelText,120);
				return;
			}
			tank.useBonus(29);
			this.inventory.removeCurrentItem();
			this.aimMode.isActive = false;
			break;
		default:
		}
	}
	,getAirSupportRadius: function() {
		switch(this.research.airRaidResearch) {
		case 2:case 3:
			return 4;
		default:
			return 3;
		}
	}
	,getAirSupportPower: function() {
		switch(this.research.airRaidResearch) {
		case 2:
			return 18;
		case 3:
			return 21;
		default:
			return 11;
		}
	}
	,getAirSupportBombs: function() {
		if(this.research.airRaidResearch == 3) {
			return 7;
		} else {
			return 5;
		}
	}
	,move: function(dirX,dirY) {
		if(dirX == this.dir.x && this.dir.y == dirY) {
			this.moveOverAllyTank(this.cell.x + dirX,this.cell.y + dirY);
		}
		var currNextCell = this.nextCell;
		game_Tank.prototype.move.call(this,dirX,dirY);
		if(currNextCell != this.nextCell) {
			this.stats.mileage++;
			Crashlytics.setInt("playerX",this.nextCellRef.x);
			Crashlytics.setInt("playerY",this.nextCellRef.y);
		}
	}
	,reverseMove: function() {
		this.moveOverAllyTank(this.cell.x - this.dir.x,this.cell.y - this.dir.y);
		var currNextCell = this.nextCell;
		game_Tank.prototype.reverseMove.call(this);
		if(currNextCell != this.nextCell) {
			this.stats.mileage++;
			Crashlytics.setInt("playerX",this.nextCellRef.x);
			Crashlytics.setInt("playerY",this.nextCellRef.y);
		}
	}
	,moveOverAllyTank: function(x,y) {
		if(this.state != game_TankState.Standing) {
			return;
		}
		var tmp;
		var _this = this.tilemap;
		if(x > -1 && y > -1 && x < _this.map.w && y < _this.map.h) {
			var toTeam = this.team;
			tmp = toTeam < -1 || this.game.teamsGrid[y][x] == toTeam;
		} else {
			tmp = false;
		}
		if(tmp) {
			var tank = this.game.getTank(x,y);
			if(tank != null) {
				tank.moveOver(this.cell.x,this.cell.y);
			}
		}
	}
	,getRegenDelay: function() {
		var add = 0.0;
		if(this.research != null) {
			switch(this.research.powerFieldResearch) {
			case 2:
				add = this.maxHp / 5;
				break;
			case 3:
				add = this.maxHp / 3;
				break;
			case 4:
				add = this.maxHp / 2;
				break;
			default:
				add = 0;
			}
		}
		if(this.hp + add > this.maxHp) {
			add = this.maxHp - this.hp;
		}
		return (30 + (this.maxShieldHp - this.shieldHp) * 25) * this.maxHp / (this.hp + add) * 3 | 0;
	}
	,afterBonusUsed: function() {
		this.inventory.removeCurrentItem();
		this.inventory.currentId = 0;
		this.keys.h[32] = false;
		this.keys.h[90] = false;
	}
	,getClosestCell: function() {
		if(Math.abs(this.cell.x * this.tilemap.tileset.tileSize - this.x) < this.tilemap.tileset.tileSize / 2 && Math.abs(this.cell.y * this.tilemap.tileset.tileSize - this.y) < this.tilemap.tileset.tileSize / 2) {
			return this.cell;
		}
		return this.nextCell;
	}
	,addTempArmor: function(count) {
		this.tempArmor += count;
		this.maxHp += count;
		this.hp += count;
	}
	,setArmor: function(count) {
		this.maxHp += count - this.armor;
		this.hp += count - this.armor;
		this.armor = count;
	}
	,setExChassis: function(exChassis) {
		this.exChassis = exChassis;
		if(exChassis) {
			this.maxHp += 2;
			this.hp += 2;
			this.type = "heavy";
			this.image = kha_Assets.images.get("tanks_" + this.type);
		}
	}
	,damage: function(dmg,isExpl) {
		if(this.invulnerableTime > 0) {
			return;
		}
		if(game_Game.vibrationEnabled) {
			kha_System.vibrate(30);
		}
		this.tilemap.camera.shake(6,10);
		this.stats.damage += dmg;
		game_Tank.prototype.damage.call(this,dmg,false);
	}
	,death: function() {
		if(this.tempArmor > 0) {
			this.tempArmor--;
			this.maxHp--;
			this.hp--;
		}
		if(this.hasRedFlag) {
			this.lostRedFlag();
		}
		game_Tank.prototype.death.call(this);
	}
	,lostRedFlag: function() {
		var cell = this.getClosestCell();
		if(this.tilemap.getTile(1,cell.x,cell.y)._id != 0) {
			return;
		}
		this.tilemap.setTileId(1,cell.x,cell.y,39);
		this.game.addTextHint(khm_Lang.get("flagLost"),120);
		this.hasRedFlag = false;
	}
	,respawn: function(tx,ty) {
		if(this.state != game_TankState.Rotating) {
			this.state = game_TankState.Standing;
		}
		this.isAlive = true;
		this.nextCell = null;
		this.cell.x = tx;
		this.cell.y = ty;
		this.x = this.cell.x * this.tilemap.tileset.tileSize;
		this.y = this.cell.y * this.tilemap.tileset.tileSize;
		this.game.teamsGrid[this.cell.y][this.cell.x] = this.team;
		this.maxShieldHp = 0;
		this.shieldHp = 0;
		this.useBonus(29);
		this.lives--;
		this.invulnerableTime = 300;
	}
	,getCellItem: function() {
		switch(this.tilemap.getTile(1,this.cell.x,this.cell.y)._id) {
		case 27:
			new Sound(kha_Assets.sounds.sounds_fx_powerup_get_star,false).play(1);
			this.lives++;
			this.game.removeBonus(1,this.cell.x,this.cell.y);
			break;
		case 28:
			this.useFreezeBonus(1800);
			this.game.removeBonus(1,this.cell.x,this.cell.y);
			break;
		case 30:
			new Sound(kha_Assets.sounds.sounds_fx_powerup_get_star,false).play(1);
			this.stars++;
			this.game.removeBonus(1,this.cell.x,this.cell.y);
			break;
		case 31:
			new Sound(kha_Assets.sounds.sounds_fx_powerup_get_star,false).play(1);
			this.game.addPlayerMoney(35);
			this.game.removeBonus(1,this.cell.x,this.cell.y);
			break;
		case 32:case 33:
			new Sound(kha_Assets.sounds.sounds_fx_powerup_pickup,false).play(1);
			var item = this.game.getBoxItem(this.cell.x,this.cell.y);
			this.tilemap.setTileId(1,this.cell.x,this.cell.y,0);
			if(item == null) {
				return;
			}
			this.game.clearTextHints();
			switch(item.id) {
			case -2:
				this.game.addTextHint(khm_Lang.get("trapBox"),120);
				this.game.addDynamite(this.cell.x,this.cell.y,0,120);
				return;
			case -1:
				this.game.addTextHint(khm_Lang.get("emptyBox"),120);
				return;
			default:
			}
			this.inventory.add(item);
			var text = "" + khm_Lang.get(game_gui__$Icon_Icon_$Impl_$.toString(item.id)) + " (" + item.count + " " + khm_Lang.get("pcs") + ")";
			this.game.addTextHint(text,120);
			if(item.id == 21) {
				this.inventory.selectItem(item.id);
				this.useItem(item);
			}
			break;
		case 38:
			this.stats.exp += 30;
			new Sound(kha_Assets.sounds.sounds_fx_flag_pickup,false).play(1);
			var params = this.game.params;
			this.blueFlagCount++;
			this.tilemap.setTileId(1,this.cell.x,this.cell.y,0);
			var tmp;
			switch(this.game.params.winCondition) {
			case 6:case 35:case 36:case 37:case 38:
				tmp = true;
				break;
			default:
				tmp = false;
			}
			if(tmp) {
				var left = params.blueFlagCount - this.blueFlagCount;
				if(left == 0) {
					return;
				}
				var s = khm_Lang.get;
				this.game.addTextHint("" + s("flagCaptured") + " " + s("flagsLeft") + ": " + left + ".",120);
			} else {
				var flag = this.game.getBlueFlag(this.cell.x,this.cell.y);
				if(flag == null) {
					return;
				}
				this.game.addTextHint(khm_Lang.get("waitForAirSupport"),120);
				this.game.callAirSupport(params.airSupport[flag.id].x,params.airSupport[flag.id].y,4,11);
			}
			break;
		case 39:
			this.stats.exp += 60;
			new Sound(kha_Assets.sounds.sounds_fx_flag_pickup,false).play(1);
			this.hasRedFlag = true;
			this.tilemap.setTileId(1,this.cell.x,this.cell.y,0);
			var s1 = khm_Lang.get;
			this.game.addTextHint("" + s1("flagCaptured") + " " + s1("backToBase"),120);
			break;
		default:
			game_Tank.prototype.getCellItem.call(this);
		}
	}
	,useBonus: function(type) {
		switch(type) {
		case 26:
			this.useSpeedUpBonus(2100);
			break;
		case 28:
			this.useFreezeBonus(1500);
			break;
		default:
			game_Tank.prototype.useBonus.call(this,type);
		}
	}
	,useSpeedUpBonus: function(time) {
		this.speedUpTime = time;
		if(this.exChassis) {
			this.speedUpTime += 900;
		}
		new Sound(kha_Assets.sounds.sounds_fx_powerup_use_speed,false).play(1);
	}
	,useFreezeBonus: function(time) {
		this.freezeTime = time;
		if(this.exChassis) {
			this.freezeTime += 300;
		}
		new Sound(kha_Assets.sounds.sounds_fx_powerup_use_freeze,false).play(1);
	}
	,isTimeFrozen: function() {
		return this.freezeTime > 0;
	}
	,addTrace: function(isReverse) {
		this.addTraceEffect(isReverse,250);
	}
	,saveTo: function(slot) {
		slot.inventory = this.inventory.get();
		slot.stats = this.stats;
		slot.research = this.research;
		slot.money = this.money;
		slot.stars = this.stars;
		slot.lives = this.lives;
		slot.shield = this.maxShieldHp;
		slot.exChassis = this.exChassis;
		slot.armor = this.armor;
		slot.tempArmor = this.tempArmor;
	}
	,loadFrom: function(slot) {
		this.inventory.copyFrom(slot.inventory);
		this.stats = Reflect.copy(slot.stats);
		this.research = Reflect.copy(slot.research);
		this.money = slot.money;
		this.stars = slot.stars;
		this.lives = slot.lives;
		this.maxShieldHp = slot.shield;
		this.setExChassis(slot.exChassis);
		this.setArmor(slot.armor);
		this.addTempArmor(slot.tempArmor);
	}
	,renderCircle: function(g) {
		this.drawCircleImage(g,0);
	}
	,renderHp: function(g) {
		if(this.invulnerableTime % 16 < 8) {
			game_Tank.prototype.renderHp.call(this,g);
		}
	}
	,renderTankHp: function(g,tank,offY) {
		var hp = tank.hp;
		var maxHp = tank.maxHp;
		if(tank.type == "turret") {
			hp = Math.ceil(hp / 2);
			maxHp = Math.ceil(maxHp / 2);
		}
		this.renderHpLine(g,offY,tank.team,hp,maxHp,tank.shieldHp,tank.maxShieldHp);
	}
	,renderHpLine: function(g,offY,team,hp,maxHp,shieldHp,maxShieldHp) {
		var img = kha_Assets.images.gui_hp;
		var offX = this.hudOffset;
		var scale = game_gui_Ui.getHpScale();
		var frameW = (img.get_width() - 18.5) * scale;
		var max = hp + shieldHp;
		if(hp + shieldHp < maxHp + maxShieldHp) {
			max += 2;
		}
		if(offX + max * frameW > khm_Screen.w / 2) {
			offX = khm_Screen.w / 2 - max * frameW;
		}
		var _g = 0;
		var _g1 = maxHp + maxShieldHp;
		while(_g < _g1) {
			var i = _g++;
			var x = offX + i * frameW;
			if(x + frameW < 0 || x + frameW > khm_Screen.w / 2) {
				continue;
			}
			if(i >= maxHp + shieldHp) {
				img = kha_Assets.images.gui_hp_inact;
				g.set_color(-11513601);
			} else if(i >= maxHp) {
				img = kha_Assets.images.gui_hp;
				g.set_color(-11513601);
			} else if(i >= hp) {
				img = kha_Assets.images.gui_hp_inact;
			} else {
				img = kha_Assets.images.gui_hp;
				var tmp;
				switch(team) {
				case 1:
					tmp = -11468976;
					break;
				case 2:
					tmp = -44976;
					break;
				case 3:
					tmp = -11513601;
					break;
				default:
					tmp = -11468976;
				}
				g.set_color(tmp);
			}
			khm_utils_Atlas.drawScaledImage(g,img,x,offY,img.get_width() * scale,img.get_height() * scale);
		}
		g.set_color(-1);
	}
	,renderHud: function(g,ui) {
		this.game.setGraphicScale(g,1);
		var offY = this.hudOffset;
		this.renderTankHp(g,this,offY);
		var hpScale = game_gui_Ui.getHpScale();
		var h = (kha_Assets.images.gui_hp.get_height() - 8) * hpScale | 0;
		offY += h;
		if(this.tankTarget != null && this.tankTarget.isAlive) {
			this.renderTankHp(g,this.tankTarget,offY);
		} else if(this.buildingTarget != null && this.buildingTarget.isAlive) {
			var build = this.buildingTarget;
			this.renderHpLine(g,offY,build.team,build.hp,build.maxHp,0,0);
		}
		offY += h;
		var scale = game_gui_Ui.getInvScale();
		offY = offY / scale | 0;
		this.game.setGraphicScale(g,scale);
		this.inventory.offY = offY;
		this.inventory.hudOffset = this.hudOffset;
		if(this.inventory.isOpen) {
			this.inventory.render(ui);
		} else {
			this.inventory.renderCurrentItem(ui);
			offY = this.inventory.offY;
			this.drawPowerups(g,offY);
		}
		this.drawInfoPanel(g,ui);
		this.game.setGraphicScale(g,this.game.scale);
	}
	,drawPowerups: function(g,offY) {
		var numH = (20 - game_gui_Text.numberHeight()) / 2 | 0;
		offY += 20;
		g.set_color(-1);
		if(this.isTimeFrozen()) {
			game_gui_Ui.drawScaledIcon(g,15,this.hudOffset,offY,20,20);
			game_gui_Text.drawNumber(g,10,this.freezeTime / 60 | 0,this.hudOffset + 20,offY + numH);
			offY += 20;
		}
		if(this.speedUpTime > 0) {
			game_gui_Ui.drawScaledIcon(g,17,this.hudOffset,offY,20,20);
			game_gui_Text.drawNumber(g,10,this.speedUpTime / 60 | 0,this.hudOffset + 20,offY + numH);
		}
	}
	,drawInfoPanel: function(g,ui) {
		var panel = kha_Assets.images.gui_panel;
		g.set_color(game_Game.trasnparentGui ? -1056964609 : -1);
		var panelW = panel.get_width() / 4 / 1.2 | 0;
		var panelH = panel.get_height() / 4 / 1.2 | 0;
		var panelX = khm_Screen.w - panelW + 5 - this.hudOffset;
		khm_utils_Atlas.drawScaledImage(g,panel,panelX,this.hudOffset,panelW,panelH);
		var h = game_gui_Text.numberHeight();
		var x = panelX + (panelW / 1.2 | 0) - h;
		var y = this.hudOffset + 5;
		var h1 = h + 3.5;
		var style = game_Game.trasnparentGui ? 20 : 0;
		var starStyle = game_Game.trasnparentGui ? 20 : 10;
		var enemyCount = this.game.getEnemyCount(this.team);
		var num = this.money;
		game_gui_Text.drawNumber(g,style,num,x - game_gui_Text.numbersWidth("" + num) | 0,y | 0);
		var num1 = this.stars;
		game_gui_Text.drawNumber(g,starStyle,num1,x - game_gui_Text.numbersWidth("" + num1) | 0,y + h1 | 0);
		var num2 = this.lives;
		game_gui_Text.drawNumber(g,style,num2,x - game_gui_Text.numbersWidth("" + num2) | 0,y + h1 * 2 | 0);
		game_gui_Text.drawNumber(g,style,enemyCount,x - game_gui_Text.numbersWidth("" + enemyCount) | 0,y + h1 * 3 | 0);
		if(game_gui_Widgets.norect(ui,panelX,this.hudOffset,panelW,panelH)) {
			game_Game.trasnparentGui = !game_Game.trasnparentGui;
		}
	}
	,__class__: game_Player
});
var game_Practice = function() { };
$hxClasses["game.Practice"] = game_Practice;
game_Practice.__name__ = "game.Practice";
game_Practice.genMap = function(tileset) {
	var params = game_Practice.getDefParams();
	var _g = [];
	var _g1 = 0;
	var _g2 = tileset.layersLength;
	while(_g1 < _g2) {
		++_g1;
		_g.push([]);
	}
	var map = { name : "", briefing : "", debriefing : "", w : 20, h : 20, layers : _g, objects : [], floatObjects : [], data : params};
	var _g3 = 0;
	var _g4 = map.layers;
	while(_g3 < _g4.length) {
		var layer = _g4[_g3];
		++_g3;
		var _g31 = 0;
		var _g41 = map.h;
		while(_g31 < _g41) {
			var iy = _g31++;
			layer[iy] = [];
			var _g32 = 0;
			var _g42 = map.w;
			while(_g32 < _g42) layer[iy][_g32++] = 0;
		}
	}
	var bg = map.layers[0];
	var tg = map.layers[1];
	var _g5 = 0;
	var _g6 = map.h;
	while(_g5 < _g6) {
		var iy1 = _g5++;
		var _g51 = 0;
		var _g61 = map.w;
		while(_g51 < _g61) {
			var ix = _g51++;
			if(bg[iy1][ix] != 0) {
				continue;
			}
			switch(Std.random(150)) {
			case 0:
				if(ix > -1 && iy1 > -1 && ix < map.w && iy1 < map.h) {
					map.layers[0][iy1][ix] = 7;
				}
				var x = ix + 1;
				if(x > -1 && iy1 > -1 && x < map.w && iy1 < map.h) {
					map.layers[0][iy1][x] = 8;
				}
				var y = iy1 + 1;
				if(ix > -1 && y > -1 && ix < map.w && y < map.h) {
					map.layers[0][y][ix] = 9;
				}
				var x1 = ix + 1;
				var y1 = iy1 + 1;
				if(x1 > -1 && y1 > -1 && x1 < map.w && y1 < map.h) {
					map.layers[0][y1][x1] = 10;
				}
				break;
			case 1:
				if(ix > -1 && iy1 > -1 && ix < map.w && iy1 < map.h) {
					map.layers[0][iy1][ix] = 11;
				}
				var x2 = ix + 1;
				if(x2 > -1 && iy1 > -1 && x2 < map.w && iy1 < map.h) {
					map.layers[0][iy1][x2] = 12;
				}
				var y2 = iy1 + 1;
				if(ix > -1 && y2 > -1 && ix < map.w && y2 < map.h) {
					map.layers[0][y2][ix] = 13;
				}
				var x3 = ix + 1;
				var y3 = iy1 + 1;
				if(x3 > -1 && y3 > -1 && x3 < map.w && y3 < map.h) {
					map.layers[0][y3][x3] = 14;
				}
				break;
			case 2:
				if(ix > -1 && iy1 > -1 && ix < map.w && iy1 < map.h) {
					map.layers[0][iy1][ix] = 15;
				}
				var x4 = ix + 1;
				if(x4 > -1 && iy1 > -1 && x4 < map.w && iy1 < map.h) {
					map.layers[0][iy1][x4] = 16;
				}
				var y4 = iy1 + 1;
				if(ix > -1 && y4 > -1 && ix < map.w && y4 < map.h) {
					map.layers[0][y4][ix] = 17;
				}
				var x5 = ix + 1;
				var y5 = iy1 + 1;
				if(x5 > -1 && y5 > -1 && x5 < map.w && y5 < map.h) {
					map.layers[0][y5][x5] = 18;
				}
				break;
			case 3:
				if(ix > -1 && iy1 > -1 && ix < map.w && iy1 < map.h) {
					map.layers[0][iy1][ix] = 19;
				}
				var x6 = ix + 1;
				if(x6 > -1 && iy1 > -1 && x6 < map.w && iy1 < map.h) {
					map.layers[0][iy1][x6] = 20;
				}
				var y6 = iy1 + 1;
				if(ix > -1 && y6 > -1 && ix < map.w && y6 < map.h) {
					map.layers[0][y6][ix] = 21;
				}
				var x7 = ix + 1;
				var y7 = iy1 + 1;
				if(x7 > -1 && y7 > -1 && x7 < map.w && y7 < map.h) {
					map.layers[0][y7][x7] = 22;
				}
				break;
			case 4:
				if(ix > -1 && iy1 > -1 && ix < map.w && iy1 < map.h) {
					map.layers[0][iy1][ix] = 23;
				}
				break;
			case 5:
				if(ix > -1 && iy1 > -1 && ix < map.w && iy1 < map.h) {
					map.layers[0][iy1][ix] = 101;
				}
				break;
			case 6:
				if(ix > -1 && iy1 > -1 && ix < map.w && iy1 < map.h) {
					map.layers[0][iy1][ix] = 102;
				}
				break;
			case 7:
				if(ix > -1 && iy1 > -1 && ix < map.w && iy1 < map.h) {
					map.layers[0][iy1][ix] = 103;
				}
				var x8 = ix + 1;
				if(x8 > -1 && iy1 > -1 && x8 < map.w && iy1 < map.h) {
					map.layers[0][iy1][x8] = 104;
				}
				break;
			case 8:
				if(ix > -1 && iy1 > -1 && ix < map.w && iy1 < map.h) {
					map.layers[0][iy1][ix] = 105;
				}
				var y8 = iy1 + 1;
				if(ix > -1 && y8 > -1 && ix < map.w && y8 < map.h) {
					map.layers[0][y8][ix] = 106;
				}
				break;
			default:
				bg[iy1][ix] = 1 + Std.random(6);
			}
		}
	}
	var _g7 = 0;
	var _g8 = map.h;
	while(_g7 < _g8) {
		var iy2 = _g7++;
		var _g71 = 0;
		var _g81 = map.w;
		while(_g71 < _g81) {
			var ix1 = _g71++;
			if(tg[iy2][ix1] != 0) {
				continue;
			}
			if(Std.random(3) != 0) {
				continue;
			}
			switch(Std.random(2)) {
			case 0:
				tg[iy2][ix1] = Std.random(11);
				break;
			case 1:
				if(Std.random(30) == 0) {
					game_Practice.addRandomBonus(map,ix1,iy2);
					continue;
				}
				if(Std.random(8) == 0) {
					tg[iy2][ix1] = 19 + Std.random(3);
				} else {
					tg[iy2][ix1] = 1 + Std.random(2);
				}
				break;
			}
		}
	}
	var playerX = 0;
	var playerY = 0;
	while(true) {
		playerX = Std.random(map.w);
		playerY = Std.random(map.h);
		if(tg[playerY][playerX] != 0) {
			continue;
		}
		game_Practice.addSpawn(map,playerX,playerY,1);
		break;
	}
	var _g9 = 0;
	while(_g9 < 4) {
		++_g9;
		while(true) {
			var x9 = Std.random(map.w);
			var y9 = Std.random(map.h);
			if((Math.abs(x9 - playerX) + Math.abs(y9 - playerY) | 0) < 5) {
				continue;
			}
			if(tg[y9][x9] != 0) {
				continue;
			}
			game_Practice.addSpawn(map,x9,y9,2);
			break;
		}
	}
	if(Std.random(20) == 0) {
		while(true) {
			var x10 = Std.random(map.w);
			var y10 = Std.random(map.h);
			if((Math.abs(x10 - playerX) + Math.abs(y10 - playerY) | 0) < 5) {
				continue;
			}
			if(tg[y10][x10] != 0) {
				continue;
			}
			game_Practice.addSpawn(map,x10,y10,3);
			params.teamCounts[3] = [5,8,7,0,1,2,1,1];
			break;
		}
	}
	var _g10 = 0;
	var _g11 = 3 + Std.random(6);
	while(_g10 < _g11) {
		++_g10;
		while(true) {
			var x11 = Std.random(map.w);
			var y11 = Std.random(map.h);
			if(tg[y11][x11] != 0) {
				continue;
			}
			if((x11 == playerX || y11 == playerY) && (Math.abs(x11 - playerX) + Math.abs(y11 - playerY) | 0) < 5) {
				continue;
			}
			game_Practice.addEnemyTurret(map,x11,y11);
			tg[y11][x11] = -1;
			break;
		}
	}
	var _g12 = 0;
	var _g13 = map.h;
	while(_g12 < _g13) {
		var iy3 = _g12++;
		var _g121 = 0;
		var _g131 = map.w;
		while(_g121 < _g131) {
			var ix2 = _g121++;
			if(tg[iy3][ix2] < 0) {
				tg[iy3][ix2] = 0;
			}
		}
	}
	return map;
};
game_Practice.addSpawn = function(map,x,y,type) {
	var tg = map.layers[1][y];
	var tmp;
	switch(type) {
	case 1:
		tmp = 34;
		break;
	case 2:
		tmp = 35;
		break;
	default:
		tmp = 36;
	}
	tg[x] = tmp;
	map.objects.push({ type : "base", x : x, y : y, layer : 1, data : { team : type, count : 100, aiType : 0, isActive : true}});
};
game_Practice.addRandomBonus = function(map,x,y) {
	var tg = map.layers[1];
	var bonuses = [26,27,28,29,30,31];
	tg[y][x] = bonuses[Std.random(bonuses.length)];
	var type;
	switch(tg[y][x]) {
	case 26:
		type = "speedup";
		break;
	case 27:
		type = "life";
		break;
	case 28:
		type = "freeze";
		break;
	case 29:
		type = "repair";
		break;
	case 30:
		type = "star";
		break;
	case 31:
		type = "coin";
		break;
	default:
		throw new js__$Boot_HaxeError("unknown bonus");
	}
	map.objects.push({ type : type, layer : 1, x : x, y : y, data : { }});
};
game_Practice.addEnemyTurret = function(map,x,y) {
	map.objects.push({ type : "turret", x : x, y : y, layer : 1, data : { team : 2, type : 1, groundHeight : 1, distance : 4, isStatic : false, dir : null}});
};
game_Practice.getDefParams = function() {
	var _g = [];
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	var _g1 = [];
	_g1.push(0);
	_g1.push(0);
	_g1.push(0);
	_g1.push(0);
	_g1.push(0);
	_g1.push(0);
	_g1.push(0);
	_g1.push(0);
	var _g2 = [];
	_g2.push(0);
	_g2.push(0);
	_g2.push(0);
	_g2.push(0);
	_g2.push(0);
	_g2.push(0);
	_g2.push(0);
	_g2.push(0);
	var params = 1 + Std.random(17);
	var _g3 = [];
	_g3.push(0);
	_g3.push(0);
	_g3.push(0);
	_g3.push(0);
	_g3.push(0);
	_g3.push(0);
	_g3.push(0);
	_g3.push(0);
	_g3.push(0);
	_g3.push(0);
	return { teamLimits : [0,1,4,4], teamCounts : [_g,_g1,[9,8,7,0,1,0,0,0],_g2], teamTurretTypes : [1,1,1,1], turretHeight : 1, turretDistance : 4, friendlyFire : 1, enemyDifficulty : 1, enemyAIType : 0, winCondition : 1, blueFlagCount : 0, blueFlags : [], airSupport : [], boxesContent : [], radarHP : 7, reactorHP : 3, musicTrack : params, enemySightDistance : 5, enemySpawnOrdered : false, enemySpawnOrder : _g3, playerSpawnMode : 0, disableFreeze : false, oneLifeMode : false, disableClouds : false, disableDebriefing : false};
};
var game_SpriteSets = function(x,y,image,center,start,current,end,length,frameDelay,isReversed) {
	if(isReversed == null) {
		isReversed = false;
	}
	if(frameDelay == null) {
		frameDelay = 1;
	}
	if(length == null) {
		length = -1;
	}
	if(end == null) {
		end = -1;
	}
	if(current == null) {
		current = -1;
	}
	if(start == null) {
		start = 0;
	}
	if(center == null) {
		center = false;
	}
	this.isReversed = false;
	this.frameDelay = 1;
	this.length = -1;
	this.end = -1;
	this.current = -1;
	this.start = 0;
	this.center = false;
	this.x = x;
	this.y = y;
	this.image = image;
	this.center = center;
	this.start = start;
	this.current = current;
	this.end = end;
	this.length = length;
	this.frameDelay = frameDelay;
	this.isReversed = isReversed;
};
$hxClasses["game.SpriteSets"] = game_SpriteSets;
game_SpriteSets.__name__ = "game.SpriteSets";
game_SpriteSets.prototype = {
	x: null
	,y: null
	,image: null
	,center: null
	,start: null
	,current: null
	,end: null
	,length: null
	,frameDelay: null
	,isReversed: null
	,__class__: game_SpriteSets
};
var khm_utils_Pool_$game_$Sprite = function(allocFunc) {
	this.allocFunc = allocFunc;
	this.pool = [];
};
$hxClasses["khm.utils.Pool_game_Sprite"] = khm_utils_Pool_$game_$Sprite;
khm_utils_Pool_$game_$Sprite.__name__ = "khm.utils.Pool_game_Sprite";
khm_utils_Pool_$game_$Sprite.prototype = {
	pool: null
	,allocFunc: null
	,__class__: khm_utils_Pool_$game_$Sprite
};
var game_Sprite = function() {
	this.delay = 0;
};
$hxClasses["game.Sprite"] = game_Sprite;
game_Sprite.__name__ = "game.Sprite";
game_Sprite.prototype = {
	game: null
	,tilemap: null
	,x: null
	,y: null
	,image: null
	,current: null
	,start: null
	,end: null
	,length: null
	,frameDelay: null
	,delay: null
	,isReversed: null
	,afterInit: function(game1,tilemap,isCenter) {
		this.game = game1;
		this.tilemap = tilemap;
		if(this.length == -1) {
			this.length = this.image.get_width() / this.image.get_height() | 0;
		}
		if(this.current == -1) {
			this.current = this.start;
		}
		if(this.end == -1) {
			this.end = this.length - 1;
		}
		if(isCenter) {
			this.x -= (this.image.get_width() / this.length | 0) / 2;
			this.y -= this.image.get_height() / 2;
		}
	}
	,update: function() {
		this.beforeUpdate();
		if(this.delay > 0) {
			this.delay--;
			return;
		}
		this.delay = this.frameDelay;
		if(this.current != this.end) {
			if(this.end < this.current) {
				this.current--;
			} else {
				this.current++;
			}
		} else if(this.isReversed) {
			var temp = this.start;
			this.start = this.end;
			this.end = temp;
			this.isReversed = false;
			this.current--;
		} else {
			this.remove();
		}
	}
	,beforeUpdate: function() {
	}
	,remove: function() {
		game_Sprite.pool.pool.push(this);
		this.game.removeSprite(this);
	}
	,render: function(g) {
		var frameW = this.image.get_width() / this.length | 0;
		var scale = this.tilemap.scale;
		var camX = this.tilemap.camera.get_x();
		var camY = this.tilemap.camera.get_y();
		g.set_color(-1);
		khm_utils_Atlas.drawSubImage(g,this.image,(this.x * scale | 0) / scale + camX,(this.y * scale | 0) / scale + camY,frameW * this.current,0,frameW,this.image.get_height());
	}
	,__class__: game_Sprite
};
var game_TankState = $hxEnums["game.TankState"] = { __ename__ : "game.TankState", __constructs__ : ["Standing","Moving","ReverseMoving","Rotating"]
	,Standing: {_hx_index:0,__enum__:"game.TankState",toString:$estr}
	,Moving: {_hx_index:1,__enum__:"game.TankState",toString:$estr}
	,ReverseMoving: {_hx_index:2,__enum__:"game.TankState",toString:$estr}
	,Rotating: {_hx_index:3,__enum__:"game.TankState",toString:$estr}
};
var game_TankSets = function(x,y,team,type,dir,hp,shieldHp,speed,reloadDelay,rotationDelay,bulletType,groundHeight,level) {
	this.level = 0;
	this.groundHeight = 0;
	this.bulletType = 0;
	this.rotationDelay = 2;
	this.reloadDelay = 45;
	this.speed = 6.0;
	this.shieldHp = 0;
	this.hp = 5;
	this.dir = null;
	this.type = "light";
	this.team = 1;
	this.x = x;
	this.y = y;
	if(team != null) {
		this.team = team;
	}
	if(type != null) {
		this.type = type;
	}
	if(dir != null) {
		this.dir = dir;
	}
	if(hp != null) {
		this.hp = hp;
	}
	if(shieldHp != null) {
		this.shieldHp = shieldHp;
	}
	if(speed != null) {
		this.speed = speed;
	}
	if(reloadDelay != null) {
		this.reloadDelay = reloadDelay;
	}
	if(rotationDelay != null) {
		this.rotationDelay = rotationDelay;
	}
	if(bulletType != null) {
		this.bulletType = bulletType;
	}
	if(groundHeight != null) {
		this.groundHeight = groundHeight;
	}
	if(level != null) {
		this.level = level;
	}
};
$hxClasses["game.TankSets"] = game_TankSets;
game_TankSets.__name__ = "game.TankSets";
game_TankSets.prototype = {
	x: null
	,y: null
	,team: null
	,type: null
	,dir: null
	,hp: null
	,shieldHp: null
	,speed: null
	,reloadDelay: null
	,rotationDelay: null
	,bulletType: null
	,groundHeight: null
	,level: null
	,__class__: game_TankSets
};
var game_TileSpriteSets = function(x,y,type,start,current,end,frameDelay,isReversed) {
	this.isReversed = false;
	this.frameDelay = 1;
	this.current = -1;
	this.start = 0;
	this.x = x;
	this.y = y;
	this.type = type;
	if(start != null) {
		this.start = start;
	}
	if(current != null) {
		this.current = current;
	}
	this.end = end;
	if(frameDelay != null) {
		this.frameDelay = frameDelay;
	}
	if(isReversed != null) {
		this.isReversed = isReversed;
	}
};
$hxClasses["game.TileSpriteSets"] = game_TileSpriteSets;
game_TileSpriteSets.__name__ = "game.TileSpriteSets";
game_TileSpriteSets.prototype = {
	x: null
	,y: null
	,type: null
	,start: null
	,current: null
	,end: null
	,frameDelay: null
	,isReversed: null
	,__class__: game_TileSpriteSets
};
var game_TileSprite = function(game1,tilemap,sets) {
	this.delay = 0;
	this.game = game1;
	this.tilemap = tilemap;
	this.x = sets.x;
	this.y = sets.y;
	this.type = sets.type;
	this.start = sets.start;
	this.current = sets.current;
	this.end = sets.end;
	if(this.current == -1) {
		this.current = this.start;
	}
	this.delay = this.frameDelay = sets.frameDelay;
	this.isReversed = sets.isReversed;
};
$hxClasses["game.TileSprite"] = game_TileSprite;
game_TileSprite.__name__ = "game.TileSprite";
game_TileSprite.prototype = {
	game: null
	,tilemap: null
	,x: null
	,y: null
	,type: null
	,current: null
	,start: null
	,end: null
	,frameDelay: null
	,delay: null
	,isReversed: null
	,beforeUpdate: function() {
	}
	,update: function() {
		this.beforeUpdate();
		var tile = this.tilemap.getTile(1,this.x,this.y);
		if(tile._id == 0) {
			this.remove();
			return;
		}
		if(this.delay > 0) {
			this.delay--;
			return;
		}
		this.delay = this.frameDelay;
		if(this.current < this.end) {
			this.current++;
		} else if(this.current > this.end) {
			this.current--;
		} else if(this.current == this.end) {
			if(this.isReversed) {
				var temp = this.start;
				this.start = this.end;
				this.end = temp;
			} else {
				this.current = this.start;
			}
		}
		tile.setFrame(this.current);
	}
	,render: function(g) {
		var type = this.type;
		if(type < 26 || type > 33) {
			return;
		}
		var image = kha_Assets.images.overlay;
		var camX = this.tilemap.camera.get_x();
		var camY = this.tilemap.camera.get_y();
		var tileSize = this.tilemap.tileset.tileSize;
		var frame = 3;
		if(type < 30) {
			frame = 4;
		} else if(type > 30) {
			frame = 2;
		}
		var tmp;
		switch(frame) {
		case 2:
			tmp = 822067200;
			break;
		case 3:
			tmp = 1358938112;
			break;
		default:
			tmp = 1895809024;
		}
		g.set_color(tmp);
		khm_utils_Atlas.drawImage(g,image,this.x * tileSize + tileSize / 2 - image.get_width() / 2 + camX,this.y * tileSize + tileSize / 2 - image.get_height() / 2 + camY);
	}
	,remove: function() {
		this.game.removeTileSprite(this);
	}
	,__class__: game_TileSprite
};
var game_Timer = function() {
	this.time = 0.0;
};
$hxClasses["game.Timer"] = game_Timer;
game_Timer.__name__ = "game.Timer";
game_Timer.prototype = {
	time: null
	,__class__: game_Timer
};
var game_TriggerType = $hxEnums["game.TriggerType"] = { __ename__ : "game.TriggerType", __constructs__ : ["Unknown","None","WallRow","ExplWall","EnableSpawn","DisableSpawn","ToggleSpawn","EnableSpawnsArea","DisableSpawnsArea","ToggleSpawnsArea","AirSupport","ForcedAirSupport","Explosion","LevelComplete","Text","Trigger","TriggerArea","EnableTrigger","DisableTrigger","ToggleTrigger","EnableTriggerArea","DisableTriggerArea","ToggleTriggerArea","EnableTurretsArea","DisableTurretsArea","ToggleTurretsArea","SetTanksAI","SetTanksDistance","SetMusicTrack","TankCountTriggerArea","DualTurretsArea"]
	,Unknown: ($_=function(id) { return {_hx_index:0,id:id,__enum__:"game.TriggerType",toString:$estr}; },$_.__params__ = ["id"],$_)
	,None: {_hx_index:1,__enum__:"game.TriggerType",toString:$estr}
	,WallRow: ($_=function(dir,wallTypes,isUnsafe,isOneBlock) { return {_hx_index:2,dir:dir,wallTypes:wallTypes,isUnsafe:isUnsafe,isOneBlock:isOneBlock,__enum__:"game.TriggerType",toString:$estr}; },$_.__params__ = ["dir","wallTypes","isUnsafe","isOneBlock"],$_)
	,ExplWall: ($_=function(dir,radius,power) { return {_hx_index:3,dir:dir,radius:radius,power:power,__enum__:"game.TriggerType",toString:$estr}; },$_.__params__ = ["dir","radius","power"],$_)
	,EnableSpawn: ($_=function(team,id) { return {_hx_index:4,team:team,id:id,__enum__:"game.TriggerType",toString:$estr}; },$_.__params__ = ["team","id"],$_)
	,DisableSpawn: ($_=function(team,id) { return {_hx_index:5,team:team,id:id,__enum__:"game.TriggerType",toString:$estr}; },$_.__params__ = ["team","id"],$_)
	,ToggleSpawn: ($_=function(team,id) { return {_hx_index:6,team:team,id:id,__enum__:"game.TriggerType",toString:$estr}; },$_.__params__ = ["team","id"],$_)
	,EnableSpawnsArea: ($_=function(distance,reload) { return {_hx_index:7,distance:distance,reload:reload,__enum__:"game.TriggerType",toString:$estr}; },$_.__params__ = ["distance","reload"],$_)
	,DisableSpawnsArea: ($_=function(distance,reload) { return {_hx_index:8,distance:distance,reload:reload,__enum__:"game.TriggerType",toString:$estr}; },$_.__params__ = ["distance","reload"],$_)
	,ToggleSpawnsArea: ($_=function(distance,reload) { return {_hx_index:9,distance:distance,reload:reload,__enum__:"game.TriggerType",toString:$estr}; },$_.__params__ = ["distance","reload"],$_)
	,AirSupport: ($_=function(id,radius,power) { return {_hx_index:10,id:id,radius:radius,power:power,__enum__:"game.TriggerType",toString:$estr}; },$_.__params__ = ["id","radius","power"],$_)
	,ForcedAirSupport: ($_=function(id,radius,power) { return {_hx_index:11,id:id,radius:radius,power:power,__enum__:"game.TriggerType",toString:$estr}; },$_.__params__ = ["id","radius","power"],$_)
	,Explosion: ($_=function(cords,radius,power) { return {_hx_index:12,cords:cords,radius:radius,power:power,__enum__:"game.TriggerType",toString:$estr}; },$_.__params__ = ["cords","radius","power"],$_)
	,LevelComplete: ($_=function(hasCondition,text) { return {_hx_index:13,hasCondition:hasCondition,text:text,__enum__:"game.TriggerType",toString:$estr}; },$_.__params__ = ["hasCondition","text"],$_)
	,Text: ($_=function(data,time) { return {_hx_index:14,data:data,time:time,__enum__:"game.TriggerType",toString:$estr}; },$_.__params__ = ["data","time"],$_)
	,Trigger: ($_=function(id,count,loop) { return {_hx_index:15,id:id,count:count,loop:loop,__enum__:"game.TriggerType",toString:$estr}; },$_.__params__ = ["id","count","loop"],$_)
	,TriggerArea: ($_=function(distance,count,loop) { return {_hx_index:16,distance:distance,count:count,loop:loop,__enum__:"game.TriggerType",toString:$estr}; },$_.__params__ = ["distance","count","loop"],$_)
	,EnableTrigger: ($_=function(id) { return {_hx_index:17,id:id,__enum__:"game.TriggerType",toString:$estr}; },$_.__params__ = ["id"],$_)
	,DisableTrigger: ($_=function(id) { return {_hx_index:18,id:id,__enum__:"game.TriggerType",toString:$estr}; },$_.__params__ = ["id"],$_)
	,ToggleTrigger: ($_=function(id) { return {_hx_index:19,id:id,__enum__:"game.TriggerType",toString:$estr}; },$_.__params__ = ["id"],$_)
	,EnableTriggerArea: ($_=function(distance) { return {_hx_index:20,distance:distance,__enum__:"game.TriggerType",toString:$estr}; },$_.__params__ = ["distance"],$_)
	,DisableTriggerArea: ($_=function(distance) { return {_hx_index:21,distance:distance,__enum__:"game.TriggerType",toString:$estr}; },$_.__params__ = ["distance"],$_)
	,ToggleTriggerArea: ($_=function(distance) { return {_hx_index:22,distance:distance,__enum__:"game.TriggerType",toString:$estr}; },$_.__params__ = ["distance"],$_)
	,EnableTurretsArea: ($_=function(distance) { return {_hx_index:23,distance:distance,__enum__:"game.TriggerType",toString:$estr}; },$_.__params__ = ["distance"],$_)
	,DisableTurretsArea: ($_=function(distance) { return {_hx_index:24,distance:distance,__enum__:"game.TriggerType",toString:$estr}; },$_.__params__ = ["distance"],$_)
	,ToggleTurretsArea: ($_=function(distance) { return {_hx_index:25,distance:distance,__enum__:"game.TriggerType",toString:$estr}; },$_.__params__ = ["distance"],$_)
	,SetTanksAI: {_hx_index:26,__enum__:"game.TriggerType",toString:$estr}
	,SetTanksDistance: ($_=function(distance) { return {_hx_index:27,distance:distance,__enum__:"game.TriggerType",toString:$estr}; },$_.__params__ = ["distance"],$_)
	,SetMusicTrack: ($_=function(id) { return {_hx_index:28,id:id,__enum__:"game.TriggerType",toString:$estr}; },$_.__params__ = ["id"],$_)
	,TankCountTriggerArea: ($_=function(count,isAlly) { return {_hx_index:29,count:count,isAlly:isAlly,__enum__:"game.TriggerType",toString:$estr}; },$_.__params__ = ["count","isAlly"],$_)
	,DualTurretsArea: ($_=function(distance) { return {_hx_index:30,distance:distance,__enum__:"game.TriggerType",toString:$estr}; },$_.__params__ = ["distance"],$_)
};
var game_TriggerSets = function(x,y,type,delay,sensetivity,state) {
	this.delay = 0;
	this.x = x;
	this.y = y;
	this.type = type;
	if(delay != null) {
		this.delay = delay;
	}
	this.sensetivity = sensetivity;
	this.state = state;
};
$hxClasses["game.TriggerSets"] = game_TriggerSets;
game_TriggerSets.__name__ = "game.TriggerSets";
game_TriggerSets.prototype = {
	x: null
	,y: null
	,type: null
	,delay: null
	,sensetivity: null
	,state: null
	,__class__: game_TriggerSets
};
var game_Trigger = function(game1,tilemap,sets) {
	this.canBePressed = true;
	this.isHolded = false;
	this.game = game1;
	this.tilemap = tilemap;
	this.x = sets.x;
	this.y = sets.y;
	this.type = sets.type;
	this.state = sets.state;
	switch(this.type._hx_index) {
	case 29:
		this.state.isReusable = true;
		sets.delay = 60;
		break;
	case 30:
		break;
	default:
		if(this.state.isPressed) {
			sets.delay++;
		}
	}
	this.maxDelay = this.delay = sets.delay;
	var sens = sets.sensetivity;
	this.playerCheck = (sens & 1) != 0;
	this.allyCheck = (sens & 2) != 0;
	this.enemyCheck = (sens & 4) != 0;
	this.shotCheck = (sens & 8) != 0;
	this.explCheck = (sens & 16) != 0;
	this.tankCheck = this.playerCheck || this.allyCheck || this.enemyCheck;
};
$hxClasses["game.Trigger"] = game_Trigger;
game_Trigger.__name__ = "game.Trigger";
game_Trigger.prototype = {
	game: null
	,tilemap: null
	,x: null
	,y: null
	,type: null
	,maxDelay: null
	,delay: null
	,state: null
	,isHolded: null
	,canBePressed: null
	,playerCheck: null
	,allyCheck: null
	,enemyCheck: null
	,shotCheck: null
	,explCheck: null
	,tankCheck: null
	,update: function(triggers,bullets,tanks) {
		if(this.state.isPressed && this.delay > 0) {
			this.delay--;
			if(this.delay == 0) {
				this.forceAction(triggers);
			}
			return;
		}
		var _g = this.type;
		switch(_g._hx_index) {
		case 15:
			if(_g.loop) {
				this.triggerAction(triggers);
			}
			break;
		case 16:
			if(_g.loop) {
				this.triggerAction(triggers);
			}
			break;
		case 29:
			this.triggerAction(triggers);
			break;
		default:
		}
		if(!this.state.isActive) {
			return;
		}
		if(this.state.isPressed && !this.state.isReusable) {
			return;
		}
		this.isHolded = false;
		if(this.shotCheck) {
			var _g9 = 0;
			while(_g9 < bullets.length) {
				var bullet = bullets[_g9];
				++_g9;
				var a_x = this.x * this.tilemap.tileset.tileSize;
				var a_y = this.y * this.tilemap.tileset.tileSize;
				var b_x = bullet.x;
				var b_y = bullet.y;
				if(!(a_y + this.tilemap.tileset.tileSize < b_y || a_y > b_y + bullet.h || a_x + this.tilemap.tileset.tileSize < b_x || a_x > b_x + bullet.w)) {
					this.action(triggers);
				}
			}
		}
		if(this.tankCheck && this.game.teamsGrid[this.y][this.x] != -1) {
			var _g91 = 0;
			while(_g91 < tanks.length) {
				var tank = tanks[_g91];
				++_g91;
				if(tank == this.game.player) {
					if(this.playerCheck) {
						var a_x1 = this.x * this.tilemap.tileset.tileSize;
						var a_y1 = this.y * this.tilemap.tileset.tileSize;
						var b_x1 = tank.cell.x * this.tilemap.tileset.tileSize;
						var b_y1 = tank.cell.y * this.tilemap.tileset.tileSize;
						if(!(a_y1 + this.tilemap.tileset.tileSize <= b_y1 || a_y1 >= b_y1 + this.tilemap.tileset.tileSize || a_x1 + this.tilemap.tileset.tileSize <= b_x1 || a_x1 >= b_x1 + this.tilemap.tileset.tileSize)) {
							this.action(triggers);
						}
					}
				} else if(this.allyCheck && tank.team == this.game.playerTeam) {
					var a_x2 = this.x * this.tilemap.tileset.tileSize;
					var a_y2 = this.y * this.tilemap.tileset.tileSize;
					var b_x2 = tank.cell.x * this.tilemap.tileset.tileSize;
					var b_y2 = tank.cell.y * this.tilemap.tileset.tileSize;
					if(!(a_y2 + this.tilemap.tileset.tileSize <= b_y2 || a_y2 >= b_y2 + this.tilemap.tileset.tileSize || a_x2 + this.tilemap.tileset.tileSize <= b_x2 || a_x2 >= b_x2 + this.tilemap.tileset.tileSize)) {
						this.action(triggers);
					}
				} else if(this.enemyCheck && tank.team != this.game.playerTeam) {
					var a_x3 = this.x * this.tilemap.tileset.tileSize;
					var a_y3 = this.y * this.tilemap.tileset.tileSize;
					var b_x3 = tank.cell.x * this.tilemap.tileset.tileSize;
					var b_y3 = tank.cell.y * this.tilemap.tileset.tileSize;
					if(!(a_y3 + this.tilemap.tileset.tileSize <= b_y3 || a_y3 >= b_y3 + this.tilemap.tileset.tileSize || a_x3 + this.tilemap.tileset.tileSize <= b_x3 || a_x3 >= b_x3 + this.tilemap.tileset.tileSize)) {
						this.action(triggers);
					}
				}
			}
		}
		this.canBePressed = !this.isHolded;
	}
	,action: function(triggers) {
		this.isHolded = true;
		if(!this.canBePressed) {
			return;
		}
		if(!this.state.isActive) {
			return;
		}
		if(this.state.isPressed && !this.state.isReusable) {
			return;
		}
		this.press();
		if(this.delay > 0) {
			return;
		}
		this.forceAction(triggers);
	}
	,triggerAction: function(triggers) {
		if(!this.state.isActive) {
			return;
		}
		if(this.state.isPressed && !this.state.isReusable) {
			return;
		}
		this.press();
		if(this.delay > 0) {
			return;
		}
		this.forceAction(triggers);
	}
	,forceAction: function(triggers) {
		var _g = this.type;
		switch(_g._hx_index) {
		case 2:
			var _g9 = _g.isOneBlock;
			var _g7 = _g.wallTypes;
			var _g6 = _g.dir;
			var tx = this.x + _g6.x * 2;
			var ty = this.y + _g6.y * 2;
			var _this = this.tilemap;
			if(!(tx > -1 && ty > -1 && tx < _this.map.w && ty < _this.map.h)) {
				return;
			}
			if(this.tilemap.getTile(1,tx,ty)._id != 0) {
				return;
			}
			var isHorizontal = _g6.x == 0;
			this.checkLineForTanks(tx,ty,isHorizontal,_g.isUnsafe,_g9);
			if(_g9) {
				var id = _g7[Std.random(_g7.length)];
				this.tilemap.setTileId(1,tx,ty,id);
			} else {
				this.setWalls(tx,ty,isHorizontal,_g7);
			}
			var volume = this.game.playerDistVolume(this.x,this.y);
			this.tilemap.camera.shake(10 * volume,20);
			new Sound(kha_Assets.sounds.sounds_explosion_small01,false).play(volume);
			break;
		case 3:
			var _g22 = _g.radius;
			var cords = this.findClosestWall(_g.dir);
			if(cords != null) {
				this.tilemap.setTileId(1,cords.x,cords.y,0);
				this.game.addExplosion(new game_Explosion(this.game,this.tilemap,new game_ExplSets(cords.x,cords.y,null,_g22,_g.power,null,null,_g22 == 1)));
			}
			break;
		case 4:
			var _g42 = _g.id;
			var _g41 = _g.team;
			if(_g42 == -1) {
				var _g1 = 0;
				var _g11 = this.game.bases;
				while(_g1 < _g11.length) {
					var base = _g11[_g1];
					++_g1;
					if(base.team != _g41) {
						continue;
					}
					base.isActive = true;
				}
			} else {
				this.getBase(_g41,_g42).isActive = true;
			}
			break;
		case 5:
			var _g111 = _g.id;
			var _g10 = _g.team;
			if(_g111 == -1) {
				var _g2 = 0;
				var _g12 = this.game.bases;
				while(_g2 < _g12.length) {
					var base1 = _g12[_g2];
					++_g2;
					if(base1.team != _g10) {
						continue;
					}
					base1.isActive = false;
				}
			} else {
				this.getBase(_g10,_g111).isActive = false;
			}
			break;
		case 6:
			var _g37 = _g.id;
			var _g36 = _g.team;
			if(_g37 == -1) {
				var _g3 = 0;
				var _g13 = this.game.bases;
				while(_g3 < _g13.length) {
					var base2 = _g13[_g3];
					++_g3;
					if(base2.team != _g36) {
						continue;
					}
					base2.isActive = !base2.isActive;
				}
			} else {
				var base3 = this.getBase(_g36,_g37);
				base3.isActive = !base3.isActive;
			}
			break;
		case 7:
			var _g48 = _g.distance;
			var isReload = true;
			var _g4 = 0;
			var _g14 = this.game.bases;
			while(_g4 < _g14.length) {
				var base4 = _g14[_g4];
				++_g4;
				if(Math.abs(base4.x - this.x) <= _g48 && Math.abs(base4.y - this.y) <= _g48) {
					if(!base4.isActive) {
						isReload = false;
					}
					base4.isActive = true;
				}
			}
			if(isReload) {
				this.release();
			}
			break;
		case 8:
			var _g34 = _g.distance;
			var isReload1 = true;
			var _g5 = 0;
			var _g15 = this.game.bases;
			while(_g5 < _g15.length) {
				var base5 = _g15[_g5];
				++_g5;
				if(Math.abs(base5.x - this.x) <= _g34 && Math.abs(base5.y - this.y) <= _g34) {
					if(base5.isActive) {
						isReload1 = false;
					}
					base5.isActive = false;
				}
			}
			if(isReload1) {
				this.release();
			}
			break;
		case 9:
			var _g43 = _g.distance;
			var isReload2 = true;
			var _g8 = 0;
			var _g16 = this.game.bases;
			while(_g8 < _g16.length) {
				var base6 = _g16[_g8];
				++_g8;
				if(Math.abs(base6.x - this.x) <= _g43 && Math.abs(base6.y - this.y) <= _g43) {
					base6.isActive = !base6.isActive;
					isReload2 = false;
				}
			}
			if(isReload2) {
				this.release();
			}
			break;
		case 10:
			var _g32 = _g.power;
			var _g31 = _g.radius;
			var _g30 = _g.id;
			if(_g30 == -1) {
				this.game.callAirSupport(this.x,this.y,_g31,_g32);
				return;
			}
			this.game.callAirSupport(this.game.params.airSupport[_g30].x,this.game.params.airSupport[_g30].y,_g31,_g32);
			break;
		case 11:
			var _g52 = _g.power;
			var _g51 = _g.radius;
			var _g50 = _g.id;
			if(_g50 == -1) {
				this.game.callAirSupport(this.x,this.y,_g51,_g52);
				return;
			}
			this.game.callAirSupport(this.game.params.airSupport[_g50].x,this.game.params.airSupport[_g50].y,_g51,_g52);
			break;
		case 12:
			var _g21 = _g.cords;
			this.game.addExplosion(new game_Explosion(this.game,this.tilemap,new game_ExplSets(_g21.x,_g21.y,null,_g.radius,_g.power,null,null,null)));
			break;
		case 13:
			var _g40 = _g.text;
			if(!_g.hasCondition) {
				this.game.levelComplete();
			} else if(!this.game.triggerLevelComplete()) {
				this.release();
				return;
			}
			if(_g40 != null) {
				this.game.clearTextHints();
				this.game.addTextHint(_g40,120);
			}
			break;
		case 14:
			this.game.addTextHint(_g.data,_g.time);
			break;
		case 15:
			var trigger = triggers[_g.id];
			var isReload3 = true;
			var _g17 = 0;
			var _g18 = 1 + _g.count;
			while(_g17 < _g18) {
				++_g17;
				if(!trigger.state.isActive) {
					break;
				}
				isReload3 = false;
				trigger.triggerAction(triggers);
			}
			if(isReload3) {
				this.release();
			}
			break;
		case 16:
			this.triggerArea(triggers,_g.distance,_g.count);
			break;
		case 17:
			this.setTriggerActivity(triggers[_g.id],true);
			break;
		case 18:
			this.setTriggerActivity(triggers[_g.id],false);
			break;
		case 19:
			var trigger1 = triggers[_g.id];
			this.setTriggerActivity(trigger1,!trigger1.state.isActive);
			break;
		case 20:
			var _g181 = _g.distance;
			var _g19 = 0;
			while(_g19 < triggers.length) {
				var trigger2 = triggers[_g19];
				++_g19;
				if(trigger2 == this) {
					continue;
				}
				if(Math.abs(trigger2.x - this.x) <= _g181 && Math.abs(trigger2.y - this.y) <= _g181) {
					this.setTriggerActivity(trigger2,true);
				}
			}
			break;
		case 21:
			var _g191 = _g.distance;
			var _g20 = 0;
			while(_g20 < triggers.length) {
				var trigger3 = triggers[_g20];
				++_g20;
				if(trigger3 == this) {
					continue;
				}
				if(Math.abs(trigger3.x - this.x) <= _g191 && Math.abs(trigger3.y - this.y) <= _g191) {
					this.setTriggerActivity(trigger3,false);
				}
			}
			break;
		case 22:
			var _g45 = _g.distance;
			var _g23 = 0;
			while(_g23 < triggers.length) {
				var trigger4 = triggers[_g23];
				++_g23;
				if(trigger4 == this) {
					continue;
				}
				if(Math.abs(trigger4.x - this.x) <= _g45 && Math.abs(trigger4.y - this.y) <= _g45) {
					this.setTriggerActivity(trigger4,!trigger4.state.isActive);
				}
			}
			break;
		case 23:
			this.setTurretsActivity(_g.distance,true);
			break;
		case 24:
			this.setTurretsActivity(_g.distance,false);
			break;
		case 25:
			this.setTurretsActivity(_g.distance);
			break;
		case 27:
			this.game.params.enemySightDistance = _g.distance;
			break;
		case 28:
			this.game.playMusicTrack(_g.id);
			break;
		case 29:
			if((_g.isAlly ? this.game.getAllyCount(this.game.playerTeam) : this.game.getEnemyCount(this.game.playerTeam)) == _g.count) {
				this.state.isActive = false;
				this.triggerArea(triggers,1,0);
			}
			break;
		case 30:
			this.setTurretsActivity(_g.distance);
			break;
		default:
			haxe_Log.trace("?? " + Std.string(this.type) + " " + this.x + " " + this.y,{ fileName : "game/Trigger.hx", lineNumber : 390, className : "game.Trigger", methodName : "forceAction"});
		}
	}
	,press: function() {
		this.state.isPressed = true;
		this.delay = this.maxDelay;
		if(this.state.isVisible) {
			var tile = this.tilemap.getTile(1,this.x,this.y);
			Sound.forcePlay(kha_Assets.sounds.sounds_ui_button_down);
			if(this.state.isReusable) {
				tile.setFrame((tile.frame + 1) % 2);
			} else {
				tile.setFrame(1);
			}
		}
	}
	,release: function() {
		this.state.isPressed = false;
		if(this.state.isVisible) {
			var tile = this.tilemap.getTile(1,this.x,this.y);
			Sound.forcePlay(kha_Assets.sounds.sounds_ui_button_down);
			tile.setFrame(0);
		}
	}
	,triggerArea: function(triggers,dist,count) {
		var isReload = true;
		var _g = 0;
		while(_g < triggers.length) {
			var trigger = triggers[_g];
			++_g;
			if(trigger.type == this.type) {
				continue;
			}
			if(!trigger.state.isActive) {
				continue;
			}
			isReload = false;
			if(Math.abs(trigger.x - this.x) <= dist && Math.abs(trigger.y - this.y) <= dist) {
				var _g1 = 0;
				var _g11 = 1 + count;
				while(_g1 < _g11) {
					++_g1;
					trigger.triggerAction(triggers);
				}
			}
		}
		if(isReload) {
			this.release();
		}
	}
	,setTriggerActivity: function(trigger,isActive) {
		trigger.state.isActive = isActive;
		if(isActive) {
			trigger.release();
		} else {
			trigger.press();
		}
	}
	,setTurretsActivity: function(dist,isActive) {
		var _g = 0;
		var _g1 = this.game.tanks;
		while(_g < _g1.length) {
			var tank = _g1[_g];
			++_g;
			if(tank.type != "turret") {
				continue;
			}
			if(Math.abs(tank.cell.x - this.x) <= dist && Math.abs(tank.cell.y - this.y) <= dist) {
				if(isActive != null) {
					tank.isActive = isActive;
				} else {
					tank.isActive = !tank.isActive;
				}
			}
		}
	}
	,checkLineForTanks: function(x,y,isHorizontal,isUnsafe,isOneBlock) {
		var hasTanks = false;
		if(this.game.teamsGrid[y][x] != -1) {
			if(isUnsafe) {
				this.killTankOnCell(x,y);
			}
			hasTanks = true;
		}
		if(isOneBlock) {
			return hasTanks;
		}
		var sx = isHorizontal ? 1 : 0;
		var sy = isHorizontal ? 0 : 1;
		if(this.checkTanksLine(x,y,sx,sy,isUnsafe)) {
			hasTanks = true;
		}
		if(this.checkTanksLine(x,y,-sx,-sy,isUnsafe)) {
			hasTanks = true;
		}
		return hasTanks;
	}
	,checkTanksLine: function(x,y,sx,sy,isUnsafe) {
		var hasTanks = false;
		var ix = x + sx;
		var iy = y + sy;
		while(true) {
			var _this = this.tilemap;
			if(!(ix > -1 && iy > -1 && ix < _this.map.w && iy < _this.map.h)) {
				break;
			}
			if(this.tilemap.getTile(1,ix,iy)._id != 0) {
				break;
			}
			if(this.game.teamsGrid[iy][ix] != -1) {
				if(isUnsafe) {
					this.killTankOnCell(ix,iy);
				}
				hasTanks = true;
			}
			ix += sx;
			iy += sy;
		}
		return hasTanks;
	}
	,killTankOnCell: function(x,y) {
		var _g = 0;
		var _g1 = this.game.tanks;
		while(_g < _g1.length) {
			var tank = _g1[_g];
			++_g;
			if(tank.isInCell(x,y)) {
				tank.death();
				break;
			}
		}
	}
	,setWalls: function(x,y,isHorizontal,wallTypes) {
		var _gthis = this;
		var id = wallTypes[Std.random(wallTypes.length)];
		this.tilemap.setTileId(1,x,y,id);
		var sx = isHorizontal ? 1 : 0;
		var sy = isHorizontal ? 0 : 1;
		var ix = x + sx;
		var iy = y + sy;
		while(true) {
			var tmp;
			var _this = _gthis.tilemap;
			if(!(ix > -1 && iy > -1 && ix < _this.map.w && iy < _this.map.h)) {
				tmp = true;
			} else if(_gthis.tilemap.getTile(1,ix,iy)._id != 0) {
				tmp = true;
			} else {
				var id1 = wallTypes[Std.random(wallTypes.length)];
				_gthis.tilemap.setTileId(1,ix,iy,id1);
				tmp = false;
			}
			if(tmp) {
				break;
			}
			ix += sx;
			iy += sy;
		}
		var sx1 = -sx;
		var sy1 = -sy;
		var ix1 = x + sx1;
		var iy1 = y + sy1;
		while(true) {
			var tmp1;
			var _this1 = _gthis.tilemap;
			if(!(ix1 > -1 && iy1 > -1 && ix1 < _this1.map.w && iy1 < _this1.map.h)) {
				tmp1 = true;
			} else if(_gthis.tilemap.getTile(1,ix1,iy1)._id != 0) {
				tmp1 = true;
			} else {
				var id2 = wallTypes[Std.random(wallTypes.length)];
				_gthis.tilemap.setTileId(1,ix1,iy1,id2);
				tmp1 = false;
			}
			if(tmp1) {
				break;
			}
			ix1 += sx1;
			iy1 += sy1;
		}
	}
	,findClosestWall: function(dir) {
		var ix = this.x + dir.x;
		var iy = this.y + dir.y;
		while(true) {
			var _this = this.tilemap;
			if(!(ix > -1 && iy > -1 && ix < _this.map.w && iy < _this.map.h)) {
				return null;
			}
			if(this.tilemap.getTile(2,ix,iy)._id != 0) {
				return null;
			}
			var id = this.tilemap.getTile(1,ix,iy)._id;
			if(id != 0 && id <= 21) {
				return { x : ix, y : iy};
			}
			ix += dir.x;
			iy += dir.y;
		}
	}
	,getBase: function(team,id) {
		var teamId = 0;
		var _g = 0;
		var _g1 = this.game.bases;
		while(_g < _g1.length) {
			var base = _g1[_g];
			++_g;
			if(base.team != team) {
				continue;
			}
			if(id == teamId) {
				return base;
			}
			++teamId;
		}
		throw new js__$Boot_HaxeError("unknown base id");
	}
	,__class__: game_Trigger
};
var game_TurretSets = function(turretType,distance,isStatic,x,y,team,type,dir,hp,shieldHp,speed,reloadDelay,rotationDelay,bulletType,groundHeight,level) {
	this.isStatic = false;
	game_TankSets.call(this,level,groundHeight,bulletType,rotationDelay,reloadDelay,speed,shieldHp,hp,dir,type,team,y,x);
	this.turretType = turretType;
	this.distance = distance;
	if(isStatic != null) {
		this.isStatic = isStatic;
	}
};
$hxClasses["game.TurretSets"] = game_TurretSets;
game_TurretSets.__name__ = "game.TurretSets";
game_TurretSets.__super__ = game_TankSets;
game_TurretSets.prototype = $extend(game_TankSets.prototype,{
	turretType: null
	,distance: null
	,isStatic: null
	,__class__: game_TurretSets
});
var game_Turret = function(game1,tilemap,sets) {
	this.searchCounter = Std.random(3);
	this.searchDelay = 3;
	sets.type = "turret";
	this.turretType = sets.turretType - 1;
	if(this.turretType < 0) {
		this.turretType = 0;
	}
	this.distance = sets.distance;
	this.isStatic = sets.isStatic;
	sets.hp = (sets.team == game1.playerTeam ? game_Turret.allyHps : game_Turret.enemyHps)[this.turretType];
	sets.bulletType = game_Turret.bulletTypes[this.turretType];
	game_Bot.call(this,game1,tilemap,sets);
};
$hxClasses["game.Turret"] = game_Turret;
game_Turret.__name__ = "game.Turret";
game_Turret.__super__ = game_Bot;
game_Turret.prototype = $extend(game_Bot.prototype,{
	turretType: null
	,distance: null
	,isStatic: null
	,searchDelay: null
	,searchCounter: null
	,afterUpdate: function() {
		if(!this.isActive) {
			return;
		}
		var _g = this.aiState;
		switch(_g._hx_index) {
		case 0:
			this.reloadDelay = 14;
			this.findEnemy();
			if(this.aiState == game__$Bot_BotState.Attack) {
				return;
			}
			if(this.isStatic) {
				return;
			}
			if(this.state == game_TankState.Standing) {
				if(Std.random(150) != 0) {
					return;
				}
				var newDir = this.findView();
				if(newDir != null) {
					this.setDirection(newDir.x,newDir.y);
				}
			}
			break;
		case 1:
			var _g1 = _g.dir;
			if(!this.isStatic) {
				this.setDirection(_g1.x,_g1.y);
			}
			this.aiState = game__$Bot_BotState.Searching;
			break;
		case 2:
			this.findEnemy();
			if(this.aiState == game__$Bot_BotState.Attack) {
				this.fire();
			}
			break;
		}
	}
	,findView: function() {
		var left = this.leftRotation;
		var right = this.rightRotation;
		left.x = this.dir.x == 0 ? -1 : 0;
		left.y = this.dir.y == 0 ? -1 : 0;
		right.x = this.dir.x == 0 ? 1 : 0;
		right.y = this.dir.y == 0 ? 1 : 0;
		if(Std.random(2) == 0) {
			var temp = left;
			left = right;
			right = temp;
		}
		if(!this.isViewWall(this.cell.x + left.x,this.cell.y + left.y)) {
			return left;
		}
		if(!this.isViewWall(this.cell.x + right.x,this.cell.y + right.y)) {
			return right;
		}
		var down = this.downRotation;
		down.x = -this.dir.x;
		down.y = -this.dir.y;
		if(!this.isViewWall(this.cell.x + down.x,this.cell.y + down.y)) {
			return down;
		}
		return null;
	}
	,isViewWall: function(x,y) {
		var tile = this.tilemap.getTile(1,x,y);
		if(this.groundHeight == 1) {
			var id = tile._id;
			if(id != 12) {
				return id == 13;
			} else {
				return true;
			}
		}
		if(tile._id >= 9) {
			return tile._id <= 13;
		} else {
			return false;
		}
	}
	,moveOver: function(fromX,fromY) {
	}
	,findEnemy: function() {
		if(this.state == game_TankState.Rotating) {
			return;
		}
		if(this.searchCounter < this.searchDelay) {
			this.searchCounter++;
			return;
		}
		this.searchCounter = 0;
		var dist = this.distance + 1;
		if(this.isStatic) {
			if(this.checkSightLine(this.dir.x,this.dir.y,dist)) {
				return;
			}
			this.aiState = game__$Bot_BotState.Searching;
			return;
		}
		if(this.checkSightLine(0,-1,dist)) {
			return;
		}
		if(this.checkSightLine(0,1,dist)) {
			return;
		}
		if(this.checkSightLine(-1,0,dist)) {
			return;
		}
		if(this.checkSightLine(1,0,dist)) {
			return;
		}
		this.aiState = game__$Bot_BotState.Searching;
	}
	,checkSightLine: function(sx,sy,dist) {
		var ix = sx;
		var iy = sy;
		while(ix * sx != dist && iy * sy != dist) {
			if(this.isViewWall(this.cell.x + ix,this.cell.y + iy)) {
				break;
			}
			var x = this.cell.x + ix;
			var y = this.cell.y + iy;
			var tmp;
			var _this = this.tilemap;
			if(!(x > -1 && y > -1 && x < _this.map.w && y < _this.map.h)) {
				tmp = false;
			} else {
				var toTeam = this.game.teamsGrid[y][x];
				tmp = toTeam > -1 && this.team != toTeam;
			}
			if(tmp) {
				this.setDirection(sx,sy);
				this.aiState = game__$Bot_BotState.Attack;
				return true;
			}
			ix += sx;
			iy += sy;
		}
		return false;
	}
	,addPlayerMoney: function() {
		if(this.team == this.game.playerTeam) {
			return;
		}
		if(this.turretType < 0 || this.turretType >= game_Turret.killScores.length) {
			return;
		}
		this.game.addPlayerMoney(game_Turret.killScores[this.turretType]);
	}
	,__class__: game_Turret
});
var game_effects_AircraftSets = function(x,y,radius,power,bombs) {
	this.x = x;
	this.y = y;
	this.radius = radius;
	this.power = power;
	this.bombs = bombs;
};
$hxClasses["game.effects.AircraftSets"] = game_effects_AircraftSets;
game_effects_AircraftSets.__name__ = "game.effects.AircraftSets";
game_effects_AircraftSets.prototype = {
	x: null
	,y: null
	,radius: null
	,power: null
	,bombs: null
	,__class__: game_effects_AircraftSets
};
var game_effects_Aircraft = function(game1,tilemap,sets) {
	this.game = game1;
	this.tilemap = tilemap;
	this.target = { x : sets.x, y : sets.y};
	this.radius = sets.radius;
	this.power = sets.power;
	this.bombs = sets.bombs;
	var min = Math.min(this.target.x,tilemap.map.h - 1 - this.target.y) | 0;
	var off = Math.ceil(kha_Assets.images.aircrafts.get_width() / 2 / this.tilemap.tileset.tileSize);
	var spawnY = tilemap.map.h + (this.target.x - min) + off;
	this.x = (-(tilemap.map.h - 1 - (this.target.y + min)) - off - 5) * this.tilemap.tileset.tileSize;
	this.y = (spawnY + 5) * this.tilemap.tileset.tileSize - 1;
	this.cell = { x : Math.floor(this.x / this.tilemap.tileset.tileSize), y : Math.floor(this.y / this.tilemap.tileset.tileSize)};
};
$hxClasses["game.effects.Aircraft"] = game_effects_Aircraft;
game_effects_Aircraft.__name__ = "game.effects.Aircraft";
game_effects_Aircraft.prototype = {
	game: null
	,tilemap: null
	,x: null
	,y: null
	,radius: null
	,power: null
	,bombs: null
	,cell: null
	,prevCellX: null
	,target: null
	,update: function() {
		this.x += 1;
		this.y -= 1;
		this.cell.x = Math.floor(this.x / this.tilemap.tileset.tileSize);
		this.cell.y = Math.floor(this.y / this.tilemap.tileset.tileSize);
		if(this.cell.x != this.prevCellX) {
			if(Math.abs(this.cell.x - this.target.x) <= (this.bombs / 2 | 0)) {
				this.game.addExplosion(new game_Explosion(this.game,this.tilemap,new game_ExplSets(this.cell.x,this.cell.y,null,this.radius,this.power,null,null,null)));
			}
			this.prevCellX = this.cell.x;
		}
		if(this.y < -kha_Assets.images.aircrafts.get_height()) {
			this.game.removeAircraft(this);
		}
	}
	,render: function(g) {
		var image = kha_Assets.images.aircrafts;
		var frameW = image.get_width() / 2 | 0;
		var scale = this.tilemap.scale;
		var camX = this.tilemap.camera.get_x();
		var camY = this.tilemap.camera.get_y();
		g.set_color(-1);
		khm_utils_Atlas.drawSubImage(g,image,(this.x * scale | 0) / scale + camX - frameW / 2,(this.y * scale | 0) / scale + camY - frameW / 2,frameW,0,frameW,image.get_height());
		khm_utils_Atlas.drawSubImage(g,image,((this.x + ((this.x + camX) / khm_Screen.w * 120 - 60)) * scale | 0) / scale + camX - frameW / 2,((this.y + ((this.y + camY) / khm_Screen.h * 120 - 60)) * scale | 0) / scale + camY - frameW / 2,0,0,frameW,image.get_height());
	}
	,__class__: game_effects_Aircraft
};
var game_effects_Artillery = function(game1,tilemap,x,y,dir,dist,radius,power,speed) {
	this.explAdded = false;
	this.game = game1;
	this.tilemap = tilemap;
	this.x = this.startX = x;
	this.y = this.startY = y;
	this.dir = { x : dir.x, y : dir.y};
	this.dist = dist;
	this.radius = radius;
	this.power = power;
	this.speed = 0.5 + speed / 10;
	var tileSize = tilemap.tileset.tileSize;
	var volume = game1.playerDistVolume(x / tileSize | 0,y / tileSize | 0);
	new Sound(kha_Assets.sounds.sounds_shell_artillery,false).play(volume);
};
$hxClasses["game.effects.Artillery"] = game_effects_Artillery;
game_effects_Artillery.__name__ = "game.effects.Artillery";
game_effects_Artillery.prototype = {
	game: null
	,tilemap: null
	,startX: null
	,startY: null
	,x: null
	,y: null
	,dir: null
	,dist: null
	,radius: null
	,power: null
	,speed: null
	,explAdded: null
	,update: function() {
		this.x += this.dir.x * this.speed;
		this.y += this.dir.y * this.speed;
		var maxDist = this.dist * this.tilemap.tileset.tileSize;
		if(Math.abs(this.startX - this.x) + Math.abs(this.startY - this.y) > maxDist) {
			this.addExplosion();
			if(Math.abs(this.startX - this.x) + Math.abs(this.startY - this.y) > maxDist + 10) {
				this.game.removeArtillery(this);
			}
		}
	}
	,render: function(g) {
		g.set_color(-1);
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			if(this.dir.x != 0 && Math.abs(this.startX - this.x) < i * 5) {
				break;
			}
			if(this.dir.y != 0 && Math.abs(this.startY - this.y) < i * 5) {
				break;
			}
			this.drawPart(g,22 - i,i * 5);
		}
		this.drawPart(g,12,0,true);
	}
	,drawPart: function(g,frame,delay,isShadow) {
		if(isShadow == null) {
			isShadow = false;
		}
		var img = kha_Assets.images.bullets;
		var frameW = img.get_width() / (img.get_width() / img.get_height() | 0) | 0;
		var scale = this.tilemap.scale;
		var tileSize = this.tilemap.tileset.tileSize;
		var maxDist = this.dist * tileSize;
		var x = this.x - this.dir.x * delay;
		var y = this.y - this.dir.y * delay;
		var d = Math.abs(this.startX - x) + Math.abs(this.startY - y);
		if(d > maxDist) {
			return;
		}
		var offY2 = Math.sin(d / maxDist * Math.PI) * tileSize * 2;
		if(isShadow) {
			offY2 = 0;
		}
		khm_utils_Atlas.drawSubImage(g,img,(x * scale | 0) / scale + this.tilemap.camera.get_x() + ((tileSize - frameW) / 2 | 0),(y * scale | 0) / scale + this.tilemap.camera.get_y() + ((tileSize - img.get_height()) / 2 | 0) - (offY2 | 0),frameW * frame,0,frameW,img.get_height());
	}
	,addExplosion: function() {
		if(this.explAdded) {
			return;
		}
		var tileSize = this.tilemap.tileset.tileSize;
		this.game.addExplosion(new game_Explosion(this.game,this.tilemap,new game_ExplSets(Math.round(this.x / tileSize),Math.round(this.y / tileSize),null,this.radius,this.power,null,null,null)));
		this.explAdded = true;
	}
	,__class__: game_effects_Artillery
};
var game_effects_Border = function() { };
$hxClasses["game.effects.Border"] = game_effects_Border;
game_effects_Border.__name__ = "game.effects.Border";
game_effects_Border.drawBorders = function(g,tilemap) {
	var tileSize = tilemap.tileset.tileSize;
	game_effects_Border.drawOverlayLine(g,tilemap,tilemap.map.w * tileSize,0,0);
	game_effects_Border.drawOverlayLine(g,tilemap,tilemap.map.w * tileSize,tilemap.map.h * tileSize,90);
	game_effects_Border.drawOverlayLine(g,tilemap,0,tilemap.map.h * tileSize,180);
	game_effects_Border.drawOverlayLine(g,tilemap,0,0,270);
};
game_effects_Border.drawOverlayLine = function(g,tilemap,x,y,ang) {
	var image = kha_Assets.images.overlay;
	var frameW = image.get_width();
	var camX = tilemap.camera.get_x();
	var camY = tilemap.camera.get_y();
	var scale = tilemap.scale;
	var tileSize = tilemap.tileset.tileSize;
	var length = ang % 180 == 0 ? tilemap.map.h * tileSize : tilemap.map.w * tileSize;
	g.pushRotation(ang * Math.PI / 180,(x + camX) * scale,(y + camY) * scale);
	g.set_color(-2013265920);
	khm_utils_Atlas.drawScaledSubImage(g,kha_Assets.images.gui_pixel,1,1,1,1,x + camX - 1,y + camY,frameW / 2,length);
	var imageX = frameW / 2;
	var imageY = frameW / 2;
	var imageW = frameW - frameW / 2;
	g.set_color(1090502656);
	khm_utils_Atlas.drawScaledSubImage(g,image,imageX,imageY,imageW,1,x + camX,y + camY,frameW / 2,length);
	khm_utils_Atlas.drawSubImage(g,image,x + camX,y + length + camY,imageX,imageY - 1,imageW,frameW / 2);
	g.popTransformation();
};
var khm_utils_Pool_$game_$effects_$Cloud = function(allocFunc) {
	this.allocFunc = allocFunc;
	this.pool = [];
};
$hxClasses["khm.utils.Pool_game_effects_Cloud"] = khm_utils_Pool_$game_$effects_$Cloud;
khm_utils_Pool_$game_$effects_$Cloud.__name__ = "khm.utils.Pool_game_effects_Cloud";
khm_utils_Pool_$game_$effects_$Cloud.prototype = {
	pool: null
	,allocFunc: null
	,__class__: khm_utils_Pool_$game_$effects_$Cloud
};
var game_effects_Cloud = function() {
	game_Sprite.call(this);
};
$hxClasses["game.effects.Cloud"] = game_effects_Cloud;
game_effects_Cloud.__name__ = "game.effects.Cloud";
game_effects_Cloud.__super__ = game_Sprite;
game_effects_Cloud.prototype = $extend(game_Sprite.prototype,{
	update: function() {
		this.x += 0.2;
		this.y -= 0.15;
		if(this.y < -this.tilemap.camera.get_y() - kha_Assets.images.clouds.get_height() || this.x > khm_Screen.w - this.tilemap.camera.get_x()) {
			this.remove();
		}
	}
	,remove: function() {
		game_effects_Cloud.pool.pool.push(this);
		this.game.removeCloud(this);
	}
	,render: function(g) {
		g.set_color(-1);
		var frameW = this.image.get_width() / this.length | 0;
		var scale = this.tilemap.scale;
		var camX = this.tilemap.camera.get_x();
		var camY = this.tilemap.camera.get_y();
		g.set_color(-2013265920);
		khm_utils_Atlas.drawSubImage(g,this.image,(this.x * scale | 0) / scale + camX,(this.y * scale | 0) / scale + camY,frameW * this.current,0,frameW,this.image.get_height());
		var x = this.x + ((this.x + camX) / khm_Screen.w * 160 - 80);
		var y = this.y + ((this.y + camY) / khm_Screen.h * 160 - 80);
		g.set_color(-1);
		khm_utils_Atlas.drawSubImage(g,this.image,(x * scale | 0) / scale + camX,(y * scale | 0) / scale + camY,frameW * this.current,0,frameW,this.image.get_height());
	}
	,__class__: game_effects_Cloud
});
var game_effects_Dynamite = function(game1,tilemap,sets,explType,time) {
	this.explType = explType;
	this.time = time;
	game_TileSprite.call(this,game1,tilemap,sets);
};
$hxClasses["game.effects.Dynamite"] = game_effects_Dynamite;
game_effects_Dynamite.__name__ = "game.effects.Dynamite";
game_effects_Dynamite.__super__ = game_TileSprite;
game_effects_Dynamite.prototype = $extend(game_TileSprite.prototype,{
	time: null
	,explType: null
	,beforeUpdate: function() {
		this.time--;
		if(this.time < 0) {
			this.tilemap.setTileId(1,this.x,this.y,0);
			var radius;
			switch(this.explType) {
			case 0:
				radius = 3;
				break;
			case 1:
				radius = 3;
				break;
			case 2:
				radius = 4;
				break;
			}
			var power;
			switch(this.explType) {
			case 0:
				power = 7;
				break;
			case 1:
				power = 10;
				break;
			case 2:
				power = 19;
				break;
			}
			this.game.addExplosion(new game_Explosion(this.game,this.tilemap,new game_ExplSets(this.x,this.y,null,radius,power,null,null,null)));
			this.remove();
		}
	}
	,__class__: game_effects_Dynamite
});
var khm_utils_Pool_$game_$effects_$ExplEffect = function(allocFunc) {
	this.allocFunc = allocFunc;
	this.pool = [];
};
$hxClasses["khm.utils.Pool_game_effects_ExplEffect"] = khm_utils_Pool_$game_$effects_$ExplEffect;
khm_utils_Pool_$game_$effects_$ExplEffect.__name__ = "khm.utils.Pool_game_effects_ExplEffect";
khm_utils_Pool_$game_$effects_$ExplEffect.prototype = {
	pool: null
	,allocFunc: null
	,__class__: khm_utils_Pool_$game_$effects_$ExplEffect
};
var game_effects_ExplEffect = function() {
	game_Sprite.call(this);
};
$hxClasses["game.effects.ExplEffect"] = game_effects_ExplEffect;
game_effects_ExplEffect.__name__ = "game.effects.ExplEffect";
game_effects_ExplEffect.__super__ = game_Sprite;
game_effects_ExplEffect.prototype = $extend(game_Sprite.prototype,{
	overlayX: null
	,overlayY: null
	,overlayTime: null
	,overlayFrame: null
	,overlayColor: null
	,beforeUpdate: function() {
		this.x -= 0.05;
		this.y -= 0.20;
		this.overlayFrame++;
		if(this.overlayFrame > 40 && this.overlayFrame % 3 == 0) {
			this.current--;
		}
	}
	,render: function(g) {
		this.drawOverlay(g);
		var frameW = this.image.get_width() / this.length | 0;
		var scale = this.tilemap.scale;
		var camX = this.tilemap.camera.get_x();
		var camY = this.tilemap.camera.get_y();
		g.set_color(-1);
		khm_utils_Atlas.drawSubImage(g,this.image,(this.x * scale | 0) / scale + camX,(this.y * scale | 0) / scale + camY,frameW * this.current,0,frameW,this.image.get_height());
	}
	,drawOverlay: function(g) {
		var image = kha_Assets.images.overlay;
		var camX = this.tilemap.camera.get_x();
		var camY = this.tilemap.camera.get_y();
		var scale = this.tilemap.scale;
		if(this.overlayFrame > this.overlayTime) {
			return;
		}
		var frame = this.overlayFrame;
		if(this.overlayFrame > this.overlayTime / 2) {
			frame = this.overlayTime - this.overlayFrame;
		}
		this.overlayColor = (1 / this.overlayTime * frame * 255 | 0) << 24 | (((this.overlayColor & 16711680) >>> 16) * 0.00392156862745098 * 255 | 0) << 16 | (((this.overlayColor & 65280) >>> 8) * 0.00392156862745098 * 255 | 0) << 8 | ((this.overlayColor & 255) * 0.00392156862745098 * 255 | 0);
		g.set_color(this.overlayColor);
		khm_utils_Atlas.drawImage(g,image,(this.overlayX * scale | 0) / scale + camX,(this.overlayY * scale | 0) / scale + camY);
	}
	,remove: function() {
		game_effects_ExplEffect.pool.pool.push(this);
		this.game.removeSprite(this);
	}
	,__class__: game_effects_ExplEffect
});
var game_effects_Palm = function(game1,tilemap,sets) {
	game_Sprite.call(this);
	this.x = sets.x;
	this.y = sets.y;
	this.image = sets.image;
	this.start = sets.start;
	this.current = sets.current;
	this.end = sets.end;
	this.length = sets.length;
	this.delay = this.frameDelay = sets.frameDelay;
	this.isReversed = sets.isReversed;
	this.afterInit(game1,tilemap,sets.center);
};
$hxClasses["game.effects.Palm"] = game_effects_Palm;
game_effects_Palm.__name__ = "game.effects.Palm";
game_effects_Palm.__super__ = game_Sprite;
game_effects_Palm.prototype = $extend(game_Sprite.prototype,{
	render: function(g) {
		var frameW = this.image.get_width() / (this.image.get_width() / this.image.get_height() | 0) | 0;
		g.set_color(-1);
		var camX = this.tilemap.camera.get_x();
		var camY = this.tilemap.camera.get_y();
		var tileSize = this.tilemap.tileset.tileSize;
		var offX = (this.x * tileSize + camX) / khm_Screen.w * 20 - 10;
		var offY = (this.y * tileSize + camY) / khm_Screen.h * 20 - 10;
		khm_utils_Atlas.drawSubImage(g,this.image,this.x * tileSize + tileSize * 1.75 - frameW / 2 + camX,this.y * tileSize + tileSize * 1.25 - this.image.get_height() / 2 + camY,frameW * this.end,0,frameW,this.image.get_height());
		khm_utils_Atlas.drawSubImage(g,this.image,this.x * tileSize + tileSize * 1.5 - frameW / 2 + camX + offX,this.y * tileSize + tileSize * 0.75 - this.image.get_height() / 2 + camY + offY,frameW * this.current,0,frameW,this.image.get_height());
	}
	,__class__: game_effects_Palm
});
var game_effects_Radar = function(game1,tilemap) {
	this.time = 0;
	this.maxTime = 50;
	this.showObjects = false;
	this.isActive = false;
	this.game = game1;
	this.keys = game1.keys;
	this.tilemap = tilemap;
};
$hxClasses["game.effects.Radar"] = game_effects_Radar;
game_effects_Radar.__name__ = "game.effects.Radar";
game_effects_Radar.prototype = {
	game: null
	,keys: null
	,tilemap: null
	,isActive: null
	,showObjects: null
	,maxTime: null
	,time: null
	,update: function() {
		this.time--;
		if(this.time < 0) {
			this.showObjects = !this.showObjects;
			this.time = this.maxTime;
		}
		if(this.isKey(81) || this.isKey(90) || this.isKey(32) || this.isKey(13)) {
			this.isActive = false;
		}
	}
	,isKey: function(key) {
		if(this.keys.h[key]) {
			this.keys.h[key] = false;
			return true;
		}
		return false;
	}
	,render: function(g) {
		var size = Math.min(khm_Screen.w / this.tilemap.map.w,khm_Screen.h / this.tilemap.map.h) * 0.9 | 0;
		if(size < 3) {
			size = 3;
		}
		var cx = khm_Screen.w / 2 - this.tilemap.map.w * size / 2 | 0;
		var cy = khm_Screen.h / 2 - this.tilemap.map.h * size / 2 | 0;
		var _g = 0;
		var _g1 = this.tilemap.map.h;
		while(_g < _g1) {
			var iy = _g++;
			var _g2 = 0;
			var _g11 = this.tilemap.map.w;
			while(_g2 < _g11) {
				var ix = _g2++;
				g.set_color(this.getBgColor(this.tilemap.map.layers[0][iy][ix]._id));
				g.fillRect(size * ix + cx,size * iy + cy,size,size);
			}
		}
		var _g21 = 0;
		var _g3 = this.tilemap.map.h;
		while(_g21 < _g3) {
			var iy1 = _g21++;
			var _g22 = 0;
			var _g31 = this.tilemap.map.w;
			while(_g22 < _g31) {
				var ix1 = _g22++;
				var id = this.tilemap.map.layers[1][iy1][ix1]._id;
				if(this.getTgColor(id) != 0) {
					continue;
				}
				this.drawStaticObject(g,id,size * ix1 + cx,size * iy1 + cy,size);
			}
		}
		var _g4 = 0;
		var _g5 = this.tilemap.map.h;
		while(_g4 < _g5) {
			var iy2 = _g4++;
			var _g41 = 0;
			var _g51 = this.tilemap.map.w;
			while(_g41 < _g51) {
				var ix2 = _g41++;
				var color = this.getTgColor(this.tilemap.map.layers[1][iy2][ix2]._id);
				if(color == 0) {
					continue;
				}
				color = ((color >>> 24) * 0.00392156862745098 * 255 | 0) << 24 | (((color & 16711680) >>> 16) * 0.00392156862745098 * 0.5 * 255 | 0) << 16 | (((color & 65280) >>> 8) * 0.00392156862745098 * 255 | 0) << 8 | ((color & 255) * 0.00392156862745098 * 255 | 0);
				color = ((color >>> 24) * 0.00392156862745098 * 255 | 0) << 24 | (((color & 16711680) >>> 16) * 0.00392156862745098 * 255 | 0) << 16 | (((color & 65280) >>> 8) * 0.00392156862745098 * 0.5 * 255 | 0) << 8 | ((color & 255) * 0.00392156862745098 * 255 | 0);
				color = ((color >>> 24) * 0.00392156862745098 * 255 | 0) << 24 | (((color & 16711680) >>> 16) * 0.00392156862745098 * 255 | 0) << 16 | (((color & 65280) >>> 8) * 0.00392156862745098 * 255 | 0) << 8 | ((color & 255) * 0.00392156862745098 * 0.5 * 255 | 0);
				g.set_color(color);
				var s = 1 / this.game.scale;
				g.drawRect(size * ix2 + cx - s / 2,size * iy2 + cy - s / 2,size + s,size + s,s);
			}
		}
		var _g6 = 0;
		var _g7 = this.tilemap.map.h;
		while(_g6 < _g7) {
			var iy3 = _g6++;
			var _g61 = 0;
			var _g71 = this.tilemap.map.w;
			while(_g61 < _g71) {
				var ix3 = _g61++;
				var color1 = this.getTgColor(this.tilemap.map.layers[1][iy3][ix3]._id);
				if(color1 == 0) {
					continue;
				}
				g.set_color(color1);
				g.fillRect(size * ix3 + cx,size * iy3 + cy,size,size);
			}
		}
		var _g8 = 0;
		var _g9 = this.game.buildings;
		while(_g8 < _g9.length) {
			var building = _g9[_g8];
			++_g8;
			this.drawBuilding(g,building,building.x / this.tilemap.tileset.tileSize * size + cx,building.y / this.tilemap.tileset.tileSize * size + cy,size);
		}
		var _g10 = 0;
		var _g111 = this.game.tanks;
		while(_g10 < _g111.length) {
			var tank = _g111[_g10];
			++_g10;
			var x = tank.x / this.tilemap.tileset.tileSize * size + cx;
			var y = tank.y / this.tilemap.tileset.tileSize * size + cy;
			if(tank.type == "turret") {
				this.drawTurret(g,tank,x,y,size);
			} else {
				this.drawTank(g,tank,x,y,size);
			}
		}
		g.set_color(-16777216);
		var s1 = 1 / this.game.scale;
		g.drawRect(cx - s1 / 2,cy - s1 / 2,this.tilemap.map.w * size + s1,this.tilemap.map.h * size + s1,s1);
		if(!this.showObjects) {
			return;
		}
		var _g12 = 0;
		var _g13 = this.tilemap.map.h;
		while(_g12 < _g13) {
			var iy4 = _g12++;
			var _g121 = 0;
			var _g131 = this.tilemap.map.w;
			while(_g121 < _g131) {
				var ix4 = _g121++;
				this.drawBonus(g,this.tilemap.map.layers[1][iy4][ix4]._id,size * ix4 + cx,size * iy4 + cy,size);
			}
		}
	}
	,getBgColor: function(id) {
		if(id >= 1 && id <= 23) {
			return -10985166;
		}
		if(id >= 53 && id <= 55) {
			return -10985166;
		}
		if(id >= 101 && id <= 106) {
			return -10985166;
		}
		if(id >= 24 && id <= 33) {
			return -9276312;
		}
		if(id >= 91 && id <= 100) {
			return -9276312;
		}
		if(id >= 34 && id <= 52) {
			return -7639235;
		}
		if(id >= 56 && id <= 90) {
			return -5006473;
		}
		return -16777216;
	}
	,getTgColor: function(id) {
		if(id == 0) {
			return 0;
		}
		if(id >= 1 && id <= 8) {
			return -11388657;
		}
		if(id >= 9 && id <= 13) {
			return -12566464;
		}
		if(id >= 14 && id <= 18) {
			return -11388657;
		}
		if(id >= 19 && id <= 21) {
			return -12753045;
		}
		return 0;
	}
	,drawStaticObject: function(g,id,x,y,size) {
		if(id == 0) {
			return;
		}
		var tmp;
		switch(id) {
		case 34:
			tmp = -16738048;
			break;
		case 35:
			tmp = -6750208;
			break;
		case 36:
			tmp = -16777063;
			break;
		default:
			tmp = -1;
		}
		g.set_color(tmp);
		switch(id) {
		case 34:case 35:case 36:
			var s = 1 / this.game.scale;
			var _g = 0;
			var _g1 = size / s / 2 | 0;
			while(_g < _g1) {
				var off = _g++ * 2 * s;
				g.drawLine(x + off,y,x + size,y + size - off,s);
				g.drawLine(x,y + off,x + size - off,y + size,s);
			}
			break;
		default:
		}
	}
	,drawBuilding: function(g,building,x,y,size) {
		var tmp;
		switch(building.team) {
		case 1:
			tmp = -16738048;
			break;
		case 2:
			tmp = -6750208;
			break;
		case 3:
			tmp = -16777063;
			break;
		default:
			tmp = -6711040;
		}
		g.set_color(tmp);
		var s = size / 3;
		g.fillRect(x + s,y + s,size * 2 - s * 2,size * 2 - s * 2);
		var lineW = 1 / this.game.scale;
		var color = g.get_color();
		color = ((color >>> 24) * 0.00392156862745098 * 255 | 0) << 24 | (((color & 16711680) >>> 16) * 0.00392156862745098 * 0.5 * 255 | 0) << 16 | (((color & 65280) >>> 8) * 0.00392156862745098 * 255 | 0) << 8 | ((color & 255) * 0.00392156862745098 * 255 | 0);
		color = ((color >>> 24) * 0.00392156862745098 * 255 | 0) << 24 | (((color & 16711680) >>> 16) * 0.00392156862745098 * 255 | 0) << 16 | (((color & 65280) >>> 8) * 0.00392156862745098 * 0.5 * 255 | 0) << 8 | ((color & 255) * 0.00392156862745098 * 255 | 0);
		color = ((color >>> 24) * 0.00392156862745098 * 255 | 0) << 24 | (((color & 16711680) >>> 16) * 0.00392156862745098 * 255 | 0) << 16 | (((color & 65280) >>> 8) * 0.00392156862745098 * 255 | 0) << 8 | ((color & 255) * 0.00392156862745098 * 0.5 * 255 | 0);
		g.set_color(color);
		g.drawRect(x + s - lineW / 2,y + s - lineW / 2,size * 2 - s * 2 + lineW,size * 2 - s * 2 + lineW,lineW);
	}
	,drawTurret: function(g,tank,x,y,size) {
		var tmp;
		switch(tank.team) {
		case 1:
			tmp = -16738048;
			break;
		case 2:
			tmp = -6750208;
			break;
		case 3:
			tmp = -16777063;
			break;
		default:
			tmp = -6711040;
		}
		g.set_color(tmp);
		var s = size / 5;
		g.fillRect(x + s,y + s,size - s * 2,size - s * 2);
		var lineW = 1 / this.game.scale;
		var color = g.get_color();
		color = ((color >>> 24) * 0.00392156862745098 * 255 | 0) << 24 | (((color & 16711680) >>> 16) * 0.00392156862745098 * 0.5 * 255 | 0) << 16 | (((color & 65280) >>> 8) * 0.00392156862745098 * 255 | 0) << 8 | ((color & 255) * 0.00392156862745098 * 255 | 0);
		color = ((color >>> 24) * 0.00392156862745098 * 255 | 0) << 24 | (((color & 16711680) >>> 16) * 0.00392156862745098 * 255 | 0) << 16 | (((color & 65280) >>> 8) * 0.00392156862745098 * 0.5 * 255 | 0) << 8 | ((color & 255) * 0.00392156862745098 * 255 | 0);
		color = ((color >>> 24) * 0.00392156862745098 * 255 | 0) << 24 | (((color & 16711680) >>> 16) * 0.00392156862745098 * 255 | 0) << 16 | (((color & 65280) >>> 8) * 0.00392156862745098 * 255 | 0) << 8 | ((color & 255) * 0.00392156862745098 * 0.5 * 255 | 0);
		g.set_color(color);
		g.drawRect(x + s - lineW / 2,y + s - lineW / 2,size - s * 2 + lineW,size - s * 2 + lineW,lineW);
	}
	,drawTank: function(g,tank,x,y,size) {
		var tmp;
		switch(tank.team) {
		case 1:
			tmp = -16738048;
			break;
		case 2:
			tmp = -6750208;
			break;
		case 3:
			tmp = -16777063;
			break;
		default:
			tmp = -6711040;
		}
		g.set_color(tmp);
		if(tank == this.game.player) {
			g.set_color(-6711040);
		}
		g.fillTriangle(x + size / 2 + size / 2 * tank.dir.x,y + size / 2 + size / 2 * tank.dir.y,x + size / 2 - size / 2 * tank.dir.x + size / 2 * tank.dir.y,y + size / 2 - size / 2 * tank.dir.y + size / 2 * tank.dir.x,x + size / 2 - size / 2 * tank.dir.x - size / 2 * tank.dir.y,y + size / 2 - size / 2 * tank.dir.y - size / 2 * tank.dir.x);
	}
	,drawBonus: function(g,id,x,y,size) {
		if(id >= 26 && id <= 33) {
			g.set_color(-1);
			var s = size / 6;
			g.fillRect(x + s,y + s,size - s * 2,size - s * 2);
		} else if(id >= 37 && id <= 39) {
			g.set_color(-16777063);
			var s1 = size / 6;
			g.fillTriangle(x + s1,y + s1,x + s1,y + size - s1,x + size - s1,y + size - s1);
		}
	}
	,__class__: game_effects_Radar
};
var game_effects_Rocket = function(game1,tilemap,x,y,dir) {
	this.smokeTime = 0;
	this.speed = 0.0;
	this.isAlive = true;
	this.game = game1;
	this.tilemap = tilemap;
	this.dir = { x : dir.x, y : dir.y};
	this.nextDir = { x : dir.x, y : dir.y};
	this.w = 4;
	this.h = 8;
	this.updateFrame();
	this.x = x + dir.x * this.tilemap.tileset.tileSize / 4 + this.tilemap.tileset.tileSize / 2 - this.w / 2;
	this.y = y + dir.y * this.tilemap.tileset.tileSize / 4 + this.tilemap.tileset.tileSize / 2 - this.h / 2 + (-3);
	var volume = game1.playerDistVolume(x / this.tilemap.tileset.tileSize | 0,y / this.tilemap.tileset.tileSize | 0);
	new Sound(kha_Assets.sounds.sounds_shell_warhead_guided,false).play(volume);
};
$hxClasses["game.effects.Rocket"] = game_effects_Rocket;
game_effects_Rocket.__name__ = "game.effects.Rocket";
game_effects_Rocket.prototype = {
	game: null
	,tilemap: null
	,isAlive: null
	,x: null
	,y: null
	,w: null
	,h: null
	,dir: null
	,nextDir: null
	,frame: null
	,speed: null
	,smokeTime: null
	,updateFrame: function() {
		if(this.dir.y == 1) {
			this.frame = 0;
		} else if(this.dir.x == -1) {
			this.frame = 1;
		} else if(this.dir.y == -1) {
			this.frame = 2;
		} else if(this.dir.x == 1) {
			this.frame = 3;
		}
		this.frame += 8;
		if(this.dir.x != 0) {
			var temp = this.w;
			this.w = this.h;
			this.h = temp;
		}
	}
	,setNextDir: function(x,y) {
		this.nextDir.x = x;
		this.nextDir.y = y;
	}
	,explode: function() {
		if(!this.isAlive) {
			return;
		}
		this.explodeOnCell((this.x + this.w / 2) / this.tilemap.tileset.tileSize | 0,(this.y + this.h / 2) / this.tilemap.tileset.tileSize | 0);
	}
	,explodeOnCell: function(x,y) {
		if(!this.isAlive) {
			return;
		}
		this.game.addExplosion(new game_Explosion(this.game,this.tilemap,new game_ExplSets(x,y,null,3,32,null,null,null)));
		this.game.removeRocket(this);
		this.isAlive = false;
	}
	,update: function() {
		this.x += this.dir.x * this.speed;
		this.y += this.dir.y * this.speed;
		this.speed += 0.015;
		if(this.speed > 4) {
			this.speed = 4;
		}
		if(this.isWallCollision(this.x / this.tilemap.tileset.tileSize | 0,this.y / this.tilemap.tileset.tileSize | 0)) {
			return;
		}
		if(this.isWallCollision((this.x + this.w) / this.tilemap.tileset.tileSize | 0,(this.y + this.h) / this.tilemap.tileset.tileSize | 0)) {
			return;
		}
		if((this.dir.x != this.nextDir.x || this.dir.y != this.nextDir.y) && this.isChangeDir()) {
			var tx = (this.x + this.w / 2) / this.tilemap.tileset.tileSize | 0;
			var ty = (this.y + this.h / 2) / this.tilemap.tileset.tileSize | 0;
			this.setDir(this.nextDir.x,this.nextDir.y);
			this.x = tx * this.tilemap.tileset.tileSize + this.tilemap.tileset.tileSize / 2 - this.w / 2;
			this.y = ty * this.tilemap.tileset.tileSize + this.tilemap.tileset.tileSize / 2 - this.h / 2 + (-3);
		}
		if(this.smokeTime > 10 - this.speed * 2) {
			var x = this.x + this.w / 2 - this.dir.x * this.w;
			var y = this.y + this.h / 2 - this.dir.y * (this.h + (-3));
			var tmp = this.game;
			var game1 = this.game;
			var tilemap = this.tilemap;
			var image = kha_Assets.images.expl_small;
			var _this = game_effects_RocketSmoke.pool;
			var sprite = _this.pool.length == 0 ? _this.allocFunc() : _this.pool.pop();
			sprite.x = x;
			sprite.y = y;
			sprite.image = image;
			sprite.start = 9;
			sprite.current = -1;
			sprite.end = -1;
			sprite.length = -1;
			sprite.delay = sprite.frameDelay = 16;
			sprite.isReversed = false;
			sprite.afterInit(game1,tilemap,true);
			tmp.addSprite(sprite);
			this.smokeTime = 0;
		}
		this.smokeTime++;
	}
	,setDir: function(x,y) {
		if(this.dir.x == x && this.dir.y == y) {
			return;
		}
		this.dir.x = x;
		this.dir.y = y;
		this.speed = 0;
		this.updateFrame();
	}
	,isChangeDir: function() {
		if(this.dir.x != 0) {
			if((this.x + this.w / 2) % this.tilemap.tileset.tileSize > this.tilemap.tileset.tileSize / 2 - 2) {
				return (this.x + this.w / 2) % this.tilemap.tileset.tileSize < this.tilemap.tileset.tileSize / 2 + 2;
			} else {
				return false;
			}
		}
		if(this.dir.y != 0) {
			if((this.y + this.h / 2) % this.tilemap.tileset.tileSize > this.tilemap.tileset.tileSize / 2 - 2) {
				return (this.y + this.h / 2) % this.tilemap.tileset.tileSize < this.tilemap.tileset.tileSize / 2 + 2;
			} else {
				return false;
			}
		}
		return false;
	}
	,isWallCollision: function(x,y) {
		var _this = this.tilemap;
		if(!(x > -1 && y > -1 && x < _this.map.w && y < _this.map.h) || !this.tilemap.getTile(1,x,y).props.permeable) {
			this.explodeOnCell(x,y);
			var id = this.tilemap.getTile(1,x,y)._id;
			var _this1 = this.tilemap;
			if(x > -1 && y > -1 && x < _this1.map.w && y < _this1.map.h) {
				if(id != 12 && id != 13) {
					this.tilemap.setTileId(1,x,y,0);
				}
			}
			return true;
		}
		return false;
	}
	,render: function(g) {
		var img = kha_Assets.images.bullets;
		var frameW = img.get_width() / (img.get_width() / img.get_height() | 0) | 0;
		var offX = (this.w - frameW) / 2 | 0;
		var offY = (this.h - img.get_height()) / 2 | 0;
		var camX = this.tilemap.camera.get_x();
		var camY = this.tilemap.camera.get_y();
		var scale = this.tilemap.scale;
		g.set_color(-1);
		khm_utils_Atlas.drawSubImage(g,img,(this.x * scale | 0) / scale + camX + offX,(this.y * scale | 0) / scale + camY + offY,this.frame * frameW,0,frameW,img.get_height());
	}
	,__class__: game_effects_Rocket
};
var khm_utils_Pool_$game_$effects_$RocketSmoke = function(allocFunc) {
	this.allocFunc = allocFunc;
	this.pool = [];
};
$hxClasses["khm.utils.Pool_game_effects_RocketSmoke"] = khm_utils_Pool_$game_$effects_$RocketSmoke;
khm_utils_Pool_$game_$effects_$RocketSmoke.__name__ = "khm.utils.Pool_game_effects_RocketSmoke";
khm_utils_Pool_$game_$effects_$RocketSmoke.prototype = {
	pool: null
	,allocFunc: null
	,__class__: khm_utils_Pool_$game_$effects_$RocketSmoke
};
var game_effects_RocketSmoke = function() {
	game_Sprite.call(this);
};
$hxClasses["game.effects.RocketSmoke"] = game_effects_RocketSmoke;
game_effects_RocketSmoke.__name__ = "game.effects.RocketSmoke";
game_effects_RocketSmoke.__super__ = game_Sprite;
game_effects_RocketSmoke.prototype = $extend(game_Sprite.prototype,{
	beforeUpdate: function() {
		this.x -= 0.10;
		this.y -= 0.10;
	}
	,remove: function() {
		game_effects_RocketSmoke.pool.pool.push(this);
		this.game.removeSprite(this);
	}
	,__class__: game_effects_RocketSmoke
});
var khm_utils_Pool_$game_$effects_$Smoke = function(allocFunc) {
	this.allocFunc = allocFunc;
	this.pool = [];
};
$hxClasses["khm.utils.Pool_game_effects_Smoke"] = khm_utils_Pool_$game_$effects_$Smoke;
khm_utils_Pool_$game_$effects_$Smoke.__name__ = "khm.utils.Pool_game_effects_Smoke";
khm_utils_Pool_$game_$effects_$Smoke.prototype = {
	pool: null
	,allocFunc: null
	,__class__: khm_utils_Pool_$game_$effects_$Smoke
};
var game_effects_Smoke = function() {
	game_Sprite.call(this);
};
$hxClasses["game.effects.Smoke"] = game_effects_Smoke;
game_effects_Smoke.__name__ = "game.effects.Smoke";
game_effects_Smoke.__super__ = game_Sprite;
game_effects_Smoke.prototype = $extend(game_Sprite.prototype,{
	beforeUpdate: function() {
		this.x -= 0.15;
		this.y -= 0.5;
	}
	,remove: function() {
		game_effects_Smoke.pool.pool.push(this);
		this.game.removeSprite(this);
	}
	,__class__: game_effects_Smoke
});
var game_effects_TextHint = function(game1,text,time) {
	this.game = game1;
	this.text = text;
	this.time = time;
};
$hxClasses["game.effects.TextHint"] = game_effects_TextHint;
game_effects_TextHint.__name__ = "game.effects.TextHint";
game_effects_TextHint.prototype = {
	game: null
	,time: null
	,text: null
	,update: function() {
		this.time--;
		if(this.time <= 0) {
			this.game.removeTextHint(this);
		}
	}
	,render: function(g) {
		this.game.setGraphicScale(g,Math.ceil(game_gui_Touch.buttonSize / 50));
		g.set_color(-1);
		var height = game_gui_Text.height(this.text,khm_Screen.w / 2);
		var width = game_gui_Text.width(this.text,khm_Screen.w / 2);
		game_gui_Text.drawString(g,this.text,khm_Screen.w / 2 - width / 2,khm_Screen.h / 2 - height / 2,khm_Screen.w / 2);
		this.game.setGraphicScale(g,this.game.scale);
	}
	,__class__: game_effects_TextHint
};
var khm_utils_Pool_$game_$effects_$Trace = function(allocFunc) {
	this.allocFunc = allocFunc;
	this.pool = [];
};
$hxClasses["khm.utils.Pool_game_effects_Trace"] = khm_utils_Pool_$game_$effects_$Trace;
khm_utils_Pool_$game_$effects_$Trace.__name__ = "khm.utils.Pool_game_effects_Trace";
khm_utils_Pool_$game_$effects_$Trace.prototype = {
	pool: null
	,allocFunc: null
	,__class__: khm_utils_Pool_$game_$effects_$Trace
};
var game_effects_Trace = function() {
	game_Sprite.call(this);
};
$hxClasses["game.effects.Trace"] = game_effects_Trace;
game_effects_Trace.__name__ = "game.effects.Trace";
game_effects_Trace.__super__ = game_Sprite;
game_effects_Trace.prototype = $extend(game_Sprite.prototype,{
	remove: function() {
		game_effects_Trace.pool.pool.push(this);
		this.game.removeTraceEffect(this);
	}
	,__class__: game_effects_Trace
});
var game_gui_About = function() {
	this.blockHover = false;
	this.autoScroll = true;
	this.offY = 0.0;
	this.textH = 0;
	this.itemH = 0;
	this.lineH = 0;
	this.maxLineW = 0.0;
	this.cameraY = 0.0;
	this.prevCameraY = 0.0;
	this.ui = new khm_imgui_Imgui(new khm_imgui_ImguiSets(false,null,null));
	var version = "";
	var r = new EReg("^([0-9.]+)","");
	if(r.match("1.0.0")) {
		version = "#rVersion " + r.matched(1) + "\n";
	}
	this.text = "#wTankzors Lux\n" + version + "\n";
	this.text += khm_Lang.get("aboutText");
	khm_Screen.call(this);
};
$hxClasses["game.gui.About"] = game_gui_About;
game_gui_About.__name__ = "game.gui.About";
game_gui_About.__super__ = khm_Screen;
game_gui_About.prototype = $extend(khm_Screen.prototype,{
	ui: null
	,text: null
	,prevCameraY: null
	,cameraY: null
	,maxLineW: null
	,lineH: null
	,itemH: null
	,textH: null
	,offY: null
	,autoScroll: null
	,init: function() {
		this.lineH = game_gui_Text.height("");
		this.onResize();
		this.itemH = kha_Assets.images.gui_billets.get_height();
		this.cameraY = kha_System.windowHeight();
		Music.play(kha_Assets.sounds.get("music_about"));
	}
	,onResize: function() {
		var newScale = kha_System.windowWidth() * 0.6 / 126 | 0;
		if(newScale < 1) {
			newScale = 1;
		}
		var scaleH = kha_System.windowHeight() / (this.lineH * 12) | 0;
		if(scaleH < 1) {
			scaleH = 1;
		}
		if(newScale > scaleH) {
			newScale = scaleH;
		}
		var logoW = kha_Assets.images.gui_menu_pict.get_width() - 70;
		if(logoW * newScale / kha_System.windowWidth() > 1) {
			newScale = kha_System.windowWidth() / logoW | 0;
			if(newScale < 1) {
				newScale = 1;
			}
		}
		if(newScale != this.scale) {
			this.setScaleSilent(newScale);
		}
		this.maxLineW = khm_Screen.w * 0.75;
		this.maxLineW = game_gui_Text.width(this.text,this.maxLineW);
		this.textH = game_gui_Text.height(this.text,this.maxLineW);
	}
	,onKeyDown: function(key) {
		if(key == 27 || key == 1 || key == 13 || key == 32) {
			if(this.autoScroll) {
				this.autoScroll = false;
				return;
			}
			var menu = new game_gui_Menu();
			menu.show();
			menu.init();
		}
	}
	,blockHover: null
	,onMouseDown: function(p) {
		this.prevCameraY = this.cameraY;
		this.blockHover = false;
		p.moveY = 0;
		if(this.ui.onPointerDown(p)) {
			return;
		}
	}
	,onMouseUp: function(p) {
		if(Math.abs(this.prevCameraY - this.cameraY) > 10) {
			this.blockHover = true;
		}
		if(this.ui.onPointerUp(p)) {
			return;
		}
	}
	,onMouseMove: function(p) {
		if(p.isDown) {
			this.cameraY += p.moveY;
			game_gui_SmoothScroll.push(p.moveY);
		}
		if(this.ui.onPointerMove(p)) {
			return;
		}
	}
	,onUpdate: function() {
		var tmp;
		var _g = this.keys.h[38];
		if(!(_g == null ? false : _g)) {
			var _g1 = this.keys.h[87];
			tmp = _g1 == null ? false : _g1;
		} else {
			tmp = true;
		}
		if(tmp) {
			this.cameraY += 3;
		}
		var tmp1;
		var _g2 = this.keys.h[40];
		if(!(_g2 == null ? false : _g2)) {
			var _g3 = this.keys.h[83];
			tmp1 = _g3 == null ? false : _g3;
		} else {
			tmp1 = true;
		}
		if(tmp1) {
			this.cameraY -= 3;
		}
		if(this.autoScroll) {
			this.cameraY -= 1 / this.scale;
		}
	}
	,onRender: function(canvas) {
		var g = canvas.get_g2();
		g.begin(null,-13825271);
		game_gui_Ui.drawBg(g);
		this.cameraY += game_gui_SmoothScroll.getSpeed(this.pointers);
		game_gui_SmoothScroll.update();
		var minCameraY = kha_Assets.images.gui_menu_back_1.get_height() + (this.itemH / 2 | 0);
		if(this.autoScroll) {
			minCameraY = khm_Screen.h + this.itemH;
		}
		var maxCameraY = this.textH + this.itemH * 4 - khm_Screen.h;
		if(this.cameraY < -maxCameraY) {
			this.cameraY = -maxCameraY;
			this.autoScroll = false;
		}
		if(this.cameraY > minCameraY) {
			this.cameraY = minCameraY;
		}
		this.offY = this.cameraY;
		game_gui_Text.drawString(g,this.text,khm_Screen.w / 2 - this.maxLineW / 2,this.offY,this.maxLineW);
		game_gui_Ui.drawHead(g);
		this.ui.begin(g);
		this.offY += this.textH + this.itemH;
		this.backButton(g);
		this.offY += this.itemH;
		var offW = kha_System.windowWidth() % this.scale / this.scale;
		game_gui_Ui.drawScrollBar(g,khm_Screen.w - 4 + offW,0,4,khm_Screen.h,this.cameraY - minCameraY,-maxCameraY - minCameraY);
		this.ui.end();
		g.end();
		this.ui.executeCallbacks();
	}
	,backButton: function(g) {
		var _gthis = this;
		var select = kha_Assets.images.gui_billets;
		var temp__00 = 1;
		var temp__10 = 0;
		var temp__20 = 0;
		var temp__01 = 0;
		var temp__11 = 1;
		var temp__21 = 0;
		var temp__02 = 0;
		var temp__12 = 0;
		var temp__22 = 1;
		var m = g.transformations[g.transformationIndex];
		temp__00 = m._00;
		temp__10 = m._10;
		temp__20 = m._20;
		temp__01 = m._01;
		temp__11 = m._11;
		temp__21 = m._21;
		temp__02 = m._02;
		temp__12 = m._12;
		temp__22 = m._22;
		var _this = g.transformations[g.transformationIndex];
		_this._00 = 1;
		_this._10 = 0;
		_this._20 = 0;
		_this._01 = 0;
		_this._11 = 1;
		_this._21 = 0;
		_this._02 = 0;
		_this._12 = 0;
		_this._22 = 1;
		var x = (khm_Screen.w / 2 - 63.) * this.scale | 0;
		var y = this.offY * this.scale - 1 | 0;
		var w = 126 * this.scale | 0;
		var h = select.get_height() * this.scale | 0;
		g.set_color(-1);
		khm_utils_Atlas.drawScaledSubImage(g,select,360,0,126,select.get_height(),x,y,w,h);
		if(game_gui_Widgets.rect(this.ui,x,y,w,h)) {
			this.ui.addCallback(function() {
				_gthis.autoScroll = false;
				_gthis.onKeyDown(27);
				return;
			});
		}
		var _this1 = g.transformations[g.transformationIndex];
		_this1._00 = temp__00;
		_this1._10 = temp__10;
		_this1._20 = temp__20;
		_this1._01 = temp__01;
		_this1._11 = temp__11;
		_this1._21 = temp__21;
		_this1._02 = temp__02;
		_this1._12 = temp__12;
		_this1._22 = temp__22;
		var string = khm_Lang.get("back");
		var textW = game_gui_Text.width(string);
		g.set_color(-1);
		game_gui_Text.drawString(g,string,khm_Screen.w / 2 - textW / 2,this.offY,this.maxLineW);
		this.offY += h + 5;
	}
	,__class__: game_gui_About
});
var game_gui_AimMode = function(game1,tilemap,player) {
	this.y = 0;
	this.x = 0;
	this.dir = { x : 0, y : 0};
	this.cell = { x : 0, y : 0};
	this.rect = { x : 0, y : 0, w : 0, h : 0};
	this.isMoving = false;
	this.isActive = false;
	this.game = game1;
	this.keys = game1.keys;
	this.tilemap = tilemap;
	this.player = player;
	this.camera = { x : 0, y : 0, w : this.tilemap.tileset.tileSize, h : this.tilemap.tileset.tileSize};
};
$hxClasses["game.gui.AimMode"] = game_gui_AimMode;
game_gui_AimMode.__name__ = "game.gui.AimMode";
game_gui_AimMode.prototype = {
	isActive: null
	,game: null
	,keys: null
	,tilemap: null
	,player: null
	,item: null
	,isMoving: null
	,rect: null
	,cell: null
	,dir: null
	,camera: null
	,x: null
	,y: null
	,enable: function(itemId) {
		this.item = itemId;
		this.isActive = true;
		this.setCell(this.player.cell.x * this.tilemap.tileset.tileSize,this.player.cell.y * this.tilemap.tileset.tileSize);
		if(this.item == 19) {
			this.rect.x = this.cell.x - 2;
			this.rect.y = this.cell.y - 2;
			this.rect.w = 5;
			this.rect.h = 5;
		} else {
			this.rect.x = 0;
			this.rect.y = 0;
			this.rect.w = this.tilemap.map.w;
			this.rect.h = this.tilemap.map.h;
		}
	}
	,update: function() {
		if(this.isKey(81)) {
			var _this = this.player;
			if(_this.inventory.isOpen) {
				_this.inventory.close();
			} else {
				_this.inventory.open();
			}
			_this.aimMode.isActive = false;
		}
		var sx = 0;
		var sy = 0;
		if(this.keys.h[87] || this.keys.h[38]) {
			sy = -1;
		}
		if(this.keys.h[65] || this.keys.h[37]) {
			sx = -1;
		}
		if(this.keys.h[83] || this.keys.h[40]) {
			sy = 1;
		}
		if(this.keys.h[68] || this.keys.h[39]) {
			sx = 1;
		}
		if(this.cell.x + sx < this.rect.x || this.cell.x + sx > this.rect.x + this.rect.w - 1) {
			sx = 0;
		}
		if(this.cell.y + sy < this.rect.y || this.cell.y + sy > this.rect.y + this.rect.h - 1) {
			sy = 0;
		}
		if(sx != 0 || sy != 0) {
			this.setDirection(sx,sy);
		}
		if(this.isMoving) {
			this.moveToNextCell();
		} else if(this.isKey(90) || this.isKey(32) || this.isKey(13)) {
			this.player.useAimModeItem(this.cell.x,this.cell.y,this.item);
		}
		this.camera.x = this.x;
		this.camera.y = this.y;
		this.tilemap.camera.center(this.tilemap,this.camera);
	}
	,isKey: function(key) {
		if(this.keys.h[key]) {
			this.keys.h[key] = false;
			return true;
		}
		return false;
	}
	,setDirection: function(dx,dy) {
		if(this.isMoving) {
			return;
		}
		this.dir.x = dx;
		this.dir.y = dy;
		this.isMoving = true;
	}
	,setCell: function(x,y) {
		this.x = x;
		this.y = y;
		this.cell.x = x / this.tilemap.tileset.tileSize | 0;
		this.cell.y = y / this.tilemap.tileset.tileSize | 0;
	}
	,moveToNextCell: function() {
		var speed = this.tilemap.tileset.tileSize / 8;
		this.x += speed * this.dir.x;
		this.y += speed * this.dir.y;
		var intX = Math.round(this.x);
		var intY = Math.round(this.y);
		if(intX % this.tilemap.tileset.tileSize == 0 && intY % this.tilemap.tileset.tileSize == 0) {
			this.setCell(intX,intY);
			this.isMoving = false;
		}
	}
	,render: function(g) {
		var img = kha_Assets.images.bullets;
		var frameW = img.get_width() / (img.get_width() / img.get_height() | 0) | 0;
		var camX = this.tilemap.camera.get_x();
		var camY = this.tilemap.camera.get_y();
		var scale = this.tilemap.scale;
		var frame = this.item == 19 ? 18 : 17;
		g.set_color(-1);
		khm_utils_Atlas.drawSubImage(g,img,(this.x * scale | 0) / scale + camX - 2,(this.y * scale | 0) / scale + camY - 1,frame * frameW,0,frameW,img.get_height());
	}
	,__class__: game_gui_AimMode
};
var game_gui_Briefing = function() {
	this.maxCameraY = 0.0;
	this.cameraY = 0.0;
	this.lineH = 0;
	this.maxLineW = 0.0;
	this.offX = 0;
	this.offY = 0;
	this.totalTime = 0.0;
	this.playerBonus = 0;
	this.isPlayerRewarded = false;
	khm_Screen.call(this);
};
$hxClasses["game.gui.Briefing"] = game_gui_Briefing;
game_gui_Briefing.__name__ = "game.gui.Briefing";
game_gui_Briefing.__super__ = khm_Screen;
game_gui_Briefing.prototype = $extend(khm_Screen.prototype,{
	game: null
	,ui: null
	,text: null
	,level: null
	,isEnd: null
	,isPlayerRewarded: null
	,playerBonus: null
	,totalTime: null
	,offY: null
	,offX: null
	,maxLineW: null
	,lineH: null
	,cameraY: null
	,maxCameraY: null
	,init: function(game1,text,level,name,isEnd) {
		if(isEnd == null) {
			isEnd = false;
		}
		this.ui = new khm_imgui_Imgui(new khm_imgui_ImguiSets(false,null,null));
		this.game = game1;
		this.level = level;
		this.isEnd = isEnd;
		if(name != null) {
			var num = game1.levelType == 0 ? " " + (level + 1) : "";
			text = khm_Lang.get("mission") + ("" + num + ": '" + name + "'") + "\n\n" + text;
		}
		this.text = "^1" + "#r" + text;
		this.lineH = game_gui_Text.height("");
		this.onResize();
		if(isEnd && !this.isPlayerRewarded) {
			this.addPlayerReward();
			return;
		}
	}
	,addPlayerReward: function() {
		var player = this.game.player;
		player.money += 10;
		this.playerBonus = Math.ceil(player.money / 100 * (5 + player.research.extraInterest * 5));
		player.money += this.playerBonus;
		if(player.money > 99999) {
			player.money = 99999;
		}
		player.stars += 3;
		switch(this.game.levelType) {
		case 0:
			player.stats.missionTimes[this.level] = this.game.timer.time;
			var _g = 0;
			var _g1 = this.level + 1;
			while(_g < _g1) {
				var i = _g++;
				if(player.stats.missionTimes[i] == null) {
					continue;
				}
				this.totalTime += player.stats.missionTimes[i];
			}
			break;
		case 1:
			break;
		case 2:
			player.stats.missionTimes[0] += this.game.timer.time;
			this.totalTime = player.stats.missionTimes[0];
			break;
		}
		this.isPlayerRewarded = true;
	}
	,playerEndReward: function() {
		var player = this.game.player;
		player.useBonus(29);
		var _g = 0;
		var _g1 = player.allys;
		while(_g < _g1.length) {
			var bot = _g1[_g];
			++_g;
			if(!bot.isAlive) {
				continue;
			}
			player.inventory.add({ id : bot.iconType, count : 1});
		}
		player.allys = [];
	}
	,onMouseWheel: function(delta) {
		var speed = game_gui_SmoothScroll.getSpeed();
		speed -= delta;
		if(speed > 5) {
			speed = 5;
		}
		if(speed < -5) {
			speed = -5;
		}
		game_gui_SmoothScroll.setSpeed(speed);
	}
	,onMouseDown: function(p) {
		if(this.ui.onPointerDown(p)) {
			return;
		}
	}
	,onMouseMove: function(p) {
		if(p.isDown) {
			game_gui_SmoothScroll.push(p.moveY);
			this.cameraY += p.moveY;
		}
		if(this.ui.onPointerMove(p)) {
			return;
		}
	}
	,onMouseUp: function(p) {
		if(this.ui.onPointerUp(p)) {
			return;
		}
	}
	,onKeyDown: function(key) {
		if(key == 13 || key == 32) {
			if(this.isEnd) {
				this.playerEndReward();
				Loader.showInterstitial();
				switch(this.game.levelType) {
				case 0:
					this.game.writeCampaignSave(true);
					this.showShop();
					break;
				case 1:
					throw new js__$Boot_HaxeError("debriefing from PracticeLevel");
				case 2:
					this.game.writeOnlineSave();
					this.showOnlineMenu();
					break;
				}
			} else {
				this.showGame();
			}
		}
		if(key == 27 || key == 1) {
			if(this.isEnd) {
				this.showGame();
			} else {
				if(!this.isEnd && this.level == 0) {
					return;
				}
				this.showShop();
			}
		}
	}
	,showShop: function() {
		Sound.forcePlay(kha_Assets.sounds.sounds_ui_window);
		var shop = new game_gui_Shop();
		shop.show();
		shop.init(this.game,this.game.player,true);
	}
	,showGame: function() {
		Sound.forcePlay(kha_Assets.sounds.sounds_ui_window);
		this.game.show();
		this.game.onResize();
		this.game.playMusicTrack(this.game.params.musicTrack);
	}
	,showOnlineMenu: function() {
		var menu = new game_gui_Menu();
		menu.show();
		menu.init();
		menu.setMenu(12);
	}
	,onResize: function() {
		var newScale = kha_System.windowWidth() * 0.6 / 126 | 0;
		if(newScale < 1) {
			newScale = 1;
		}
		var scaleH = kha_System.windowHeight() / (this.lineH * 12) | 0;
		if(scaleH < 1) {
			scaleH = 1;
		}
		if(newScale > scaleH) {
			newScale = scaleH;
		}
		var logoW = kha_Assets.images.gui_menu_pict.get_width() - 70;
		if(logoW * newScale / kha_System.windowWidth() > 1) {
			newScale = kha_System.windowWidth() / logoW | 0;
			if(newScale < 1) {
				newScale = 1;
			}
		}
		if(newScale != this.scale) {
			this.setScaleSilent(newScale);
		}
		this.maxLineW = khm_Screen.w * 0.75;
	}
	,onUpdate: function() {
		var tmp;
		var _g = this.keys.h[38];
		if(!(_g == null ? false : _g)) {
			var _g1 = this.keys.h[87];
			tmp = _g1 == null ? false : _g1;
		} else {
			tmp = true;
		}
		if(tmp) {
			this.cameraY += 3;
		}
		var tmp1;
		var _g2 = this.keys.h[40];
		if(!(_g2 == null ? false : _g2)) {
			var _g3 = this.keys.h[83];
			tmp1 = _g3 == null ? false : _g3;
		} else {
			tmp1 = true;
		}
		if(tmp1) {
			this.cameraY -= 3;
		}
	}
	,onRender: function(canvas) {
		var g = canvas.get_g2();
		g.begin(null,-13825271);
		this.ui.begin(g);
		g.set_font(kha_Assets.fonts.RobotoCondensed_Regular);
		this.cameraY += game_gui_SmoothScroll.getSpeed(this.pointers);
		game_gui_SmoothScroll.update();
		if(this.cameraY < this.maxCameraY) {
			this.cameraY = this.maxCameraY;
		}
		if(this.cameraY > 0) {
			this.cameraY = 0;
		}
		this.offY = this.cameraY | 0;
		this.offX = khm_Screen.w / 2 - this.maxLineW / 2 | 0;
		this.drawBG(g);
		game_gui_Text.drawString(g,this.text,this.offX,this.offY,this.maxLineW);
		this.offY += game_gui_Text.height(this.text,this.maxLineW) + this.lineH;
		this.drawLine(g);
		if(this.isEnd) {
			this.drawStats(g);
		}
		this.continueButton(g);
		this.backButton(g);
		this.maxCameraY = khm_Screen.h / 2 + khm_Screen.h / 4 - (this.offY + this.lineH - this.cameraY) | 0;
		var offW = kha_System.windowWidth() % this.scale / this.scale;
		game_gui_Ui.drawScrollBar(g,khm_Screen.w - 4 + offW,0,4,khm_Screen.h,this.cameraY,this.maxCameraY);
		this.ui.end();
		g.end();
		this.ui.executeCallbacks();
	}
	,continueButton: function(g) {
		var _gthis = this;
		var select = kha_Assets.images.gui_billets;
		var x = khm_Screen.w / 2 - 63. | 0;
		var y = this.offY - 1;
		var h = select.get_height();
		khm_utils_Atlas.drawSubImage(g,select,x,y,360,0,126,h);
		if(game_gui_Widgets.rect(this.ui,x,y,126,h)) {
			this.ui.addCallback(function() {
				_gthis.onKeyDown(13);
				return;
			});
		}
		g.set_color(-1);
		var string = khm_Lang.get(this.isEnd ? "continue" : "go");
		var textW = game_gui_Text.width(string);
		game_gui_Text.drawString(g,string,khm_Screen.w / 2 - textW / 2,this.offY,this.maxLineW);
		this.offY += h + 5;
	}
	,backButton: function(g) {
		var _gthis = this;
		if(!this.isEnd && this.level == 0) {
			return;
		}
		var select = kha_Assets.images.gui_billets;
		var x = khm_Screen.w / 2 - 63. | 0;
		var y = this.offY - 1;
		var h = select.get_height();
		khm_utils_Atlas.drawSubImage(g,select,x,y,360,0,126,h);
		if(game_gui_Widgets.rect(this.ui,x,y,126,h)) {
			this.ui.addCallback(function() {
				_gthis.onKeyDown(27);
				return;
			});
		}
		g.set_color(-1);
		var string = khm_Lang.get(this.isEnd ? "back" : "shop");
		var textW = game_gui_Text.width(string);
		game_gui_Text.drawString(g,string,khm_Screen.w / 2 - textW / 2,this.offY,this.maxLineW);
		this.offY += h + 5;
	}
	,drawBG: function(g) {
		g.set_color(-1);
		var head = kha_Assets.images.gui_menu_back_1;
		khm_utils_Atlas.drawScaledImage(g,head,0,this.cameraY,khm_Screen.w,head.get_height());
		var bottom = kha_Assets.images.gui_menu_back_2;
		var bottomY = khm_Screen.h - this.maxCameraY + this.cameraY - bottom.get_height();
		if(bottomY < head.get_height()) {
			bottomY = head.get_height();
		}
		if(bottomY < khm_Screen.h - bottom.get_height()) {
			bottomY = khm_Screen.h - bottom.get_height();
		}
		khm_utils_Atlas.drawScaledImage(g,bottom,0,bottomY,khm_Screen.w,bottom.get_height());
		var logo = kha_Assets.images.gui_menu_pict;
		khm_utils_Atlas.drawImage(g,logo,khm_Screen.w / 2 - logo.get_width() / 2,this.cameraY);
		this.offY += head.get_height();
	}
	,drawLine: function(g) {
		g.set_color(-1);
		var line = kha_Assets.images.gui_horiz_line;
		khm_utils_Atlas.drawImage(g,line,khm_Screen.w / 2 - line.get_width() / 2,this.offY);
		this.offY += this.lineH / 1.5 | 0;
	}
	,drawStats: function(g) {
		var player = this.game.player;
		var stats = player.stats;
		var time = this.game.timer.time;
		var secs = "" + (time % 60 * 10 | 0) / 10;
		if((time % 60 | 0) < 10) {
			secs = 0 + secs;
		}
		var time1 = this.totalTime;
		var secs1 = "" + (time1 % 60 * 10 | 0) / 10;
		if((time1 % 60 | 0) < 10) {
			secs1 = 0 + secs1;
		}
		var km = stats.mileage / 100;
		var mileage = km >= 1 ? "" + km + "#r km" : "" + stats.mileage % 100 * 10 + "#r m";
		var s = khm_Lang.get;
		var text = "^1" + "#r" + s("interestingStatistic") + ":\n" + s("missionsCompleted") + ": #w" + (this.level + 1) + "#r\n" + s("totalCoins") + ": #w" + (player.money - this.playerBonus) + "#C#r\n" + s("percentageBonus") + ": #w" + this.playerBonus + "#C#r\n" + s("totalStars") + ": #w" + player.stars + "#S#r\n\n" + s("missionTime") + ": #w" + ("" + (time / 60 | 0) + ":" + secs) + "#r\n" + s("totalTime") + ": #w" + ("" + (time1 / 60 | 0) + ":" + secs1) + "#r\n\n" + s("shots") + ": #w" + stats.shots + "#r\n" + s("tankDamage") + ": #w" + stats.damage + "#r HP\n" + s("tankMileage") + ": #w" + mileage + "\n";
		if(this.game.levelType == 2) {
			text += "" + s("tankExp") + ": #w" + stats.exp + "#r XP\n";
		}
		game_gui_Text.drawString(g,text,this.offX,this.offY,this.maxLineW);
		this.offY += game_gui_Text.height(text,this.maxLineW);
		this.drawLine(g);
	}
	,__class__: game_gui_Briefing
});
var game_gui_ButtonSets = function(x,y,w,h,clickMode,image,imageScale,imageRect,angle,keys,onDown,onDownOnce) {
	this.keys = [];
	this.angle = 0.0;
	this.imageScale = 1.0;
	this.clickMode = false;
	this.h = -1.0;
	this.w = -1.0;
	this.x = x;
	this.y = y;
	if(w != null) {
		this.w = w;
	}
	if(h != null) {
		this.h = h;
	}
	if(clickMode != null) {
		this.clickMode = clickMode;
	}
	this.image = image;
	if(imageScale != null) {
		this.imageScale = imageScale;
	}
	this.imageRect = imageRect;
	if(angle != null) {
		this.angle = angle;
	}
	if(keys != null) {
		this.keys = keys;
	}
	this.onDown = onDown;
	this.onDownOnce = onDownOnce;
};
$hxClasses["game.gui.ButtonSets"] = game_gui_ButtonSets;
game_gui_ButtonSets.__name__ = "game.gui.ButtonSets";
game_gui_ButtonSets.prototype = {
	x: null
	,y: null
	,w: null
	,h: null
	,clickMode: null
	,image: null
	,imageScale: null
	,imageRect: null
	,angle: null
	,keys: null
	,onDown: null
	,onDownOnce: null
	,__class__: game_gui_ButtonSets
};
var game_gui_Button = function(sets) {
	this.transformation = new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1);
	this.pointerId = -1;
	this.isDown = false;
	this.rect = { x : sets.x, y : sets.y, w : sets.w, h : sets.h};
	this.clickMode = sets.clickMode;
	this.img = sets.image;
	this.imgRect = sets.imageRect;
	this.imgScale = sets.imageScale;
	if(this.img != null) {
		if(this.rect.w == -1 || this.rect.h == -1) {
			this.rect.w = this.img.get_width();
			this.rect.h = this.img.get_height();
		}
		if(this.imgRect == null) {
			this.imgRect = { x : 0, y : 0, w : this.img.get_width(), h : this.img.get_height()};
		}
	}
	this.angle = sets.angle;
	this.keys = sets.keys;
	this.onDownFunc = sets.onDown;
	this.onDownOnceFunc = sets.onDownOnce;
};
$hxClasses["game.gui.Button"] = game_gui_Button;
game_gui_Button.__name__ = "game.gui.Button";
game_gui_Button.onDown = function(screen,buttons,p) {
	var result = false;
	var _g = 0;
	while(_g < buttons.length) {
		var b = buttons[_g];
		++_g;
		var x = p.x;
		var y = p.y;
		if(x < b.rect.x || x >= b.rect.x + b.rect.w || y < b.rect.y || y >= b.rect.y + b.rect.h ? false : true) {
			var _g1 = 0;
			var _g11 = b.keys;
			while(_g1 < _g11.length) {
				var i = _g11[_g1];
				++_g1;
				screen.onKeyDown(i);
				screen.keys.h[i] = true;
			}
			if(!b.isDown && b.onDownOnceFunc != null) {
				b.onDownOnceFunc(p);
			}
			if(b.onDownFunc != null) {
				b.onDownFunc(p);
			}
			b.isDown = true;
			b.pointerId = p.id;
			result = true;
		}
	}
	return result;
};
game_gui_Button.onMove = function(screen,buttons,p) {
	if(!p.isDown) {
		return false;
	}
	var active = false;
	var _g = 0;
	while(_g < buttons.length) {
		var b = buttons[_g];
		++_g;
		var x = p.startX;
		var y = p.startY;
		if(x < b.rect.x || x >= b.rect.x + b.rect.w || y < b.rect.y || y >= b.rect.y + b.rect.h ? false : true) {
			active = true;
			break;
		}
	}
	if(!active) {
		return false;
	}
	var _g1 = 0;
	while(_g1 < buttons.length) {
		var b1 = buttons[_g1];
		++_g1;
		if(b1.pointerId != p.id) {
			continue;
		}
		var tmp;
		if(b1.isDown) {
			var x1 = p.x;
			var y1 = p.y;
			tmp = !(x1 < b1.rect.x || x1 >= b1.rect.x + b1.rect.w || y1 < b1.rect.y || y1 >= b1.rect.y + b1.rect.h ? false : true);
		} else {
			tmp = false;
		}
		if(tmp) {
			var _g2 = 0;
			var _g11 = b1.keys;
			while(_g2 < _g11.length) screen.keys.h[_g11[_g2++]] = false;
			b1.isDown = false;
		}
	}
	var _g12 = 0;
	while(_g12 < buttons.length) {
		var b2 = buttons[_g12];
		++_g12;
		var x2 = p.x;
		var y2 = p.y;
		if(x2 < b2.rect.x || x2 >= b2.rect.x + b2.rect.w || y2 < b2.rect.y || y2 >= b2.rect.y + b2.rect.h ? false : true) {
			if(!b2.isDown) {
				var _g13 = 0;
				var _g21 = b2.keys;
				while(_g13 < _g21.length) screen.keys.h[_g21[_g13++]] = true;
				b2.isDown = true;
				b2.pointerId = p.id;
			}
		}
	}
	return true;
};
game_gui_Button.onUp = function(screen,buttons,p) {
	var active = false;
	var _g = 0;
	while(_g < buttons.length) {
		var b = buttons[_g];
		++_g;
		var x = p.startX;
		var y = p.startY;
		if(x < b.rect.x || x >= b.rect.x + b.rect.w || y < b.rect.y || y >= b.rect.y + b.rect.h ? false : true) {
			active = true;
			break;
		}
	}
	if(!active) {
		return false;
	}
	var _g1 = 0;
	while(_g1 < buttons.length) {
		var b1 = buttons[_g1];
		++_g1;
		var x1 = p.x;
		var y1 = p.y;
		if(x1 < b1.rect.x || x1 >= b1.rect.x + b1.rect.w || y1 < b1.rect.y || y1 >= b1.rect.y + b1.rect.h ? false : true) {
			var _g2 = 0;
			var _g11 = b1.keys;
			while(_g2 < _g11.length) {
				var i = _g11[_g2];
				++_g2;
				screen.onKeyUp(i);
				screen.keys.h[i] = false;
			}
			b1.isDown = false;
		}
	}
	return true;
};
game_gui_Button.getOverlapY = function(buttons,x,y,w,h) {
	var _g = 0;
	while(_g < buttons.length) {
		var b = buttons[_g];
		++_g;
		var size = !(x + w < b.rect.x || x >= b.rect.x + b.rect.w || y + h < b.rect.y || y >= b.rect.y + b.rect.h ? false : true) ? 0 : y + h >= b.rect.y ? y + h - b.rect.y : y < b.rect.y + b.rect.h ? b.rect.y + b.rect.h - y : 0;
		if(size > 0) {
			return size;
		}
	}
	return 0;
};
game_gui_Button.prototype = {
	rect: null
	,keys: null
	,onDownFunc: null
	,onDownOnceFunc: null
	,clickMode: null
	,img: null
	,imgRect: null
	,imgScale: null
	,angle: null
	,isDown: null
	,pointerId: null
	,transformation: null
	,render: function(g) {
		if(this.isDown) {
			g.set_color(-1);
		} else {
			g.set_color(-1593835521);
		}
		if(this.angle != 0) {
			var _this = this.transformation;
			var m = g.transformations[g.transformationIndex];
			_this._00 = m._00;
			_this._10 = m._10;
			_this._20 = m._20;
			_this._01 = m._01;
			_this._11 = m._11;
			_this._21 = m._21;
			_this._02 = m._02;
			_this._12 = m._12;
			_this._22 = m._22;
			var _this1 = g.transformations[g.transformationIndex];
			var _this2 = g.transformations[g.transformationIndex];
			var angle = this.angle * Math.PI / 180;
			var centerX = this.rect.x + this.rect.w / 2;
			var centerY = this.rect.y + this.rect.h / 2;
			var _this__00 = 1;
			var _this__10 = 0;
			var _this__01 = 0;
			var _this__11 = 1;
			var _this__02 = 0;
			var _this__12 = 0;
			var _this__22 = 1;
			var _00 = Math.cos(angle);
			var _10 = -Math.sin(angle);
			var _01 = Math.sin(angle);
			var _11 = Math.cos(angle);
			var m__20 = 0;
			var m__21 = 0;
			var m__02 = 0;
			var m__12 = 0;
			var m__22 = 1;
			var _001 = _this__00 * _00 + _this__10 * _01 + centerX * m__02;
			var _101 = _this__00 * _10 + _this__10 * _11 + centerX * m__12;
			var _20 = _this__00 * m__20 + _this__10 * m__21 + centerX * m__22;
			var _011 = _this__01 * _00 + _this__11 * _01 + centerY * m__02;
			var _111 = _this__01 * _10 + _this__11 * _11 + centerY * m__12;
			var _21 = _this__01 * m__20 + _this__11 * m__21 + centerY * m__22;
			var _02 = _this__02 * _00 + _this__12 * _01 + _this__22 * m__02;
			var _12 = _this__02 * _10 + _this__12 * _11 + _this__22 * m__12;
			var _22 = _this__02 * m__20 + _this__12 * m__21 + _this__22 * m__22;
			var m__00 = 1;
			var m__10 = 0;
			var m__201 = -centerX;
			var m__01 = 0;
			var m__11 = 1;
			var m__211 = -centerY;
			var m__021 = 0;
			var m__121 = 0;
			var m__221 = 1;
			var _002 = _001 * m__00 + _101 * m__01 + _20 * m__021;
			var _102 = _001 * m__10 + _101 * m__11 + _20 * m__121;
			var _201 = _001 * m__201 + _101 * m__211 + _20 * m__221;
			var _012 = _011 * m__00 + _111 * m__01 + _21 * m__021;
			var _112 = _011 * m__10 + _111 * m__11 + _21 * m__121;
			var _211 = _011 * m__201 + _111 * m__211 + _21 * m__221;
			var _021 = _02 * m__00 + _12 * m__01 + _22 * m__021;
			var _121 = _02 * m__10 + _12 * m__11 + _22 * m__121;
			var _221 = _02 * m__201 + _12 * m__211 + _22 * m__221;
			var _103 = _this2._00 * _102 + _this2._10 * _112 + _this2._20 * _121;
			var _202 = _this2._00 * _201 + _this2._10 * _211 + _this2._20 * _221;
			var _113 = _this2._01 * _102 + _this2._11 * _112 + _this2._21 * _121;
			var _212 = _this2._01 * _201 + _this2._11 * _211 + _this2._21 * _221;
			var _122 = _this2._02 * _102 + _this2._12 * _112 + _this2._22 * _121;
			var _222 = _this2._02 * _201 + _this2._12 * _211 + _this2._22 * _221;
			_this1._00 = _this2._00 * _002 + _this2._10 * _012 + _this2._20 * _021;
			_this1._10 = _103;
			_this1._20 = _202;
			_this1._01 = _this2._01 * _002 + _this2._11 * _012 + _this2._21 * _021;
			_this1._11 = _113;
			_this1._21 = _212;
			_this1._02 = _this2._02 * _002 + _this2._12 * _012 + _this2._22 * _021;
			_this1._12 = _122;
			_this1._22 = _222;
		}
		if(this.img != null) {
			var w = this.rect.w * this.imgScale;
			var h = this.rect.h * this.imgScale;
			khm_utils_Atlas.drawScaledSubImage(g,this.img,this.imgRect.x,this.imgRect.y,this.imgRect.w,this.imgRect.h,this.rect.x + this.rect.w / 2 - w / 2,this.rect.y + this.rect.h / 2 - h / 2,w,h);
		}
		if(this.angle != 0) {
			var transformation = this.transformation;
			g.setTransformation(transformation);
			var _this3 = g.transformations[g.transformationIndex];
			_this3._00 = transformation._00;
			_this3._10 = transformation._10;
			_this3._20 = transformation._20;
			_this3._01 = transformation._01;
			_this3._11 = transformation._11;
			_this3._21 = transformation._21;
			_this3._02 = transformation._02;
			_this3._12 = transformation._12;
			_this3._22 = transformation._22;
		}
	}
	,__class__: game_gui_Button
};
var game_gui__$Icon_Icon_$Impl_$ = {};
$hxClasses["game.gui._Icon.Icon_Impl_"] = game_gui__$Icon_Icon_$Impl_$;
game_gui__$Icon_Icon_$Impl_$.__name__ = "game.gui._Icon.Icon_Impl_";
game_gui__$Icon_Icon_$Impl_$.toString = function(icon) {
	switch(icon) {
	case -2:
		return "ExplBox";
	case -1:
		return "None";
	case 0:
		return "Round";
	case 1:
		return "Plasma";
	case 2:
		return "DoubleRound";
	case 3:
		return "DoublePlasma";
	case 4:
		return "Round2";
	case 5:
		return "Round3";
	case 6:
		return "Artillery";
	case 7:
		return "Warhead";
	case 8:
		return "Rocket";
	case 9:
		return "AirSupport";
	case 10:
		return "Mine";
	case 11:
		return "Mine2";
	case 12:
		return "Dynamite";
	case 13:
		return "Dynamite2";
	case 14:
		return "Dynamite3";
	case 15:
		return "Freeze";
	case 16:
		return "FreezeDisabled";
	case 17:
		return "SpeedUp";
	case 18:
		return "RedSpeedUp";
	case 19:
		return "Repair";
	case 20:
		return "ForceField";
	case 21:
		return "Armor";
	case 22:
		return "Armor2";
	case 23:
		return "Radar";
	case 24:
		return "Radar2";
	case 25:
		return "AllyTank";
	case 26:
		return "AllyTank2";
	case 27:
		return "AllyTank3";
	case 28:
		return "Bg";
	case 29:
		return "Letter";
	case 30:
		return "Folder";
	case 31:
		return "Ok";
	case 32:
		return "Cancel";
	case 33:
		return "SmallOk";
	case 34:
		return "SmallCancel";
	case 35:
		return "ExclamationMark";
	case 36:
		return "RedCircle";
	case 37:
		return "YellowCircle";
	case 38:
		return "GreenCircle";
	case 39:
		return "Time";
	}
};
var game_gui_Inventory = function(game1,player) {
	this.currentId = 0;
	this.offX = 0;
	this.startY = 0;
	this.columnCount = 0;
	this.isOpen = false;
	this.hudOffset = 0;
	this.offY = 0;
	this.game = game1;
	this.player = player;
	this.keys = game1.keys;
	this.items = [];
	this.initPriorities();
};
$hxClasses["game.gui.Inventory"] = game_gui_Inventory;
game_gui_Inventory.__name__ = "game.gui.Inventory";
game_gui_Inventory.prototype = {
	offY: null
	,hudOffset: null
	,isOpen: null
	,columnCount: null
	,startY: null
	,offX: null
	,currentId: null
	,items: null
	,game: null
	,keys: null
	,player: null
	,initPriorities: function() {
		if(game_gui_Inventory.priorities != null) {
			return;
		}
		var order = [5,4,3,2,1,0,6,7,8,10,11,12,13,14,9,19,17,15,21,20,23,25,26,27];
		game_gui_Inventory.priorities = [];
		var _g = 0;
		while(_g < 28) {
			var icon = _g++;
			var id = 0;
			var _g1 = 0;
			var _g11 = order.length;
			while(_g1 < _g11) {
				var i = _g1++;
				if(icon == order[i]) {
					id = i;
					break;
				}
			}
			game_gui_Inventory.priorities.push(id);
		}
	}
	,selectItem: function(id) {
		var _g = 0;
		var _g1 = this.items.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.items[i].id == id) {
				this.currentId = i;
				break;
			}
		}
	}
	,get: function() {
		return this.items;
	}
	,set: function(arr) {
		this.items = arr;
		this.sort();
	}
	,add: function(item) {
		if(item.id == -1 || item.id == -2) {
			return;
		}
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.id == item.id) {
				i.count += item.count;
				return;
			}
		}
		this.items.push(item);
		this.sort();
	}
	,copy: function() {
		var arr = [];
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			arr.push({ id : item.id, count : item.count});
		}
		return arr;
	}
	,copyFrom: function(arr) {
		this.items = [];
		var _g = 0;
		while(_g < arr.length) {
			var item = arr[_g];
			++_g;
			this.items.push({ id : item.id, count : item.count});
		}
		this.sort();
	}
	,sort: function() {
		this.items.sort(function(a,b) {
			if(game_gui_Inventory.priorities[a.id] < game_gui_Inventory.priorities[b.id]) {
				return -1;
			} else if(game_gui_Inventory.priorities[a.id] > game_gui_Inventory.priorities[b.id]) {
				return 1;
			}
			return 0;
		});
	}
	,update: function() {
		if(this.isKey(87) || this.isKey(38)) {
			this.prevItem();
		}
		if(this.isKey(65) || this.isKey(37)) {
			this.prevColumn();
		}
		if(this.isKey(83) || this.isKey(40)) {
			this.nextItem();
		}
		if(this.isKey(68) || this.isKey(39)) {
			this.nextColumn();
		}
		if(this.items.length == 0 || this.isKey(13) || this.isKey(32) || this.isKey(90) || this.isKey(81)) {
			this.close();
		}
	}
	,open: function() {
		Sound.forcePlay(kha_Assets.sounds.sounds_ui_weap_switch);
		this.isOpen = true;
	}
	,close: function() {
		Sound.forcePlay(kha_Assets.sounds.sounds_ui_window);
		this.isOpen = false;
	}
	,isKey: function(key) {
		if(this.keys.h[key]) {
			this.keys.h[key] = false;
			return true;
		}
		return false;
	}
	,removeCurrentItem: function() {
		this.items[this.currentId].count--;
		if(this.items[this.currentId].count <= 0) {
			HxOverrides.remove(this.items,this.items[this.currentId]);
			this.currentId = 0;
		}
	}
	,getItem: function() {
		return this.items[this.currentId];
	}
	,nextItem: function() {
		this.currentId++;
		if(this.currentId > this.items.length - 1) {
			this.currentId = 0;
		}
	}
	,prevItem: function() {
		this.currentId--;
		if(this.currentId < 0) {
			this.currentId = this.items.length - 1;
		}
		if(this.currentId < 0) {
			this.currentId = 0;
		}
	}
	,nextColumn: function() {
		this.currentId += this.columnCount;
		if(this.currentId > this.items.length - 1) {
			this.currentId = this.items.length - 1;
		}
		if(this.currentId < 0) {
			this.currentId = 0;
		}
	}
	,prevColumn: function() {
		this.currentId -= this.columnCount;
		if(this.currentId < 0) {
			this.currentId = 0;
		}
	}
	,renderCurrentItem: function(ui) {
		if(this.items.length == 0) {
			return;
		}
		this.offX = 0;
		this.addButton(ui,0);
		this.renderItem(ui.g,this.items[this.currentId],game_Game.trasnparentGui ? 20 : 0);
	}
	,render: function(ui) {
		var g = ui.g;
		this.columnCount = this.items.length;
		this.startY = this.offY;
		this.offX = 0;
		g.set_color(-1);
		var _g = 0;
		var _g1 = this.items.length;
		while(_g < _g1) {
			var i = _g++;
			this.addButton(ui,i);
			var item = this.items[i];
			if(item == this.items[this.currentId]) {
				this.renderSelectedItem(g);
			} else {
				this.renderItem(g,item,0);
			}
		}
	}
	,addButton: function(ui,i) {
		var id = ++ui.id;
		if(this.offY + 20 > (this.game.isLevelComplete ? khm_Screen.h - 20 : khm_Screen.h)) {
			this.offX += 63;
			this.offY = this.startY;
			if(this.columnCount == this.items.length) {
				this.columnCount = i;
			}
		}
		var x = this.offX + this.hudOffset - 3 - 5;
		var y = this.offY;
		var rect_id = id;
		var rect_x = x;
		var rect_y = y;
		var rect_w = 63;
		var rect_h = 20;
		var rect_group = 0;
		ui.addWidgetData(id,x,y,63,20,0);
		var _this = ui.frame;
		var i1 = (ui.frame.arr.length / 6 | 0) - 1;
		i1 *= 6;
		var group = _this.arr[i1 + 5];
		if(group == null) {
			group = 0;
		}
		rect_id = _this.arr[i1];
		rect_x = _this.arr[i1 + 1];
		rect_y = _this.arr[i1 + 2];
		rect_w = _this.arr[i1 + 3];
		rect_h = _this.arr[i1 + 4];
		rect_group = group;
		var p = ui.isInside(rect_id,rect_x,rect_y,rect_w,rect_h);
		if(p != null) {
			if(!ui.isWidgetGroupExists(rect_group)) {
				var id1 = p.id;
				ui.widgetGroups[id1] = rect_group;
				ui.hoverIds[id1] = rect_id;
				if(ui.activeIds[id1] == 0 && ui.pointersDown[id1]) {
					ui.activeIds[id1] = rect_id;
				}
			}
		}
		if(this.isOpen) {
			switch((ui.isActive(id) ? khm_imgui_WidgetState.Active : ui.focusId == id ? khm_imgui_WidgetState.Focus : ui.isHovered(id) ? khm_imgui_WidgetState.Hover : khm_imgui_WidgetState.Idle)._hx_index) {
			case 0:
				break;
			case 1:case 2:
				if(!ui.keyboardFocus) {
					this.currentId = i;
				}
				break;
			case 3:
				this.currentId = i;
				break;
			}
		}
		if(ui.isWidgetClicked(id)) {
			var _this1 = this.player;
			if(_this1.inventory.isOpen) {
				_this1.inventory.close();
			} else {
				_this1.inventory.open();
			}
			_this1.aimMode.isActive = false;
		}
	}
	,renderItem: function(g,item,style) {
		game_gui_Ui.drawScaledIcon(g,item.id == 15 ? this.game.params.disableFreeze ? 16 : 15 : item.id,this.offX + this.hudOffset,this.offY,20,20);
		var numH = ((20 - game_gui_Text.numberHeight()) / 2 | 0) + 1;
		game_gui_Text.drawNumber(g,style,item.count,this.offX + this.hudOffset + 20,this.offY + numH);
		this.offY += 20;
	}
	,renderSelectedItem: function(g) {
		var select = kha_Assets.images.gui_billet;
		khm_utils_Atlas.drawScaledImage(g,select,this.offX + this.hudOffset - 2,this.offY - 1,select.get_width() / (this.items[this.currentId].count > 99 ? 6.3 : 6.9),select.get_height() / 6.9);
		this.renderItem(g,this.items[this.currentId],10);
		g.set_color(-1);
	}
	,__class__: game_gui_Inventory
};
var game_gui__$Menu_Element = $hxEnums["game.gui._Menu.Element"] = { __ename__ : "game.gui._Menu.Element", __constructs__ : ["Header","Item","IncItem","Space"]
	,Header: ($_=function(text) { return {_hx_index:0,text:text,__enum__:"game.gui._Menu.Element",toString:$estr}; },$_.__params__ = ["text"],$_)
	,Item: ($_=function(text) { return {_hx_index:1,text:text,__enum__:"game.gui._Menu.Element",toString:$estr}; },$_.__params__ = ["text"],$_)
	,IncItem: ($_=function(text) { return {_hx_index:2,text:text,__enum__:"game.gui._Menu.Element",toString:$estr}; },$_.__params__ = ["text"],$_)
	,Space: {_hx_index:3,__enum__:"game.gui._Menu.Element",toString:$estr}
};
var game_gui_Menu = function() {
	this.blockHover = false;
	this.completedOnlineMaps = new haxe_ds_StringMap();
	this.introSound = kha_Assets.sounds.get("music_intro");
	this.canOpenShop = false;
	this.currentId = 0;
	this.lineOffX = 25;
	this.maxItemW = 0.0;
	this.itemH = 0;
	this.lineH = 0;
	this.maxLineW = 0.0;
	this.cameraY = 0.0;
	this.prevCameraY = 0.0;
	this.offX = 0;
	this.offY = 0;
	khm_Screen.call(this);
};
$hxClasses["game.gui.Menu"] = game_gui_Menu;
game_gui_Menu.__name__ = "game.gui.Menu";
game_gui_Menu.__super__ = khm_Screen;
game_gui_Menu.prototype = $extend(khm_Screen.prototype,{
	game: null
	,ui: null
	,offY: null
	,offX: null
	,prevCameraY: null
	,cameraY: null
	,maxLineW: null
	,lineH: null
	,itemH: null
	,maxItemW: null
	,lineOffX: null
	,currentId: null
	,type: null
	,elements: null
	,hasSaveSlot: null
	,hasSaves: null
	,canOpenShop: null
	,introSound: null
	,confirm: null
	,completedOnlineMaps: null
	,init: function(game1) {
		var _gthis = this;
		this.game = game1;
		this.ui = new khm_imgui_Imgui(new khm_imgui_ImguiSets(false,null,null));
		this.setMenu(1);
		var save = khm_Settings.read();
		this.hasSaveSlot = save.currentSlot != null;
		this.hasSaves = this.hasSaveSlot || save.slots.length > 0;
		if(game1 != null) {
			this.canOpenShop = game1.canOpenShop();
		} else {
			Music.play(this.introSound,true);
		}
		this.onResize();
		if(game_gui_Menu.showNews && this.type == 1) {
			this.ui.addCallback(function() {
				var news = new game_gui_NewsWindow(_gthis,_gthis.ui);
				news.show();
				news.init(khm_Lang.get("battleNewsText"));
				return game_gui_Menu.showNews = false;
			});
		}
	}
	,setMenu: function(type) {
		if(khm_Screen.isTouch || !this.ui.keyboardFocus) {
			this.currentId = -1;
		} else {
			this.currentId = 0;
		}
		if(type == 1 && this.game != null) {
			type = 0;
		}
		this.type = type;
		var tmp;
		switch(type) {
		case 0:
			tmp = [game_gui__$Menu_Element.Item("continue"),game_gui__$Menu_Element.Item("shop"),game_gui__$Menu_Element.Item("settings"),game_gui__$Menu_Element.Item("exitToMenu")];
			break;
		case 1:
			var list = [game_gui__$Menu_Element.Item("game"),game_gui__$Menu_Element.Item("settings"),game_gui__$Menu_Element.Item("about")];
			if(!Loader.isAdsRemoved) {
				list.splice(2,0,game_gui__$Menu_Element.Item("removeAds"));
			}
			tmp = list;
			break;
		case 2:
			tmp = [game_gui__$Menu_Element.Item("continue"),game_gui__$Menu_Element.Item("campaigns"),game_gui__$Menu_Element.Item("onlineLevels"),game_gui__$Menu_Element.Item("loadGame"),game_gui__$Menu_Element.Item("practice"),game_gui__$Menu_Element.Item("back")];
			break;
		case 3:
			tmp = [game_gui__$Menu_Element.Item("mainCampaign"),game_gui__$Menu_Element.Item("classicCampaign"),game_gui__$Menu_Element.Item("back")];
			break;
		case 4:
			var s = khm_Lang.get;
			var list1 = [];
			var _g = 0;
			while(_g < 32) list1.push(game_gui__$Menu_Element.Item("" + s("mission") + ": " + (_g++ + 1)));
			var _g1 = 0;
			while(_g1 < 40) list1.push(game_gui__$Menu_Element.Item("" + s("mission") + ": 2-" + (_g1++ + 1)));
			list1.push(game_gui__$Menu_Element.Item("back"));
			tmp = list1;
			break;
		case 5:
			var save = khm_Settings.read();
			var s1 = khm_Lang.get;
			var slot = save.currentSlot;
			var list2 = [game_gui__$Menu_Element.Item("[" + s1("autoSave") + "] " + s1("mission") + ":" + (" " + (slot.type + 1) + "-" + (slot.level + 1)))];
			var _g2 = 0;
			var _g11 = save.slots;
			while(_g2 < _g11.length) {
				var slot1 = _g11[_g2];
				++_g2;
				list2.push(game_gui__$Menu_Element.Item("" + s1("mission") + ": " + (slot1.type + 1) + "-" + (slot1.level + 1) + ("  " + slot1.money + "#C " + slot1.stars + "#S")));
			}
			if(save.bonusSlots.length > 0) {
				list2.push(game_gui__$Menu_Element.Item("bonusSaves"));
			}
			list2.push(game_gui__$Menu_Element.Item("back"));
			tmp = list2;
			break;
		case 6:
			var s2 = khm_Lang.get;
			var list3 = [];
			var _g3 = 0;
			var _g12 = khm_Settings.read().bonusSlots;
			while(_g3 < _g12.length) {
				var slot2 = _g12[_g3];
				++_g3;
				list3.push(game_gui__$Menu_Element.Item("" + s2("mission") + ": " + (slot2.type + 1) + "-" + (slot2.level + 1) + ("  " + slot2.money + "#C " + slot2.stars + "#S")));
			}
			list3.push(game_gui__$Menu_Element.Item("back"));
			tmp = list3;
			break;
		case 7:
			tmp = [game_gui__$Menu_Element.Item("graphic"),game_gui__$Menu_Element.IncItem("music"),game_gui__$Menu_Element.IncItem("sound"),game_gui__$Menu_Element.Item("language"),game_gui__$Menu_Element.Item("vibration"),game_gui__$Menu_Element.Item("control"),game_gui__$Menu_Element.Item("additional"),game_gui__$Menu_Element.Item("back")];
			break;
		case 8:
			tmp = [game_gui__$Menu_Element.IncItem("gameScale"),game_gui__$Menu_Element.IncItem("uiSize"),game_gui__$Menu_Element.Item("clouds"),game_gui__$Menu_Element.Item("back")];
			break;
		case 9:
			tmp = [game_gui__$Menu_Element.Item("touchMode"),game_gui__$Menu_Element.Item("showFps"),game_gui__$Menu_Element.Item("resetSettings"),game_gui__$Menu_Element.Item("back")];
			break;
		case 10:
			tmp = [game_gui__$Menu_Element.IncItem("controlType"),game_gui__$Menu_Element.Item("padOnRight"),game_gui__$Menu_Element.Item("back")];
			break;
		case 11:
			tmp = [game_gui__$Menu_Element.Item("areYouSure"),game_gui__$Menu_Element.Item("yes"),game_gui__$Menu_Element.Item("no")];
			break;
		case 12:
			tmp = [game_gui__$Menu_Element.Item("loading"),game_gui__$Menu_Element.Item("back")];
			break;
		}
		this.elements = tmp;
		if(type == 12) {
			if(game_gui_Menu.mapsData == null) {
				this.requestMapsData();
			} else {
				this.updateOnlineMapsMenu();
			}
		}
		this.lineH = game_gui_Text.height("");
		this.itemH = this.lineH * 1.5 | 0;
		this.maxLineW = khm_Screen.w * 2;
		this.checkMaxItemW();
	}
	,checkMaxItemW: function() {
		this.maxItemW = 0;
		var _g = 0;
		var _g1 = this.elements;
		while(_g < _g1.length) {
			var element = _g1[_g];
			++_g;
			switch(element._hx_index) {
			case 1:
				var w = game_gui_Text.width(this.textString(element.text));
				if(this.maxItemW < w) {
					this.maxItemW = w;
				}
				break;
			case 2:
				var w1 = game_gui_Text.width(this.textString(element.text));
				if(this.maxItemW < w1) {
					this.maxItemW = w1;
				}
				break;
			default:
			}
		}
	}
	,requestMapsData: function() {
		var _gthis = this;
		var request = new haxe_http_HttpJs("https://tankzors.github.io/Maps/maps.json");
		request.onData = function(data) {
			game_gui_Menu.mapsData = JSON.parse(data);
			_gthis.updateOnlineMapsMenu();
			return;
		};
		request.onError = function(data1) {
			_gthis.elements = [game_gui__$Menu_Element.Item(data1),game_gui__$Menu_Element.Item("back")];
			_gthis.checkMaxItemW();
			return;
		};
		request.request();
	}
	,updateOnlineMapsMenu: function() {
		this.completedOnlineMaps = khm_Settings.read().completedOnlineMaps;
		var max = game_gui_Menu.mapsPage * 10 + 10;
		if(max > game_gui_Menu.mapsData.length) {
			max = game_gui_Menu.mapsData.length;
		}
		var _g = [];
		var _g1 = game_gui_Menu.mapsPage * 10;
		var _g2 = max;
		while(_g1 < _g2) _g.push(game_gui__$Menu_Element.Item(game_gui_Menu.mapsData[_g1++].file));
		this.elements = _g;
		this.elements.push(game_gui__$Menu_Element.IncItem("page"));
		this.elements.push(game_gui__$Menu_Element.Item("back"));
		this.checkMaxItemW();
	}
	,areYouSure: function(yes,no) {
		this.confirm = { yes : yes, no : no};
		this.setMenu(11);
	}
	,textString: function(text) {
		var realText = khm_Lang.get(text);
		switch(this.type) {
		case 0:
			if(text == "shop") {
				if(!this.canOpenShop) {
					realText = "#t" + realText;
				}
			}
			break;
		case 2:
			switch(text) {
			case "continue":
				if(!this.hasSaveSlot) {
					realText = "#t" + realText;
				}
				break;
			case "loadGame":
				if(!this.hasSaves) {
					realText = "#t" + realText;
				}
				break;
			case "onlineLevels":
				realText = "" + realText;
				break;
			}
			break;
		case 3:
			break;
		case 5:
			break;
		case 6:
			break;
		case 7:
			switch(text) {
			case "language":
				realText += ": " + khm_Lang.iso.toUpperCase();
				break;
			case "music":
				realText += ": " + Music.volume * 100 + "%";
				break;
			case "sound":
				realText += ": " + Sound.soundVolume * 100 + "%";
				break;
			case "vibration":
				realText = "" + realText + ": " + this.state(game_Game.vibrationEnabled);
				break;
			}
			break;
		case 8:
			switch(text) {
			case "clouds":
				realText = "" + realText + ": " + this.state(game_Game.cloudsEnabled);
				break;
			case "gameScale":
				realText += ": " + khm_Screen.defaultScale;
				break;
			case "smoothing":
				realText = "" + realText + ": " + this.state(game_Game.smoothingEnabled);
				break;
			case "uiSize":
				realText = "" + realText + ": " + game_gui_Touch.buttonSize;
				break;
			}
			break;
		case 9:
			switch(text) {
			case "showFps":
				realText = "" + realText + ": " + this.state(khm_Screen.showFps);
				break;
			case "touchMode":
				realText = "#t" + realText + ": " + this.state(khm_Screen.isTouch);
				break;
			}
			break;
		case 10:
			switch(text) {
			case "controlType":
				realText = "" + realText + ": " + game_gui_Touch.controlType;
				break;
			case "padOnRight":
				realText = "" + realText + ": " + this.state(game_gui_Touch.isReversed);
				break;
			}
			break;
		case 12:
			switch(text) {
			case "back":
				break;
			case "page":
				realText = "" + realText + ": " + (game_gui_Menu.mapsPage + 1);
				break;
			default:
				var _this = this.completedOnlineMaps;
				if(__map_reserved[text] != null ? _this.getReserved(text) : _this.h[text]) {
					realText = "#t" + realText;
				}
			}
			break;
		default:
		}
		return realText;
	}
	,state: function(isActive) {
		if(isActive) {
			return khm_Lang.get("on");
		}
		return khm_Lang.get("off");
	}
	,blockHover: null
	,onMouseDown: function(p) {
		this.prevCameraY = this.cameraY;
		this.blockHover = false;
		p.moveY = 0;
		if(this.ui.onPointerDown(p)) {
			return;
		}
	}
	,onMouseUp: function(p) {
		if(Math.abs(this.prevCameraY - this.cameraY) > 10) {
			this.blockHover = true;
		}
		if(this.ui.onPointerUp(p)) {
			return;
		}
	}
	,onMouseMove: function(p) {
		if(p.isDown) {
			this.cameraY += p.moveY;
			game_gui_SmoothScroll.push(p.moveY);
		}
		if(this.ui.onPointerMove(p)) {
			return;
		}
	}
	,onMouseWheel: function(delta) {
		var speed = game_gui_SmoothScroll.getSpeed();
		speed -= delta;
		if(speed > 5) {
			speed = 5;
		}
		if(speed < -5) {
			speed = -5;
		}
		game_gui_SmoothScroll.setSpeed(speed);
	}
	,onKeyDown: function(key) {
		if(this.ui.onKeyDown(key)) {
			return;
		}
		if(khm_utils_ScreenTools.onRescaleKeys(this,key)) {
			return;
		}
		if(key == 32 || key == 13) {
			this.action();
		} else if(key == 37 || key == 39) {
			this.changeValue(this.currentId,key);
		} else if(key == 38 || key == 87) {
			this.prevItem();
		} else if(key == 40 || key == 83) {
			this.nextItem();
		}
		if(key == 27 || key == 1) {
			this.back();
		}
		this.cameraY = -(this.currentId * this.itemH + this.itemH / 2 - khm_Screen.h / 2 | 0);
	}
	,back: function() {
		switch(this.type) {
		case 0:
			this.continueGame();
			break;
		case 1:
			break;
		case 3:
			this.setMenu(2);
			break;
		case 2:case 4:case 7:
			this.setMenu(1);
			break;
		case 5:
			this.setMenu(2);
			break;
		case 6:
			this.setMenu(5);
			break;
		case 8:
			Loader.generateAtlas();
			if(this.game != null) {
				if(khm_Screen.isTouch) {
					this.game.touch.init();
				}
			}
			this.setMenu(7);
			break;
		case 9:
			this.setMenu(7);
			break;
		case 10:
			if(this.game != null) {
				if(khm_Screen.isTouch) {
					this.game.touch.init();
				}
			}
			this.setMenu(7);
			break;
		case 11:
			this.confirm.no();
			this.confirm = null;
			break;
		case 12:
			game_gui_Menu.mapsData = null;
			this.setMenu(2);
			break;
		}
	}
	,onResize: function() {
		var contentH = kha_Assets.images.gui_menu_back_1.get_height() + this.itemH * 5;
		var newScale = kha_System.windowHeight() / contentH | 0;
		if(newScale < 1) {
			newScale = 1;
		}
		var logoW = kha_Assets.images.gui_menu_pict.get_width() - 70;
		if(logoW * newScale / kha_System.windowWidth() > 1) {
			newScale = kha_System.windowWidth() / logoW | 0;
			if(newScale < 1) {
				newScale = 1;
			}
		}
		if(newScale != this.scale) {
			this.setScaleSilent(newScale);
		}
	}
	,continueGame: function() {
		if(this.game != null) {
			var save = khm_Settings.read();
			this.game.save = save;
			var scale = this.game.scale;
			this.game.show();
			if(scale != khm_Screen.defaultScale) {
				this.game.onResize();
			}
			return;
		}
		if(!this.hasSaveSlot) {
			return;
		}
		var game1 = new game_Game();
		game1.show();
		game1.init();
		game1.continueCampaign();
	}
	,newGame: function(type) {
		Loader.resetDefaultSlot();
		var game1 = new game_Game();
		game1.show();
		game1.init();
		game1.newCampaign(type);
	}
	,newPractice: function() {
		var game1 = new game_Game();
		game1.show();
		game1.init();
		game1.loadPractice();
	}
	,openShop: function() {
		if(!this.canOpenShop) {
			return;
		}
		var shop = new game_gui_Shop();
		shop.show();
		shop.init(this.game,this.game.player);
	}
	,action: function() {
		var _gthis = this;
		var currentItem = this.elements[this.currentId];
		if(currentItem == null) {
			return;
		}
		Sound.forcePlay(kha_Assets.sounds.sounds_ui_button_down);
		switch(this.type) {
		case 0:
			if(currentItem._hx_index == 1) {
				switch(currentItem.text) {
				case "continue":
					this.continueGame();
					break;
				case "exitToMenu":
					this.areYouSure(function() {
						var menu;
						switch(_gthis.game.levelType) {
						case 0:
							menu = 1;
							break;
						case 1:
							menu = 2;
							break;
						case 2:
							menu = 12;
							break;
						}
						_gthis.game = null;
						Music.play(_gthis.introSound,true);
						_gthis.setMenu(menu);
						return;
					},function() {
						_gthis.setMenu(0);
						return;
					});
					break;
				case "help":
					break;
				case "settings":
					this.setMenu(7);
					break;
				case "shop":
					this.openShop();
					break;
				}
			}
			break;
		case 1:
			if(currentItem._hx_index == 1) {
				switch(currentItem.text) {
				case "about":
					var about = new game_gui_About();
					about.show();
					about.init();
					break;
				case "debug":
					this.setMenu(4);
					break;
				case "exit":
					kha_System.stop();
					break;
				case "game":
					this.setMenu(2);
					break;
				case "help":
					break;
				case "removeAds":
					if(!Loader.isAdsRemoved) {
						var offer = new game_gui_OfferScreen();
						offer.show();
						offer.init(khm_Lang.get("removeAdsDesc"),this,"remove_ads",function() {
							var menu1 = new game_gui_Menu();
							menu1.show();
							menu1.init();
							return;
						});
					} else {
						this.setMenu(1);
					}
					break;
				case "settings":
					this.setMenu(7);
					break;
				}
			}
			break;
		case 2:
			if(currentItem._hx_index == 1) {
				switch(currentItem.text) {
				case "back":
					this.back();
					break;
				case "campaigns":
					this.setMenu(3);
					break;
				case "continue":
					this.continueGame();
					break;
				case "loadGame":
					if(this.hasSaves) {
						this.setMenu(5);
					}
					break;
				case "onlineLevels":
					this.setMenu(12);
					break;
				case "practice":
					this.newPractice();
					break;
				}
			}
			break;
		case 3:
			if(currentItem._hx_index == 1) {
				switch(currentItem.text) {
				case "back":
					this.back();
					break;
				case "classicCampaign":
					if(!this.hasSaveSlot) {
						this.newGame(1);
					} else {
						this.areYouSure(function() {
							_gthis.newGame(1);
							return;
						},function() {
							_gthis.setMenu(3);
							return;
						});
					}
					break;
				case "mainCampaign":
					if(!this.hasSaveSlot) {
						this.newGame(0);
					} else {
						this.areYouSure(function() {
							_gthis.newGame(0);
							return;
						},function() {
							_gthis.setMenu(3);
							return;
						});
					}
					break;
				}
			}
			break;
		case 4:
			if(currentItem._hx_index == 1) {
				if(currentItem.text == "back") {
					this.back();
				} else {
					var save = khm_Settings.read();
					if(save.currentSlot == null) {
						Loader.resetDefaultSlot();
						save = khm_Settings.read();
					}
					save.currentSlot.level = this.currentId;
					if(this.currentId >= 32) {
						save.currentSlot.level -= 32;
						save.currentSlot.type = 1;
					} else {
						save.currentSlot.type = 0;
					}
					khm_Settings.write(save);
					var game1 = new game_Game();
					game1.show();
					game1.init();
					game1.continueCampaign();
					game1.player.loadFrom(game_Practice.slot);
				}
			}
			break;
		case 5:
			if(currentItem._hx_index == 1) {
				switch(currentItem.text) {
				case "back":
					this.back();
					break;
				case "bonusSaves":
					this.setMenu(6);
					break;
				default:
					var save1 = khm_Settings.read();
					if(this.currentId > 0) {
						khm_Settings.set({ currentSlot : save1.slots[this.currentId - 1]});
					}
					var game2 = new game_Game();
					game2.show();
					game2.init();
					game2.continueCampaign();
				}
			}
			break;
		case 6:
			if(currentItem._hx_index == 1) {
				if(currentItem.text == "back") {
					this.back();
				} else {
					khm_Settings.set({ currentSlot : khm_Settings.read().bonusSlots[this.currentId]});
					var game3 = new game_Game();
					game3.show();
					game3.init();
					game3.continueCampaign();
				}
			}
			break;
		case 7:
			if(currentItem._hx_index == 1) {
				switch(currentItem.text) {
				case "additional":
					this.setMenu(9);
					break;
				case "back":
					this.back();
					break;
				case "control":
					this.setMenu(10);
					break;
				case "graphic":
					this.setMenu(8);
					break;
				case "language":
					var _g = 0;
					var _g1 = khm_Lang.ids.length;
					while(_g < _g1) {
						var i = _g++;
						if(khm_Lang.ids[i] == khm_Lang.iso) {
							khm_Lang.set(i + 1 < khm_Lang.ids.length ? khm_Lang.ids[i + 1] : khm_Lang.ids[0]);
							break;
						}
					}
					khm_Settings.set({ lang : khm_Lang.iso});
					kha_graphics2_Graphics.fontGlyphs = khm_Lang.fontGlyphs;
					break;
				case "vibration":
					game_Game.vibrationEnabled = !game_Game.vibrationEnabled;
					khm_Settings.set({ vibration : game_Game.vibrationEnabled});
					break;
				}
			}
			break;
		case 8:
			if(currentItem._hx_index == 1) {
				switch(currentItem.text) {
				case "back":
					this.back();
					break;
				case "clouds":
					game_Game.cloudsEnabled = !game_Game.cloudsEnabled;
					khm_Settings.set({ clouds : game_Game.cloudsEnabled});
					break;
				case "smoothing":
					game_Game.smoothingEnabled = !game_Game.smoothingEnabled;
					break;
				}
			}
			break;
		case 9:
			if(currentItem._hx_index == 1) {
				switch(currentItem.text) {
				case "back":
					this.back();
					break;
				case "resetSettings":
					this.areYouSure(function() {
						Music.stop();
						Loader.resetSettings();
						return;
					},function() {
						_gthis.setMenu(7);
						return;
					});
					break;
				case "showFps":
					khm_Screen.showFps = !khm_Screen.showFps;
					khm_Settings.set({ showFps : khm_Screen.showFps});
					break;
				case "touchMode":
					break;
				}
			}
			break;
		case 10:
			if(currentItem._hx_index == 1) {
				switch(currentItem.text) {
				case "back":
					this.back();
					break;
				case "padOnRight":
					game_gui_Touch.isReversed = !game_gui_Touch.isReversed;
					khm_Settings.set({ padOnRight : game_gui_Touch.isReversed});
					break;
				}
			}
			break;
		case 11:
			if(currentItem._hx_index == 1) {
				switch(currentItem.text) {
				case "no":
					this.back();
					break;
				case "yes":
					this.confirm.yes();
					this.confirm = null;
					break;
				}
			}
			break;
		case 12:
			if(currentItem._hx_index == 1) {
				var text = currentItem.text;
				switch(text) {
				case "back":
					this.back();
					break;
				case "loading":
					break;
				default:
					if(game_gui_Menu.mapsData == null) {
						return;
					}
					var _g2 = 0;
					var _g11 = game_gui_Menu.mapsData;
					while(_g2 < _g11.length) {
						var map = _g11[_g2];
						++_g2;
						if(map.file != text) {
							continue;
						}
						var author;
						if(map.author == null) {
							author = "Unknown";
						} else {
							var s = map.author;
							author = encodeURIComponent(s);
						}
						var s1 = map.file;
						var request = new haxe_http_HttpJs("https://tankzors.github.io/Maps/" + author + "/" + encodeURIComponent(s1) + ".json");
						request.onData = function(data) {
							var game4 = new game_Game();
							game4.show();
							game4.init();
							game4.loadOnlineMap(JSON.parse(data),text);
							return;
						};
						request.onError = function(data1) {
							haxe_Log.trace(data1,{ fileName : "game/gui/Menu.hx", lineNumber : 789, className : "game.gui.Menu", methodName : "action"});
							return;
						};
						request.request();
						break;
					}
				}
			}
			break;
		}
	}
	,changeValue: function(id,key) {
		Sound.forcePlay(kha_Assets.sounds.sounds_ui_button_down);
		var dir = key == 37 ? -1 : 1;
		var currentItem = this.elements[id];
		switch(this.type) {
		case 7:
			if(currentItem._hx_index == 2) {
				switch(currentItem.text) {
				case "music":
					var volume = (Music.volume * 10 | 0) * 10 + dir * 10;
					if(volume < 0 || volume > 100) {
						return;
					}
					var isMuteBefore = !Music.isEnabled;
					Music.setVolume(volume / 100);
					if(isMuteBefore) {
						if(this.game == null) {
							Music.play(this.introSound,true);
						} else {
							this.game.playMusicTrack(this.game.params.musicTrack);
						}
					} else if(!Music.isEnabled) {
						Music.stop();
					}
					khm_Settings.set({ musicVolume : volume / 100});
					break;
				case "sound":
					var volume1 = (Sound.soundVolume * 10 | 0) * 10 + dir * 10;
					if(volume1 < 0 || volume1 > 100) {
						return;
					}
					Sound.soundVolume = volume1 / 100;
					khm_Settings.set({ soundVolume : volume1 / 100});
					break;
				}
			}
			break;
		case 8:
			if(currentItem._hx_index == 2) {
				switch(currentItem.text) {
				case "gameScale":
					var scale = khm_Screen.defaultScale + dir;
					if(scale < 1 || scale > 9) {
						return;
					}
					if(this.game != null) {
						this.game.onRescale(scale);
					} else {
						khm_Screen.defaultScale = scale;
					}
					khm_Settings.set({ gameScale : scale});
					break;
				case "uiSize":
					var def = game_gui_Touch.getDefaultButtonSize();
					var newSize = game_gui_Touch.buttonSize + dir * (def * 0.05 | 0);
					if(newSize < 20 || newSize > 500) {
						return;
					}
					game_gui_Touch.buttonSize = newSize;
					khm_Settings.set({ buttonSize : game_gui_Touch.buttonSize});
					break;
				}
			}
			break;
		case 10:
			if(currentItem._hx_index == 2) {
				if(currentItem.text == "controlType") {
					var newType = game_gui_Touch.controlType + dir;
					if(newType < 1 || newType > 2) {
						return;
					}
					game_gui_Touch.controlType = newType;
					khm_Settings.set({ controlType : newType});
				}
			}
			break;
		case 12:
			if(currentItem._hx_index == 2) {
				if(currentItem.text == "page") {
					var page = game_gui_Menu.mapsPage + dir;
					if(page < 0 || page * 10 > game_gui_Menu.mapsData.length) {
						return;
					}
					game_gui_Menu.mapsPage = page;
					this.updateOnlineMapsMenu();
					if(this.currentId > -1) {
						this.currentId = this.elements.length - 2;
					}
				}
			}
			break;
		default:
		}
	}
	,prevItem: function() {
		this.currentId--;
		var _g = 0;
		_hx_loop1: while(_g < 5) {
			++_g;
			if(this.currentId < 0) {
				this.currentId = this.elements.length - 1;
			}
			switch(this.elements[this.currentId]._hx_index) {
			case 0:
				this.currentId--;
				break;
			case 3:
				this.currentId--;
				break;
			default:
				break _hx_loop1;
			}
		}
	}
	,nextItem: function() {
		this.currentId++;
		var _g = 0;
		_hx_loop1: while(_g < 5) {
			++_g;
			if(this.currentId > this.elements.length - 1) {
				this.currentId = 0;
			}
			switch(this.elements[this.currentId]._hx_index) {
			case 0:
				this.currentId++;
				break;
			case 3:
				this.currentId++;
				break;
			default:
				break _hx_loop1;
			}
		}
	}
	,onRender: function(canvas) {
		var g = canvas.get_g2();
		g.begin(null,-13825271);
		g.set_font(kha_Assets.fonts.RobotoCondensed_Regular);
		this.cameraY += game_gui_SmoothScroll.getSpeed(this.pointers);
		game_gui_SmoothScroll.update();
		var contentH = this.itemH * this.elements.length;
		var drawLogo = true;
		var minCamera = kha_Assets.images.gui_menu_back_1.get_height();
		var maxCameraY = minCamera + contentH - khm_Screen.h;
		if(maxCameraY > 0) {
			drawLogo = false;
			minCamera = this.itemH / 2 | 0;
			maxCameraY = minCamera + contentH - khm_Screen.h;
		}
		if(this.cameraY < -maxCameraY) {
			this.cameraY = -maxCameraY;
		}
		if(this.cameraY > 0) {
			this.cameraY = 0;
		}
		var y = khm_Screen.h / 2 - contentH / 2;
		if(y < minCamera) {
			y = minCamera;
		}
		if(drawLogo) {
			game_gui_Ui.camY = this.cameraY | 0;
			game_gui_Ui.maxCamY = -maxCameraY | 0;
			game_gui_Ui.drawScrollBg(g);
		} else {
			game_gui_Ui.drawBottomBg(g);
		}
		this.offX = khm_Screen.w / 2 - this.maxItemW / 2 | 0;
		this.offY = y + this.cameraY | 0;
		this.ui.begin(g);
		var _g = 0;
		var _g1 = this.elements.length;
		while(_g < _g1) {
			var i = _g++;
			if(-this.cameraY > i * this.itemH + minCamera + this.itemH || khm_Screen.h - this.cameraY < i * this.itemH) {
				this.offY += this.itemH;
				continue;
			}
			var element = this.elements[i];
			if(element == null) {
				break;
			}
			switch(element._hx_index) {
			case 0:
				break;
			case 1:
				this.drawItem(g,i,element.text);
				break;
			case 2:
				var _g2 = element.text;
				this.drawItem(g,i,_g2);
				this.drawIncButtons(g,i,_g2);
				break;
			case 3:
				this.offY += this.itemH;
				break;
			}
		}
		var offW = kha_System.windowWidth() % this.scale / this.scale;
		game_gui_Ui.drawScrollBar(g,khm_Screen.w - 4 + offW,0,4,khm_Screen.h,this.cameraY,-maxCameraY);
		this.ui.end();
		g.end();
		this.ui.executeCallbacks();
	}
	,drawItem: function(g,id,text) {
		var _gthis = this;
		var lineX = khm_Screen.w / 2 - this.maxItemW / 2 | 0;
		this.drawItemLine(g,lineX,this.lineOffX);
		var wid = ++this.ui.id;
		var x = lineX - this.lineOffX;
		var y = (this.offY | 0) - 1;
		var w = (this.maxItemW | 0) + this.lineOffX * 2;
		var h = this.lineH + 2;
		var rect_id = wid;
		var rect_x = x;
		var rect_y = y;
		var rect_w = w;
		var rect_h = h;
		var rect_group = 0;
		var _this = this.ui;
		_this.addWidgetData(wid,x,y,w,h,0);
		var _this1 = _this.frame;
		var i = (_this.frame.arr.length / 6 | 0) - 1;
		i *= 6;
		var group = _this1.arr[i + 5];
		if(group == null) {
			group = 0;
		}
		rect_id = _this1.arr[i];
		rect_x = _this1.arr[i + 1];
		rect_y = _this1.arr[i + 2];
		rect_w = _this1.arr[i + 3];
		rect_h = _this1.arr[i + 4];
		rect_group = group;
		var _this2 = this.ui;
		var p = _this2.isInside(rect_id,rect_x,rect_y,rect_w,rect_h);
		if(p != null) {
			if(!_this2.isWidgetGroupExists(rect_group)) {
				var id1 = p.id;
				_this2.widgetGroups[id1] = rect_group;
				_this2.hoverIds[id1] = rect_id;
				if(_this2.activeIds[id1] == 0 && _this2.pointersDown[id1]) {
					_this2.activeIds[id1] = rect_id;
				}
			}
		}
		var _this3 = this.ui;
		var state = _this3.isActive(wid) ? khm_imgui_WidgetState.Active : _this3.focusId == wid ? khm_imgui_WidgetState.Focus : _this3.isHovered(wid) ? khm_imgui_WidgetState.Hover : khm_imgui_WidgetState.Idle;
		if(this.ui.keyboardFocus) {
			if(id == this.currentId) {
				this.drawItemLine(g,lineX,this.lineOffX);
				g.set_color(-1);
			} else {
				g.set_color(-65536);
			}
		} else {
			switch(state._hx_index) {
			case 0:
				g.set_color(-65536);
				break;
			case 1:case 2:
				this.drawItemLine(g,lineX,this.lineOffX);
				g.set_color(-65536);
				break;
			case 3:
				this.drawItemLine(g,lineX,this.lineOffX);
				g.set_color(-1);
				break;
			}
		}
		var text1 = this.textString(text);
		var w1 = game_gui_Text.width(text1);
		game_gui_Text.drawString(g,text1,khm_Screen.w / 2 - w1 / 2 | 0,this.offY,this.maxLineW);
		this.offY += this.itemH;
		if(this.ui.isWidgetClicked(wid)) {
			if(this.blockHover) {
				this.blockHover = false;
				return;
			}
			this.ui.addCallback(function() {
				_gthis.currentId = id;
				_gthis.action();
				return;
			});
		}
	}
	,drawIncButtons: function(g,id,text) {
		var offY = this.offY - this.itemH;
		var numW = game_gui_Text.numbersWidth("" + 0);
		var x = (khm_Screen.w / 2 - this.maxItemW / 2 | 0) - this.lineOffX;
		if(x < 0) {
			x = 0;
		}
		if(game_gui_Widgets.rect(this.ui,x,offY - 1,numW * 3,this.lineH + 2)) {
			this.changeValue(id,37);
		}
		if(this.ui.keyboardFocus && id == this.currentId) {
			g.set_color(-1);
		} else {
			g.set_color(-65536);
		}
		game_gui_Text.drawSymbol(g,30,"-",x + numW,offY + 3);
		var x1 = (khm_Screen.w / 2 + this.maxItemW / 2 | 0) + this.lineOffX - numW * 3;
		if(x1 > khm_Screen.w - numW * 3) {
			x1 = khm_Screen.w - numW * 3;
		}
		if(game_gui_Widgets.rect(this.ui,x1,offY - 1,numW * 3,this.lineH + 2)) {
			this.changeValue(id,39);
		}
		if(this.ui.keyboardFocus && id == this.currentId) {
			g.set_color(-1);
		} else {
			g.set_color(-65536);
		}
		game_gui_Text.drawSymbol(g,30,"+",x1 + numW,offY + 3);
	}
	,drawItemLine: function(g,x,off) {
		var line = kha_Assets.images.gui_billets;
		var lineX = 360 - this.maxItemW - off * 2;
		g.set_color(-1593835521);
		khm_utils_Atlas.drawSubImage(g,line,x - off + 1,this.offY - 1,lineX,0,this.maxItemW + off * 2 - 1,line.get_height());
		khm_utils_Atlas.drawSubImage(g,line,x - off,this.offY - 1,360,0,1,line.get_height());
	}
	,__class__: game_gui_Menu
});
var game_gui_MoneyWindow = function(shop,game1,player,ui) {
	this.blockHover = false;
	this.offY = 0;
	this.maxItemW = 0;
	this.textH = 0;
	this.itemH = 0;
	this.maxLineW = 0.0;
	this.cameraY = 0.0;
	this.prevCameraY = 0.0;
	this.shop = shop;
	this.game = game1;
	this.player = player;
	this.ui = ui;
	khm_Screen.call(this);
};
$hxClasses["game.gui.MoneyWindow"] = game_gui_MoneyWindow;
game_gui_MoneyWindow.__name__ = "game.gui.MoneyWindow";
game_gui_MoneyWindow.__super__ = khm_Screen;
game_gui_MoneyWindow.prototype = $extend(khm_Screen.prototype,{
	shop: null
	,game: null
	,player: null
	,ui: null
	,prevCameraY: null
	,cameraY: null
	,maxLineW: null
	,itemH: null
	,textH: null
	,maxItemW: null
	,offY: null
	,bg: null
	,init: function() {
		this.itemH = kha_Assets.images.gui_billets.get_height();
		this.cameraY = 0;
		this.setScale(this.shop.scale);
		if(game_gui_MoneyWindow.iapState == 0 || game_gui_MoneyWindow.iapState == 3) {
			game_gui_MoneyWindow.iapState = 1;
		}
		iap_Iap.setCallbacks($bind(this,this.onInit),$bind(this,this.onError),$bind(this,this.onPurchase));
	}
	,onResize: function() {
		this.shop.onResize();
		this.setScaleSilent(this.shop.scale);
		var w = kha_System.windowWidth();
		var h = kha_System.windowHeight();
		if(this.bg == null || this.bg.get_width() != w || this.bg.get_height() != h) {
			this.bg = kha_Image.createRenderTarget(w,h);
		}
		var _this = this.bg.get_g2();
		var _this1 = _this.transformations[_this.transformationIndex];
		_this1._00 = this.scale;
		_this1._10 = 0;
		_this1._20 = 0;
		_this1._01 = 0;
		_this1._11 = this.scale;
		_this1._21 = 0;
		_this1._02 = 0;
		_this1._12 = 0;
		_this1._22 = 1;
		this.shop.onRender(this.bg);
		this.maxItemW = game_gui_Text.width("#C000,#S000  00,00$");
		this.maxLineW = khm_Screen.w;
	}
	,onKeyDown: function(key) {
		if(key == 27 || key == 1 || key == 13 || key == 32) {
			Sound.forcePlay(kha_Assets.sounds.sounds_ui_window);
			this.shop.show();
			this.shop.onResize();
		}
	}
	,blockHover: null
	,onMouseDown: function(p) {
		this.prevCameraY = this.cameraY;
		this.blockHover = false;
		p.moveY = 0;
		if(this.ui.onPointerDown(p)) {
			return;
		}
	}
	,onMouseUp: function(p) {
		if(Math.abs(this.prevCameraY - this.cameraY) > 10) {
			this.blockHover = true;
		}
		if(this.ui.onPointerUp(p)) {
			return;
		}
	}
	,onMouseMove: function(p) {
		if(p.isDown) {
			this.cameraY += p.moveY;
			game_gui_SmoothScroll.push(p.moveY);
		}
		if(this.ui.onPointerMove(p)) {
			return;
		}
	}
	,onUpdate: function() {
		var tmp;
		var _g = this.keys.h[38];
		if(!(_g == null ? false : _g)) {
			var _g1 = this.keys.h[87];
			tmp = _g1 == null ? false : _g1;
		} else {
			tmp = true;
		}
		if(tmp) {
			this.cameraY += 3;
		}
		var tmp1;
		var _g2 = this.keys.h[40];
		if(!(_g2 == null ? false : _g2)) {
			var _g3 = this.keys.h[83];
			tmp1 = _g3 == null ? false : _g3;
		} else {
			tmp1 = true;
		}
		if(tmp1) {
			this.cameraY -= 3;
		}
	}
	,onRender: function(canvas) {
		var _gthis = this;
		var g = canvas.get_g2();
		g.begin(null,-16777216);
		g.set_color(-1996488705);
		g.drawScaledImage(this.bg,0,0,khm_Screen.w,khm_Screen.h);
		this.cameraY += game_gui_SmoothScroll.getSpeed(this.pointers);
		game_gui_SmoothScroll.update();
		var contentH = this.textH + this.itemH * 4;
		var maxCameraY = contentH - khm_Screen.h;
		if(this.cameraY < -maxCameraY) {
			this.cameraY = -maxCameraY;
		}
		if(this.cameraY > 0) {
			this.cameraY = 0;
		}
		if(maxCameraY < 0) {
			this.cameraY = khm_Screen.h / 2 - contentH / 2;
		}
		this.offY = (this.cameraY | 0) + this.itemH;
		this.ui.begin(g);
		var h = 15 + (this.itemH + 5) * 6 + 2;
		this.offY = khm_Screen.h / 2 - h / 2 | 0;
		this.drawWindow(g,h);
		this.offY += 6;
		this.textLine(g,khm_Lang.get("exchangeOffice"));
		switch(game_gui_MoneyWindow.iapState) {
		case 0:
			break;
		case 1:
			this.offY += this.itemH + 5;
			this.textLine(g,khm_Lang.get("loading"));
			this.offY += this.itemH + 5;
			break;
		case 2:
			var _g = 0;
			var _g1 = game_gui_MoneyWindow.products;
			while(_g < _g1.length) {
				var product = _g1[_g];
				++_g;
				this.itemButton(g,product.name,product.price);
			}
			break;
		case 3:
			this.offY += this.itemH + 5;
			this.textLine(g,khm_Lang.get("error"));
			this.offY += this.itemH + 5;
			break;
		}
		this.offY += 5;
		if(this.game.levelType == 0) {
			if(this.button(g,khm_Lang.get("howAreTheySaved"))) {
				this.ui.addCallback(function() {
					_gthis.shop.showHelp(khm_Lang.get("moneyShopDesc"),_gthis);
					return;
				});
			}
		} else {
			this.offY += this.itemH + 5;
		}
		if(this.button(g,khm_Lang.get("back"))) {
			this.ui.addCallback(function() {
				_gthis.onKeyDown(27);
				return;
			});
		}
		var offW = kha_System.windowWidth() % this.scale / this.scale;
		game_gui_Ui.drawScrollBar(g,khm_Screen.w - 4 + offW,0,4,khm_Screen.h,this.cameraY,-maxCameraY);
		this.ui.end();
		g.end();
		this.ui.executeCallbacks();
	}
	,drawWindow: function(g,h) {
		var w = khm_Screen.w / 2 | 0;
		if(w < 126) {
			w = 151.2 | 0;
		}
		var x = khm_Screen.w / 2 - w / 2 | 0;
		var y = this.offY;
		g.set_color(-10674143);
		khm_utils_Atlas.drawScaledSubImage(g,kha_Assets.images.gui_pixel,1,1,1,1,x,y,w,h);
		g.set_color(-7391692);
		khm_utils_Atlas.drawScaledSubImage(g,kha_Assets.images.gui_pixel,1,1,1,1,x,y,w,1);
		g.set_color(-10608610);
		khm_utils_Atlas.drawScaledSubImage(g,kha_Assets.images.gui_pixel,1,1,1,1,x,y + h,w,1);
		g.set_color(-2003683786);
		khm_utils_Atlas.drawScaledSubImage(g,kha_Assets.images.gui_pixel,1,1,1,1,x,y,1,h);
	}
	,itemButton: function(g,text,price) {
		var state = this.emptyButton(g);
		var h = kha_Assets.images.gui_billets.get_height();
		var x = khm_Screen.w / 2 - this.maxItemW / 2;
		g.set_color(-7288);
		game_gui_Text.drawString(g,text,x,this.offY,this.maxLineW);
		var textW = game_gui_Text.width(price);
		var x1 = khm_Screen.w / 2 + this.maxItemW / 2 - textW;
		g.set_color(-1);
		game_gui_Text.drawString(g,price,x1,this.offY,this.maxLineW);
		this.offY += h + 5;
		return state;
	}
	,button: function(g,text) {
		var state = this.emptyButton(g);
		var h = kha_Assets.images.gui_billets.get_height();
		var textW = game_gui_Text.width(text);
		g.set_color(-1);
		game_gui_Text.drawString(g,text,khm_Screen.w / 2 - textW / 2,this.offY,this.maxLineW);
		this.offY += h + 5;
		return state;
	}
	,emptyButton: function(g) {
		var select = kha_Assets.images.gui_billets;
		var x = khm_Screen.w / 2 - 63. | 0;
		var y = this.offY - 1;
		var h = select.get_height();
		g.set_color(-1);
		khm_utils_Atlas.drawSubImage(g,select,x,y,360,0,126,h);
		return game_gui_Widgets.rect(this.ui,x,y,126,h);
	}
	,textLine: function(g,text) {
		g.set_color(-1);
		var textW = game_gui_Text.width(text);
		game_gui_Text.drawString(g,text,khm_Screen.w / 2 - textW / 2,this.offY,this.maxLineW);
		this.offY += this.itemH + 5;
	}
	,onInit: function() {
		var ids = ["shop_coins200","shop_coins100_stars2","shop_stars4"];
		iap_Iap.getProducts(ids,function(arr) {
			game_gui_MoneyWindow.iapState = 2;
			game_gui_MoneyWindow.products.length = 0;
			var _g = 0;
			while(_g < arr.length) {
				var product = arr[_g];
				++_g;
				var tmp;
				switch(product.id) {
				case "shop_coins100_stars2":
					tmp = "#C100,#S2";
					break;
				case "shop_coins200":
					tmp = "#C200";
					break;
				case "shop_stars4":
					tmp = "#S4";
					break;
				default:
					tmp = "Unknown";
				}
				product.name = tmp;
				var product1 = product.price;
				var tmp1;
				switch(product.currencyCode) {
				case "EUR":
					tmp1 = "€";
					break;
				case "RUB":
					tmp1 = "P";
					break;
				case "USD":
					tmp1 = "$";
					break;
				default:
					tmp1 = "";
				}
				product.price = product1 + tmp1;
				game_gui_MoneyWindow.products.push(product);
			}
			game_gui_MoneyWindow.products.sort(function(a,b) {
				return ids.indexOf(a.id) - ids.indexOf(b.id);
			});
			return;
		});
	}
	,onError: function() {
		game_gui_MoneyWindow.iapState = 3;
	}
	,onPurchase: function(status,purchase) {
		haxe_Log.trace(status,{ fileName : "game/gui/MoneyWindow.hx", lineNumber : 294, className : "game.gui.MoneyWindow", methodName : "onPurchase", customParams : [purchase]});
		switch(status) {
		case 0:
			var money = 0;
			var stars = 0;
			switch(purchase.id) {
			case "shop_coins100_stars2":
				money = 100;
				stars = 2;
				break;
			case "shop_coins200":
				money = 200;
				break;
			case "shop_stars4":
				stars = 4;
				break;
			default:
				Crashlytics.logException("MoneyWindow.onPurchase unknown id: " + purchase.id);
				return;
			}
			this.player.money += money;
			this.player.stars += stars;
			var save = khm_Settings.read();
			var slot;
			switch(this.game.levelType) {
			case 0:
				slot = save.currentSlot;
				break;
			case 1:
				slot = save.currentSlot;
				break;
			case 2:
				slot = save.onlineSlot;
				break;
			}
			slot.money += money;
			slot.stars += stars;
			this.updateSave(save,slot);
			this.ui.addCallback($bind(this,this.onResize));
			game_gui_MoneyWindow.isConsumed = false;
			break;
		case 1:
			break;
		case 2:
			break;
		case 3:
			break;
		}
	}
	,updateSave: function(save,slot) {
		switch(this.game.levelType) {
		case 0:
			save.bonusSlots.unshift(slot);
			if(save.bonusSlots.length > 20) {
				save.bonusSlots.pop();
			}
			break;
		case 1:
			break;
		case 2:
			break;
		}
		khm_Settings.write(save);
		this.game.save = save;
	}
	,__class__: game_gui_MoneyWindow
});
var game_gui_NewsWindow = function(back,ui) {
	this.blockHover = false;
	this.offY = 0;
	this.maxItemW = 0;
	this.windowW = 0;
	this.textH = 0;
	this.itemH = 0;
	this.maxLineW = 0.0;
	this.cameraY = 0.0;
	this.prevCameraY = 0.0;
	this.backscreen = back;
	this.ui = ui;
	khm_Screen.call(this);
};
$hxClasses["game.gui.NewsWindow"] = game_gui_NewsWindow;
game_gui_NewsWindow.__name__ = "game.gui.NewsWindow";
game_gui_NewsWindow.__super__ = khm_Screen;
game_gui_NewsWindow.prototype = $extend(khm_Screen.prototype,{
	backscreen: null
	,ui: null
	,text: null
	,prevCameraY: null
	,cameraY: null
	,maxLineW: null
	,itemH: null
	,textH: null
	,windowW: null
	,maxItemW: null
	,offY: null
	,bg: null
	,init: function(text) {
		this.text = text;
		var headerW = game_gui_Text.width(khm_Lang.get("battleNews"));
		this.windowW = khm_Screen.w / 2 | 0;
		if(this.windowW < 126) {
			this.windowW = 151.2 | 0;
		}
		if(this.windowW < headerW) {
			this.windowW = headerW;
		}
		this.textH = game_gui_Text.height(text,this.windowW);
		this.itemH = kha_Assets.images.gui_billets.get_height();
		this.cameraY = 0;
		this.setScale(this.backscreen.scale);
	}
	,onResize: function() {
		this.backscreen.onResize();
		this.setScaleSilent(this.backscreen.scale);
		var w = kha_System.windowWidth();
		var h = kha_System.windowHeight();
		if(this.bg == null || this.bg.get_width() != w || this.bg.get_height() != h) {
			this.bg = kha_Image.createRenderTarget(w,h);
		}
		var _this = this.bg.get_g2();
		var _this1 = _this.transformations[_this.transformationIndex];
		_this1._00 = this.scale;
		_this1._10 = 0;
		_this1._20 = 0;
		_this1._01 = 0;
		_this1._11 = this.scale;
		_this1._21 = 0;
		_this1._02 = 0;
		_this1._12 = 0;
		_this1._22 = 1;
		this.backscreen.onRender(this.bg);
		this.maxItemW = game_gui_Text.width("#C000,#S000  00,00$");
		this.maxLineW = khm_Screen.w;
	}
	,onKeyDown: function(key) {
		if(key == 27 || key == 1 || key == 13 || key == 32) {
			Sound.forcePlay(kha_Assets.sounds.sounds_ui_window);
			this.backscreen.show();
			this.backscreen.onResize();
		}
	}
	,blockHover: null
	,onMouseDown: function(p) {
		this.prevCameraY = this.cameraY;
		this.blockHover = false;
		p.moveY = 0;
		if(this.ui.onPointerDown(p)) {
			return;
		}
	}
	,onMouseUp: function(p) {
		if(Math.abs(this.prevCameraY - this.cameraY) > 10) {
			this.blockHover = true;
		}
		if(this.ui.onPointerUp(p)) {
			return;
		}
	}
	,onMouseMove: function(p) {
		if(p.isDown) {
			this.cameraY += p.moveY;
			game_gui_SmoothScroll.push(p.moveY);
		}
		if(this.ui.onPointerMove(p)) {
			return;
		}
	}
	,onUpdate: function() {
		var tmp;
		var _g = this.keys.h[38];
		if(!(_g == null ? false : _g)) {
			var _g1 = this.keys.h[87];
			tmp = _g1 == null ? false : _g1;
		} else {
			tmp = true;
		}
		if(tmp) {
			this.cameraY += 3;
		}
		var tmp1;
		var _g2 = this.keys.h[40];
		if(!(_g2 == null ? false : _g2)) {
			var _g3 = this.keys.h[83];
			tmp1 = _g3 == null ? false : _g3;
		} else {
			tmp1 = true;
		}
		if(tmp1) {
			this.cameraY -= 3;
		}
	}
	,onRender: function(canvas) {
		var _gthis = this;
		var g = canvas.get_g2();
		g.begin(null,-16777216);
		g.set_color(-1996488705);
		g.drawScaledImage(this.bg,0,0,khm_Screen.w,khm_Screen.h);
		this.cameraY += game_gui_SmoothScroll.getSpeed(this.pointers);
		game_gui_SmoothScroll.update();
		var contentH = this.textH + this.itemH * 4;
		var maxCameraY = contentH - khm_Screen.h;
		if(this.cameraY < -maxCameraY) {
			this.cameraY = -maxCameraY;
		}
		if(this.cameraY > 0) {
			this.cameraY = 0;
		}
		if(maxCameraY < 0) {
			this.cameraY = khm_Screen.h / 2 - contentH / 2;
		}
		this.offY = (this.cameraY | 0) + this.itemH;
		this.ui.begin(g);
		var h = (this.itemH + 5) * 2 + this.itemH * 2 + this.textH;
		this.offY = khm_Screen.h / 2 - h / 2 | 0;
		this.drawWindow(g,h);
		this.offY += 6;
		this.textLine(g,khm_Lang.get("battleNews"));
		var textW = game_gui_Text.width(this.text,this.windowW);
		game_gui_Text.drawString(g,this.text,khm_Screen.w / 2 - textW / 2,this.offY,this.windowW);
		this.offY += this.textH;
		this.offY += this.itemH;
		this.offY += 5;
		if(this.offY > khm_Screen.h - this.itemH) {
			this.offY = khm_Screen.h - this.itemH;
		}
		if(this.button(g,khm_Lang.get("ok"))) {
			this.ui.addCallback(function() {
				_gthis.onKeyDown(27);
				return;
			});
		}
		var offW = kha_System.windowWidth() % this.scale / this.scale;
		game_gui_Ui.drawScrollBar(g,khm_Screen.w - 4 + offW,0,4,khm_Screen.h,this.cameraY,-maxCameraY);
		this.ui.end();
		g.end();
		this.ui.executeCallbacks();
	}
	,drawWindow: function(g,h) {
		var w = this.windowW;
		var x = khm_Screen.w / 2 - w / 2 | 0;
		var y = this.offY;
		g.set_color(-10674143);
		khm_utils_Atlas.drawScaledSubImage(g,kha_Assets.images.gui_pixel,1,1,1,1,x,y,w,h);
		g.set_color(-7391692);
		khm_utils_Atlas.drawScaledSubImage(g,kha_Assets.images.gui_pixel,1,1,1,1,x,y,w,1);
		g.set_color(-10608610);
		khm_utils_Atlas.drawScaledSubImage(g,kha_Assets.images.gui_pixel,1,1,1,1,x,y + h,w,1);
		g.set_color(-2003683786);
		khm_utils_Atlas.drawScaledSubImage(g,kha_Assets.images.gui_pixel,1,1,1,1,x,y,1,h);
	}
	,button: function(g,text) {
		var state = this.emptyButton(g);
		var h = kha_Assets.images.gui_billets.get_height();
		var textW = game_gui_Text.width(text);
		g.set_color(-1);
		game_gui_Text.drawString(g,text,khm_Screen.w / 2 - textW / 2,this.offY,this.maxLineW);
		this.offY += h + 5;
		return state;
	}
	,emptyButton: function(g) {
		var select = kha_Assets.images.gui_billets;
		var x = khm_Screen.w / 2 - 63. | 0;
		var y = this.offY - 1;
		var h = select.get_height();
		g.set_color(-1);
		khm_utils_Atlas.drawSubImage(g,select,x,y,360,0,126,h);
		return game_gui_Widgets.rect(this.ui,x,y,126,h);
	}
	,textLine: function(g,text) {
		g.set_color(-1);
		var textW = game_gui_Text.width(text);
		game_gui_Text.drawString(g,text,khm_Screen.w / 2 - textW / 2,this.offY,this.maxLineW);
		this.offY += this.itemH + 5;
	}
	,__class__: game_gui_NewsWindow
});
var game_gui_OfferScreen = function() {
	this.blockHover = false;
	this.offY = 0;
	this.textH = 0;
	this.itemH = 0;
	this.maxItemW = 0;
	this.maxLineW = 0.0;
	this.cameraY = 0.0;
	this.prevCameraY = 0.0;
	this.lineH = 0;
	khm_Screen.call(this);
};
$hxClasses["game.gui.OfferScreen"] = game_gui_OfferScreen;
game_gui_OfferScreen.__name__ = "game.gui.OfferScreen";
game_gui_OfferScreen.__super__ = khm_Screen;
game_gui_OfferScreen.prototype = $extend(khm_Screen.prototype,{
	ui: null
	,text: null
	,backscreen: null
	,productId: null
	,onComplete: null
	,lineH: null
	,prevCameraY: null
	,cameraY: null
	,maxLineW: null
	,maxItemW: null
	,itemH: null
	,textH: null
	,offY: null
	,onInit: function() {
		var ids = [this.productId];
		iap_Iap.getProducts(ids,function(arr) {
			game_gui_OfferScreen.iapState = 2;
			game_gui_OfferScreen.products.length = 0;
			var _g = 0;
			while(_g < arr.length) {
				var product = arr[_g];
				++_g;
				product.name = product.id == "remove_ads" ? khm_Lang.get("buy") : "Unknown";
				var product1 = product.price;
				var tmp;
				switch(product.currencyCode) {
				case "EUR":
					tmp = "€";
					break;
				case "RUB":
					tmp = "P";
					break;
				case "USD":
					tmp = "$";
					break;
				default:
					tmp = "";
				}
				product.price = product1 + tmp;
				product.price = "(" + product.price + ")";
				game_gui_OfferScreen.products.push(product);
			}
			game_gui_OfferScreen.products.sort(function(a,b) {
				return ids.indexOf(a.id) - ids.indexOf(b.id);
			});
			return;
		});
	}
	,onError: function() {
		game_gui_OfferScreen.iapState = 3;
	}
	,onPurchase: function(status,purchase) {
		haxe_Log.trace(status,{ fileName : "game/gui/OfferScreen.hx", lineNumber : 88, className : "game.gui.OfferScreen", methodName : "onPurchase", customParams : [purchase]});
		switch(status) {
		case 1:
			break;
		case 2:
			break;
		case 0:case 3:
			if((purchase == null ? this.productId : purchase.id) == "remove_ads") {
				var save = khm_Settings.read();
				save.isAdsRemoved = true;
				Loader.isAdsRemoved = true;
				khm_Settings.write(save);
				this.ui.addCallback(this.onComplete);
			} else {
				Crashlytics.logException("OfferScreen.onPurchase unknown id: " + purchase.id);
				return;
			}
			break;
		}
	}
	,init: function(text,back,id,func) {
		this.ui = new khm_imgui_Imgui(new khm_imgui_ImguiSets(false,null,null));
		this.text = text;
		this.backscreen = back;
		this.productId = id;
		this.onComplete = func;
		this.itemH = kha_Assets.images.gui_billets.get_height();
		this.cameraY = 0;
		this.lineH = game_gui_Text.height("");
		this.maxItemW = game_gui_Text.width("#C000,#S000  00,00$");
		this.onResize();
		if(game_gui_OfferScreen.iapState == 0 || game_gui_OfferScreen.iapState == 3) {
			game_gui_OfferScreen.iapState = 1;
		}
		iap_Iap.setCallbacks($bind(this,this.onInit),$bind(this,this.onError),$bind(this,this.onPurchase));
	}
	,onResize: function() {
		var newScale = kha_System.windowWidth() * 0.6 / 126 | 0;
		if(newScale < 1) {
			newScale = 1;
		}
		var scaleH = kha_System.windowHeight() / (this.lineH * 12) | 0;
		if(scaleH < 1) {
			scaleH = 1;
		}
		if(newScale > scaleH) {
			newScale = scaleH;
		}
		var logoW = kha_Assets.images.gui_menu_pict.get_width() - 70;
		if(logoW * newScale / kha_System.windowWidth() > 1) {
			newScale = kha_System.windowWidth() / logoW | 0;
			if(newScale < 1) {
				newScale = 1;
			}
		}
		if(newScale != this.scale) {
			this.setScaleSilent(newScale);
		}
		this.maxLineW = khm_Screen.w * 0.75;
		this.textH = game_gui_Text.height(this.text,this.maxLineW);
	}
	,onKeyDown: function(key) {
		if(key == 27 || key == 1 || key == 13 || key == 32) {
			Sound.forcePlay(kha_Assets.sounds.sounds_ui_window);
			this.backscreen.show();
			this.backscreen.onResize();
		}
	}
	,blockHover: null
	,onMouseDown: function(p) {
		this.prevCameraY = this.cameraY;
		this.blockHover = false;
		p.moveY = 0;
		if(this.ui.onPointerDown(p)) {
			return;
		}
	}
	,onMouseUp: function(p) {
		if(Math.abs(this.prevCameraY - this.cameraY) > 10) {
			this.blockHover = true;
		}
		if(this.ui.onPointerUp(p)) {
			return;
		}
	}
	,onMouseMove: function(p) {
		if(p.isDown) {
			this.cameraY += p.moveY;
			game_gui_SmoothScroll.push(p.moveY);
		}
		if(this.ui.onPointerMove(p)) {
			return;
		}
	}
	,onUpdate: function() {
		var tmp;
		var _g = this.keys.h[38];
		if(!(_g == null ? false : _g)) {
			var _g1 = this.keys.h[87];
			tmp = _g1 == null ? false : _g1;
		} else {
			tmp = true;
		}
		if(tmp) {
			this.cameraY += 3;
		}
		var tmp1;
		var _g2 = this.keys.h[40];
		if(!(_g2 == null ? false : _g2)) {
			var _g3 = this.keys.h[83];
			tmp1 = _g3 == null ? false : _g3;
		} else {
			tmp1 = true;
		}
		if(tmp1) {
			this.cameraY -= 3;
		}
	}
	,onRender: function(canvas) {
		var _gthis = this;
		var g = canvas.get_g2();
		g.begin(null,-13825271);
		game_gui_Ui.drawBottomBg(g);
		this.cameraY += game_gui_SmoothScroll.getSpeed(this.pointers);
		game_gui_SmoothScroll.update();
		var contentH = this.textH + this.itemH * 5;
		var maxCameraY = contentH - khm_Screen.h;
		if(this.cameraY < -maxCameraY) {
			this.cameraY = -maxCameraY;
		}
		if(this.cameraY > 0) {
			this.cameraY = 0;
		}
		if(maxCameraY < 0) {
			this.cameraY = khm_Screen.h / 2 - contentH / 2;
		}
		this.offY = (this.cameraY | 0) + this.itemH;
		game_gui_Text.drawString(g,this.text,khm_Screen.w / 2 - this.maxLineW / 2,this.offY,this.maxLineW);
		this.ui.begin(g);
		this.offY += this.textH + this.itemH;
		switch(game_gui_OfferScreen.iapState) {
		case 0:
			break;
		case 1:
			this.button(g,khm_Lang.get("loading"));
			break;
		case 2:
			var _g = 0;
			var _g1 = game_gui_OfferScreen.products;
			while(_g < _g1.length) {
				var product = _g1[_g];
				++_g;
				this.singleItemButton(g,product.name,product.price);
			}
			break;
		case 3:
			this.button(g,khm_Lang.get("error"));
			break;
		}
		if(this.button(g,khm_Lang.get("back"))) {
			this.ui.addCallback(function() {
				_gthis.onKeyDown(27);
				return;
			});
		}
		this.offY += this.itemH;
		var offW = kha_System.windowWidth() % this.scale / this.scale;
		game_gui_Ui.drawScrollBar(g,khm_Screen.w - 4 + offW,0,4,khm_Screen.h,this.cameraY,-maxCameraY);
		this.ui.end();
		g.end();
		this.ui.executeCallbacks();
	}
	,singleItemButton: function(g,text,price) {
		var state = this.emptyButton(g);
		var h = kha_Assets.images.gui_billets.get_height();
		var maxItemW = game_gui_Text.width("" + text + " " + price,this.maxLineW);
		var x = khm_Screen.w / 2 - maxItemW / 2;
		g.set_color(-7288);
		game_gui_Text.drawString(g,text,x,this.offY,this.maxLineW);
		var textW = game_gui_Text.width(price);
		var x1 = khm_Screen.w / 2 + maxItemW / 2 - textW;
		g.set_color(-1);
		game_gui_Text.drawString(g,price,x1,this.offY,this.maxLineW);
		this.offY += h + 5;
		return state;
	}
	,button: function(g,text) {
		var state = this.emptyButton(g);
		var h = kha_Assets.images.gui_billets.get_height();
		var textW = game_gui_Text.width(text);
		g.set_color(-1);
		game_gui_Text.drawString(g,text,khm_Screen.w / 2 - textW / 2,this.offY,this.maxLineW);
		this.offY += h + 5;
		return state;
	}
	,emptyButton: function(g) {
		var select = kha_Assets.images.gui_billets;
		var x = khm_Screen.w / 2 - 63. | 0;
		var y = this.offY - 1;
		var h = select.get_height();
		g.set_color(-1);
		khm_utils_Atlas.drawSubImage(g,select,x,y,360,0,126,h);
		return game_gui_Widgets.rect(this.ui,x,y,126,h);
	}
	,__class__: game_gui_OfferScreen
});
var game_gui__$Shop_Element = $hxEnums["game.gui._Shop.Element"] = { __ename__ : "game.gui._Shop.Element", __constructs__ : ["Header","Item","StarItem","Space","ContinueGame"]
	,Header: ($_=function(icon,text) { return {_hx_index:0,icon:icon,text:text,__enum__:"game.gui._Shop.Element",toString:$estr}; },$_.__params__ = ["icon","text"],$_)
	,Item: ($_=function(icon,text,count,isActive,price) { return {_hx_index:1,icon:icon,text:text,count:count,isActive:isActive,price:price,__enum__:"game.gui._Shop.Element",toString:$estr}; },$_.__params__ = ["icon","text","count","isActive","price"],$_)
	,StarItem: ($_=function(text,count,price) { return {_hx_index:2,text:text,count:count,price:price,__enum__:"game.gui._Shop.Element",toString:$estr}; },$_.__params__ = ["text","count","price"],$_)
	,Space: {_hx_index:3,__enum__:"game.gui._Shop.Element",toString:$estr}
	,ContinueGame: {_hx_index:4,__enum__:"game.gui._Shop.Element",toString:$estr}
};
var game_gui_Shop = function() {
	this.blockHover = false;
	this.drawStringCords = [];
	this.drawStringTexts = [];
	var _g = new haxe_ds_StringMap();
	var value = [9,9];
	if(__map_reserved["extraInterest"] != null) {
		_g.setReserved("extraInterest",value);
	} else {
		_g.h["extraInterest"] = value;
	}
	var value1 = [5,7,8,8,9,4,4,4];
	if(__map_reserved["shellResearch"] != null) {
		_g.setReserved("shellResearch",value1);
	} else {
		_g.h["shellResearch"] = value1;
	}
	var value2 = [4,4,4,4,4];
	if(__map_reserved["artilleryResearch"] != null) {
		_g.setReserved("artilleryResearch",value2);
	} else {
		_g.h["artilleryResearch"] = value2;
	}
	var value3 = [5,5];
	if(__map_reserved["missileResearch"] != null) {
		_g.setReserved("missileResearch",value3);
	} else {
		_g.h["missileResearch"] = value3;
	}
	var value4 = [5,5];
	if(__map_reserved["mineResearch"] != null) {
		_g.setReserved("mineResearch",value4);
	} else {
		_g.h["mineResearch"] = value4;
	}
	var value5 = [4,4,4];
	if(__map_reserved["dynamiteResearch"] != null) {
		_g.setReserved("dynamiteResearch",value5);
	} else {
		_g.h["dynamiteResearch"] = value5;
	}
	var value6 = [5,5,5];
	if(__map_reserved["armorResearch"] != null) {
		_g.setReserved("armorResearch",value6);
	} else {
		_g.h["armorResearch"] = value6;
	}
	var value7 = [5,5,5,5];
	if(__map_reserved["powerFieldResearch"] != null) {
		_g.setReserved("powerFieldResearch",value7);
	} else {
		_g.h["powerFieldResearch"] = value7;
	}
	var value8 = [6,6,6];
	if(__map_reserved["airRaidResearch"] != null) {
		_g.setReserved("airRaidResearch",value8);
	} else {
		_g.h["airRaidResearch"] = value8;
	}
	var value9 = [6,6,6];
	if(__map_reserved["allyTankResearch"] != null) {
		_g.setReserved("allyTankResearch",value9);
	} else {
		_g.h["allyTankResearch"] = value9;
	}
	this.researchPrices = _g;
	this.researchList = ["extraInterest","shellResearch","artilleryResearch","missileResearch","mineResearch","dynamiteResearch","armorResearch","powerFieldResearch","airRaidResearch","allyTankResearch"];
	this.priceList = [5,15,30,55,70,120,100,60,320,10,25,35,60,110,170,90,210,420,110,250,100,40,320,35,120];
	this.itemList = [0,1,2,3,4,5,6,7,8,10,11,12,13,14,9,25,26,27,21,22,20,19,23,17,15];
	this.itemH = 0;
	this.currentId = 0;
	this.cameraY = 0.0;
	this.prevCameraY = 0.0;
	this.offY = 0;
	this.gameMusicPos = 0.0;
	khm_Screen.call(this);
};
$hxClasses["game.gui.Shop"] = game_gui_Shop;
game_gui_Shop.__name__ = "game.gui.Shop";
game_gui_Shop.canFastRepair = function(player) {
	var dmg = player.maxHp - player.hp;
	if(dmg == 0) {
		return false;
	}
	return player.money >= (player.research.armorResearch == 3 ? 3 : 6) * dmg;
};
game_gui_Shop.fastRepair = function(player) {
	var price = player.research.armorResearch == 3 ? 3 : 6;
	var dmg = player.maxHp - player.hp;
	player.useBonus(29);
	player.money -= price * dmg;
};
game_gui_Shop.__super__ = khm_Screen;
game_gui_Shop.prototype = $extend(khm_Screen.prototype,{
	game: null
	,player: null
	,resaveOnExit: null
	,help: null
	,moneyWindow: null
	,ui: null
	,gameMusicPos: null
	,offY: null
	,prevCameraY: null
	,cameraY: null
	,currentId: null
	,itemH: null
	,maxItemW: null
	,elements: null
	,origItems: null
	,items: null
	,hasRadar: null
	,itemList: null
	,priceList: null
	,researchList: null
	,researchPrices: null
	,drawStringTexts: null
	,drawStringCords: null
	,init: function(game1,player,resaveOnExit) {
		if(resaveOnExit == null) {
			resaveOnExit = false;
		}
		this.ui = new khm_imgui_Imgui(new khm_imgui_ImguiSets(false,null,null));
		this.moneyWindow = new game_gui_MoneyWindow(this,game1,player,this.ui);
		this.help = new game_gui_ShopHelp(this,player,this.ui);
		this.game = game1;
		this.player = player;
		this.resaveOnExit = resaveOnExit;
		if(!resaveOnExit) {
			this.gameMusicPos = Music.getPosition();
		}
		this.itemH = kha_Assets.images.gui_billets.get_height();
		this.origItems = player.inventory.get();
		this.items = player.inventory.copy();
		this.elements = [game_gui__$Shop_Element.Space,game_gui__$Shop_Element.Space,game_gui__$Shop_Element.Header(0,"basicAmmunition")];
		var _g = 0;
		var _g1 = this.itemList.length;
		while(_g < _g1) {
			var i = _g++;
			var item = this.itemList[i];
			switch(item) {
			case 6:
				this.elements.push(game_gui__$Shop_Element.Header(7,"additionalAmmunition"));
				break;
			case 19:
				this.elements.push(game_gui__$Shop_Element.Header(19,"repair"));
				this.elements.push(game_gui__$Shop_Element.Item(item,game_gui__$Icon_Icon_$Impl_$.toString(item),this.itemCount(item),true,this.priceList[i]));
				var dmg = player.maxHp - player.hp;
				this.elements.push(game_gui__$Shop_Element.Item(-1,game_gui__$Icon_Icon_$Impl_$.toString(item) + "Tank",dmg,true,(player.research.armorResearch == 3 ? 3 : 6) * dmg));
				var dmg1 = player.getAllyDamageCount();
				this.elements.push(game_gui__$Shop_Element.Item(-1,game_gui__$Icon_Icon_$Impl_$.toString(item) + "Allys",dmg1,true,(player.research.armorResearch == 3 ? 2 : 5) * dmg1));
				continue;
			case 21:
				this.elements.push(game_gui__$Shop_Element.Header(22,"defend"));
				this.elements.push(game_gui__$Shop_Element.Item(item,game_gui__$Icon_Icon_$Impl_$.toString(item),player.tempArmor,true,this.priceList[i]));
				continue;
			case 22:
				this.elements.push(game_gui__$Shop_Element.Item(item,game_gui__$Icon_Icon_$Impl_$.toString(item),player.armor,true,this.priceList[i]));
				continue;
			case 23:
				this.elements.push(game_gui__$Shop_Element.Header(17,"other"));
				var radarCount = this.itemCount(item);
				this.hasRadar = radarCount > 0;
				this.elements.push(game_gui__$Shop_Element.Item(item,game_gui__$Icon_Icon_$Impl_$.toString(item),radarCount,true,this.priceList[i]));
				this.elements.push(game_gui__$Shop_Element.Item(-1,"ExChassis",player.exChassis ? 1 : 0,true,910));
				this.elements.push(game_gui__$Shop_Element.Item(-1,"AddLife",player.lives,true,170));
				continue;
			case 25:
				this.elements.push(game_gui__$Shop_Element.Header(25,"allyTanks"));
				break;
			default:
			}
			this.elements.push(game_gui__$Shop_Element.Item(item,game_gui__$Icon_Icon_$Impl_$.toString(item),this.itemCount(item),true,this.priceList[i]));
		}
		this.elements.push(game_gui__$Shop_Element.Header(20,"research"));
		this.updateItemStates();
		this.updateRepairPrice();
		this.addArmorDiscount();
		var _g2 = 0;
		var _g3 = this.researchList;
		while(_g2 < _g3.length) {
			var item1 = _g3[_g2];
			++_g2;
			var level = Reflect.field(player.research,item1);
			var _this = this.researchPrices;
			var price = (__map_reserved[item1] != null ? _this.getReserved(item1) : _this.h[item1])[level];
			this.elements.push(game_gui__$Shop_Element.StarItem(item1,level,price == null ? 0 : price));
		}
		this.elements.push(game_gui__$Shop_Element.Space);
		this.elements.push(game_gui__$Shop_Element.ContinueGame);
		this.elements.push(game_gui__$Shop_Element.Space);
		Music.play(kha_Assets.sounds.get("music_briefing"),true);
		this.maxItemW = this.getMaxLineW();
		this.onResize();
	}
	,itemCount: function(icon) {
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.id == icon) {
				return i.count;
			}
		}
		return 0;
	}
	,updateItemStates: function() {
		var _g = 0;
		var _g1 = this.elements.length;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = this.elements[i];
			if(_g2._hx_index == 1) {
				var state = this.isItemActive(i);
				if(state == _g2.isActive) {
					continue;
				}
				this.elements[i] = game_gui__$Shop_Element.Item(_g2.icon,_g2.text,_g2.count,state,_g2.price);
			}
		}
	}
	,addArmorDiscount: function() {
		if(this.player.research.armorResearch < 3) {
			return;
		}
		this.updateRepairPrice();
		var _g = 0;
		var _g1 = this.elements.length;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = this.elements[i];
			if(_g2._hx_index == 1) {
				var _g5 = _g2.price;
				var _g4 = _g2.isActive;
				var _g3 = _g2.count;
				var _g21 = _g2.text;
				var _g11 = _g2.icon;
				var price = _g5;
				switch(_g11) {
				case 20:case 21:case 22:
					price = _g5 - (_g5 / 100 * 30 | 0);
					this.elements[i] = game_gui__$Shop_Element.Item(_g11,_g21,_g3,_g4,price);
					break;
				default:
				}
			}
		}
	}
	,updateRepairPrice: function() {
		var _g = 0;
		var _g1 = this.elements.length;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = this.elements[i];
			if(_g2._hx_index == 1) {
				var _g11 = _g2.icon;
				if(_g11 == 19) {
					var price = this.player.maxHp * (this.player.research.armorResearch == 3 ? 5 : 8);
					if(price == _g2.price) {
						break;
					}
					this.elements[i] = game_gui__$Shop_Element.Item(_g11,_g2.text,_g2.count,_g2.isActive,price);
					break;
				}
			}
		}
	}
	,isItemActive: function(id) {
		var r = this.player.research;
		var _g = this.elements[id];
		if(_g._hx_index == 1) {
			var _g3 = _g.count;
			var _g2 = _g.text;
			var _g1 = _g.icon;
			switch(_g1) {
			case -1:
				switch(_g2) {
				case "AddLife":
					return true;
				case "ExChassis":
					return _g3 < 1;
				case "RepairAllys":case "RepairTank":
					return _g3 > 0;
				default:
					return false;
				}
				break;
			case 1:
				return r.shellResearch > 0;
			case 2:
				return r.shellResearch > 1;
			case 3:
				return r.shellResearch > 2;
			case 4:
				return r.shellResearch > 3;
			case 5:
				return r.shellResearch > 4;
			case 6:
				return r.artilleryResearch > 0;
			case 7:
				return r.missileResearch > 0;
			case 8:
				return r.missileResearch > 1;
			case 9:
				if(r.airRaidResearch > 0) {
					return this.hasRadar;
				} else {
					return false;
				}
				break;
			case 10:
				return r.mineResearch > 0;
			case 11:
				return r.mineResearch > 1;
			case 12:
				return r.dynamiteResearch > 0;
			case 13:
				return r.dynamiteResearch > 1;
			case 14:
				return r.dynamiteResearch > 2;
			case 20:
				return r.powerFieldResearch > 0;
			case 21:
				if(r.armorResearch > 0) {
					return this.player.tempArmor < this.player.getItemLimit(_g1);
				} else {
					return false;
				}
				break;
			case 22:
				if(r.armorResearch > 1) {
					return this.player.armor < this.player.getItemLimit(_g1);
				} else {
					return false;
				}
				break;
			case 25:
				return r.allyTankResearch > 0;
			case 26:
				return r.allyTankResearch > 1;
			case 27:
				return r.allyTankResearch > 2;
			default:
				return true;
			}
		} else {
			return true;
		}
	}
	,onResize: function() {
		var maxW = this.maxItemW + 130;
		var newScale = kha_System.windowWidth() / maxW;
		if(newScale < 1) {
			newScale = 1;
		}
		var scaleH = kha_System.windowHeight() / (this.itemH * 10);
		if(scaleH < 1) {
			scaleH = 1;
		}
		if(scaleH < newScale) {
			newScale = scaleH;
		}
		newScale = newScale | 0;
		if(newScale == this.scale) {
			return;
		}
		this.setScaleSilent(newScale);
		this.generateAtlas();
	}
	,generateAtlas: function() {
		var _gthis = this;
		khm_utils_Atlas.init(function(name) {
			switch(name) {
			case "gui_billets":case "gui_menu_back_2":case "gui_menu_pict_fade":case "gui_pixel":
				return true;
			case "gui_digits":
				var scale = _gthis.scale * 14 / 8;
				if(scale > 1.8) {
					scale = 1.8;
				}
				var prop = new khm_utils_AtlasProps(scale,game_gui_Text.numbersW);
				var _this = khm_utils_Atlas.props;
				if(__map_reserved[name] != null) {
					_this.setReserved(name,prop);
				} else {
					_this.h[name] = prop;
				}
				return true;
			case "gui_icons":
				var scale1 = _gthis.scale / 5;
				if(scale1 > 1) {
					scale1 = 1;
				}
				var prop1 = new khm_utils_AtlasProps(scale1,null);
				var _this1 = khm_utils_Atlas.props;
				if(__map_reserved[name] != null) {
					_this1.setReserved(name,prop1);
				} else {
					_this1.h[name] = prop1;
				}
				return true;
			case "gui_stat_money":case "gui_stat_star":
				var scale2 = _gthis.scale * 14 / 8;
				if(scale2 > 7) {
					scale2 = 7;
				}
				var prop2 = new khm_utils_AtlasProps(scale2,null);
				var _this2 = khm_utils_Atlas.props;
				if(__map_reserved[name] != null) {
					_this2.setReserved(name,prop2);
				} else {
					_this2.h[name] = prop2;
				}
				return true;
			default:
			}
			return false;
		});
	}
	,getMaxLineW: function() {
		var max = 0;
		var _g = 0;
		var _g1 = this.elements;
		while(_g < _g1.length) {
			var el = _g1[_g];
			++_g;
			switch(el._hx_index) {
			case 1:
				var w = game_gui_Text.width(khm_Lang.get(el.text));
				if(max < w) {
					max = w;
				}
				break;
			case 2:
				var w1 = game_gui_Text.width(khm_Lang.get(el.text));
				if(max < w1) {
					max = w1;
				}
				break;
			default:
			}
		}
		return max;
	}
	,blockHover: null
	,onMouseDown: function(p) {
		this.prevCameraY = this.cameraY;
		this.blockHover = false;
		p.moveY = 0;
		if(this.ui.onPointerDown(p)) {
			return;
		}
	}
	,onMouseUp: function(p) {
		if(Math.abs(this.prevCameraY - this.cameraY) > 10) {
			this.blockHover = true;
		}
		if(this.ui.onPointerUp(p)) {
			return;
		}
	}
	,onMouseMove: function(p) {
		if(p.isDown) {
			this.cameraY += p.moveY;
			game_gui_SmoothScroll.push(p.moveY);
		}
		if(this.ui.onPointerMove(p)) {
			return;
		}
	}
	,onMouseWheel: function(delta) {
		var speed = game_gui_SmoothScroll.getSpeed();
		speed -= delta;
		if(speed > 5) {
			speed = 5;
		}
		if(speed < -5) {
			speed = -5;
		}
		game_gui_SmoothScroll.setSpeed(speed);
	}
	,onKeyDown: function(key) {
		if(this.ui.onKeyDown(key)) {
			return;
		}
		if(khm_utils_ScreenTools.onRescaleKeys(this,key)) {
			return;
		}
		switch(this.elements[this.currentId]._hx_index) {
		case 1:
			if(key == 37) {
				this.setItemCount(this.currentId,-1);
			}
			if(key == 39) {
				this.setItemCount(this.currentId,1);
			}
			if(key == 32 || key == 13) {
				this.showItemDesc(this.currentId);
			}
			break;
		case 2:
			if(key == 37) {
				this.setItemCount(this.currentId,-1);
			}
			if(key == 39) {
				this.setItemCount(this.currentId,1);
			}
			if(key == 32 || key == 13) {
				this.showItemDesc(this.currentId);
			}
			break;
		case 4:
			if(key == 32 || key == 13) {
				this.continueGame();
			}
			break;
		default:
		}
		if(key == 27 || key == 1) {
			this.continueGame();
		}
		if(key == 38 || key == 87) {
			this.prevItem();
		}
		if(key == 40 || key == 83) {
			this.nextItem();
		}
		this.cameraY = -(this.currentId * this.itemH - khm_Screen.h / 2 | 0);
	}
	,showItemDesc: function(id) {
		var _g = this.elements[id];
		switch(_g._hx_index) {
		case 1:
			Sound.forcePlay(kha_Assets.sounds.sounds_ui_window);
			this.showHelp(StringTools.replace(khm_Lang.get(_g.text + "Desc"),"[X]","~#r" + khm_Lang.get("price") + ": " + _g.price + "#w#C"),this);
			break;
		case 2:
			Sound.forcePlay(kha_Assets.sounds.sounds_ui_window);
			this.showHelp(StringTools.replace(khm_Lang.get(_g.text + "Desc"),"[X]","~#r" + khm_Lang.get("price") + ": " + _g.price + "#w#C"),this);
			break;
		default:
		}
	}
	,showHelp: function(text,back) {
		this.help.show();
		this.help.init(text,back);
	}
	,continueGame: function() {
		Sound.forcePlay(kha_Assets.sounds.sounds_ui_window);
		Loader.generateAtlas();
		this.game.show();
		this.game.onResize();
		this.player.inventory.set(this.items);
		if(!this.resaveOnExit) {
			this.game.playMusicTrack(this.game.params.musicTrack);
			Music.setPosition(this.gameMusicPos);
			return;
		}
		var save = khm_Settings.read();
		switch(this.game.levelType) {
		case 0:
			this.player.saveTo(save.currentSlot);
			khm_Settings.write(save);
			this.game.save = save;
			this.game.continueCampaign();
			break;
		case 1:
			throw new js__$Boot_HaxeError("Shop.continueGame start from PracticeLevel");
		case 2:
			this.player.saveTo(save.onlineSlot);
			khm_Settings.write(save);
			this.game.save = save;
			this.game.playMusicTrack(this.game.params.musicTrack);
			break;
		}
	}
	,prevItem: function() {
		this.currentId--;
		var _g = 0;
		_hx_loop1: while(_g < 5) {
			++_g;
			if(this.currentId < 0) {
				this.currentId = this.elements.length - 1;
			}
			switch(this.elements[this.currentId]._hx_index) {
			case 0:
				this.currentId--;
				break;
			case 3:
				this.currentId--;
				break;
			default:
				break _hx_loop1;
			}
		}
	}
	,nextItem: function() {
		this.currentId++;
		var _g = 0;
		_hx_loop1: while(_g < 5) {
			++_g;
			if(this.currentId > this.elements.length - 1) {
				this.currentId = 0;
			}
			switch(this.elements[this.currentId]._hx_index) {
			case 0:
				this.currentId++;
				break;
			case 3:
				this.currentId++;
				break;
			default:
				break _hx_loop1;
			}
		}
	}
	,onKeyUp: function(key) {
		if(this.ui.onKeyUp(key)) {
			return;
		}
	}
	,onRender: function(canvas) {
		var g = canvas.get_g2();
		g.begin(null,-13825271);
		g.set_font(kha_Assets.fonts.RobotoCondensed_Regular);
		game_gui_Ui.drawBottomBg(g);
		this.cameraY += game_gui_SmoothScroll.getSpeed(this.pointers);
		game_gui_SmoothScroll.update();
		var maxCameraY = this.itemH * this.elements.length - khm_Screen.h;
		if(this.cameraY < -maxCameraY) {
			this.cameraY = -maxCameraY;
		}
		if(this.cameraY > 0) {
			this.cameraY = 0;
		}
		this.offY = this.cameraY | 0;
		this.ui.begin(g);
		var _g = 0;
		var _g1 = this.elements.length;
		while(_g < _g1) {
			var i = _g++;
			if(-this.cameraY > i * this.itemH || khm_Screen.h - this.cameraY < i * this.itemH) {
				this.offY += this.itemH;
				continue;
			}
			if(game_Game.smoothingEnabled) {
				g.set_imageScaleQuality(1);
			}
			var element = this.elements[i];
			switch(element._hx_index) {
			case 0:
				this.drawHeader(g,element.icon,khm_Lang.get(element.text));
				break;
			case 1:
				this.drawItem(g,i,khm_Lang.get(element.text),element.count,element.isActive,element.price);
				break;
			case 2:
				this.drawStarItem(g,i,khm_Lang.get(element.text),element.count,element.price);
				break;
			case 3:
				this.offY += this.itemH;
				break;
			case 4:
				this.drawMenuItem(g,i,khm_Lang.get("continue"));
				break;
			}
		}
		if(game_Game.smoothingEnabled) {
			g.set_imageScaleQuality(0);
		}
		var _g2 = 0;
		var _g3 = this.drawStringTexts.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var text = this.drawStringTexts[i1];
			var data = this.drawStringCords[i1];
			g.set_color(data[3] | 0);
			game_gui_Text.drawString(g,text,data[0],data[1],data[2]);
		}
		this.drawStringTexts.length = 0;
		this.drawStringCords.length = 0;
		var offW = kha_System.windowWidth() % this.scale / this.scale;
		game_gui_Ui.drawScrollBar(g,khm_Screen.w - 4 + offW,this.itemH,4,khm_Screen.h - this.itemH,this.cameraY,-maxCameraY);
		this.drawTitle(g);
		this.ui.end();
		g.end();
		this.ui.executeCallbacks();
	}
	,drawTitle: function(g) {
		if(game_Game.smoothingEnabled) {
			g.set_imageScaleQuality(1);
		}
		var oldScale = this.scale;
		if(-this.cameraY < this.itemH) {
			this.setGraphicScale(g,this.scale * 1.3);
		}
		g.set_color(-13825271);
		khm_utils_Atlas.drawScaledSubImage(g,kha_Assets.images.gui_pixel,1,1,1,1,0,0,khm_Screen.w,this.itemH);
		g.set_color(-28528);
		this.offY = 0;
		var fade = kha_Assets.images.gui_menu_pict_fade;
		khm_utils_Atlas.drawScaledImage(g,fade,0,this.itemH - 1,khm_Screen.w,fade.get_height());
		this.drawTitleLine(g);
		this.drawTitleLine(g);
		this.drawTitleLine(g);
		this.drawExitIcon(g);
		var text = "#C" + this.player.money + "  #S" + this.player.stars + " ";
		var textW = game_gui_Text.width(text);
		var textX = khm_Screen.w / 2 - textW / 2 | 0;
		this.drawTitleButtons(g,textX,textW);
		g.set_color(-1);
		game_gui_Text.drawString(g,text,textX,1,khm_Screen.w);
		this.offY = this.itemH;
		this.setGraphicScale(g,oldScale);
		if(game_Game.smoothingEnabled) {
			g.set_imageScaleQuality(0);
		}
	}
	,drawTitleButtons: function(g,textX,textW) {
		switch(this.game.levelType) {
		case 1:
			return;
		case 0:case 2:
			break;
		}
		if(game_gui_Widgets.stateRect(this.ui,textX,this.offY,textW,this.itemH) == 3) {
			this.ui.addCallback($bind(this,this.openMoneyWindow));
		}
		var nw = game_gui_Text.numbersWidth("" + 0);
		var x = (khm_Screen.w / 2 + textW / 2 | 0) + nw;
		switch(game_gui_Widgets.stateRect(this.ui,x - nw,this.offY,nw * 3,this.itemH)) {
		case 1:
			g.set_color(822083583);
			khm_utils_Atlas.drawScaledSubImage(g,kha_Assets.images.gui_pixel,1,1,1,1,x - nw,this.offY,nw * 3,this.itemH);
			break;
		case 2:
			g.set_color(-1996488705);
			khm_utils_Atlas.drawScaledSubImage(g,kha_Assets.images.gui_pixel,1,1,1,1,x - nw,this.offY,nw * 3,this.itemH);
			break;
		case 3:
			this.ui.addCallback($bind(this,this.openMoneyWindow));
			break;
		default:
		}
		g.set_color(-4438);
		game_gui_Text.drawSymbol(g,30,"+",x,this.offY + 3);
	}
	,openMoneyWindow: function() {
		Sound.forcePlay(kha_Assets.sounds.sounds_ui_window);
		this.moneyWindow.show();
		this.moneyWindow.init();
	}
	,drawTitleLine: function(g) {
		var title = kha_Assets.images.gui_billets;
		khm_utils_Atlas.drawSubImage(g,title,0,this.offY,540,0,125,this.itemH);
		khm_utils_Atlas.drawScaledSubImage(g,title,640,0,25,this.itemH,125,this.offY,khm_Screen.w - 125,this.itemH);
	}
	,drawHeader: function(g,icon,name) {
		this.drawHeaderLine(g);
		g.set_color(-1);
		game_gui_Ui.drawScaledIcon(g,icon,5,this.offY - 1,20,20);
		this.drawString(g,name,30,this.offY + 1,khm_Screen.w);
		this.offY += this.itemH;
	}
	,drawItem: function(g,id,name,count,isActive,price) {
		var isActive1 = isActive && this.isCanBuy(id);
		this.addItemButton(id);
		this.drawItemText(g,id,name,isActive1);
		this.drawButtons(g,id,10,count);
		this.drawPrice(g,id,price,10,isActive1,false);
		this.offY += this.itemH;
	}
	,drawStarItem: function(g,id,name,count,price) {
		var isActive = this.isCanBuy(id);
		this.addItemButton(id);
		this.drawItemText(g,id,name,isActive);
		this.drawButtons(g,id,10,count);
		this.drawPrice(g,id,price,10,isActive,true);
		this.offY += this.itemH;
	}
	,addItemButton: function(itemId) {
		if(khm_Screen.isTouch) {
			return;
		}
		var id = ++this.ui.id;
		var y = this.offY;
		var w = khm_Screen.w;
		var h = this.itemH;
		var rect_id = id;
		var rect_x = 0;
		var rect_y = y;
		var rect_w = w;
		var rect_h = h;
		var rect_group = 0;
		var _this = this.ui;
		_this.addWidgetData(id,0,y,w,h,0);
		var _this1 = _this.frame;
		var i = (_this.frame.arr.length / 6 | 0) - 1;
		i *= 6;
		var group = _this1.arr[i + 5];
		if(group == null) {
			group = 0;
		}
		rect_id = _this1.arr[i];
		rect_x = _this1.arr[i + 1];
		rect_y = _this1.arr[i + 2];
		rect_w = _this1.arr[i + 3];
		rect_h = _this1.arr[i + 4];
		rect_group = group;
		var _this2 = this.ui;
		var p = _this2.isInside(rect_id,rect_x,rect_y,rect_w,rect_h);
		if(p != null) {
			if(!_this2.isWidgetGroupExists(rect_group)) {
				var id1 = p.id;
				_this2.widgetGroups[id1] = rect_group;
				_this2.hoverIds[id1] = rect_id;
				if(_this2.activeIds[id1] == 0 && _this2.pointersDown[id1]) {
					_this2.activeIds[id1] = rect_id;
				}
			}
		}
		if(this.ui.isWidgetClicked(id)) {
			if(!this.blockHover) {
				this.currentId = itemId;
			} else {
				this.blockHover = false;
			}
		}
	}
	,drawItemText: function(g,id,name,isActive) {
		if(this.currentId == id) {
			game_gui_Ui.drawSelectionLine(g,this.offY);
			g.set_color(isActive ? -1 : -32897);
		} else {
			g.set_color(isActive ? -65536 : -1996554240);
		}
		this.drawString(g,name,5,this.offY + 1,khm_Screen.w);
	}
	,drawPrice: function(g,id,price,offW,isActive,isStar) {
		if(price == 0) {
			return;
		}
		var isCurrent = this.currentId == id;
		var priceText = "" + price;
		var w = game_gui_Text.width(priceText);
		g.set_color(isActive ? -1 : -1996488705);
		var icon = isStar ? " #S" : " #C";
		var iconW = game_gui_Text.width(icon);
		game_gui_Text.drawString(g,icon,khm_Screen.w - offW - iconW,this.offY + 2,khm_Screen.w);
		if(isCurrent) {
			g.set_color(isActive ? -1 : -1996488705);
		} else {
			g.set_color(isActive ? -65536 : -1996554240);
		}
		this.drawString(g,priceText,khm_Screen.w - w - offW - iconW,this.offY + 2,khm_Screen.w);
	}
	,drawButtons: function(g,id,offW,count) {
		g.set_color(-1);
		var nw = game_gui_Text.numbersWidth("" + 0);
		var priceW = game_gui_Text.width("000 #S");
		var x = khm_Screen.w - priceW * 2 - offW - nw * 8;
		if(x < this.maxItemW + offW) {
			x = this.maxItemW + offW + (khm_Screen.w - this.maxItemW - offW - priceW) / 2 - (nw * 9 + nw * 2 + 2) / 2 | 0;
		}
		if(game_gui_Widgets.rect(this.ui,x - nw,this.offY,nw * 3,this.itemH)) {
			this.showItemDesc(id);
		}
		game_gui_Text.drawSymbol(g,0,"?",x,this.offY + 3);
		x += nw * 3;
		if(this.isSellEnabled(id)) {
			if(game_gui_Widgets.rect(this.ui,x - nw,this.offY,nw * 3,this.itemH)) {
				this.setItemCount(id,-1);
			}
			g.set_color(this.isCanSell(id) ? -1 : -1996488705);
			game_gui_Text.drawSymbol(g,30,"-",x,this.offY + 3);
		}
		x += nw * 2 + 2;
		var isCanBuy = this.isCanBuy(id);
		g.set_color(isCanBuy ? -1 : -1996488705);
		this.drawCount(g,id,x,nw,count);
		x += nw * 3;
		if(this.isBuyEnabled(id)) {
			if(game_gui_Widgets.rect(this.ui,x - nw,this.offY,nw * 3,this.itemH)) {
				this.setItemCount(id,1);
			}
			g.set_color(isCanBuy ? -1 : -1996488705);
			game_gui_Text.drawSymbol(g,30,"+",x,this.offY + 3);
		}
	}
	,drawCount: function(g,id,x,nw,count) {
		var _g = this.elements[id];
		if(_g._hx_index == 2) {
			if(_g.text == "extraInterest") {
				var count1 = 5 + _g.count * 5;
				var string = "" + count1;
				var cx = x + (nw / 2 | 0) - (game_gui_Text.numbersWidth(string) / 2 | 0);
				game_gui_Text.drawNumber(g,30,count1,cx,this.offY + 3);
				cx += game_gui_Text.numbersWidth(string);
				game_gui_Text.drawSymbol(g,30,"%",cx,this.offY + 3);
				return;
			}
		}
		game_gui_Text.drawNumber(g,30,count,x + nw - (game_gui_Text.numbersWidth("" + count) / 2 | 0),this.offY + 3);
	}
	,isSellEnabled: function(id) {
		var _g = this.elements[id];
		switch(_g._hx_index) {
		case 1:
			var _g1 = _g.icon;
			if(_g1 == -1) {
				return false;
			}
			if(_g1 == 21) {
				return false;
			}
			if(_g1 == 22) {
				return false;
			}
			if(_g1 == 23) {
				return false;
			}
			break;
		case 2:
			return false;
		default:
			return false;
		}
		return true;
	}
	,isBuyEnabled: function(id) {
		var _g = this.elements[id];
		switch(_g._hx_index) {
		case 1:
			var _g3 = _g.count;
			var _g2 = _g.text;
			var _g1 = _g.icon;
			switch(_g1) {
			case 21:
				return this.player.tempArmor < this.player.getItemLimit(_g1);
			case 22:
				return this.player.armor < this.player.getItemLimit(_g1);
			case 23:
				return _g3 < 1;
			default:
			}
			switch(_g2) {
			case "ExChassis":
				return _g3 < 1;
			case "RepairAllys":case "RepairTank":
				return _g3 > 0;
			}
			break;
		case 2:
			var _g6 = _g.text;
			var _this = this.researchPrices;
			if(_g.count >= (__map_reserved[_g6] != null ? _this.getReserved(_g6) : _this.h[_g6]).length) {
				return false;
			}
			break;
		default:
			return false;
		}
		return true;
	}
	,isCanSell: function(id) {
		if(!this.isSellEnabled(id)) {
			return false;
		}
		var _g = this.elements[id];
		if(_g._hx_index == 1) {
			if(!_g.isActive) {
				return false;
			}
			var newCount = _g.count + -this.getBuyCount(id);
			if(newCount < 0) {
				return false;
			}
			var oid = this.getOrigItemId(_g.icon);
			if(oid != -1 && newCount < this.origItems[oid].count) {
				return false;
			}
		} else {
			return false;
		}
		return true;
	}
	,isCanBuy: function(id) {
		if(!this.isBuyEnabled(id)) {
			return false;
		}
		var _g = this.elements[id];
		switch(_g._hx_index) {
		case 1:
			if(!_g.isActive) {
				return false;
			}
			if(this.player.money - _g.price < 0) {
				return false;
			}
			if(_g.count >= this.player.getItemLimit(_g.icon)) {
				return false;
			}
			break;
		case 2:
			var _g6 = _g.text;
			if(this.player.stars - _g.price < 0) {
				return false;
			}
			var _this = this.researchPrices;
			if(_g.count >= (__map_reserved[_g6] != null ? _this.getReserved(_g6) : _this.h[_g6]).length) {
				return false;
			}
			break;
		default:
			return false;
		}
		return true;
	}
	,getBuyCount: function(id) {
		var _g = this.elements[id];
		if(_g._hx_index == 1) {
			switch(_g.icon) {
			case 0:case 1:case 2:case 3:case 4:case 5:
				return 10;
			default:
				return 1;
			}
		} else {
			return 1;
		}
	}
	,getOrigItemId: function(icon) {
		var _g = 0;
		var _g1 = this.origItems.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.origItems[i].id == icon) {
				return i;
			}
		}
		return -1;
	}
	,setItemCount: function(id,dir) {
		if(dir < 0) {
			if(!this.isCanSell(id)) {
				return;
			}
		} else if(!this.isCanBuy(id)) {
			return;
		}
		Sound.forcePlay(kha_Assets.sounds.sounds_ui_button_down);
		var _g = this.elements[id];
		switch(_g._hx_index) {
		case 1:
			var _g5 = _g.price;
			var _g2 = _g.text;
			var _g1 = _g.icon;
			var price = _g5;
			var isActive = _g.isActive;
			var buyCount = this.getBuyCount(id);
			var count = _g.count + buyCount * dir;
			var limit = this.player.getItemLimit(_g1);
			if(dir == 1 && count > limit) {
				var part = count - limit;
				count -= part;
				this.player.money += _g5 * (part / buyCount) | 0;
			}
			this.changeItemValue(_g1,_g2,count);
			this.player.money -= _g5 * dir;
			switch(_g2) {
			case "RepairAllys":case "RepairTank":
				price = _g5 / (count - dir) | 0;
				count = 0;
				isActive = false;
				break;
			}
			switch(_g1) {
			case 21:case 22:
				this.updateRepairPrice();
				break;
			case 23:
				this.hasRadar = count > 0;
				this.updateItemStates();
				break;
			default:
			}
			this.elements[id] = game_gui__$Shop_Element.Item(_g1,_g2,count,isActive,price);
			break;
		case 2:
			var _g7 = _g.count;
			var _g6 = _g.text;
			var count1 = _g7;
			count1 = _g7 + dir;
			this.player.research[_g6] = count1;
			this.player.stars -= _g.price * dir;
			var _this = this.researchPrices;
			var price1 = (__map_reserved[_g6] != null ? _this.getReserved(_g6) : _this.h[_g6])[Reflect.field(this.player.research,_g6)];
			if(price1 == null) {
				price1 = 0;
			}
			this.elements[id] = game_gui__$Shop_Element.StarItem(_g6,count1,price1);
			this.updateItemStates();
			if(_g6 == "armorResearch") {
				this.addArmorDiscount();
			}
			break;
		default:
		}
	}
	,changeItemValue: function(icon,text,count) {
		if(icon == -1) {
			switch(text) {
			case "AddLife":
				this.player.lives = count;
				break;
			case "ExChassis":
				this.player.setExChassis(true);
				break;
			case "RepairAllys":
				this.player.repairAllys();
				break;
			case "RepairTank":
				this.player.useBonus(29);
				break;
			}
			return;
		}
		switch(icon) {
		case 21:
			this.player.addTempArmor(1);
			return;
		case 22:
			this.player.setArmor(this.player.armor + 1);
			return;
		default:
		}
		var oid = this.getOrigItemId(icon);
		if(oid == -1) {
			this.origItems.push({ id : icon, count : 0});
			this.items.push({ id : icon, count : count});
		} else {
			this.items[oid].count = count;
			if(count == 0) {
				HxOverrides.remove(this.origItems,this.origItems[oid]);
				HxOverrides.remove(this.items,this.items[oid]);
			}
		}
	}
	,drawMenuItem: function(g,itemId,name) {
		this.addItemButton(itemId);
		var state = game_gui_Widgets.stateRect(this.ui,0,this.offY,khm_Screen.w,this.itemH);
		if(this.ui.keyboardFocus) {
			if(this.currentId == itemId) {
				game_gui_Ui.drawSelectionLine(g,this.offY);
				g.set_color(-1);
			} else {
				g.set_color(-65536);
			}
		} else {
			switch(state) {
			case 2:
				game_gui_Ui.drawSelectionLine(g,this.offY);
				g.set_color(-1);
				break;
			case 3:
				this.ui.addCallback($bind(this,this.continueGame));
				break;
			default:
				g.set_color(-65536);
			}
		}
		this.drawString(g,name,5,this.offY + 1,khm_Screen.w);
		this.offY += this.itemH;
	}
	,drawExitIcon: function(g) {
		var itemW = this.itemH + (15. | 0);
		switch(game_gui_Widgets.stateRect(this.ui,0,0,itemW,this.itemH)) {
		case 1:
			g.set_color(822083583);
			khm_utils_Atlas.drawScaledSubImage(g,kha_Assets.images.gui_pixel,1,1,1,1,0,0,itemW,this.itemH);
			break;
		case 2:
			g.set_color(-1996488705);
			khm_utils_Atlas.drawScaledSubImage(g,kha_Assets.images.gui_pixel,1,1,1,1,0,0,itemW,this.itemH);
			break;
		case 3:
			this.ui.addCallback($bind(this,this.continueGame));
			break;
		default:
		}
		var h = game_gui_Text.numberHeight();
		game_gui_Text.drawSymbol(g,0,"<",10,((this.itemH - h) / 2 | 0) + 1);
	}
	,drawString: function(g,text,x,y,w) {
		this.drawStringTexts.push(text);
		this.drawStringCords.push([x,y,w,g.get_color()]);
	}
	,drawHeaderLine: function(g) {
		g.set_color(-855677338);
		this.drawTitleLine(g);
		this.drawTitleLine(g);
	}
	,__class__: game_gui_Shop
});
var game_gui_ShopHelp = function(shop,player,ui) {
	this.blockHover = false;
	this.offY = 0;
	this.textH = 0;
	this.itemH = 0;
	this.maxLineW = 0.0;
	this.cameraY = 0.0;
	this.prevCameraY = 0.0;
	this.shop = shop;
	this.player = player;
	this.ui = ui;
	khm_Screen.call(this);
};
$hxClasses["game.gui.ShopHelp"] = game_gui_ShopHelp;
game_gui_ShopHelp.__name__ = "game.gui.ShopHelp";
game_gui_ShopHelp.__super__ = khm_Screen;
game_gui_ShopHelp.prototype = $extend(khm_Screen.prototype,{
	shop: null
	,player: null
	,ui: null
	,text: null
	,backscreen: null
	,prevCameraY: null
	,cameraY: null
	,maxLineW: null
	,itemH: null
	,textH: null
	,offY: null
	,init: function(text,back) {
		this.text = text;
		this.backscreen = back;
		this.itemH = kha_Assets.images.gui_billets.get_height();
		this.replaceTextIds();
		this.cameraY = 0;
		this.setScale(this.shop.scale);
	}
	,onResize: function() {
		this.maxLineW = khm_Screen.w * 0.75;
		this.textH = game_gui_Text.height(this.text,this.maxLineW);
	}
	,onKeyDown: function(key) {
		if(key == 27 || key == 1 || key == 13 || key == 32) {
			Sound.forcePlay(kha_Assets.sounds.sounds_ui_window);
			this.backscreen.show();
			this.backscreen.onResize();
		}
	}
	,blockHover: null
	,onMouseDown: function(p) {
		this.prevCameraY = this.cameraY;
		this.blockHover = false;
		p.moveY = 0;
		if(this.ui.onPointerDown(p)) {
			return;
		}
	}
	,onMouseUp: function(p) {
		if(Math.abs(this.prevCameraY - this.cameraY) > 10) {
			this.blockHover = true;
		}
		if(this.ui.onPointerUp(p)) {
			return;
		}
	}
	,onMouseMove: function(p) {
		if(p.isDown) {
			this.cameraY += p.moveY;
			game_gui_SmoothScroll.push(p.moveY);
		}
		if(this.ui.onPointerMove(p)) {
			return;
		}
	}
	,onUpdate: function() {
		var tmp;
		var _g = this.keys.h[38];
		if(!(_g == null ? false : _g)) {
			var _g1 = this.keys.h[87];
			tmp = _g1 == null ? false : _g1;
		} else {
			tmp = true;
		}
		if(tmp) {
			this.cameraY += 3;
		}
		var tmp1;
		var _g2 = this.keys.h[40];
		if(!(_g2 == null ? false : _g2)) {
			var _g3 = this.keys.h[83];
			tmp1 = _g3 == null ? false : _g3;
		} else {
			tmp1 = true;
		}
		if(tmp1) {
			this.cameraY -= 3;
		}
	}
	,onRender: function(canvas) {
		var g = canvas.get_g2();
		g.begin(null,-13825271);
		game_gui_Ui.drawBottomBg(g);
		this.cameraY += game_gui_SmoothScroll.getSpeed(this.pointers);
		game_gui_SmoothScroll.update();
		var contentH = this.textH + this.itemH * 4;
		var maxCameraY = contentH - khm_Screen.h;
		if(this.cameraY < -maxCameraY) {
			this.cameraY = -maxCameraY;
		}
		if(this.cameraY > 0) {
			this.cameraY = 0;
		}
		if(maxCameraY < 0) {
			this.cameraY = khm_Screen.h / 2 - contentH / 2;
		}
		this.offY = (this.cameraY | 0) + this.itemH;
		game_gui_Text.drawString(g,this.text,khm_Screen.w / 2 - this.maxLineW / 2,this.offY,this.maxLineW);
		this.ui.begin(g);
		this.offY += this.textH + this.itemH;
		this.backButton(g);
		this.offY += this.itemH;
		var offW = kha_System.windowWidth() % this.scale / this.scale;
		game_gui_Ui.drawScrollBar(g,khm_Screen.w - 4 + offW,0,4,khm_Screen.h,this.cameraY,-maxCameraY);
		this.ui.end();
		g.end();
		this.ui.executeCallbacks();
	}
	,backButton: function(g) {
		var _gthis = this;
		var select = kha_Assets.images.gui_billets;
		var x = khm_Screen.w / 2 - 63. | 0;
		var y = this.offY - 1;
		var h = select.get_height();
		g.set_color(-1);
		khm_utils_Atlas.drawSubImage(g,select,x,y,360,0,126,h);
		if(game_gui_Widgets.rect(this.ui,x,y,126,h)) {
			this.ui.addCallback(function() {
				_gthis.onKeyDown(27);
				return;
			});
		}
		var string = khm_Lang.get("back");
		var textW = game_gui_Text.width(string);
		g.set_color(-1);
		game_gui_Text.drawString(g,string,khm_Screen.w / 2 - textW / 2,this.offY,this.maxLineW);
		this.offY += h + 5;
	}
	,replaceTextIds: function() {
		var _g = new haxe_ds_StringMap();
		if(__map_reserved["X01_MINES1_STRENGTH"] != null) {
			_g.setReserved("X01_MINES1_STRENGTH",5);
		} else {
			_g.h["X01_MINES1_STRENGTH"] = 5;
		}
		if(__map_reserved["X02_MINES2_STRENGTH"] != null) {
			_g.setReserved("X02_MINES2_STRENGTH",9);
		} else {
			_g.h["X02_MINES2_STRENGTH"] = 9;
		}
		if(__map_reserved["X051_ARTILLERY_STR_LVL1"] != null) {
			_g.setReserved("X051_ARTILLERY_STR_LVL1",11);
		} else {
			_g.h["X051_ARTILLERY_STR_LVL1"] = 11;
		}
		if(__map_reserved["X052_ARTILLERY_STR_LVL2"] != null) {
			_g.setReserved("X052_ARTILLERY_STR_LVL2",11);
		} else {
			_g.h["X052_ARTILLERY_STR_LVL2"] = 11;
		}
		if(__map_reserved["X053_ARTILLERY_STR_LVL3"] != null) {
			_g.setReserved("X053_ARTILLERY_STR_LVL3",14);
		} else {
			_g.h["X053_ARTILLERY_STR_LVL3"] = 14;
		}
		if(__map_reserved["X054_ARTILLERY_STR_LVL4"] != null) {
			_g.setReserved("X054_ARTILLERY_STR_LVL4",17);
		} else {
			_g.h["X054_ARTILLERY_STR_LVL4"] = 17;
		}
		var value = this.player.getArtilleryPower();
		if(__map_reserved["X06_ARTILLERY_STR_CURRENT"] != null) {
			_g.setReserved("X06_ARTILLERY_STR_CURRENT",value);
		} else {
			_g.h["X06_ARTILLERY_STR_CURRENT"] = value;
		}
		var value1 = this.player.getArtilleryDist();
		if(__map_reserved["X07_ARTILLERY_DISTANCE_CURRENT"] != null) {
			_g.setReserved("X07_ARTILLERY_DISTANCE_CURRENT",value1);
		} else {
			_g.h["X07_ARTILLERY_DISTANCE_CURRENT"] = value1;
		}
		var value2 = this.player.getArtilleryRadius() * 2 - 1;
		if(__map_reserved["X08_ARTILLERY_DIAM_CURRENT"] != null) {
			_g.setReserved("X08_ARTILLERY_DIAM_CURRENT",value2);
		} else {
			_g.h["X08_ARTILLERY_DIAM_CURRENT"] = value2;
		}
		if(__map_reserved["X09_WARHEAD_STR"] != null) {
			_g.setReserved("X09_WARHEAD_STR",9);
		} else {
			_g.h["X09_WARHEAD_STR"] = 9;
		}
		if(__map_reserved["X10_WARHEAD_DIAM"] != null) {
			_g.setReserved("X10_WARHEAD_DIAM",3);
		} else {
			_g.h["X10_WARHEAD_DIAM"] = 3;
		}
		if(__map_reserved["X11_HOMING_STR"] != null) {
			_g.setReserved("X11_HOMING_STR",32);
		} else {
			_g.h["X11_HOMING_STR"] = 32;
		}
		if(__map_reserved["X12_HOMING_DIAM"] != null) {
			_g.setReserved("X12_HOMING_DIAM",5);
		} else {
			_g.h["X12_HOMING_DIAM"] = 5;
		}
		if(__map_reserved["X13_DYNAMITE1_STR"] != null) {
			_g.setReserved("X13_DYNAMITE1_STR",7);
		} else {
			_g.h["X13_DYNAMITE1_STR"] = 7;
		}
		if(__map_reserved["X14_DYNAMITE1_DIAM"] != null) {
			_g.setReserved("X14_DYNAMITE1_DIAM",5);
		} else {
			_g.h["X14_DYNAMITE1_DIAM"] = 5;
		}
		if(__map_reserved["X15_DYNAMITE2_STR"] != null) {
			_g.setReserved("X15_DYNAMITE2_STR",10);
		} else {
			_g.h["X15_DYNAMITE2_STR"] = 10;
		}
		if(__map_reserved["X16_DYNAMITE2_DIAM"] != null) {
			_g.setReserved("X16_DYNAMITE2_DIAM",5);
		} else {
			_g.h["X16_DYNAMITE2_DIAM"] = 5;
		}
		if(__map_reserved["X17_DYNAMITE3_STR"] != null) {
			_g.setReserved("X17_DYNAMITE3_STR",19);
		} else {
			_g.h["X17_DYNAMITE3_STR"] = 19;
		}
		if(__map_reserved["X18_DYNAMITE3_DIAM"] != null) {
			_g.setReserved("X18_DYNAMITE3_DIAM",7);
		} else {
			_g.h["X18_DYNAMITE3_DIAM"] = 7;
		}
		var value3 = this.player.getAirSupportBombs();
		if(__map_reserved["X19_AIRSUPPORT_EXPL_COUNT_CURRENT"] != null) {
			_g.setReserved("X19_AIRSUPPORT_EXPL_COUNT_CURRENT",value3);
		} else {
			_g.h["X19_AIRSUPPORT_EXPL_COUNT_CURRENT"] = value3;
		}
		var value4 = this.player.getAirSupportPower();
		if(__map_reserved["X21_AIRSUPPORT_STR_CURRENT"] != null) {
			_g.setReserved("X21_AIRSUPPORT_STR_CURRENT",value4);
		} else {
			_g.h["X21_AIRSUPPORT_STR_CURRENT"] = value4;
		}
		var value5 = this.player.getAirSupportRadius() * 2 - 1;
		if(__map_reserved["X20_AIRSUPPORT_DIAM_CURRENT"] != null) {
			_g.setReserved("X20_AIRSUPPORT_DIAM_CURRENT",value5);
		} else {
			_g.h["X20_AIRSUPPORT_DIAM_CURRENT"] = value5;
		}
		if(__map_reserved["X211_AIRSUPPORT_EXPL_COUNT_MIN"] != null) {
			_g.setReserved("X211_AIRSUPPORT_EXPL_COUNT_MIN",5);
		} else {
			_g.h["X211_AIRSUPPORT_EXPL_COUNT_MIN"] = 5;
		}
		if(__map_reserved["X212_AIRSUPPORT_EXPL_COUNT_MAX"] != null) {
			_g.setReserved("X212_AIRSUPPORT_EXPL_COUNT_MAX",7);
		} else {
			_g.h["X212_AIRSUPPORT_EXPL_COUNT_MAX"] = 7;
		}
		if(__map_reserved["X213_AIRSUPPORT_STR_1"] != null) {
			_g.setReserved("X213_AIRSUPPORT_STR_1",11);
		} else {
			_g.h["X213_AIRSUPPORT_STR_1"] = 11;
		}
		if(__map_reserved["X214_AIRSUPPORT_STR_2"] != null) {
			_g.setReserved("X214_AIRSUPPORT_STR_2",18);
		} else {
			_g.h["X214_AIRSUPPORT_STR_2"] = 18;
		}
		if(__map_reserved["X215_AIRSUPPORT_STR_3"] != null) {
			_g.setReserved("X215_AIRSUPPORT_STR_3",21);
		} else {
			_g.h["X215_AIRSUPPORT_STR_3"] = 21;
		}
		if(__map_reserved["X22_ALLY_TANK1_HP"] != null) {
			_g.setReserved("X22_ALLY_TANK1_HP",8);
		} else {
			_g.h["X22_ALLY_TANK1_HP"] = 8;
		}
		if(__map_reserved["X23_ALLY_TANK2_HP"] != null) {
			_g.setReserved("X23_ALLY_TANK2_HP",15);
		} else {
			_g.h["X23_ALLY_TANK2_HP"] = 15;
		}
		if(__map_reserved["X24_ALLY_TANK3_HP"] != null) {
			_g.setReserved("X24_ALLY_TANK3_HP",25);
		} else {
			_g.h["X24_ALLY_TANK3_HP"] = 25;
		}
		var value6 = this.player.getItemLimit(21);
		if(__map_reserved["X25_ARMOR_TEMP_MAX"] != null) {
			_g.setReserved("X25_ARMOR_TEMP_MAX",value6);
		} else {
			_g.h["X25_ARMOR_TEMP_MAX"] = value6;
		}
		var value7 = this.player.getItemLimit(22);
		if(__map_reserved["X26_ARMOR_MAX"] != null) {
			_g.setReserved("X26_ARMOR_MAX",value7);
		} else {
			_g.h["X26_ARMOR_MAX"] = value7;
		}
		var value8 = this.player.getItemLimit(20);
		if(__map_reserved["X27_ARMOR_FIELD_MAX"] != null) {
			_g.setReserved("X27_ARMOR_FIELD_MAX",value8);
		} else {
			_g.h["X27_ARMOR_FIELD_MAX"] = value8;
		}
		if(__map_reserved["X271_ARMOR_RESEARCH_MAX"] != null) {
			_g.setReserved("X271_ARMOR_RESEARCH_MAX",5);
		} else {
			_g.h["X271_ARMOR_RESEARCH_MAX"] = 5;
		}
		if(__map_reserved["X272_ARMOR_FIELD_RESEARCH_MAX"] != null) {
			_g.setReserved("X272_ARMOR_FIELD_RESEARCH_MAX",7);
		} else {
			_g.h["X272_ARMOR_FIELD_RESEARCH_MAX"] = 7;
		}
		if(__map_reserved["X273_ARMOR_RESEARCH_MIN"] != null) {
			_g.setReserved("X273_ARMOR_RESEARCH_MIN",4);
		} else {
			_g.h["X273_ARMOR_RESEARCH_MIN"] = 4;
		}
		if(__map_reserved["X274_ARMOR_FIELD_RESEARCH_MIN"] != null) {
			_g.setReserved("X274_ARMOR_FIELD_RESEARCH_MIN",5);
		} else {
			_g.h["X274_ARMOR_FIELD_RESEARCH_MIN"] = 5;
		}
		var value9 = this.player.research.armorResearch == 3 ? 5 : 8;
		if(__map_reserved["X28_REPAIRKIT_PRICE"] != null) {
			_g.setReserved("X28_REPAIRKIT_PRICE",value9);
		} else {
			_g.h["X28_REPAIRKIT_PRICE"] = value9;
		}
		var value10 = this.player.research.armorResearch == 3 ? 3 : 6;
		if(__map_reserved["X29_REPAIR_PRICE"] != null) {
			_g.setReserved("X29_REPAIR_PRICE",value10);
		} else {
			_g.h["X29_REPAIR_PRICE"] = value10;
		}
		var value11 = this.player.research.armorResearch == 3 ? 2 : 5;
		if(__map_reserved["X30_REPAIR_ALLY_PRICE"] != null) {
			_g.setReserved("X30_REPAIR_ALLY_PRICE",value11);
		} else {
			_g.h["X30_REPAIR_ALLY_PRICE"] = value11;
		}
		if(__map_reserved["X37_ARMOR_REPAIR_DISCOUNT"] != null) {
			_g.setReserved("X37_ARMOR_REPAIR_DISCOUNT",3);
		} else {
			_g.h["X37_ARMOR_REPAIR_DISCOUNT"] = 3;
		}
		if(__map_reserved["X32_MAMMOTH_BODY_ADD_HP"] != null) {
			_g.setReserved("X32_MAMMOTH_BODY_ADD_HP",2);
		} else {
			_g.h["X32_MAMMOTH_BODY_ADD_HP"] = 2;
		}
		if(__map_reserved["X33_SPEEDUP_TIME"] != null) {
			_g.setReserved("X33_SPEEDUP_TIME",45);
		} else {
			_g.h["X33_SPEEDUP_TIME"] = 45;
		}
		if(__map_reserved["X34_FREEZE_TIME"] != null) {
			_g.setReserved("X34_FREEZE_TIME",25);
		} else {
			_g.h["X34_FREEZE_TIME"] = 25;
		}
		if(__map_reserved["X35_FREEZE_TIME_ONFIELD"] != null) {
			_g.setReserved("X35_FREEZE_TIME_ONFIELD",30);
		} else {
			_g.h["X35_FREEZE_TIME_ONFIELD"] = 30;
		}
		if(__map_reserved["X51_BODY_ACCELERATE"] != null) {
			_g.setReserved("X51_BODY_ACCELERATE",5);
		} else {
			_g.h["X51_BODY_ACCELERATE"] = 5;
		}
		if(__map_reserved["X52_BODY_FREEZE"] != null) {
			_g.setReserved("X52_BODY_FREEZE",5);
		} else {
			_g.h["X52_BODY_FREEZE"] = 5;
		}
		var key = _g.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			this.text = StringTools.replace(this.text,"[" + HxOverrides.substr(key1,0,key1.indexOf("_")) + "]","" + (__map_reserved[key1] != null ? _g.getReserved(key1) : _g.h[key1]));
		}
		this.text = StringTools.replace(this.text,"[X36]","5, 7, 8, 8, 9, 4, 4, 4");
		this.text = StringTools.replace(this.text,"[DEF1]","" + 5);
		this.text = StringTools.replace(this.text,"[MAX]","" + 15);
		this.text = StringTools.replace(this.text,"_","\t");
	}
	,__class__: game_gui_ShopHelp
});
var game_gui_SmoothScroll = function() { };
$hxClasses["game.gui.SmoothScroll"] = game_gui_SmoothScroll;
game_gui_SmoothScroll.__name__ = "game.gui.SmoothScroll";
game_gui_SmoothScroll.push = function(speed) {
	game_gui_SmoothScroll.speeds.shift();
	game_gui_SmoothScroll.speeds.push(speed);
};
game_gui_SmoothScroll.getSpeed = function(pointers) {
	if(pointers != null) {
		var _g = 0;
		while(_g < pointers.length) if(pointers[_g++].isDown) {
			return 0;
		}
	}
	var total = 0.0;
	var _g1 = 0;
	var _g11 = game_gui_SmoothScroll.speeds;
	while(_g1 < _g11.length) total += _g11[_g1++];
	return total / game_gui_SmoothScroll.speeds.length;
};
game_gui_SmoothScroll.setSpeed = function(speed) {
	var _g = 0;
	var _g1 = game_gui_SmoothScroll.speeds.length;
	while(_g < _g1) game_gui_SmoothScroll.speeds[_g++] = speed;
};
game_gui_SmoothScroll.update = function() {
	var _g = 0;
	var _g1 = game_gui_SmoothScroll.speeds.length;
	while(_g < _g1) {
		var i = _g++;
		if(game_gui_SmoothScroll.speeds[i] < 0) {
			game_gui_SmoothScroll.speeds[i] += 1;
		} else if(game_gui_SmoothScroll.speeds[i] > 0) {
			game_gui_SmoothScroll.speeds[i] -= 1;
		}
		if(Math.abs(game_gui_SmoothScroll.speeds[i]) <= 1) {
			game_gui_SmoothScroll.speeds[i] = 0;
		}
	}
};
var game_gui_SoundScreen = function() {
	khm_Screen.call(this);
};
$hxClasses["game.gui.SoundScreen"] = game_gui_SoundScreen;
game_gui_SoundScreen.__name__ = "game.gui.SoundScreen";
game_gui_SoundScreen.__super__ = khm_Screen;
game_gui_SoundScreen.prototype = $extend(khm_Screen.prototype,{
	ui: null
	,init: function() {
		this.ui = new khm_imgui_Imgui(new khm_imgui_ImguiSets(false,null,null));
	}
	,onMouseDown: function(p) {
		if(this.ui.onPointerDown(p)) {
			return;
		}
	}
	,onMouseUp: function(p) {
		if(this.ui.onPointerUp(p)) {
			return;
		}
	}
	,onMouseMove: function(p) {
		if(this.ui.onPointerMove(p)) {
			return;
		}
	}
	,onKeyDown: function(key) {
		if(key == 81 || key == 27) {
			this.setVolumeState(false);
			this.showMenu();
		} else if(key == 69 || key == 13 || key == 32) {
			this.setVolumeState(true);
			this.showMenu();
		}
	}
	,setVolumeState: function(enabled) {
		var volume = enabled ? 0.5 : 0;
		Music.setVolume(volume);
		Sound.soundVolume = volume;
		khm_Settings.set({ musicVolume : volume, soundVolume : volume});
	}
	,showMenu: function() {
		var menu = new game_gui_Menu();
		menu.show();
		menu.init();
	}
	,onRender: function(canvas) {
		var _gthis = this;
		var g = canvas.get_g2();
		g.begin(null,-13825271);
		game_gui_Ui.drawFullBg(g);
		this.ui.begin(g);
		var on = kha_Assets.images.gui_sound_on;
		var off = kha_Assets.images.gui_sound_off;
		var y = khm_Screen.h / 2 - on.get_height() / 2 | 0;
		var x2 = khm_Screen.w / 2 + khm_Screen.w / 4 - on.get_width() / 2 | 0;
		if(game_gui_Widgets.button(this.ui,khm_Screen.w / 4 - off.get_width() / 2 | 0,y,off)) {
			this.ui.addCallback(function() {
				_gthis.onKeyDown(81);
				return;
			});
		}
		if(game_gui_Widgets.button(this.ui,x2,y,on)) {
			this.ui.addCallback(function() {
				_gthis.onKeyDown(69);
				return;
			});
		}
		this.ui.end();
		g.end();
		this.ui.executeCallbacks();
	}
	,__class__: game_gui_SoundScreen
});
var kha_math_FastMatrix3 = function(_00,_10,_20,_01,_11,_21,_02,_12,_22) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
};
$hxClasses["kha.math.FastMatrix3"] = kha_math_FastMatrix3;
kha_math_FastMatrix3.__name__ = "kha.math.FastMatrix3";
kha_math_FastMatrix3.prototype = {
	_00: null
	,_10: null
	,_20: null
	,_01: null
	,_11: null
	,_21: null
	,_02: null
	,_12: null
	,_22: null
	,__class__: kha_math_FastMatrix3
};
var game_gui_Text = function() { };
$hxClasses["game.gui.Text"] = game_gui_Text;
game_gui_Text.__name__ = "game.gui.Text";
game_gui_Text.drawNumber = function(g,style,n,x,y) {
	var img = kha_Assets.images.gui_digits;
	var string = "" + n;
	var offX = 0.0;
	var scale = game_gui_Text.numberScale;
	var tmp;
	switch(style) {
	case 0:
		tmp = -1;
		break;
	case 10:
		tmp = -8096;
		break;
	case 20:
		tmp = -1996488705;
		break;
	case 30:
		tmp = g.get_color();
		break;
	}
	g.set_color(tmp);
	var _g = 0;
	var _g1 = string.length;
	while(_g < _g1) {
		var digit = game_gui_Text.parseDigit(string.charAt(_g++));
		var nw = game_gui_Text.numbersW[digit];
		khm_utils_Atlas.drawScaledSubImagePart(g,img,digit,game_gui_Text.numbersX[digit],0,nw,img.get_height(),x + offX,y,nw * scale,img.get_height() * scale);
		offX += nw * scale - 3 * scale;
	}
};
game_gui_Text.drawSymbol = function(g,style,char,x,y) {
	var img = kha_Assets.images.gui_digits;
	var tmp;
	switch(style) {
	case 0:
		tmp = -1;
		break;
	case 10:
		tmp = -8096;
		break;
	case 20:
		tmp = -1996488705;
		break;
	case 30:
		tmp = g.get_color();
		break;
	}
	g.set_color(tmp);
	var id;
	switch(char) {
	case "%":
		id = 10;
		break;
	case "+":
		id = 13;
		break;
	case "-":
		id = 12;
		break;
	case ":":
		id = 15;
		break;
	case "<":
		id = 14;
		break;
	case "?":
		id = 11;
		break;
	default:
		throw new js__$Boot_HaxeError("unknown symbol");
	}
	var nw = game_gui_Text.numbersW[id];
	var scale = game_gui_Text.numberScale;
	khm_utils_Atlas.drawScaledSubImagePart(g,img,id,game_gui_Text.numbersX[id],0,nw,img.get_height(),x + (nw < game_gui_Text.maxNumberW ? (game_gui_Text.maxNumberW - nw) / 2 * scale : 0),y,nw * scale,img.get_height() * scale);
};
game_gui_Text.parseDigit = function(char) {
	var num = char.charCodeAt(0) - 48;
	if(num < 0 || num > 9) {
		throw new js__$Boot_HaxeError("Unknown number " + char);
	}
	return num;
};
game_gui_Text.numbersWidth = function(string) {
	var offX = 0.0;
	var scale = game_gui_Text.numberScale;
	var _g = 0;
	var _g1 = string.length;
	while(_g < _g1) offX += game_gui_Text.numbersW[game_gui_Text.parseDigit(string.charAt(_g++))] * scale - 3 * scale;
	return offX | 0;
};
game_gui_Text.numberHeight = function() {
	return kha_Assets.images.gui_digits.get_height() * game_gui_Text.numberScale | 0;
};
game_gui_Text.drawString = function(g,text,x,y,w) {
	var mainColor = g.get_color();
	g.set_color(-16777216);
	game_gui_Text.drawString2(g,text,x - 0.5,y + 0.5,w,true);
	g.set_color(mainColor);
	game_gui_Text.drawString2(g,text,x,y,w,false);
};
game_gui_Text.drawString2 = function(g,text,x,y,w,isShadow) {
	var _this = game_gui_Text.transformation;
	var m = g.transformations[g.transformationIndex];
	_this._00 = m._00;
	_this._10 = m._10;
	_this._20 = m._20;
	_this._01 = m._01;
	_this._11 = m._11;
	_this._21 = m._21;
	_this._02 = m._02;
	_this._12 = m._12;
	_this._22 = m._22;
	var _this1 = g.transformations[g.transformationIndex];
	_this1._00 = 1;
	_this1._10 = 0;
	_this1._20 = 0;
	_this1._01 = 0;
	_this1._11 = 1;
	_this1._21 = 0;
	_this1._02 = 0;
	_this1._12 = 0;
	_this1._22 = 1;
	var scale = game_gui_Text.transformation._00;
	x *= scale;
	y *= scale;
	w *= scale;
	var oldFontSize = game_gui_Text.fontSize;
	game_gui_Text.fontSize = game_gui_Text.fontSize * scale | 0;
	g.set_fontSize(game_gui_Text.fontSize);
	var lineX = x;
	var i = 0;
	while(i < text.length) {
		var char = text.charAt(i);
		if(char == " " && x - lineX + game_gui_Text.nextWordW(text,i + 1) >= w) {
			x = lineX;
			y += kha_Assets.fonts.RobotoCondensed_Regular.height(game_gui_Text.fontSize) | 0;
			++i;
			continue;
		}
		switch(char) {
		case "#":
			var nextChar = text.charAt(i + 1);
			switch(nextChar) {
			case "C":case "S":
				var width = kha_Assets.fonts.RobotoCondensed_Regular.height(game_gui_Text.fontSize);
				if(isShadow) {
					x += width + 1;
					i += 2;
					continue;
				}
				game_gui_Text.iconsData.push(nextChar == "S" ? -1 : -2);
				game_gui_Text.iconsData.push(x | 0);
				game_gui_Text.iconsData.push(y | 0);
				if(g.get_color() == -1996554240) {
					game_gui_Text.iconsData.push(g.get_color());
				} else {
					game_gui_Text.iconsData.push(-1);
				}
				x += width + 1;
				i += 2;
				continue;
			case "E":
				i += 2;
				continue;
			case "K":
				i += 2;
				if(!khm_Screen.isTouch) {
					continue;
				}
				i = game_gui_Text.getBlockEnd(text,i);
				continue;
			case "r":
				if(!isShadow) {
					g.set_color(-65536);
				}
				i += 2;
				continue;
			case "t":
				if(!isShadow) {
					g.set_color(-1996554240);
				}
				i += 2;
				continue;
			case "w":
				if(!isShadow) {
					g.set_color(-1);
				}
				i += 2;
				continue;
			default:
			}
			break;
		case "^":
			var iconId = -1;
			var offX = 21;
			var offY = -6;
			switch(text.charAt(i + 1)) {
			case "1":
				iconId = 30;
				break;
			case "A":
				iconId = 36;
				offX = 14;
				++offY;
				break;
			}
			if(iconId == -1) {
				continue;
			}
			if(!isShadow) {
				game_gui_Text.iconsData.push(iconId);
				game_gui_Text.iconsData.push(x | 0);
				game_gui_Text.iconsData.push(y + offY | 0);
				game_gui_Text.iconsData.push(-1);
			}
			x += offX * scale;
			i += 2;
			continue;
		case "\n":case "\r":case "~":
			var nextChar1 = text.charAt(i + 1);
			if(nextChar1 != char && (nextChar1 == "\n" || nextChar1 == "\r")) {
				++i;
			}
			x = lineX;
			y += kha_Assets.fonts.RobotoCondensed_Regular.height(game_gui_Text.fontSize) | 0;
			++i;
			continue;
		default:
		}
		var charId = text.charCodeAt(i);
		if(charId != 32) {
			g.drawString(char,x,y);
		}
		var char1 = String.fromCodePoint(charId);
		var w1 = kha_Assets.fonts.RobotoCondensed_Regular.width(game_gui_Text.fontSize,char1);
		if(charId == 32) {
			w1 *= 2;
		}
		x += w1;
		++i;
	}
	if(!isShadow) {
		var color = g.get_color();
		var _g = 0;
		var _g1 = game_gui_Text.iconsData.length / 4 | 0;
		while(_g < _g1) {
			var i1 = _g++;
			var iconNum = game_gui_Text.iconsData[i1 * 4];
			var x1 = game_gui_Text.iconsData[i1 * 4 + 1];
			var y1 = game_gui_Text.iconsData[i1 * 4 + 2];
			g.set_color(game_gui_Text.iconsData[i1 * 4 + 3]);
			switch(iconNum) {
			case -2:case -1:
				var width1 = kha_Assets.fonts.RobotoCondensed_Regular.height(game_gui_Text.fontSize);
				khm_utils_Atlas.drawScaledImage(g,iconNum == -1 ? kha_Assets.images.gui_stat_star : kha_Assets.images.gui_stat_money,x1,y1 + width1 / 40,width1,width1);
				continue;
			}
			game_gui_Ui.drawScaledIcon(g,iconNum,x1,y1,20 * scale | 0,20 * scale | 0);
		}
		game_gui_Text.iconsData.length = 0;
		g.set_color(color);
	}
	var _this2 = g.transformations[g.transformationIndex];
	var m1 = game_gui_Text.transformation;
	_this2._00 = m1._00;
	_this2._10 = m1._10;
	_this2._20 = m1._20;
	_this2._01 = m1._01;
	_this2._11 = m1._11;
	_this2._21 = m1._21;
	_this2._02 = m1._02;
	_this2._12 = m1._12;
	_this2._22 = m1._22;
	game_gui_Text.fontSize = oldFontSize;
	g.set_fontSize(game_gui_Text.fontSize);
};
game_gui_Text.getBlockEnd = function(text,start) {
	var _g = start;
	var _g1 = text.length;
	while(_g < _g1) {
		var i = _g++;
		if(text.charCodeAt(i) == 35) {
			if(text.charCodeAt(i + 1) == 69) {
				return i + 2;
			}
		}
	}
	throw new js__$Boot_HaxeError("block end not found (from " + start + ")");
};
game_gui_Text.nextWordW = function(text,i) {
	var w = 0.0;
	while(i < text.length) {
		var code = text.charCodeAt(i);
		switch(code) {
		case 10:case 13:case 32:case 126:
			return w | 0;
		case 35:case 94:
			var next = text.charAt(i + 1);
			if(next == "K") {
				i += 2;
				if(!khm_Screen.isTouch) {
					continue;
				}
				i = game_gui_Text.getBlockEnd(text,i);
				continue;
			}
			w += game_gui_Text.iconWidth(text.charAt(i),next);
			i += 2;
			continue;
		}
		var charId = code;
		var char = String.fromCodePoint(charId);
		var w1 = kha_Assets.fonts.RobotoCondensed_Regular.width(game_gui_Text.fontSize,char);
		if(charId == 32) {
			w1 *= 2;
		}
		w += w1;
		++i;
	}
	return w | 0;
};
game_gui_Text.width = function(text,w) {
	var maxLineW = 0.0;
	var width = 0.0;
	var i = 0;
	while(i < text.length) {
		var char = text.charAt(i);
		if(char == " " && w != null && width + game_gui_Text.nextWordW(text,i + 1) >= w) {
			if(maxLineW < width) {
				maxLineW = width;
			}
			width = 0;
			++i;
			continue;
		}
		switch(char) {
		case "#":case "^":
			var next = text.charAt(i + 1);
			if(next == "K") {
				i += 2;
				if(!khm_Screen.isTouch) {
					continue;
				}
				i = game_gui_Text.getBlockEnd(text,i);
				continue;
			}
			width += game_gui_Text.iconWidth(char,next);
			i += 2;
			continue;
		case "\n":case "\r":case "~":
			if(maxLineW < width) {
				maxLineW = width;
			}
			width = 0;
			++i;
			continue;
		}
		var charId = text.charCodeAt(i);
		var char1 = String.fromCodePoint(charId);
		var w1 = kha_Assets.fonts.RobotoCondensed_Regular.width(game_gui_Text.fontSize,char1);
		if(charId == 32) {
			w1 *= 2;
		}
		width += w1;
		++i;
	}
	if(maxLineW < width) {
		maxLineW = width;
	}
	width = 0;
	return maxLineW | 0;
};
game_gui_Text.iconWidth = function(char,nextChar) {
	switch(char) {
	case "#":
		switch(nextChar) {
		case "C":
			return 11;
		case "S":
			return 11;
		default:
			return 0;
		}
		break;
	case "^":
		if(nextChar == "A") {
			return 14;
		} else {
			return 21;
		}
		break;
	default:
		return 0;
	}
};
game_gui_Text.height = function(text,w) {
	var lines = 1;
	var width = 0.0;
	var i = 0;
	while(i < text.length) {
		var char = text.charAt(i);
		if(char == " " && w != null && width + game_gui_Text.nextWordW(text,i + 1) >= w) {
			width = 0;
			++lines;
			++i;
			continue;
		}
		switch(char) {
		case "#":case "^":
			var next = text.charAt(i + 1);
			if(next == "K") {
				i += 2;
				if(!khm_Screen.isTouch) {
					continue;
				}
				i = game_gui_Text.getBlockEnd(text,i);
				continue;
			}
			width += game_gui_Text.iconWidth(char,next);
			i += 2;
			continue;
		case "\n":case "\r":case "~":
			var nextChar = text.charAt(i + 1);
			if(nextChar != char && (nextChar == "\n" || nextChar == "\r")) {
				++i;
			}
			width = 0;
			++lines;
			++i;
			continue;
		default:
		}
		var charId = text.charCodeAt(i);
		var char1 = String.fromCodePoint(charId);
		var w1 = kha_Assets.fonts.RobotoCondensed_Regular.width(game_gui_Text.fontSize,char1);
		if(charId == 32) {
			w1 *= 2;
		}
		width += w1;
		++i;
	}
	return kha_Assets.fonts.RobotoCondensed_Regular.height(game_gui_Text.fontSize) * lines | 0;
};
var game_gui_Touch = function(game1,ui,tilemap) {
	this.buttons = [];
	this.game = game1;
	this.ui = ui;
	this.tilemap = tilemap;
};
$hxClasses["game.gui.Touch"] = game_gui_Touch;
game_gui_Touch.__name__ = "game.gui.Touch";
game_gui_Touch.getDefaultButtonSize = function() {
	var screenW = kha_System.windowWidth();
	var screenH = kha_System.windowHeight();
	var min = Math.min(screenW,screenH);
	var size = kha_Display.get_primary().get_pixelsPerInch() / 2 | 0;
	if(size * 5 > screenW) {
		size = screenW / 5 | 0;
	}
	if(size * 4 > screenH) {
		size = screenH / 4 | 0;
	}
	if(size < min / 8) {
		size = min / 8 | 0;
	}
	if(size % 2 == 1) {
		++size;
	}
	if(size > 500) {
		size = 500;
	} else if(size < 20) {
		size = 20;
	}
	return size;
};
game_gui_Touch.prototype = {
	game: null
	,ui: null
	,tilemap: null
	,touch: null
	,buttons: null
	,scale: null
	,init: function() {
		if(!khm_Screen.isTouch) {
			return;
		}
		switch(game_gui_Touch.controlType) {
		case 1:
			this.touch = new game_gui_TouchPads(this.game,this.ui,this.tilemap);
			break;
		case 2:
			this.touch = new game_gui_TouchStick(this.game,this.ui,this.tilemap);
			break;
		default:
			throw new js__$Boot_HaxeError("unknown control type " + game_gui_Touch.controlType);
		}
		this.touch.init();
	}
	,initSize: function() {
		if(game_gui_Touch.buttonSize != null) {
			game_gui_Touch.size = game_gui_Touch.buttonSize;
		} else {
			game_gui_Touch.size = game_gui_Touch.getDefaultButtonSize();
		}
		this.scale = game_gui_Touch.size / 192 | 0;
		if(this.scale < 1) {
			this.scale = 1;
		}
	}
	,resize: function() {
		this.init();
	}
	,getOffsetY: function() {
		return game_gui_Touch.size / this.game.scale | 0;
	}
	,onDown: function(p) {
		if(!khm_Screen.isTouch) {
			return false;
		}
		return this.touch.onDown(p);
	}
	,onMove: function(p) {
		if(!khm_Screen.isTouch) {
			return false;
		}
		return this.touch.onMove(p);
	}
	,onUp: function(p) {
		if(!khm_Screen.isTouch) {
			return false;
		}
		return this.touch.onUp(p);
	}
	,render: function(g) {
		if(!khm_Screen.isTouch) {
			return;
		}
		this.touch.render(g);
		this.renderBaseButton(g);
		this.renderPauseButton(g);
	}
	,renderBaseButton: function(g) {
		var _gthis = this;
		if(this.game.isLevelFailed || this.game.player.inventory.isOpen || !this.game.canOpenShop()) {
			return;
		}
		var temp__00 = 1;
		var temp__10 = 0;
		var temp__20 = 0;
		var temp__01 = 0;
		var temp__11 = 1;
		var temp__21 = 0;
		var temp__02 = 0;
		var temp__12 = 0;
		var temp__22 = 1;
		var m = g.transformations[g.transformationIndex];
		temp__00 = m._00;
		temp__10 = m._10;
		temp__20 = m._20;
		temp__01 = m._01;
		temp__11 = m._11;
		temp__21 = m._21;
		temp__02 = m._02;
		temp__12 = m._12;
		temp__22 = m._22;
		var _this = g.transformations[g.transformationIndex];
		_this._00 = 1;
		_this._10 = 0;
		_this._20 = 0;
		_this._01 = 0;
		_this._11 = 1;
		_this._21 = 0;
		_this._02 = 0;
		_this._12 = 0;
		_this._22 = 1;
		var player = this.game.player;
		var tileSize = this.tilemap.tileset.tileSize;
		var scale = this.tilemap.scale;
		var offY = game_gui_Touch.size / scale / 4;
		var x = player.x + this.tilemap.camera.get_x() + tileSize / 2;
		var y = player.y + this.tilemap.camera.get_y() - offY;
		var bottomOffY = tileSize + game_gui_Touch.size / scale + offY * 2;
		var upY = y * scale - game_gui_Touch.size;
		if(upY < 0) {
			y += bottomOffY;
			if(game_gui_Button.getOverlapY(this.touch.buttons,Math.round(x * scale - game_gui_Touch.size / 2),Math.round(y * scale - game_gui_Touch.size),game_gui_Touch.size,game_gui_Touch.size) > -upY) {
				y -= bottomOffY;
			}
		}
		g.set_color(-1);
		if(game_gui_Widgets.atlasScaledButton(this.ui,kha_Assets.images.gui_ts_base,Math.round(x * scale - game_gui_Touch.size / 2),Math.round(y * scale - game_gui_Touch.size),game_gui_Touch.size,game_gui_Touch.size)) {
			this.ui.addCallback(function() {
				var shop = new game_gui_Shop();
				shop.show();
				shop.init(_gthis.game,_gthis.game.player);
				return;
			});
		}
		if(game_gui_Shop.canFastRepair(player)) {
			if(game_gui_Widgets.atlasScaledButton(this.ui,kha_Assets.images.gui_ts_repair,Math.round((x + game_gui_Touch.size / scale + offY) * scale - game_gui_Touch.size / 2),Math.round(y * scale - game_gui_Touch.size),game_gui_Touch.size,game_gui_Touch.size)) {
				game_gui_Shop.fastRepair(player);
			}
		}
		var _this1 = g.transformations[g.transformationIndex];
		_this1._00 = temp__00;
		_this1._10 = temp__10;
		_this1._20 = temp__20;
		_this1._01 = temp__01;
		_this1._11 = temp__11;
		_this1._21 = temp__21;
		_this1._02 = temp__02;
		_this1._12 = temp__12;
		_this1._22 = temp__22;
	}
	,renderPauseButton: function(g) {
		var panelScale = game_gui_Ui.getInvScale() / 1.2;
		var panel = kha_Assets.images.gui_panel;
		var size = game_gui_Touch.size * 0.7 | 0;
		this.game.setGraphicScale(g,1);
		if(game_gui_Widgets.atlasScaledButton(this.ui,kha_Assets.images.gui_ts_home,khm_Screen.w - (panel.get_width() * panelScale / 4 | 0) - size + 30,10,size,size)) {
			this.game.showPauseMenu();
		}
		this.game.setGraphicScale(g,this.game.scale);
	}
	,__class__: game_gui_Touch
};
var game_gui_TouchPads = function(game1,ui,tilemap) {
	game_gui_Touch.call(this,game1,ui,tilemap);
};
$hxClasses["game.gui.TouchPads"] = game_gui_TouchPads;
game_gui_TouchPads.__name__ = "game.gui.TouchPads";
game_gui_TouchPads.get_size = function() {
	return game_gui_Touch.size;
};
game_gui_TouchPads.__super__ = game_gui_Touch;
game_gui_TouchPads.prototype = $extend(game_gui_Touch.prototype,{
	init: function() {
		this.initSize();
		this.initButtons();
	}
	,initButtons: function() {
		var isReversed = game_gui_Touch.isReversed;
		var screenW = kha_System.windowWidth();
		var screenH = kha_System.windowHeight();
		var sx = isReversed ? screenW - game_gui_TouchPads.get_size() * 3 : 0;
		var sy = screenH - game_gui_TouchPads.get_size() * 3;
		var arrow = kha_Assets.images.gui_ts_arrow;
		var fire = kha_Assets.images.gui_ts_fire;
		var reverse = kha_Assets.images.gui_ts_reverse;
		var fireX = screenW - game_gui_TouchPads.get_size() - game_gui_TouchPads.get_size() / 2;
		if(screenW < game_gui_TouchPads.get_size() * 4.5) {
			fireX = screenW - game_gui_TouchPads.get_size();
		}
		if(isReversed) {
			fireX = game_gui_TouchPads.get_size() / 2;
			if(screenW < game_gui_TouchPads.get_size() * 4.5) {
				fireX = 0;
			}
		}
		this.buttons = [new game_gui_Button(new game_gui_ButtonSets(sx + game_gui_TouchPads.get_size(),sy,game_gui_TouchPads.get_size(),game_gui_TouchPads.get_size(),null,arrow,this.scale,null,null,[38],null,function() {
			if(game_Game.vibrationEnabled) {
				kha_System.vibrate(10);
			}
			return;
		})),new game_gui_Button(new game_gui_ButtonSets(sx + game_gui_TouchPads.get_size() * 2,sy + game_gui_TouchPads.get_size(),game_gui_TouchPads.get_size(),game_gui_TouchPads.get_size(),null,arrow,this.scale,null,90,[39],null,function() {
			if(game_Game.vibrationEnabled) {
				kha_System.vibrate(10);
			}
			return;
		})),new game_gui_Button(new game_gui_ButtonSets(sx + game_gui_TouchPads.get_size(),sy + game_gui_TouchPads.get_size() * 2,game_gui_TouchPads.get_size(),game_gui_TouchPads.get_size(),null,arrow,this.scale,null,180,[40],null,function() {
			if(game_Game.vibrationEnabled) {
				kha_System.vibrate(10);
			}
			return;
		})),new game_gui_Button(new game_gui_ButtonSets(sx,sy + game_gui_TouchPads.get_size(),game_gui_TouchPads.get_size(),game_gui_TouchPads.get_size(),null,arrow,this.scale,null,270,[37],null,function() {
			if(game_Game.vibrationEnabled) {
				kha_System.vibrate(10);
			}
			return;
		})),new game_gui_Button(new game_gui_ButtonSets(sx + game_gui_TouchPads.get_size(),sy + game_gui_TouchPads.get_size(),game_gui_TouchPads.get_size(),game_gui_TouchPads.get_size(),null,reverse,this.scale,null,null,[88],null,function() {
			if(game_Game.vibrationEnabled) {
				kha_System.vibrate(10);
			}
			return;
		})),new game_gui_Button(new game_gui_ButtonSets(fireX,screenH - game_gui_TouchPads.get_size() * 1.5,game_gui_TouchPads.get_size(),game_gui_TouchPads.get_size(),null,fire,this.scale,null,null,[90],null,function() {
			if(game_Game.vibrationEnabled) {
				kha_System.vibrate(10);
			}
			return;
		}))];
	}
	,onDown: function(p) {
		if(this.game.isLevelFailed || this.game.player.inventory.isOpen) {
			return false;
		}
		p.toGlobalCords(p.scale);
		var isDown = game_gui_Button.onDown(this.game,this.buttons,p);
		p.toLocalCords(p.scale);
		return isDown;
	}
	,onMove: function(p) {
		if(this.game.isLevelFailed || this.game.player.inventory.isOpen) {
			return false;
		}
		p.toGlobalCords(p.scale);
		var isMove = game_gui_Button.onMove(this.game,this.buttons,p);
		p.toLocalCords(p.scale);
		return isMove;
	}
	,onUp: function(p) {
		if(this.game.isLevelFailed || this.game.player.inventory.isOpen) {
			return false;
		}
		p.toGlobalCords(p.scale);
		var isUp = game_gui_Button.onUp(this.game,this.buttons,p);
		p.toLocalCords(p.scale);
		return isUp;
	}
	,render: function(g) {
		if(this.game.isLevelFailed || this.game.player.inventory.isOpen) {
			return;
		}
		var temp__00 = 1;
		var temp__10 = 0;
		var temp__20 = 0;
		var temp__01 = 0;
		var temp__11 = 1;
		var temp__21 = 0;
		var temp__02 = 0;
		var temp__12 = 0;
		var temp__22 = 1;
		var m = g.transformations[g.transformationIndex];
		temp__00 = m._00;
		temp__10 = m._10;
		temp__20 = m._20;
		temp__01 = m._01;
		temp__11 = m._11;
		temp__21 = m._21;
		temp__02 = m._02;
		temp__12 = m._12;
		temp__22 = m._22;
		var _this = g.transformations[g.transformationIndex];
		_this._00 = 1;
		_this._10 = 0;
		_this._20 = 0;
		_this._01 = 0;
		_this._11 = 1;
		_this._21 = 0;
		_this._02 = 0;
		_this._12 = 0;
		_this._22 = 1;
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) _g1[_g++].render(g);
		var _this1 = g.transformations[g.transformationIndex];
		_this1._00 = temp__00;
		_this1._10 = temp__10;
		_this1._20 = temp__20;
		_this1._01 = temp__01;
		_this1._11 = temp__11;
		_this1._21 = temp__21;
		_this1._02 = temp__02;
		_this1._12 = temp__12;
		_this1._22 = temp__22;
	}
	,__class__: game_gui_TouchPads
});
var kha_math_Vector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["kha.math.Vector2"] = kha_math_Vector2;
kha_math_Vector2.__name__ = "kha.math.Vector2";
kha_math_Vector2.prototype = {
	x: null
	,y: null
	,set_length: function(length) {
		var currentLength = Math.sqrt(this.x * this.x + this.y * this.y);
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		return length;
	}
	,__class__: kha_math_Vector2
};
var game_gui_TouchStick = function(game1,ui,tilemap) {
	game_gui_Touch.call(this,game1,ui,tilemap);
};
$hxClasses["game.gui.TouchStick"] = game_gui_TouchStick;
game_gui_TouchStick.__name__ = "game.gui.TouchStick";
game_gui_TouchStick.get_size = function() {
	return game_gui_Touch.size;
};
game_gui_TouchStick.__super__ = game_gui_Touch;
game_gui_TouchStick.prototype = $extend(game_gui_Touch.prototype,{
	joy: null
	,init: function() {
		this.initSize();
		this.initButtons();
	}
	,initButtons: function() {
		var isReversed = game_gui_Touch.isReversed;
		var screenW = kha_System.windowWidth();
		var screenH = kha_System.windowHeight();
		var reverse = kha_Assets.images.gui_ts_reverse;
		var jrad = game_gui_TouchStick.get_size() * 1.2 | 0;
		var jmin = jrad * 2 + game_gui_TouchStick.get_size() / 4 + game_gui_TouchStick.get_size() * 2;
		var fireX = screenW - game_gui_TouchStick.get_size() - game_gui_TouchStick.get_size() / 2;
		if(screenW < jmin) {
			fireX = screenW - game_gui_TouchStick.get_size();
		}
		if(isReversed) {
			fireX = game_gui_TouchStick.get_size() / 2;
			if(screenW < jmin) {
				fireX = 0;
			}
		}
		this.buttons = [new game_gui_Button(new game_gui_ButtonSets(fireX,screenH - game_gui_TouchStick.get_size() * 1.5,game_gui_TouchStick.get_size(),game_gui_TouchStick.get_size(),null,kha_Assets.images.gui_ts_fire,this.scale,null,null,[90],null,null)),new game_gui_Button(new game_gui_ButtonSets(fireX,screenH - game_gui_TouchStick.get_size() * 3,game_gui_TouchStick.get_size(),game_gui_TouchStick.get_size(),null,reverse,this.scale,null,null,[88],null,null))];
		this.joy = { center : { x : isReversed ? screenW - jrad - game_gui_TouchStick.get_size() / 4 : jrad + game_gui_TouchStick.get_size() / 4, y : screenH - jrad - game_gui_TouchStick.get_size() / 4}, radius : jrad, stick : new kha_math_Vector2(), isDown : false, pointer : { x : 0, y : 0}, pointerId : 0, key : 0};
	}
	,resize: function() {
		this.init();
	}
	,updateJoystick: function() {
		if(!this.joy.isDown) {
			this.joy.stick.x = 0;
			this.joy.stick.y = 0;
			if(this.joy.key != 0) {
				this.game.onKeyUp(this.joy.key);
				this.game.keys.h[this.joy.key] = false;
				this.joy.key = 0;
			}
		} else {
			this.joy.stick.x = this.joy.pointer.x - this.joy.center.x;
			this.joy.stick.y = this.joy.pointer.y - this.joy.center.y;
			var _this = this.joy.stick;
			if(Math.sqrt(_this.x * _this.x + _this.y * _this.y) > this.joy.radius) {
				var _this1 = this.joy.stick;
				var _this2 = this.joy.stick;
				var x = _this2.x;
				var y = _this2.y;
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				var v_x = x;
				var v_y = y;
				var currentLength = Math.sqrt(v_x * v_x + v_y * v_y);
				if(currentLength != 0) {
					var mul = 1 / currentLength;
					v_x *= mul;
					v_y *= mul;
				}
				_this1.x = v_x;
				_this1.y = v_y;
				this.joy.stick.set_length(this.joy.radius);
			}
			var _this3 = this.joy.stick;
			if(Math.sqrt(_this3.x * _this3.x + _this3.y * _this3.y) > this.joy.radius / 4) {
				var key = 0;
				var halfPI = Math.PI / 2;
				var _this4 = this.joy.stick;
				var v = game_gui_TouchStick.JOY_NORMAL_VECTOR2;
				var a = Math.atan2(_this4.y,_this4.x) - Math.atan2(v.y,v.x);
				if(a >= 0 && a <= halfPI) {
					key = 38;
				} else if(a > halfPI && a < Math.PI) {
					key = 39;
				} else if(a > Math.PI && a < Math.PI + halfPI) {
					key = 40;
				} else {
					key = 37;
				}
				if(this.joy.key != key) {
					if(this.joy.key != 0) {
						this.game.onKeyUp(this.joy.key);
						this.game.keys.h[this.joy.key] = false;
					}
					if(key != 0) {
						this.game.onKeyDown(key);
						this.game.keys.h[key] = true;
					}
					this.joy.key = key;
				}
			} else if(this.joy.key != 0) {
				this.game.onKeyUp(this.joy.key);
				this.game.keys.h[this.joy.key] = false;
				this.joy.key = 0;
			}
		}
	}
	,renderJoystick: function(g) {
		if(this.joy.isDown) {
			g.set_color(-1);
		} else {
			g.set_color(-1593835521);
		}
		khm_utils_Atlas.drawScaledImage(g,kha_Assets.images.gui_ts_joystick,this.joy.center.x - this.joy.radius,this.joy.center.y - this.joy.radius,this.joy.radius * 2,this.joy.radius * 2);
	}
	,onDown: function(p) {
		if(this.game.isLevelFailed || this.game.player.inventory.isOpen) {
			return false;
		}
		var ate = false;
		p.toGlobalCords(this.game.scale);
		if(!this.joy.isDown && Math.sqrt(Math.pow(p.x - this.joy.center.x,2) + Math.pow(p.y - this.joy.center.y,2)) <= this.joy.radius) {
			ate = true;
			this.joy.isDown = true;
			this.joy.pointerId = p.id;
			this.joy.pointer.x = p.x;
			this.joy.pointer.y = p.y;
			this.updateJoystick();
		} else {
			ate = game_gui_Button.onDown(this.game,this.buttons,p);
		}
		p.toLocalCords(this.game.scale);
		return ate;
	}
	,onMove: function(p) {
		if(this.game.isLevelFailed || this.game.player.inventory.isOpen) {
			return false;
		}
		var ate = false;
		p.toGlobalCords(this.game.scale);
		if(this.joy.isDown && this.joy.pointerId == p.id) {
			ate = true;
			this.joy.pointer.x = p.x;
			this.joy.pointer.y = p.y;
			this.updateJoystick();
		} else {
			ate = game_gui_Button.onMove(this.game,this.buttons,p);
		}
		p.toLocalCords(this.game.scale);
		return ate;
	}
	,onUp: function(p) {
		if(this.game.isLevelFailed || this.game.player.inventory.isOpen) {
			return false;
		}
		var ate = false;
		p.toGlobalCords(this.game.scale);
		if(this.joy.isDown && this.joy.pointerId == p.id) {
			ate = true;
			this.joy.isDown = false;
			this.joy.pointer.x = 0;
			this.joy.pointer.y = 0;
			this.updateJoystick();
		} else {
			ate = game_gui_Button.onUp(this.game,this.buttons,p);
		}
		p.toLocalCords(this.game.scale);
		return ate;
	}
	,render: function(g) {
		if(this.game.isLevelFailed || this.game.player.inventory.isOpen) {
			return;
		}
		var temp__00 = 1;
		var temp__10 = 0;
		var temp__20 = 0;
		var temp__01 = 0;
		var temp__11 = 1;
		var temp__21 = 0;
		var temp__02 = 0;
		var temp__12 = 0;
		var temp__22 = 1;
		var m = g.transformations[g.transformationIndex];
		temp__00 = m._00;
		temp__10 = m._10;
		temp__20 = m._20;
		temp__01 = m._01;
		temp__11 = m._11;
		temp__21 = m._21;
		temp__02 = m._02;
		temp__12 = m._12;
		temp__22 = m._22;
		var _this = g.transformations[g.transformationIndex];
		_this._00 = 1;
		_this._10 = 0;
		_this._20 = 0;
		_this._01 = 0;
		_this._11 = 1;
		_this._21 = 0;
		_this._02 = 0;
		_this._12 = 0;
		_this._22 = 1;
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) _g1[_g++].render(g);
		this.renderJoystick(g);
		var _this1 = g.transformations[g.transformationIndex];
		_this1._00 = temp__00;
		_this1._10 = temp__10;
		_this1._20 = temp__20;
		_this1._01 = temp__01;
		_this1._11 = temp__11;
		_this1._21 = temp__21;
		_this1._02 = temp__02;
		_this1._12 = temp__12;
		_this1._22 = temp__22;
	}
	,__class__: game_gui_TouchStick
});
var game_gui_Ui = function() { };
$hxClasses["game.gui.Ui"] = game_gui_Ui;
game_gui_Ui.__name__ = "game.gui.Ui";
game_gui_Ui.drawBottomBg = function(g) {
	g.set_color(-1);
	var bottom = kha_Assets.images.gui_menu_back_2;
	khm_utils_Atlas.drawScaledImage(g,bottom,0,khm_Screen.h - bottom.get_height(),khm_Screen.w,bottom.get_height());
};
game_gui_Ui.drawFullBg = function(g) {
	game_gui_Ui.drawScrollBg(g);
};
game_gui_Ui.drawHead = function(g) {
	g.set_color(-1);
	var head = kha_Assets.images.gui_menu_back_1;
	khm_utils_Atlas.drawScaledImage(g,head,0,game_gui_Ui.camY,khm_Screen.w,head.get_height());
	var logo = kha_Assets.images.gui_menu_pict;
	khm_utils_Atlas.drawImage(g,logo,khm_Screen.w / 2 - logo.get_width() / 2,game_gui_Ui.camY);
	game_gui_Ui.offY += head.get_height();
	var fade = kha_Assets.images.gui_menu_pict_fade;
	khm_utils_Atlas.drawScaledImage(g,fade,0,head.get_height(),khm_Screen.w,fade.get_height());
};
game_gui_Ui.drawBg = function(g) {
	var bottom = kha_Assets.images.gui_menu_back_2;
	var head = kha_Assets.images.gui_menu_back_1;
	var bottomY = khm_Screen.h - game_gui_Ui.maxCamY + game_gui_Ui.camY - bottom.get_height();
	if(bottomY < head.get_height()) {
		bottomY = head.get_height();
	}
	if(bottomY < khm_Screen.h - bottom.get_height()) {
		bottomY = khm_Screen.h - bottom.get_height();
	}
	khm_utils_Atlas.drawScaledImage(g,bottom,0,bottomY,khm_Screen.w,bottom.get_height());
};
game_gui_Ui.drawScrollBg = function(g) {
	g.set_color(-1);
	var head = kha_Assets.images.gui_menu_back_1;
	khm_utils_Atlas.drawScaledImage(g,head,0,game_gui_Ui.camY,khm_Screen.w,head.get_height());
	game_gui_Ui.drawBg(g);
	var logo = kha_Assets.images.gui_menu_pict;
	khm_utils_Atlas.drawImage(g,logo,khm_Screen.w / 2 - logo.get_width() / 2,game_gui_Ui.camY);
	game_gui_Ui.offY += head.get_height();
};
game_gui_Ui.drawSelectionLine = function(g,y) {
	var title = kha_Assets.images.gui_billets;
	g.set_color(-1);
	khm_utils_Atlas.drawSubImage(g,title,0,y,0,0,350,title.get_height());
	khm_utils_Atlas.drawScaledSubImage(g,title,260,0,90,title.get_height(),350,y,khm_Screen.w - 350,title.get_height());
};
game_gui_Ui.drawScrollBar = function(g,x,y,w,h,camY,maxCamY) {
	var scrollH = h * (khm_Screen.h / (khm_Screen.h - maxCamY));
	if(scrollH >= h) {
		return;
	}
	g.set_color(-16777216);
	khm_utils_Atlas.drawScaledSubImage(g,kha_Assets.images.gui_pixel,1,1,1,1,x,y,w,h);
	g.set_color(-7597049);
	khm_utils_Atlas.drawScaledSubImage(g,kha_Assets.images.gui_pixel,1,1,1,1,x + 1,y + (h - scrollH) * camY / maxCamY,2,scrollH);
	g.set_color(-1);
};
game_gui_Ui.drawScaledIcon = function(g,icon,x,y,w,h) {
	var id = icon;
	khm_utils_Atlas.drawScaledSubImage(g,kha_Assets.images.gui_icons,id % 20 * 100,(id / 20 | 0) * 100,100,100,x,y,w,h);
};
game_gui_Ui.getHpScale = function() {
	var scale = game_gui_Touch.buttonSize / 300;
	if(kha_Assets.images.gui_hp.get_height() * scale < 15) {
		scale = 15 / kha_Assets.images.gui_hp.get_height();
	}
	return scale;
};
game_gui_Ui.getInvScale = function() {
	var scale = game_gui_Touch.buttonSize / 40;
	if(20 * scale < 40) {
		scale = 2.;
	}
	if(scale > 5) {
		scale = 5;
	}
	return scale;
};
var game_gui_Widgets = function() { };
$hxClasses["game.gui.Widgets"] = game_gui_Widgets;
game_gui_Widgets.__name__ = "game.gui.Widgets";
game_gui_Widgets.norect = function(ui,x,y,w,h) {
	var id = ++ui.id;
	var rect_id = id;
	var rect_x = x;
	var rect_y = y;
	var rect_w = w;
	var rect_h = h;
	var rect_group = 0;
	ui.addWidgetData(id,x,y,w,h,0);
	var _this = ui.frame;
	var i = (ui.frame.arr.length / 6 | 0) - 1;
	i *= 6;
	var group = _this.arr[i + 5];
	if(group == null) {
		group = 0;
	}
	rect_id = _this.arr[i];
	rect_x = _this.arr[i + 1];
	rect_y = _this.arr[i + 2];
	rect_w = _this.arr[i + 3];
	rect_h = _this.arr[i + 4];
	rect_group = group;
	var p = ui.isInside(rect_id,rect_x,rect_y,rect_w,rect_h);
	if(p != null) {
		if(!ui.isWidgetGroupExists(rect_group)) {
			var id1 = p.id;
			ui.widgetGroups[id1] = rect_group;
			ui.hoverIds[id1] = rect_id;
			if(ui.activeIds[id1] == 0 && ui.pointersDown[id1]) {
				ui.activeIds[id1] = rect_id;
			}
		}
	}
	if(ui.focusId == id) {
		var g = ui.g;
		g.set_color(game_gui_Widgets.focusColor);
		if((g.get_color() >>> 24) * 0.00392156862745098 != 0) {
			g.drawRect(rect_x - 1.,rect_y - 1.,rect_w + 2,rect_h + 2,2);
		}
	}
	return ui.isWidgetClicked(id);
};
game_gui_Widgets.stateRect = function(ui,x,y,w,h) {
	var g = ui.g;
	var id = ++ui.id;
	var rect_id = id;
	var rect_x = x;
	var rect_y = y;
	var rect_w = w;
	var rect_h = h;
	var rect_group = 0;
	ui.addWidgetData(id,x,y,w,h,0);
	var _this = ui.frame;
	var i = (ui.frame.arr.length / 6 | 0) - 1;
	i *= 6;
	var group = _this.arr[i + 5];
	if(group == null) {
		group = 0;
	}
	rect_id = _this.arr[i];
	rect_x = _this.arr[i + 1];
	rect_y = _this.arr[i + 2];
	rect_w = _this.arr[i + 3];
	rect_h = _this.arr[i + 4];
	rect_group = group;
	var p = ui.isInside(rect_id,rect_x,rect_y,rect_w,rect_h);
	if(p != null) {
		if(!ui.isWidgetGroupExists(rect_group)) {
			var id1 = p.id;
			ui.widgetGroups[id1] = rect_group;
			ui.hoverIds[id1] = rect_id;
			if(ui.activeIds[id1] == 0 && ui.pointersDown[id1]) {
				ui.activeIds[id1] = rect_id;
			}
		}
	}
	if(ui.focusId == id) {
		g.set_color(game_gui_Widgets.focusColor);
		if((g.get_color() >>> 24) * 0.00392156862745098 != 0) {
			g.drawRect(rect_x - 1.,rect_y - 1.,rect_w + 2,rect_h + 2,2);
		}
	}
	var value;
	switch((ui.isActive(id) ? khm_imgui_WidgetState.Active : ui.focusId == id ? khm_imgui_WidgetState.Focus : ui.isHovered(id) ? khm_imgui_WidgetState.Hover : khm_imgui_WidgetState.Idle)._hx_index) {
	case 0:
		value = 0;
		break;
	case 1:case 2:
		value = 1;
		break;
	case 3:
		value = 2;
		break;
	}
	if(ui.isWidgetClicked(id)) {
		value = 3;
	}
	return value;
};
game_gui_Widgets.rect = function(ui,x,y,w,h) {
	var g = ui.g;
	var id = ++ui.id;
	var rect_id = id;
	var rect_x = x;
	var rect_y = y;
	var rect_w = w;
	var rect_h = h;
	var rect_group = 0;
	ui.addWidgetData(id,x,y,w,h,0);
	var _this = ui.frame;
	var i = (ui.frame.arr.length / 6 | 0) - 1;
	i *= 6;
	var group = _this.arr[i + 5];
	if(group == null) {
		group = 0;
	}
	rect_id = _this.arr[i];
	rect_x = _this.arr[i + 1];
	rect_y = _this.arr[i + 2];
	rect_w = _this.arr[i + 3];
	rect_h = _this.arr[i + 4];
	rect_group = group;
	var p = ui.isInside(rect_id,rect_x,rect_y,rect_w,rect_h);
	if(p != null) {
		if(!ui.isWidgetGroupExists(rect_group)) {
			var id1 = p.id;
			ui.widgetGroups[id1] = rect_group;
			ui.hoverIds[id1] = rect_id;
			if(ui.activeIds[id1] == 0 && ui.pointersDown[id1]) {
				ui.activeIds[id1] = rect_id;
			}
		}
	}
	if(ui.focusId == id) {
		g.set_color(game_gui_Widgets.focusColor);
		if((g.get_color() >>> 24) * 0.00392156862745098 != 0) {
			g.drawRect(rect_x - 1.,rect_y - 1.,rect_w + 2,rect_h + 2,2);
		}
	}
	var tmp;
	switch((ui.isActive(id) ? khm_imgui_WidgetState.Active : ui.focusId == id ? khm_imgui_WidgetState.Focus : ui.isHovered(id) ? khm_imgui_WidgetState.Hover : khm_imgui_WidgetState.Idle)._hx_index) {
	case 0:
		tmp = game_gui_Widgets.bgColor;
		break;
	case 1:case 2:
		tmp = game_gui_Widgets.hoverColor;
		break;
	case 3:
		tmp = game_gui_Widgets.activeColor;
		break;
	}
	g.set_color(tmp);
	if((g.get_color() >>> 24) * 0.00392156862745098 != 0) {
		g.fillRect(x,y,w,h);
	}
	return ui.isWidgetClicked(id);
};
game_gui_Widgets.button = function(ui,x,y,img) {
	var g = ui.g;
	var id = ++ui.id;
	var w = img.get_width();
	var h = img.get_height();
	var rect_id = id;
	var rect_x = x;
	var rect_y = y;
	var rect_w = w;
	var rect_h = h;
	var rect_group = 0;
	ui.addWidgetData(id,x,y,w,h,0);
	var _this = ui.frame;
	var i = (ui.frame.arr.length / 6 | 0) - 1;
	i *= 6;
	var group = _this.arr[i + 5];
	if(group == null) {
		group = 0;
	}
	rect_id = _this.arr[i];
	rect_x = _this.arr[i + 1];
	rect_y = _this.arr[i + 2];
	rect_w = _this.arr[i + 3];
	rect_h = _this.arr[i + 4];
	rect_group = group;
	var p = ui.isInside(rect_id,rect_x,rect_y,rect_w,rect_h);
	if(p != null) {
		if(!ui.isWidgetGroupExists(rect_group)) {
			var id1 = p.id;
			ui.widgetGroups[id1] = rect_group;
			ui.hoverIds[id1] = rect_id;
			if(ui.activeIds[id1] == 0 && ui.pointersDown[id1]) {
				ui.activeIds[id1] = rect_id;
			}
		}
	}
	if(ui.focusId == id) {
		g.set_color(game_gui_Widgets.focusColor);
		if((g.get_color() >>> 24) * 0.00392156862745098 != 0) {
			g.drawRect(rect_x - 1.,rect_y - 1.,rect_w + 2,rect_h + 2,2);
		}
	}
	var tmp;
	switch((ui.isActive(id) ? khm_imgui_WidgetState.Active : ui.focusId == id ? khm_imgui_WidgetState.Focus : ui.isHovered(id) ? khm_imgui_WidgetState.Hover : khm_imgui_WidgetState.Idle)._hx_index) {
	case 0:
		tmp = game_gui_Widgets.bgColor;
		break;
	case 1:case 2:
		tmp = game_gui_Widgets.hoverColor;
		break;
	case 3:
		tmp = game_gui_Widgets.activeColor;
		break;
	}
	g.set_color(tmp);
	if((g.get_color() >>> 24) * 0.00392156862745098 != 0) {
		g.fillRect(x,y,w,h);
	}
	g.set_color(-1);
	g.drawImage(img,x,y);
	return ui.isWidgetClicked(id);
};
game_gui_Widgets.atlasScaledButton = function(ui,img,x,y,w,h) {
	var g = ui.g;
	var id = ++ui.id;
	var rect_id = id;
	var rect_x = x;
	var rect_y = y;
	var rect_w = w;
	var rect_h = h;
	var rect_group = 0;
	ui.addWidgetData(id,x,y,w,h,0);
	var _this = ui.frame;
	var i = (ui.frame.arr.length / 6 | 0) - 1;
	i *= 6;
	var group = _this.arr[i + 5];
	if(group == null) {
		group = 0;
	}
	rect_id = _this.arr[i];
	rect_x = _this.arr[i + 1];
	rect_y = _this.arr[i + 2];
	rect_w = _this.arr[i + 3];
	rect_h = _this.arr[i + 4];
	rect_group = group;
	var p = ui.isInside(rect_id,rect_x,rect_y,rect_w,rect_h);
	if(p != null) {
		if(!ui.isWidgetGroupExists(rect_group)) {
			var id1 = p.id;
			ui.widgetGroups[id1] = rect_group;
			ui.hoverIds[id1] = rect_id;
			if(ui.activeIds[id1] == 0 && ui.pointersDown[id1]) {
				ui.activeIds[id1] = rect_id;
			}
		}
	}
	if(ui.focusId == id) {
		g.set_color(game_gui_Widgets.focusColor);
		if((g.get_color() >>> 24) * 0.00392156862745098 != 0) {
			g.drawRect(rect_x - 1.,rect_y - 1.,rect_w + 2,rect_h + 2,2);
		}
	}
	var tmp;
	switch((ui.isActive(id) ? khm_imgui_WidgetState.Active : ui.focusId == id ? khm_imgui_WidgetState.Focus : ui.isHovered(id) ? khm_imgui_WidgetState.Hover : khm_imgui_WidgetState.Idle)._hx_index) {
	case 0:
		tmp = -1593835521;
		break;
	case 1:case 2:
		tmp = -1593835521;
		break;
	case 3:
		tmp = -1;
		break;
	}
	g.set_color(tmp);
	khm_utils_Atlas.drawScaledImage(g,img,x,y,w,h);
	return ui.isWidgetClicked(id);
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) str += ", " + Std.string(_g1[_g++]);
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = "haxe.Serializer";
haxe_Serializer.run = function(v) {
	var s = new haxe_Serializer();
	s.serialize(v);
	return s.toString();
};
haxe_Serializer.prototype = {
	buf: null
	,cache: null
	,shash: null
	,scount: null
	,useCache: null
	,useEnumIndex: null
	,toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var _this = this.shash;
		var x = __map_reserved[s] != null ? _this.getReserved(s) : _this.h[s];
		if(x != null) {
			this.buf.b += "R";
			this.buf.b += x == null ? "null" : "" + x;
			return;
		}
		var _this1 = this.shash;
		var value = this.scount++;
		if(__map_reserved[s] != null) {
			_this1.setReserved(s,value);
		} else {
			_this1.h[s] = value;
		}
		this.buf.b += "y";
		s = encodeURIComponent(s);
		this.buf.b += Std.string(s.length);
		this.buf.b += ":";
		this.buf.b += s == null ? "null" : "" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g = 0;
		var _g1 = this.cache.length;
		while(_g < _g1) {
			var i = _g++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				this.buf.b += i == null ? "null" : "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		var _g = Type.typeof(v);
		switch(_g._hx_index) {
		case 0:
			this.buf.b += "n";
			break;
		case 1:
			var v1 = v;
			if(v1 == 0) {
				this.buf.b += "z";
				return;
			}
			this.buf.b += "i";
			this.buf.b += v1 == null ? "null" : "" + v1;
			break;
		case 2:
			var v2 = v;
			if(isNaN(v2)) {
				this.buf.b += "k";
			} else if(!isFinite(v2)) {
				this.buf.b += v2 < 0 ? "m" : "p";
			} else {
				this.buf.b += "d";
				this.buf.b += v2 == null ? "null" : "" + v2;
			}
			break;
		case 3:
			this.buf.b += v ? "t" : "f";
			break;
		case 4:
			if(js_Boot.__instanceof(v,Class)) {
				var className = v.__name__;
				this.buf.b += "A";
				this.serializeString(className);
			} else if(js_Boot.__instanceof(v,Enum)) {
				this.buf.b += "B";
				this.serializeString(v.__ename__);
			} else {
				if(this.useCache && this.serializeRef(v)) {
					return;
				}
				this.buf.b += "o";
				this.serializeFields(v);
			}
			break;
		case 5:
			throw new js__$Boot_HaxeError("Cannot serialize function");
		case 6:
			var c = _g.c;
			if(c == String) {
				this.serializeString(v);
				return;
			}
			if(this.useCache && this.serializeRef(v)) {
				return;
			}
			switch(c) {
			case Array:
				var ucount = 0;
				this.buf.b += "a";
				var _g1 = 0;
				var _g11 = v["length"];
				while(_g1 < _g11) {
					var i = _g1++;
					if(v[i] == null) {
						++ucount;
					} else {
						if(ucount > 0) {
							if(ucount == 1) {
								this.buf.b += "n";
							} else {
								this.buf.b += "u";
								this.buf.b += ucount == null ? "null" : "" + ucount;
							}
							ucount = 0;
						}
						this.serialize(v[i]);
					}
				}
				if(ucount > 0) {
					if(ucount == 1) {
						this.buf.b += "n";
					} else {
						this.buf.b += "u";
						this.buf.b += ucount == null ? "null" : "" + ucount;
					}
				}
				this.buf.b += "h";
				break;
			case Date:
				this.buf.b += "v";
				this.buf.b += Std.string(v.getTime());
				break;
			case haxe_ds_IntMap:
				this.buf.b += "q";
				var v3 = v;
				var k = v3.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					this.buf.b += ":";
					this.buf.b += k1 == null ? "null" : "" + k1;
					this.serialize(v3.h[k1]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_List:
				this.buf.b += "l";
				var _g_head = v.h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					this.serialize(val);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_ObjectMap:
				this.buf.b += "M";
				var v4 = v;
				var k2 = v4.keys();
				while(k2.hasNext()) {
					var k3 = k2.next();
					var id = Reflect.field(k3,"__id__");
					Reflect.deleteField(k3,"__id__");
					this.serialize(k3);
					k3["__id__"] = id;
					this.serialize(v4.h[k3.__id__]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_StringMap:
				this.buf.b += "b";
				var v5 = v;
				var k4 = v5.keys();
				while(k4.hasNext()) {
					var k5 = k4.next();
					this.serializeString(k5);
					this.serialize(__map_reserved[k5] != null ? v5.getReserved(k5) : v5.h[k5]);
				}
				this.buf.b += "h";
				break;
			case haxe_io_Bytes:
				var v6 = v;
				this.buf.b += "s";
				this.buf.b += Std.string(Math.ceil(v6.length * 8 / 6));
				this.buf.b += ":";
				var i1 = 0;
				var max = v6.length - 2;
				var b64 = haxe_Serializer.BASE64_CODES;
				if(b64 == null) {
					b64 = new Array(haxe_Serializer.BASE64.length);
					var _g2 = 0;
					var _g12 = haxe_Serializer.BASE64.length;
					while(_g2 < _g12) {
						var i2 = _g2++;
						b64[i2] = HxOverrides.cca(haxe_Serializer.BASE64,i2);
					}
					haxe_Serializer.BASE64_CODES = b64;
				}
				while(i1 < max) {
					var b1 = v6.b[i1++];
					var b2 = v6.b[i1++];
					var b3 = v6.b[i1++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCodePoint(b64[(b2 << 2 | b3 >> 6) & 63]);
					this.buf.b += String.fromCodePoint(b64[b3 & 63]);
				}
				if(i1 == max) {
					var b11 = v6.b[i1++];
					var b21 = v6.b[i1++];
					this.buf.b += String.fromCodePoint(b64[b11 >> 2]);
					this.buf.b += String.fromCodePoint(b64[(b11 << 4 | b21 >> 4) & 63]);
					this.buf.b += String.fromCodePoint(b64[b21 << 2 & 63]);
				} else if(i1 == max + 1) {
					var b12 = v6.b[i1++];
					this.buf.b += String.fromCodePoint(b64[b12 >> 2]);
					this.buf.b += String.fromCodePoint(b64[b12 << 4 & 63]);
				}
				break;
			default:
				if(this.useCache) {
					this.cache.pop();
				}
				if(v.hxSerialize != null) {
					this.buf.b += "C";
					this.serializeString(c.__name__);
					if(this.useCache) {
						this.cache.push(v);
					}
					v.hxSerialize(this);
					this.buf.b += "g";
				} else {
					this.buf.b += "c";
					this.serializeString(c.__name__);
					if(this.useCache) {
						this.cache.push(v);
					}
					this.serializeFields(v);
				}
			}
			break;
		case 7:
			var e = _g.e;
			if(this.useCache) {
				if(this.serializeRef(v)) {
					return;
				}
				this.cache.pop();
			}
			this.buf.b += Std.string(this.useEnumIndex ? "j" : "w");
			this.serializeString(e.__ename__);
			if(this.useEnumIndex) {
				this.buf.b += ":";
				this.buf.b += Std.string(v._hx_index);
			} else {
				var e1 = v;
				this.serializeString($hxEnums[e1.__enum__].__constructs__[e1._hx_index]);
			}
			this.buf.b += ":";
			var params = Type.enumParameters(v);
			this.buf.b += Std.string(params.length);
			var _g3 = 0;
			while(_g3 < params.length) this.serialize(params[_g3++]);
			if(this.useCache) {
				this.cache.push(v);
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(v));
		}
	}
	,__class__: haxe_Serializer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = "haxe._Unserializer.DefaultResolver";
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return $hxClasses[name];
	}
	,resolveEnum: function(name) {
		return $hxEnums[name];
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = "haxe.Unserializer";
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g = 0;
	var _g1 = haxe_Unserializer.BASE64.length;
	while(_g < _g1) {
		var i = _g++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			o[k] = this.unserialize();
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Object.create(cl1.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			while(this.buf.charCodeAt(this.pos) != 104) h.set(this.unserialize(),this.unserialize());
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				var value = this.unserialize();
				if(__map_reserved[s] != null) {
					h1.setReserved(s,value);
				} else {
					h1.h[s] = value;
				}
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Object.create(cl2.prototype);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var c1 = this.buf.charCodeAt(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				var value1 = this.unserialize();
				h2.h[i] = value1;
				c1 = this.buf.charCodeAt(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var max = i1 + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer((len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0)));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[buf.charCodeAt(i1++)];
				var c2 = codes[buf.charCodeAt(i1++)];
				bytes.b[bpos++] = c11 << 2 | c2 >> 4;
				var c3 = codes[buf.charCodeAt(i1++)];
				bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				var c4 = codes[buf.charCodeAt(i1++)];
				bytes.b[bpos++] = c3 << 6 | c4;
			}
			if(rest >= 2) {
				var c12 = codes[buf.charCodeAt(i1++)];
				var c21 = codes[buf.charCodeAt(i1++)];
				bytes.b[bpos++] = c12 << 2 | c21 >> 4;
				if(rest == 3) {
					var c31 = codes[buf.charCodeAt(i1++)];
					bytes.b[bpos++] = c21 << 4 | c31 >> 2;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
		case 121:
			var len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s1 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s1 = decodeURIComponent(s1.split("+").join(" "));
			this.scache.push(s1);
			return s1;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i1 = 0;
	while(i1 < s.length) {
		var c1 = s.charCodeAt(i1++);
		if(55296 <= c1 && c1 <= 56319) {
			c1 = c1 - 55232 << 10 | s.charCodeAt(i1++) & 1023;
		}
		if(c1 <= 127) {
			a.push(c1);
		} else if(c1 <= 2047) {
			a.push(192 | c1 >> 6);
			a.push(128 | c1 & 63);
		} else if(c1 <= 65535) {
			a.push(224 | c1 >> 12);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		} else {
			a.push(240 | c1 >> 18);
			a.push(128 | c1 >> 12 & 63);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,data: null
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var code1 = (c & 31) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var u = (c & 15) << 18 | (b[i++] & 127) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c1 = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c1);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : "haxe.io.Encoding", __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,keys: function() {
		var a = [];
		for( var key in this.h ) (this.h.hasOwnProperty(key) ? a.push(key | 0) : null);
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: haxe_ds__$List_ListNode
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = "haxe.ds._StringMap.StringMapIterator";
haxe_ds__$StringMap_StringMapIterator.prototype = {
	map: null
	,keys: null
	,index: null
	,count: null
	,hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_http_HttpBase = function(url) {
	this.url = url;
	this.headers = [];
	this.params = [];
	this.emptyOnData = $bind(this,this.onData);
};
$hxClasses["haxe.http.HttpBase"] = haxe_http_HttpBase;
haxe_http_HttpBase.__name__ = "haxe.http.HttpBase";
haxe_http_HttpBase.prototype = {
	url: null
	,responseBytes: null
	,responseAsString: null
	,postData: null
	,postBytes: null
	,headers: null
	,params: null
	,emptyOnData: null
	,onData: function(data) {
	}
	,onBytes: function(data) {
	}
	,onError: function(msg) {
	}
	,onStatus: function(status) {
	}
	,hasOnData: function() {
		return !Reflect.compareMethods($bind(this,this.onData),this.emptyOnData);
	}
	,success: function(data) {
		this.responseBytes = data;
		this.responseAsString = null;
		if(this.hasOnData()) {
			this.onData(this.get_responseData());
		}
		this.onBytes(this.responseBytes);
	}
	,get_responseData: function() {
		if(this.responseAsString == null && this.responseBytes != null) {
			this.responseAsString = this.responseBytes.getString(0,this.responseBytes.length,haxe_io_Encoding.UTF8);
		}
		return this.responseAsString;
	}
	,__class__: haxe_http_HttpBase
};
var haxe_http_HttpJs = function(url) {
	this.async = true;
	this.withCredentials = false;
	haxe_http_HttpBase.call(this,url);
};
$hxClasses["haxe.http.HttpJs"] = haxe_http_HttpJs;
haxe_http_HttpJs.__name__ = "haxe.http.HttpJs";
haxe_http_HttpJs.__super__ = haxe_http_HttpBase;
haxe_http_HttpJs.prototype = $extend(haxe_http_HttpBase.prototype,{
	async: null
	,withCredentials: null
	,req: null
	,request: function(post) {
		var _gthis = this;
		this.responseAsString = null;
		this.responseBytes = null;
		var r = this.req = js_Browser.createXMLHttpRequest();
		var onreadystatechange = function(_) {
			if(r.readyState != 4) {
				return;
			}
			var s;
			try {
				s = r.status;
			} catch( e ) {
				s = null;
			}
			if(s == 0 && typeof(window) != "undefined") {
				var protocol = window.location.protocol.toLowerCase();
				if(new EReg("^(?:about|app|app-storage|.+-extension|file|res|widget):$","").match(protocol)) {
					s = r.response != null ? 200 : 404;
				}
			}
			if(s == undefined) {
				s = null;
			}
			if(s != null) {
				_gthis.onStatus(s);
			}
			if(s != null && s >= 200 && s < 400) {
				_gthis.req = null;
				var onreadystatechange1 = haxe_io_Bytes.ofData(r.response);
				_gthis.success(onreadystatechange1);
			} else if(s == null) {
				_gthis.req = null;
				_gthis.onError("Failed to connect or resolve host");
			} else if(s == null) {
				_gthis.req = null;
				_gthis.responseBytes = haxe_io_Bytes.ofData(r.response);
				_gthis.onError("Http Error #" + r.status);
			} else {
				switch(s) {
				case 12007:
					_gthis.req = null;
					_gthis.onError("Unknown host");
					break;
				case 12029:
					_gthis.req = null;
					_gthis.onError("Failed to connect to host");
					break;
				default:
					_gthis.req = null;
					_gthis.responseBytes = haxe_io_Bytes.ofData(r.response);
					_gthis.onError("Http Error #" + r.status);
				}
			}
		};
		if(this.async) {
			r.onreadystatechange = onreadystatechange;
		}
		var _g = this.postBytes;
		var _g1 = this.postData;
		var uri = _g1 == null ? _g == null ? null : new Blob([_g.b.bufferValue]) : _g == null ? _g1 : null;
		if(uri != null) {
			post = true;
		} else {
			var _g2 = 0;
			var _g3 = this.params;
			while(_g2 < _g3.length) {
				var p = _g3[_g2];
				++_g2;
				if(uri == null) {
					uri = "";
				} else {
					uri = Std.string(uri) + "&";
				}
				var s1 = p.name;
				var value = Std.string(uri) + encodeURIComponent(s1) + "=";
				var s2 = p.value;
				uri = value + encodeURIComponent(s2);
			}
		}
		try {
			if(post) {
				r.open("POST",this.url,this.async);
			} else if(uri != null) {
				r.open("GET",this.url + (this.url.split("?").length <= 1 ? "?" : "&") + Std.string(uri),this.async);
				uri = null;
			} else {
				r.open("GET",this.url,this.async);
			}
			r.responseType = "arraybuffer";
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			this.req = null;
			this.onError(e2.toString());
			return;
		}
		r.withCredentials = this.withCredentials;
		if(!Lambda.exists(this.headers,function(h) {
			return h.name == "Content-Type";
		}) && post && this.postData == null) {
			r.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
		}
		var _g21 = 0;
		var _g31 = this.headers;
		while(_g21 < _g31.length) {
			var h1 = _g31[_g21];
			++_g21;
			r.setRequestHeader(h1.name,h1.value);
		}
		r.send(uri);
		if(!this.async) {
			onreadystatechange(null);
		}
	}
	,__class__: haxe_http_HttpJs
});
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	buffer: null
	,view: null
	,u8: null
	,pos: null
	,size: null
	,addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		this.u8.set(new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len),this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = "haxe.io.Input";
haxe_io_Input.prototype = {
	bigEndian: null
	,readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			if(!((((eof) instanceof js__$Boot_HaxeError) ? eof.val : eof) instanceof haxe_io_Eof)) {
				throw eof;
			}
		}
		return len - k;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len,encoding) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = "haxe.io.BytesInput";
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	b: null
	,pos: null
	,len: null
	,totlen: null
	,set_position: function(p) {
		if(p < 0) {
			p = 0;
		} else if(p > this.totlen) {
			p = this.totlen;
		}
		this.len = this.totlen - p;
		return this.pos = p;
	}
	,readByte: function() {
		if(this.len == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Output = function() { };
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = "haxe.io.Output";
haxe_io_Output.prototype = {
	bigEndian: null
	,writeByte: function(c) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,write: function(s) {
		var l = s.length;
		var p = 0;
		while(l > 0) {
			var k = this.writeBytes(s,p,l);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			l -= k;
		}
	}
	,writeFloat: function(x) {
		this.writeInt32(haxe_io_FPHelper.floatToI32(x));
	}
	,writeInt32: function(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
	,__class__: haxe_io_Output
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
haxe_io_BytesOutput.__name__ = "haxe.io.BytesOutput";
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	b: null
	,writeByte: function(c) {
		this.b.addByte(c);
	}
	,writeBytes: function(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : "haxe.io.Error", __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = "haxe.io.FPHelper";
haxe_io_FPHelper.floatToI32 = function(f) {
	haxe_io_FPHelper.helper.setFloat32(0,f,true);
	return haxe_io_FPHelper.helper.getInt32(0,true);
};
var haxe_io__$UInt8Array_UInt8Array_$Impl_$ = {};
$hxClasses["haxe.io._UInt8Array.UInt8Array_Impl_"] = haxe_io__$UInt8Array_UInt8Array_$Impl_$;
haxe_io__$UInt8Array_UInt8Array_$Impl_$.__name__ = "haxe.io._UInt8Array.UInt8Array_Impl_";
haxe_io__$UInt8Array_UInt8Array_$Impl_$.fromBytes = function(bytes,bytePos,length) {
	if(bytePos == null) {
		bytePos = 0;
	}
	if(length == null) {
		length = bytes.length - bytePos;
	}
	return new Uint8Array(bytes.b.bufferValue,bytePos,length);
};
var iap_Iap = function() { };
$hxClasses["iap.Iap"] = iap_Iap;
iap_Iap.__name__ = "iap.Iap";
iap_Iap.setCallbacks = function(onComplete,onError,onGetPurchase) {
	onComplete();
};
iap_Iap.getProducts = function(ids,callback) {
	iap_Iap.onGetProducts = callback;
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = "js._Boot.HaxeError";
js__$Boot_HaxeError.wrap = function(val) {
	if(((val) instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
		var intf = cc.__interfaces__;
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = intf[_g++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = "js.Browser";
js_Browser.getLocalStorage = function() {
	try {
		var s = window.localStorage;
		s.getItem("");
		if(s.length == 0) {
			var key = "_hx_" + Math.random();
			s.setItem(key,key);
			s.removeItem(key);
		}
		return s;
	} catch( e ) {
		return null;
	}
};
js_Browser.createXMLHttpRequest = function() {
	if(typeof XMLHttpRequest != "undefined") {
		return new XMLHttpRequest();
	}
	if(typeof ActiveXObject != "undefined") {
		return new ActiveXObject("Microsoft.XMLHTTP");
	}
	throw new js__$Boot_HaxeError("Unable to create XMLHttpRequest object.");
};
var kha__$Assets_ImageList = function() {
	this.wallsDescription = { name : "walls", original_height : 20, file_sizes : [12516], original_width : 360, files : ["walls.png"], type : "image"};
	this.walls = null;
	this.triggersDescription = { name : "triggers", original_height : 20, file_sizes : [6672], original_width : 200, files : ["triggers.png"], type : "image"};
	this.triggers = null;
	this.tracksDescription = { name : "tracks", original_height : 20, file_sizes : [3520], original_width : 400, files : ["tracks.png"], type : "image"};
	this.tracks = null;
	this.tanks_turretDescription = { name : "tanks_turret", original_height : 26, file_sizes : [12195], original_width : 352, files : ["tanks/turret.png"], type : "image"};
	this.tanks_turret = null;
	this.tanks_siegeDescription = { name : "tanks_siege", original_height : 24, file_sizes : [13245], original_width : 384, files : ["tanks/siege.png"], type : "image"};
	this.tanks_siege = null;
	this.tanks_lightDescription = { name : "tanks_light", original_height : 24, file_sizes : [14507], original_width : 384, files : ["tanks/light.png"], type : "image"};
	this.tanks_light = null;
	this.tanks_kamikazeDescription = { name : "tanks_kamikaze", original_height : 24, file_sizes : [18081], original_width : 384, files : ["tanks/kamikaze.png"], type : "image"};
	this.tanks_kamikaze = null;
	this.tanks_heavyDescription = { name : "tanks_heavy", original_height : 24, file_sizes : [15212], original_width : 384, files : ["tanks/heavy.png"], type : "image"};
	this.tanks_heavy = null;
	this.spikesDescription = { name : "spikes", original_height : 20, file_sizes : [2453], original_width : 60, files : ["spikes.png"], type : "image"};
	this.spikes = null;
	this.ringsDescription = { name : "rings", original_height : 28, file_sizes : [2178], original_width : 168, files : ["rings.png"], type : "image"};
	this.rings = null;
	this.powerupsDescription = { name : "powerups", original_height : 20, file_sizes : [11130], original_width : 400, files : ["powerups.png"], type : "image"};
	this.powerups = null;
	this.palmsDescription = { name : "palms", original_height : 88, file_sizes : [32903], original_width : 440, files : ["palms.png"], type : "image"};
	this.palms = null;
	this.overlayDescription = { name : "overlay", original_height : 100, file_sizes : [3372], original_width : 100, files : ["overlay.png"], type : "image"};
	this.overlay = null;
	this.minesDescription = { name : "mines", original_height : 20, file_sizes : [1771], original_width : 100, files : ["mines.png"], type : "image"};
	this.mines = null;
	this.gui_ts_reverseDescription = { name : "gui_ts_reverse", original_height : 192, file_sizes : [11758], original_width : 192, files : ["gui/ts/reverse.png"], type : "image"};
	this.gui_ts_reverse = null;
	this.gui_ts_repairDescription = { name : "gui_ts_repair", original_height : 192, file_sizes : [20313], original_width : 192, files : ["gui/ts/repair.png"], type : "image"};
	this.gui_ts_repair = null;
	this.gui_ts_okDescription = { name : "gui_ts_ok", original_height : 192, file_sizes : [21096], original_width : 192, files : ["gui/ts/ok.png"], type : "image"};
	this.gui_ts_ok = null;
	this.gui_ts_joystickDescription = { name : "gui_ts_joystick", original_height : 449, file_sizes : [41065], original_width : 449, files : ["gui/ts/joystick.png"], type : "image"};
	this.gui_ts_joystick = null;
	this.gui_ts_homeDescription = { name : "gui_ts_home", original_height : 127, file_sizes : [3646], original_width : 127, files : ["gui/ts/home.png"], type : "image"};
	this.gui_ts_home = null;
	this.gui_ts_fireDescription = { name : "gui_ts_fire", original_height : 192, file_sizes : [11459], original_width : 192, files : ["gui/ts/fire.png"], type : "image"};
	this.gui_ts_fire = null;
	this.gui_ts_cancelDescription = { name : "gui_ts_cancel", original_height : 192, file_sizes : [22104], original_width : 192, files : ["gui/ts/cancel.png"], type : "image"};
	this.gui_ts_cancel = null;
	this.gui_ts_baseDescription = { name : "gui_ts_base", original_height : 192, file_sizes : [18561], original_width : 192, files : ["gui/ts/base.png"], type : "image"};
	this.gui_ts_base = null;
	this.gui_ts_arrowDescription = { name : "gui_ts_arrow", original_height : 192, file_sizes : [11879], original_width : 192, files : ["gui/ts/arrow.png"], type : "image"};
	this.gui_ts_arrow = null;
	this.gui_stat_starDescription = { name : "gui_stat_star", original_height : 90, file_sizes : [4146], original_width : 90, files : ["gui/stat_star.png"], type : "image"};
	this.gui_stat_star = null;
	this.gui_stat_moneyDescription = { name : "gui_stat_money", original_height : 90, file_sizes : [4777], original_width : 90, files : ["gui/stat_money.png"], type : "image"};
	this.gui_stat_money = null;
	this.gui_sound_onDescription = { name : "gui_sound_on", original_height : 80, file_sizes : [5634], original_width : 100, files : ["gui/sound_on.png"], type : "image"};
	this.gui_sound_on = null;
	this.gui_sound_offDescription = { name : "gui_sound_off", original_height : 80, file_sizes : [6847], original_width : 100, files : ["gui/sound_off.png"], type : "image"};
	this.gui_sound_off = null;
	this.gui_pixelDescription = { name : "gui_pixel", original_height : 3, file_sizes : [91], original_width : 3, files : ["gui/pixel.png"], type : "image"};
	this.gui_pixel = null;
	this.gui_panelDescription = { name : "gui_panel", original_height : 319, file_sizes : [32413], original_width : 359, files : ["gui/panel.png"], type : "image"};
	this.gui_panel = null;
	this.gui_menu_pict_fadeDescription = { name : "gui_menu_pict_fade", original_height : 16, file_sizes : [122], original_width : 16, files : ["gui/menu_pict_fade.png"], type : "image"};
	this.gui_menu_pict_fade = null;
	this.gui_menu_pictDescription = { name : "gui_menu_pict", original_height : 75, file_sizes : [9154], original_width : 206, files : ["gui/menu_pict.png"], type : "image"};
	this.gui_menu_pict = null;
	this.gui_menu_back_2Description = { name : "gui_menu_back_2", original_height : 97, file_sizes : [311], original_width : 16, files : ["gui/menu_back_2.png"], type : "image"};
	this.gui_menu_back_2 = null;
	this.gui_menu_back_1Description = { name : "gui_menu_back_1", original_height : 75, file_sizes : [189], original_width : 16, files : ["gui/menu_back_1.png"], type : "image"};
	this.gui_menu_back_1 = null;
	this.gui_iconsDescription = { name : "gui_icons", original_height : 200, file_sizes : [242101], original_width : 2000, files : ["gui/icons.png"], type : "image"};
	this.gui_icons = null;
	this.gui_hp_inactDescription = { name : "gui_hp_inact", original_height : 44, file_sizes : [1806], original_width : 81, files : ["gui/hp_inact.png"], type : "image"};
	this.gui_hp_inact = null;
	this.gui_hpDescription = { name : "gui_hp", original_height : 44, file_sizes : [1814], original_width : 81, files : ["gui/hp.png"], type : "image"};
	this.gui_hp = null;
	this.gui_horiz_lineDescription = { name : "gui_horiz_line", original_height : 2, file_sizes : [135], original_width : 131, files : ["gui/horiz_line.png"], type : "image"};
	this.gui_horiz_line = null;
	this.gui_health_3Description = { name : "gui_health_3", original_height : 4, file_sizes : [542], original_width : 288, files : ["gui/health_3.png"], type : "image"};
	this.gui_health_3 = null;
	this.gui_health_2Description = { name : "gui_health_2", original_height : 4, file_sizes : [461], original_width : 288, files : ["gui/health_2.png"], type : "image"};
	this.gui_health_2 = null;
	this.gui_health_1Description = { name : "gui_health_1", original_height : 4, file_sizes : [546], original_width : 288, files : ["gui/health_1.png"], type : "image"};
	this.gui_health_1 = null;
	this.gui_digitsDescription = { name : "gui_digits", original_height : 95, file_sizes : [44714], original_width : 1084, files : ["gui/digits.png"], type : "image"};
	this.gui_digits = null;
	this.gui_billetsDescription = { name : "gui_billets", original_height : 16, file_sizes : [983], original_width : 720, files : ["gui/billets.png"], type : "image"};
	this.gui_billets = null;
	this.gui_billetDescription = { name : "gui_billet", original_height : 148, file_sizes : [9768], original_width : 294, files : ["gui/billet.png"], type : "image"};
	this.gui_billet = null;
	this.groundDescription = { name : "ground", original_height : 20, file_sizes : [83630], original_width : 2120, files : ["ground.png"], type : "image"};
	this.ground = null;
	this.faviconDescription = { name : "favicon", original_height : 16, file_sizes : [698], original_width : 16, files : ["favicon.png"], type : "image"};
	this.favicon = null;
	this.expl_smallDescription = { name : "expl_small", original_height : 15, file_sizes : [5835], original_width : 255, files : ["expl/small.png"], type : "image"};
	this.expl_small = null;
	this.expl_plasmaDescription = { name : "expl_plasma", original_height : 15, file_sizes : [4468], original_width : 195, files : ["expl/plasma.png"], type : "image"};
	this.expl_plasma = null;
	this.expl_big_redDescription = { name : "expl_big_red", original_height : 40, file_sizes : [10234], original_width : 480, files : ["expl/big_red.png"], type : "image"};
	this.expl_big_red = null;
	this.expl_big_plasmaDescription = { name : "expl_big_plasma", original_height : 40, file_sizes : [9158], original_width : 480, files : ["expl/big_plasma.png"], type : "image"};
	this.expl_big_plasma = null;
	this.expl_bigDescription = { name : "expl_big", original_height : 35, file_sizes : [17964], original_width : 980, files : ["expl/big.png"], type : "image"};
	this.expl_big = null;
	this.editor_undoDescription = { name : "editor_undo", original_height : 48, file_sizes : [1791], original_width : 48, files : ["editor/undo.png"], type : "image"};
	this.editor_undo = null;
	this.editor_searchDescription = { name : "editor_search", original_height : 48, file_sizes : [1814], original_width : 48, files : ["editor/search.png"], type : "image"};
	this.editor_search = null;
	this.editor_redoDescription = { name : "editor_redo", original_height : 48, file_sizes : [1817], original_width : 48, files : ["editor/redo.png"], type : "image"};
	this.editor_redo = null;
	this.editor_playDescription = { name : "editor_play", original_height : 48, file_sizes : [736], original_width : 48, files : ["editor/play.png"], type : "image"};
	this.editor_play = null;
	this.editor_pipetteDescription = { name : "editor_pipette", original_height : 48, file_sizes : [1074], original_width : 48, files : ["editor/pipette.png"], type : "image"};
	this.editor_pipette = null;
	this.editor_paint_brushDescription = { name : "editor_paint_brush", original_height : 48, file_sizes : [1318], original_width : 48, files : ["editor/paint-brush.png"], type : "image"};
	this.editor_paint_brush = null;
	this.editor_handDescription = { name : "editor_hand", original_height : 48, file_sizes : [1160], original_width : 48, files : ["editor/hand.png"], type : "image"};
	this.editor_hand = null;
	this.editor_assembly_areaDescription = { name : "editor_assembly_area", original_height : 48, file_sizes : [1095], original_width : 48, files : ["editor/assembly-area.png"], type : "image"};
	this.editor_assembly_area = null;
	this.editor_arrowDescription = { name : "editor_arrow", original_height : 48, file_sizes : [1390], original_width : 48, files : ["editor/arrow.png"], type : "image"};
	this.editor_arrow = null;
	this.cloudsDescription = { name : "clouds", original_height : 80, file_sizes : [16059], original_width : 720, files : ["clouds.png"], type : "image"};
	this.clouds = null;
	this.bulletsDescription = { name : "bullets", original_height : 24, file_sizes : [10895], original_width : 552, files : ["bullets.png"], type : "image"};
	this.bullets = null;
	this.buildingsDescription = { name : "buildings", original_height : 20, file_sizes : [2818], original_width : 120, files : ["buildings.png"], type : "image"};
	this.buildings = null;
	this.big_buildsDescription = { name : "big_builds", original_height : 40, file_sizes : [5275], original_width : 80, files : ["big_builds.png"], type : "image"};
	this.big_builds = null;
	this.aircraftsDescription = { name : "aircrafts", original_height : 84, file_sizes : [9600], original_width : 168, files : ["aircrafts.png"], type : "image"};
	this.aircrafts = null;
};
$hxClasses["kha._Assets.ImageList"] = kha__$Assets_ImageList;
kha__$Assets_ImageList.__name__ = "kha._Assets.ImageList";
kha__$Assets_ImageList.prototype = {
	get: function(name) {
		return Reflect.field(this,name);
	}
	,aircrafts: null
	,aircraftsDescription: null
	,big_builds: null
	,big_buildsDescription: null
	,buildings: null
	,buildingsDescription: null
	,bullets: null
	,bulletsDescription: null
	,clouds: null
	,cloudsDescription: null
	,editor_arrow: null
	,editor_arrowDescription: null
	,editor_assembly_area: null
	,editor_assembly_areaDescription: null
	,editor_hand: null
	,editor_handDescription: null
	,editor_paint_brush: null
	,editor_paint_brushDescription: null
	,editor_pipette: null
	,editor_pipetteDescription: null
	,editor_play: null
	,editor_playDescription: null
	,editor_redo: null
	,editor_redoDescription: null
	,editor_search: null
	,editor_searchDescription: null
	,editor_undo: null
	,editor_undoDescription: null
	,expl_big: null
	,expl_bigDescription: null
	,expl_big_plasma: null
	,expl_big_plasmaDescription: null
	,expl_big_red: null
	,expl_big_redDescription: null
	,expl_plasma: null
	,expl_plasmaDescription: null
	,expl_small: null
	,expl_smallDescription: null
	,favicon: null
	,faviconDescription: null
	,ground: null
	,groundDescription: null
	,gui_billet: null
	,gui_billetDescription: null
	,gui_billets: null
	,gui_billetsDescription: null
	,gui_digits: null
	,gui_digitsDescription: null
	,gui_health_1: null
	,gui_health_1Description: null
	,gui_health_2: null
	,gui_health_2Description: null
	,gui_health_3: null
	,gui_health_3Description: null
	,gui_horiz_line: null
	,gui_horiz_lineDescription: null
	,gui_hp: null
	,gui_hpDescription: null
	,gui_hp_inact: null
	,gui_hp_inactDescription: null
	,gui_icons: null
	,gui_iconsDescription: null
	,gui_menu_back_1: null
	,gui_menu_back_1Description: null
	,gui_menu_back_2: null
	,gui_menu_back_2Description: null
	,gui_menu_pict: null
	,gui_menu_pictDescription: null
	,gui_menu_pict_fade: null
	,gui_menu_pict_fadeDescription: null
	,gui_panel: null
	,gui_panelDescription: null
	,gui_pixel: null
	,gui_pixelDescription: null
	,gui_sound_off: null
	,gui_sound_offDescription: null
	,gui_sound_on: null
	,gui_sound_onDescription: null
	,gui_stat_money: null
	,gui_stat_moneyDescription: null
	,gui_stat_star: null
	,gui_stat_starDescription: null
	,gui_ts_arrow: null
	,gui_ts_arrowDescription: null
	,gui_ts_base: null
	,gui_ts_baseDescription: null
	,gui_ts_cancel: null
	,gui_ts_cancelDescription: null
	,gui_ts_fire: null
	,gui_ts_fireDescription: null
	,gui_ts_home: null
	,gui_ts_homeDescription: null
	,gui_ts_joystick: null
	,gui_ts_joystickDescription: null
	,gui_ts_ok: null
	,gui_ts_okDescription: null
	,gui_ts_repair: null
	,gui_ts_repairDescription: null
	,gui_ts_reverse: null
	,gui_ts_reverseDescription: null
	,mines: null
	,minesDescription: null
	,overlay: null
	,overlayDescription: null
	,palms: null
	,palmsDescription: null
	,powerups: null
	,powerupsDescription: null
	,rings: null
	,ringsDescription: null
	,spikes: null
	,spikesDescription: null
	,tanks_heavy: null
	,tanks_heavyDescription: null
	,tanks_kamikaze: null
	,tanks_kamikazeDescription: null
	,tanks_light: null
	,tanks_lightDescription: null
	,tanks_siege: null
	,tanks_siegeDescription: null
	,tanks_turret: null
	,tanks_turretDescription: null
	,tracks: null
	,tracksDescription: null
	,triggers: null
	,triggersDescription: null
	,walls: null
	,wallsDescription: null
	,__class__: kha__$Assets_ImageList
};
var kha__$Assets_SoundList = function() {
	this.sounds_ui_windowDescription = { name : "sounds_ui_window", file_sizes : [7580,5432], files : ["sounds/ui_window.ogg","sounds/ui_window.mp3"], type : "sound"};
	this.sounds_ui_window = null;
	this.sounds_ui_weap_switchDescription = { name : "sounds_ui_weap_switch", file_sizes : [10786,8358], files : ["sounds/ui_weap_switch.ogg","sounds/ui_weap_switch.mp3"], type : "sound"};
	this.sounds_ui_weap_switch = null;
	this.sounds_ui_button_downDescription = { name : "sounds_ui_button_down", file_sizes : [5017,2088], files : ["sounds/ui_button_down.ogg","sounds/ui_button_down.mp3"], type : "sound"};
	this.sounds_ui_button_down = null;
	this.sounds_shell_warhead_guidedDescription = { name : "sounds_shell_warhead_guided", file_sizes : [26819,32599], files : ["sounds/shell_warhead_guided.ogg","sounds/shell_warhead_guided.mp3"], type : "sound"};
	this.sounds_shell_warhead_guided = null;
	this.sounds_shell_warheadDescription = { name : "sounds_shell_warhead", file_sizes : [26376,32599], files : ["sounds/shell_warhead.ogg","sounds/shell_warhead.mp3"], type : "sound"};
	this.sounds_shell_warhead = null;
	this.sounds_shell_rico_2Description = { name : "sounds_shell_rico_2", file_sizes : [12991,12955], files : ["sounds/shell_rico_2.ogg","sounds/shell_rico_2.mp3"], type : "sound"};
	this.sounds_shell_rico_2 = null;
	this.sounds_shell_rico_1Description = { name : "sounds_shell_rico_1", file_sizes : [13455,14209], files : ["sounds/shell_rico_1.ogg","sounds/shell_rico_1.mp3"], type : "sound"};
	this.sounds_shell_rico_1 = null;
	this.sounds_shell_plasma_doubleDescription = { name : "sounds_shell_plasma_double", file_sizes : [13625,15881], files : ["sounds/shell_plasma_double.ogg","sounds/shell_plasma_double.mp3"], type : "sound"};
	this.sounds_shell_plasma_double = null;
	this.sounds_shell_plasmaDescription = { name : "sounds_shell_plasma", file_sizes : [13510,15881], files : ["sounds/shell_plasma.ogg","sounds/shell_plasma.mp3"], type : "sound"};
	this.sounds_shell_plasma = null;
	this.sounds_shell_doubleDescription = { name : "sounds_shell_double", file_sizes : [18930,21314], files : ["sounds/shell_double.ogg","sounds/shell_double.mp3"], type : "sound"};
	this.sounds_shell_double = null;
	this.sounds_shell_defaultDescription = { name : "sounds_shell_default", file_sizes : [13765,15881], files : ["sounds/shell_default.ogg","sounds/shell_default.mp3"], type : "sound"};
	this.sounds_shell_default = null;
	this.sounds_shell_artilleryDescription = { name : "sounds_shell_artillery", file_sizes : [29582,36779], files : ["sounds/shell_artillery.ogg","sounds/shell_artillery.mp3"], type : "sound"};
	this.sounds_shell_artillery = null;
	this.sounds_shell_apDescription = { name : "sounds_shell_ap", file_sizes : [17467,21314], files : ["sounds/shell_ap.ogg","sounds/shell_ap.mp3"], type : "sound"};
	this.sounds_shell_ap = null;
	this.sounds_hit_wall_def02Description = { name : "sounds_hit_wall_def02", file_sizes : [9285,3551], files : ["sounds/hit_wall_def02.ogg","sounds/hit_wall_def02.mp3"], type : "sound"};
	this.sounds_hit_wall_def02 = null;
	this.sounds_hit_wall_def01Description = { name : "sounds_hit_wall_def01", file_sizes : [11798,5014], files : ["sounds/hit_wall_def01.ogg","sounds/hit_wall_def01.mp3"], type : "sound"};
	this.sounds_hit_wall_def01 = null;
	this.sounds_hit_wall_concreteDescription = { name : "sounds_hit_wall_concrete", file_sizes : [10059,8358], files : ["sounds/hit_wall_concrete.ogg","sounds/hit_wall_concrete.mp3"], type : "sound"};
	this.sounds_hit_wall_concrete = null;
	this.sounds_hit_metal_ricoDescription = { name : "sounds_hit_metal_rico", file_sizes : [10874,10448], files : ["sounds/hit_metal_rico.ogg","sounds/hit_metal_rico.mp3"], type : "sound"};
	this.sounds_hit_metal_rico = null;
	this.sounds_hit_metal02Description = { name : "sounds_hit_metal02", file_sizes : [10218,10448], files : ["sounds/hit_metal02.ogg","sounds/hit_metal02.mp3"], type : "sound"};
	this.sounds_hit_metal02 = null;
	this.sounds_hit_metal01Description = { name : "sounds_hit_metal01", file_sizes : [9745,9612], files : ["sounds/hit_metal01.ogg","sounds/hit_metal01.mp3"], type : "sound"};
	this.sounds_hit_metal01 = null;
	this.sounds_hit_energy_field_2Description = { name : "sounds_hit_energy_field_2", file_sizes : [15514,15881], files : ["sounds/hit_energy_field_2.ogg","sounds/hit_energy_field_2.mp3"], type : "sound"};
	this.sounds_hit_energy_field_2 = null;
	this.sounds_hit_energy_field_1Description = { name : "sounds_hit_energy_field_1", file_sizes : [16226,16299], files : ["sounds/hit_energy_field_1.ogg","sounds/hit_energy_field_1.mp3"], type : "sound"};
	this.sounds_hit_energy_field_1 = null;
	this.sounds_hit_bushDescription = { name : "sounds_hit_bush", file_sizes : [9903,10448], files : ["sounds/hit_bush.ogg","sounds/hit_bush.mp3"], type : "sound"};
	this.sounds_hit_bush = null;
	this.sounds_hit_apDescription = { name : "sounds_hit_ap", file_sizes : [21752,26748], files : ["sounds/hit_ap.ogg","sounds/hit_ap.mp3"], type : "sound"};
	this.sounds_hit_ap = null;
	this.sounds_fx_powerup_use_speedDescription = { name : "sounds_fx_powerup_use_speed", file_sizes : [15820,16299], files : ["sounds/fx_powerup_use_speed.ogg","sounds/fx_powerup_use_speed.mp3"], type : "sound"};
	this.sounds_fx_powerup_use_speed = null;
	this.sounds_fx_powerup_use_repairDescription = { name : "sounds_fx_powerup_use_repair", file_sizes : [8848,6268], files : ["sounds/fx_powerup_use_repair.ogg","sounds/fx_powerup_use_repair.mp3"], type : "sound"};
	this.sounds_fx_powerup_use_repair = null;
	this.sounds_fx_powerup_use_freezeDescription = { name : "sounds_fx_powerup_use_freeze", file_sizes : [18898,11283], files : ["sounds/fx_powerup_use_freeze.ogg","sounds/fx_powerup_use_freeze.mp3"], type : "sound"};
	this.sounds_fx_powerup_use_freeze = null;
	this.sounds_fx_powerup_pickupDescription = { name : "sounds_fx_powerup_pickup", file_sizes : [9647,7522], files : ["sounds/fx_powerup_pickup.ogg","sounds/fx_powerup_pickup.mp3"], type : "sound"};
	this.sounds_fx_powerup_pickup = null;
	this.sounds_fx_powerup_get_starDescription = { name : "sounds_fx_powerup_get_star", file_sizes : [18538,18432], files : ["sounds/fx_powerup_get_star.ogg","sounds/fx_powerup_get_star.mp3"], type : "sound"};
	this.sounds_fx_powerup_get_star = null;
	this.sounds_fx_mine_deployDescription = { name : "sounds_fx_mine_deploy", file_sizes : [6619,1670], files : ["sounds/fx_mine_deploy.ogg","sounds/fx_mine_deploy.mp3"], type : "sound"};
	this.sounds_fx_mine_deploy = null;
	this.sounds_fx_flag_pickupDescription = { name : "sounds_fx_flag_pickup", file_sizes : [13477,7940], files : ["sounds/fx_flag_pickup.ogg","sounds/fx_flag_pickup.mp3"], type : "sound"};
	this.sounds_fx_flag_pickup = null;
	this.sounds_explosion_small02Description = { name : "sounds_explosion_small02", file_sizes : [21721,25076], files : ["sounds/explosion_small02.ogg","sounds/explosion_small02.mp3"], type : "sound"};
	this.sounds_explosion_small02 = null;
	this.sounds_explosion_small01Description = { name : "sounds_explosion_small01", file_sizes : [19979,21314], files : ["sounds/explosion_small01.ogg","sounds/explosion_small01.mp3"], type : "sound"};
	this.sounds_explosion_small01 = null;
	this.sounds_explosion_medium02Description = { name : "sounds_explosion_medium02", file_sizes : [28270,34271], files : ["sounds/explosion_medium02.ogg","sounds/explosion_medium02.mp3"], type : "sound"};
	this.sounds_explosion_medium02 = null;
	this.sounds_explosion_medium01Description = { name : "sounds_explosion_medium01", file_sizes : [33875,45556], files : ["sounds/explosion_medium01.ogg","sounds/explosion_medium01.mp3"], type : "sound"};
	this.sounds_explosion_medium01 = null;
	this.sounds_explosion_largeDescription = { name : "sounds_explosion_large", file_sizes : [57379,79829], files : ["sounds/explosion_large.ogg","sounds/explosion_large.mp3"], type : "sound"};
	this.sounds_explosion_large = null;
	this.music_victoryDescription = { name : "music_victory", file_sizes : [139102,225324], files : ["music/victory.ogg","music/victory.mp3"], type : "sound"};
	this.music_victory = null;
	this.music_track9Description = { name : "music_track9", file_sizes : [458093,709761], files : ["music/track9.ogg","music/track9.mp3"], type : "sound"};
	this.music_track9 = null;
	this.music_track8Description = { name : "music_track8", file_sizes : [813497,1405640], files : ["music/track8.ogg","music/track8.mp3"], type : "sound"};
	this.music_track8 = null;
	this.music_track7Description = { name : "music_track7", file_sizes : [324238,545921], files : ["music/track7.ogg","music/track7.mp3"], type : "sound"};
	this.music_track7 = null;
	this.music_track6Description = { name : "music_track6", file_sizes : [516443,895730], files : ["music/track6.ogg","music/track6.mp3"], type : "sound"};
	this.music_track6 = null;
	this.music_track5Description = { name : "music_track5", file_sizes : [488174,806728], files : ["music/track5.ogg","music/track5.mp3"], type : "sound"};
	this.music_track5 = null;
	this.music_track4Description = { name : "music_track4", file_sizes : [1613808,2420027], files : ["music/track4.ogg","music/track4.mp3"], type : "sound"};
	this.music_track4 = null;
	this.music_track3Description = { name : "music_track3", file_sizes : [2405936,3540158], files : ["music/track3.ogg","music/track3.mp3"], type : "sound"};
	this.music_track3 = null;
	this.music_track2Description = { name : "music_track2", file_sizes : [2343871,3497967], files : ["music/track2.ogg","music/track2.mp3"], type : "sound"};
	this.music_track2 = null;
	this.music_track17Description = { name : "music_track17", file_sizes : [3031861,4440355], files : ["music/track17.ogg","music/track17.mp3"], type : "sound"};
	this.music_track17 = null;
	this.music_track16Description = { name : "music_track16", file_sizes : [2593472,4211314], files : ["music/track16.ogg","music/track16.mp3"], type : "sound"};
	this.music_track16 = null;
	this.music_track15Description = { name : "music_track15", file_sizes : [2638166,4193759], files : ["music/track15.ogg","music/track15.mp3"], type : "sound"};
	this.music_track15 = null;
	this.music_track14Description = { name : "music_track14", file_sizes : [3737402,5917497], files : ["music/track14.ogg","music/track14.mp3"], type : "sound"};
	this.music_track14 = null;
	this.music_track13Description = { name : "music_track13", file_sizes : [3841551,6245103], files : ["music/track13.ogg","music/track13.mp3"], type : "sound"};
	this.music_track13 = null;
	this.music_track12Description = { name : "music_track12", file_sizes : [3072438,5172620], files : ["music/track12.ogg","music/track12.mp3"], type : "sound"};
	this.music_track12 = null;
	this.music_track11Description = { name : "music_track11", file_sizes : [2644762,4089687], files : ["music/track11.ogg","music/track11.mp3"], type : "sound"};
	this.music_track11 = null;
	this.music_track10Description = { name : "music_track10", file_sizes : [1906503,2911534], files : ["music/track10.ogg","music/track10.mp3"], type : "sound"};
	this.music_track10 = null;
	this.music_track1Description = { name : "music_track1", file_sizes : [3885168,6287822], files : ["music/track1.ogg","music/track1.mp3"], type : "sound"};
	this.music_track1 = null;
	this.music_introDescription = { name : "music_intro", file_sizes : [2563074,3752922], files : ["music/intro.ogg","music/intro.mp3"], type : "sound"};
	this.music_intro = null;
	this.music_finalDescription = { name : "music_final", file_sizes : [1225856,1905851], files : ["music/final.ogg","music/final.mp3"], type : "sound"};
	this.music_final = null;
	this.music_defeatDescription = { name : "music_defeat", file_sizes : [205461,322290], files : ["music/defeat.ogg","music/defeat.mp3"], type : "sound"};
	this.music_defeat = null;
	this.music_briefingDescription = { name : "music_briefing", file_sizes : [474621,798346], files : ["music/briefing.ogg","music/briefing.mp3"], type : "sound"};
	this.music_briefing = null;
	this.music_aboutDescription = { name : "music_about", file_sizes : [792040,1073714], files : ["music/about.ogg","music/about.mp3"], type : "sound"};
	this.music_about = null;
};
$hxClasses["kha._Assets.SoundList"] = kha__$Assets_SoundList;
kha__$Assets_SoundList.__name__ = "kha._Assets.SoundList";
kha__$Assets_SoundList.prototype = {
	get: function(name) {
		return Reflect.field(this,name);
	}
	,music_about: null
	,music_aboutDescription: null
	,music_briefing: null
	,music_briefingDescription: null
	,music_defeat: null
	,music_defeatDescription: null
	,music_final: null
	,music_finalDescription: null
	,music_intro: null
	,music_introDescription: null
	,music_track1: null
	,music_track1Description: null
	,music_track10: null
	,music_track10Description: null
	,music_track11: null
	,music_track11Description: null
	,music_track12: null
	,music_track12Description: null
	,music_track13: null
	,music_track13Description: null
	,music_track14: null
	,music_track14Description: null
	,music_track15: null
	,music_track15Description: null
	,music_track16: null
	,music_track16Description: null
	,music_track17: null
	,music_track17Description: null
	,music_track2: null
	,music_track2Description: null
	,music_track3: null
	,music_track3Description: null
	,music_track4: null
	,music_track4Description: null
	,music_track5: null
	,music_track5Description: null
	,music_track6: null
	,music_track6Description: null
	,music_track7: null
	,music_track7Description: null
	,music_track8: null
	,music_track8Description: null
	,music_track9: null
	,music_track9Description: null
	,music_victory: null
	,music_victoryDescription: null
	,sounds_explosion_large: null
	,sounds_explosion_largeDescription: null
	,sounds_explosion_medium01: null
	,sounds_explosion_medium01Description: null
	,sounds_explosion_medium02: null
	,sounds_explosion_medium02Description: null
	,sounds_explosion_small01: null
	,sounds_explosion_small01Description: null
	,sounds_explosion_small02: null
	,sounds_explosion_small02Description: null
	,sounds_fx_flag_pickup: null
	,sounds_fx_flag_pickupDescription: null
	,sounds_fx_mine_deploy: null
	,sounds_fx_mine_deployDescription: null
	,sounds_fx_powerup_get_star: null
	,sounds_fx_powerup_get_starDescription: null
	,sounds_fx_powerup_pickup: null
	,sounds_fx_powerup_pickupDescription: null
	,sounds_fx_powerup_use_freeze: null
	,sounds_fx_powerup_use_freezeDescription: null
	,sounds_fx_powerup_use_repair: null
	,sounds_fx_powerup_use_repairDescription: null
	,sounds_fx_powerup_use_speed: null
	,sounds_fx_powerup_use_speedDescription: null
	,sounds_hit_ap: null
	,sounds_hit_apDescription: null
	,sounds_hit_bush: null
	,sounds_hit_bushDescription: null
	,sounds_hit_energy_field_1: null
	,sounds_hit_energy_field_1Description: null
	,sounds_hit_energy_field_2: null
	,sounds_hit_energy_field_2Description: null
	,sounds_hit_metal01: null
	,sounds_hit_metal01Description: null
	,sounds_hit_metal02: null
	,sounds_hit_metal02Description: null
	,sounds_hit_metal_rico: null
	,sounds_hit_metal_ricoDescription: null
	,sounds_hit_wall_concrete: null
	,sounds_hit_wall_concreteDescription: null
	,sounds_hit_wall_def01: null
	,sounds_hit_wall_def01Description: null
	,sounds_hit_wall_def02: null
	,sounds_hit_wall_def02Description: null
	,sounds_shell_ap: null
	,sounds_shell_apDescription: null
	,sounds_shell_artillery: null
	,sounds_shell_artilleryDescription: null
	,sounds_shell_default: null
	,sounds_shell_defaultDescription: null
	,sounds_shell_double: null
	,sounds_shell_doubleDescription: null
	,sounds_shell_plasma: null
	,sounds_shell_plasmaDescription: null
	,sounds_shell_plasma_double: null
	,sounds_shell_plasma_doubleDescription: null
	,sounds_shell_rico_1: null
	,sounds_shell_rico_1Description: null
	,sounds_shell_rico_2: null
	,sounds_shell_rico_2Description: null
	,sounds_shell_warhead: null
	,sounds_shell_warheadDescription: null
	,sounds_shell_warhead_guided: null
	,sounds_shell_warhead_guidedDescription: null
	,sounds_ui_button_down: null
	,sounds_ui_button_downDescription: null
	,sounds_ui_weap_switch: null
	,sounds_ui_weap_switchDescription: null
	,sounds_ui_window: null
	,sounds_ui_windowDescription: null
	,__class__: kha__$Assets_SoundList
};
var kha__$Assets_BlobList = function() {
	this.tiles_jsonDescription = { name : "tiles_json", file_sizes : [1812], files : ["tiles.json"], type : "blob"};
	this.tiles_json = null;
	this.maps_ru_031_jsonDescription = { name : "maps_ru_031_json", file_sizes : [3269], files : ["maps/ru/031.json"], type : "blob"};
	this.maps_ru_031_json = null;
	this.maps_ru_030_jsonDescription = { name : "maps_ru_030_json", file_sizes : [3225], files : ["maps/ru/030.json"], type : "blob"};
	this.maps_ru_030_json = null;
	this.maps_ru_029_jsonDescription = { name : "maps_ru_029_json", file_sizes : [3996], files : ["maps/ru/029.json"], type : "blob"};
	this.maps_ru_029_json = null;
	this.maps_ru_028_jsonDescription = { name : "maps_ru_028_json", file_sizes : [3102], files : ["maps/ru/028.json"], type : "blob"};
	this.maps_ru_028_json = null;
	this.maps_ru_027_jsonDescription = { name : "maps_ru_027_json", file_sizes : [3305], files : ["maps/ru/027.json"], type : "blob"};
	this.maps_ru_027_json = null;
	this.maps_ru_026_jsonDescription = { name : "maps_ru_026_json", file_sizes : [2821], files : ["maps/ru/026.json"], type : "blob"};
	this.maps_ru_026_json = null;
	this.maps_ru_025_jsonDescription = { name : "maps_ru_025_json", file_sizes : [1950], files : ["maps/ru/025.json"], type : "blob"};
	this.maps_ru_025_json = null;
	this.maps_ru_024_jsonDescription = { name : "maps_ru_024_json", file_sizes : [3034], files : ["maps/ru/024.json"], type : "blob"};
	this.maps_ru_024_json = null;
	this.maps_ru_023_jsonDescription = { name : "maps_ru_023_json", file_sizes : [2871], files : ["maps/ru/023.json"], type : "blob"};
	this.maps_ru_023_json = null;
	this.maps_ru_022_jsonDescription = { name : "maps_ru_022_json", file_sizes : [3273], files : ["maps/ru/022.json"], type : "blob"};
	this.maps_ru_022_json = null;
	this.maps_ru_021_jsonDescription = { name : "maps_ru_021_json", file_sizes : [3225], files : ["maps/ru/021.json"], type : "blob"};
	this.maps_ru_021_json = null;
	this.maps_ru_020_jsonDescription = { name : "maps_ru_020_json", file_sizes : [2209], files : ["maps/ru/020.json"], type : "blob"};
	this.maps_ru_020_json = null;
	this.maps_ru_019_jsonDescription = { name : "maps_ru_019_json", file_sizes : [2251], files : ["maps/ru/019.json"], type : "blob"};
	this.maps_ru_019_json = null;
	this.maps_ru_018_jsonDescription = { name : "maps_ru_018_json", file_sizes : [1731], files : ["maps/ru/018.json"], type : "blob"};
	this.maps_ru_018_json = null;
	this.maps_ru_017_jsonDescription = { name : "maps_ru_017_json", file_sizes : [2012], files : ["maps/ru/017.json"], type : "blob"};
	this.maps_ru_017_json = null;
	this.maps_ru_016_jsonDescription = { name : "maps_ru_016_json", file_sizes : [2440], files : ["maps/ru/016.json"], type : "blob"};
	this.maps_ru_016_json = null;
	this.maps_ru_015_jsonDescription = { name : "maps_ru_015_json", file_sizes : [3184], files : ["maps/ru/015.json"], type : "blob"};
	this.maps_ru_015_json = null;
	this.maps_ru_014_jsonDescription = { name : "maps_ru_014_json", file_sizes : [1922], files : ["maps/ru/014.json"], type : "blob"};
	this.maps_ru_014_json = null;
	this.maps_ru_013_jsonDescription = { name : "maps_ru_013_json", file_sizes : [3017], files : ["maps/ru/013.json"], type : "blob"};
	this.maps_ru_013_json = null;
	this.maps_ru_012_jsonDescription = { name : "maps_ru_012_json", file_sizes : [2551], files : ["maps/ru/012.json"], type : "blob"};
	this.maps_ru_012_json = null;
	this.maps_ru_011_jsonDescription = { name : "maps_ru_011_json", file_sizes : [2621], files : ["maps/ru/011.json"], type : "blob"};
	this.maps_ru_011_json = null;
	this.maps_ru_010_jsonDescription = { name : "maps_ru_010_json", file_sizes : [2444], files : ["maps/ru/010.json"], type : "blob"};
	this.maps_ru_010_json = null;
	this.maps_ru_009_jsonDescription = { name : "maps_ru_009_json", file_sizes : [2534], files : ["maps/ru/009.json"], type : "blob"};
	this.maps_ru_009_json = null;
	this.maps_ru_008_jsonDescription = { name : "maps_ru_008_json", file_sizes : [2425], files : ["maps/ru/008.json"], type : "blob"};
	this.maps_ru_008_json = null;
	this.maps_ru_007_jsonDescription = { name : "maps_ru_007_json", file_sizes : [3571], files : ["maps/ru/007.json"], type : "blob"};
	this.maps_ru_007_json = null;
	this.maps_ru_006_jsonDescription = { name : "maps_ru_006_json", file_sizes : [2848], files : ["maps/ru/006.json"], type : "blob"};
	this.maps_ru_006_json = null;
	this.maps_ru_005_jsonDescription = { name : "maps_ru_005_json", file_sizes : [2248], files : ["maps/ru/005.json"], type : "blob"};
	this.maps_ru_005_json = null;
	this.maps_ru_004_jsonDescription = { name : "maps_ru_004_json", file_sizes : [3412], files : ["maps/ru/004.json"], type : "blob"};
	this.maps_ru_004_json = null;
	this.maps_ru_003_jsonDescription = { name : "maps_ru_003_json", file_sizes : [3027], files : ["maps/ru/003.json"], type : "blob"};
	this.maps_ru_003_json = null;
	this.maps_ru_002_jsonDescription = { name : "maps_ru_002_json", file_sizes : [2479], files : ["maps/ru/002.json"], type : "blob"};
	this.maps_ru_002_json = null;
	this.maps_ru_001_jsonDescription = { name : "maps_ru_001_json", file_sizes : [2839], files : ["maps/ru/001.json"], type : "blob"};
	this.maps_ru_001_json = null;
	this.maps_ru_000_jsonDescription = { name : "maps_ru_000_json", file_sizes : [2502], files : ["maps/ru/000.json"], type : "blob"};
	this.maps_ru_000_json = null;
	this.maps_en_031_jsonDescription = { name : "maps_en_031_json", file_sizes : [3088], files : ["maps/en/031.json"], type : "blob"};
	this.maps_en_031_json = null;
	this.maps_en_030_jsonDescription = { name : "maps_en_030_json", file_sizes : [2927], files : ["maps/en/030.json"], type : "blob"};
	this.maps_en_030_json = null;
	this.maps_en_029_jsonDescription = { name : "maps_en_029_json", file_sizes : [3720], files : ["maps/en/029.json"], type : "blob"};
	this.maps_en_029_json = null;
	this.maps_en_028_jsonDescription = { name : "maps_en_028_json", file_sizes : [2887], files : ["maps/en/028.json"], type : "blob"};
	this.maps_en_028_json = null;
	this.maps_en_027_jsonDescription = { name : "maps_en_027_json", file_sizes : [3012], files : ["maps/en/027.json"], type : "blob"};
	this.maps_en_027_json = null;
	this.maps_en_026_jsonDescription = { name : "maps_en_026_json", file_sizes : [2515], files : ["maps/en/026.json"], type : "blob"};
	this.maps_en_026_json = null;
	this.maps_en_025_jsonDescription = { name : "maps_en_025_json", file_sizes : [1790], files : ["maps/en/025.json"], type : "blob"};
	this.maps_en_025_json = null;
	this.maps_en_024_jsonDescription = { name : "maps_en_024_json", file_sizes : [2858], files : ["maps/en/024.json"], type : "blob"};
	this.maps_en_024_json = null;
	this.maps_en_023_jsonDescription = { name : "maps_en_023_json", file_sizes : [2548], files : ["maps/en/023.json"], type : "blob"};
	this.maps_en_023_json = null;
	this.maps_en_022_jsonDescription = { name : "maps_en_022_json", file_sizes : [3101], files : ["maps/en/022.json"], type : "blob"};
	this.maps_en_022_json = null;
	this.maps_en_021_jsonDescription = { name : "maps_en_021_json", file_sizes : [2817], files : ["maps/en/021.json"], type : "blob"};
	this.maps_en_021_json = null;
	this.maps_en_020_jsonDescription = { name : "maps_en_020_json", file_sizes : [2042], files : ["maps/en/020.json"], type : "blob"};
	this.maps_en_020_json = null;
	this.maps_en_019_jsonDescription = { name : "maps_en_019_json", file_sizes : [1989], files : ["maps/en/019.json"], type : "blob"};
	this.maps_en_019_json = null;
	this.maps_en_018_jsonDescription = { name : "maps_en_018_json", file_sizes : [1639], files : ["maps/en/018.json"], type : "blob"};
	this.maps_en_018_json = null;
	this.maps_en_017_jsonDescription = { name : "maps_en_017_json", file_sizes : [1909], files : ["maps/en/017.json"], type : "blob"};
	this.maps_en_017_json = null;
	this.maps_en_016_jsonDescription = { name : "maps_en_016_json", file_sizes : [2051], files : ["maps/en/016.json"], type : "blob"};
	this.maps_en_016_json = null;
	this.maps_en_015_jsonDescription = { name : "maps_en_015_json", file_sizes : [2924], files : ["maps/en/015.json"], type : "blob"};
	this.maps_en_015_json = null;
	this.maps_en_014_jsonDescription = { name : "maps_en_014_json", file_sizes : [1747], files : ["maps/en/014.json"], type : "blob"};
	this.maps_en_014_json = null;
	this.maps_en_013_jsonDescription = { name : "maps_en_013_json", file_sizes : [2690], files : ["maps/en/013.json"], type : "blob"};
	this.maps_en_013_json = null;
	this.maps_en_012_jsonDescription = { name : "maps_en_012_json", file_sizes : [2369], files : ["maps/en/012.json"], type : "blob"};
	this.maps_en_012_json = null;
	this.maps_en_011_jsonDescription = { name : "maps_en_011_json", file_sizes : [2319], files : ["maps/en/011.json"], type : "blob"};
	this.maps_en_011_json = null;
	this.maps_en_010_jsonDescription = { name : "maps_en_010_json", file_sizes : [2284], files : ["maps/en/010.json"], type : "blob"};
	this.maps_en_010_json = null;
	this.maps_en_009_jsonDescription = { name : "maps_en_009_json", file_sizes : [2238], files : ["maps/en/009.json"], type : "blob"};
	this.maps_en_009_json = null;
	this.maps_en_008_jsonDescription = { name : "maps_en_008_json", file_sizes : [2067], files : ["maps/en/008.json"], type : "blob"};
	this.maps_en_008_json = null;
	this.maps_en_007_jsonDescription = { name : "maps_en_007_json", file_sizes : [3337], files : ["maps/en/007.json"], type : "blob"};
	this.maps_en_007_json = null;
	this.maps_en_006_jsonDescription = { name : "maps_en_006_json", file_sizes : [2552], files : ["maps/en/006.json"], type : "blob"};
	this.maps_en_006_json = null;
	this.maps_en_005_jsonDescription = { name : "maps_en_005_json", file_sizes : [2069], files : ["maps/en/005.json"], type : "blob"};
	this.maps_en_005_json = null;
	this.maps_en_004_jsonDescription = { name : "maps_en_004_json", file_sizes : [2818], files : ["maps/en/004.json"], type : "blob"};
	this.maps_en_004_json = null;
	this.maps_en_003_jsonDescription = { name : "maps_en_003_json", file_sizes : [2666], files : ["maps/en/003.json"], type : "blob"};
	this.maps_en_003_json = null;
	this.maps_en_002_jsonDescription = { name : "maps_en_002_json", file_sizes : [2156], files : ["maps/en/002.json"], type : "blob"};
	this.maps_en_002_json = null;
	this.maps_en_001_jsonDescription = { name : "maps_en_001_json", file_sizes : [2375], files : ["maps/en/001.json"], type : "blob"};
	this.maps_en_001_json = null;
	this.maps_en_000_jsonDescription = { name : "maps_en_000_json", file_sizes : [2165], files : ["maps/en/000.json"], type : "blob"};
	this.maps_en_000_json = null;
	this.maps2_ru_039_jsonDescription = { name : "maps2_ru_039_json", file_sizes : [2291], files : ["maps2/ru/039.json"], type : "blob"};
	this.maps2_ru_039_json = null;
	this.maps2_ru_038_jsonDescription = { name : "maps2_ru_038_json", file_sizes : [2228], files : ["maps2/ru/038.json"], type : "blob"};
	this.maps2_ru_038_json = null;
	this.maps2_ru_037_jsonDescription = { name : "maps2_ru_037_json", file_sizes : [2210], files : ["maps2/ru/037.json"], type : "blob"};
	this.maps2_ru_037_json = null;
	this.maps2_ru_036_jsonDescription = { name : "maps2_ru_036_json", file_sizes : [2163], files : ["maps2/ru/036.json"], type : "blob"};
	this.maps2_ru_036_json = null;
	this.maps2_ru_035_jsonDescription = { name : "maps2_ru_035_json", file_sizes : [1593], files : ["maps2/ru/035.json"], type : "blob"};
	this.maps2_ru_035_json = null;
	this.maps2_ru_034_jsonDescription = { name : "maps2_ru_034_json", file_sizes : [1653], files : ["maps2/ru/034.json"], type : "blob"};
	this.maps2_ru_034_json = null;
	this.maps2_ru_033_jsonDescription = { name : "maps2_ru_033_json", file_sizes : [2166], files : ["maps2/ru/033.json"], type : "blob"};
	this.maps2_ru_033_json = null;
	this.maps2_ru_032_jsonDescription = { name : "maps2_ru_032_json", file_sizes : [2213], files : ["maps2/ru/032.json"], type : "blob"};
	this.maps2_ru_032_json = null;
	this.maps2_ru_031_jsonDescription = { name : "maps2_ru_031_json", file_sizes : [2263], files : ["maps2/ru/031.json"], type : "blob"};
	this.maps2_ru_031_json = null;
	this.maps2_ru_030_jsonDescription = { name : "maps2_ru_030_json", file_sizes : [3477], files : ["maps2/ru/030.json"], type : "blob"};
	this.maps2_ru_030_json = null;
	this.maps2_ru_029_jsonDescription = { name : "maps2_ru_029_json", file_sizes : [2088], files : ["maps2/ru/029.json"], type : "blob"};
	this.maps2_ru_029_json = null;
	this.maps2_ru_028_jsonDescription = { name : "maps2_ru_028_json", file_sizes : [1937], files : ["maps2/ru/028.json"], type : "blob"};
	this.maps2_ru_028_json = null;
	this.maps2_ru_027_jsonDescription = { name : "maps2_ru_027_json", file_sizes : [2345], files : ["maps2/ru/027.json"], type : "blob"};
	this.maps2_ru_027_json = null;
	this.maps2_ru_026_jsonDescription = { name : "maps2_ru_026_json", file_sizes : [2235], files : ["maps2/ru/026.json"], type : "blob"};
	this.maps2_ru_026_json = null;
	this.maps2_ru_025_jsonDescription = { name : "maps2_ru_025_json", file_sizes : [2466], files : ["maps2/ru/025.json"], type : "blob"};
	this.maps2_ru_025_json = null;
	this.maps2_ru_024_jsonDescription = { name : "maps2_ru_024_json", file_sizes : [2224], files : ["maps2/ru/024.json"], type : "blob"};
	this.maps2_ru_024_json = null;
	this.maps2_ru_023_jsonDescription = { name : "maps2_ru_023_json", file_sizes : [2192], files : ["maps2/ru/023.json"], type : "blob"};
	this.maps2_ru_023_json = null;
	this.maps2_ru_022_jsonDescription = { name : "maps2_ru_022_json", file_sizes : [1675], files : ["maps2/ru/022.json"], type : "blob"};
	this.maps2_ru_022_json = null;
	this.maps2_ru_021_jsonDescription = { name : "maps2_ru_021_json", file_sizes : [1481], files : ["maps2/ru/021.json"], type : "blob"};
	this.maps2_ru_021_json = null;
	this.maps2_ru_020_jsonDescription = { name : "maps2_ru_020_json", file_sizes : [2762], files : ["maps2/ru/020.json"], type : "blob"};
	this.maps2_ru_020_json = null;
	this.maps2_ru_019_jsonDescription = { name : "maps2_ru_019_json", file_sizes : [2324], files : ["maps2/ru/019.json"], type : "blob"};
	this.maps2_ru_019_json = null;
	this.maps2_ru_018_jsonDescription = { name : "maps2_ru_018_json", file_sizes : [2328], files : ["maps2/ru/018.json"], type : "blob"};
	this.maps2_ru_018_json = null;
	this.maps2_ru_017_jsonDescription = { name : "maps2_ru_017_json", file_sizes : [2127], files : ["maps2/ru/017.json"], type : "blob"};
	this.maps2_ru_017_json = null;
	this.maps2_ru_016_jsonDescription = { name : "maps2_ru_016_json", file_sizes : [2111], files : ["maps2/ru/016.json"], type : "blob"};
	this.maps2_ru_016_json = null;
	this.maps2_ru_015_jsonDescription = { name : "maps2_ru_015_json", file_sizes : [1598], files : ["maps2/ru/015.json"], type : "blob"};
	this.maps2_ru_015_json = null;
	this.maps2_ru_014_jsonDescription = { name : "maps2_ru_014_json", file_sizes : [1498], files : ["maps2/ru/014.json"], type : "blob"};
	this.maps2_ru_014_json = null;
	this.maps2_ru_013_jsonDescription = { name : "maps2_ru_013_json", file_sizes : [3307], files : ["maps2/ru/013.json"], type : "blob"};
	this.maps2_ru_013_json = null;
	this.maps2_ru_012_jsonDescription = { name : "maps2_ru_012_json", file_sizes : [2983], files : ["maps2/ru/012.json"], type : "blob"};
	this.maps2_ru_012_json = null;
	this.maps2_ru_011_jsonDescription = { name : "maps2_ru_011_json", file_sizes : [2207], files : ["maps2/ru/011.json"], type : "blob"};
	this.maps2_ru_011_json = null;
	this.maps2_ru_010_jsonDescription = { name : "maps2_ru_010_json", file_sizes : [2319], files : ["maps2/ru/010.json"], type : "blob"};
	this.maps2_ru_010_json = null;
	this.maps2_ru_009_jsonDescription = { name : "maps2_ru_009_json", file_sizes : [2220], files : ["maps2/ru/009.json"], type : "blob"};
	this.maps2_ru_009_json = null;
	this.maps2_ru_008_jsonDescription = { name : "maps2_ru_008_json", file_sizes : [2224], files : ["maps2/ru/008.json"], type : "blob"};
	this.maps2_ru_008_json = null;
	this.maps2_ru_007_jsonDescription = { name : "maps2_ru_007_json", file_sizes : [2570], files : ["maps2/ru/007.json"], type : "blob"};
	this.maps2_ru_007_json = null;
	this.maps2_ru_006_jsonDescription = { name : "maps2_ru_006_json", file_sizes : [2232], files : ["maps2/ru/006.json"], type : "blob"};
	this.maps2_ru_006_json = null;
	this.maps2_ru_005_jsonDescription = { name : "maps2_ru_005_json", file_sizes : [2159], files : ["maps2/ru/005.json"], type : "blob"};
	this.maps2_ru_005_json = null;
	this.maps2_ru_004_jsonDescription = { name : "maps2_ru_004_json", file_sizes : [1991], files : ["maps2/ru/004.json"], type : "blob"};
	this.maps2_ru_004_json = null;
	this.maps2_ru_003_jsonDescription = { name : "maps2_ru_003_json", file_sizes : [2097], files : ["maps2/ru/003.json"], type : "blob"};
	this.maps2_ru_003_json = null;
	this.maps2_ru_002_jsonDescription = { name : "maps2_ru_002_json", file_sizes : [1921], files : ["maps2/ru/002.json"], type : "blob"};
	this.maps2_ru_002_json = null;
	this.maps2_ru_001_jsonDescription = { name : "maps2_ru_001_json", file_sizes : [2202], files : ["maps2/ru/001.json"], type : "blob"};
	this.maps2_ru_001_json = null;
	this.maps2_ru_000_jsonDescription = { name : "maps2_ru_000_json", file_sizes : [2286], files : ["maps2/ru/000.json"], type : "blob"};
	this.maps2_ru_000_json = null;
	this.maps2_en_039_jsonDescription = { name : "maps2_en_039_json", file_sizes : [2068], files : ["maps2/en/039.json"], type : "blob"};
	this.maps2_en_039_json = null;
	this.maps2_en_038_jsonDescription = { name : "maps2_en_038_json", file_sizes : [2068], files : ["maps2/en/038.json"], type : "blob"};
	this.maps2_en_038_json = null;
	this.maps2_en_037_jsonDescription = { name : "maps2_en_037_json", file_sizes : [2062], files : ["maps2/en/037.json"], type : "blob"};
	this.maps2_en_037_json = null;
	this.maps2_en_036_jsonDescription = { name : "maps2_en_036_json", file_sizes : [1970], files : ["maps2/en/036.json"], type : "blob"};
	this.maps2_en_036_json = null;
	this.maps2_en_035_jsonDescription = { name : "maps2_en_035_json", file_sizes : [1445], files : ["maps2/en/035.json"], type : "blob"};
	this.maps2_en_035_json = null;
	this.maps2_en_034_jsonDescription = { name : "maps2_en_034_json", file_sizes : [1455], files : ["maps2/en/034.json"], type : "blob"};
	this.maps2_en_034_json = null;
	this.maps2_en_033_jsonDescription = { name : "maps2_en_033_json", file_sizes : [1985], files : ["maps2/en/033.json"], type : "blob"};
	this.maps2_en_033_json = null;
	this.maps2_en_032_jsonDescription = { name : "maps2_en_032_json", file_sizes : [1970], files : ["maps2/en/032.json"], type : "blob"};
	this.maps2_en_032_json = null;
	this.maps2_en_031_jsonDescription = { name : "maps2_en_031_json", file_sizes : [1988], files : ["maps2/en/031.json"], type : "blob"};
	this.maps2_en_031_json = null;
	this.maps2_en_030_jsonDescription = { name : "maps2_en_030_json", file_sizes : [3214], files : ["maps2/en/030.json"], type : "blob"};
	this.maps2_en_030_json = null;
	this.maps2_en_029_jsonDescription = { name : "maps2_en_029_json", file_sizes : [1897], files : ["maps2/en/029.json"], type : "blob"};
	this.maps2_en_029_json = null;
	this.maps2_en_028_jsonDescription = { name : "maps2_en_028_json", file_sizes : [1861], files : ["maps2/en/028.json"], type : "blob"};
	this.maps2_en_028_json = null;
	this.maps2_en_027_jsonDescription = { name : "maps2_en_027_json", file_sizes : [2052], files : ["maps2/en/027.json"], type : "blob"};
	this.maps2_en_027_json = null;
	this.maps2_en_026_jsonDescription = { name : "maps2_en_026_json", file_sizes : [1844], files : ["maps2/en/026.json"], type : "blob"};
	this.maps2_en_026_json = null;
	this.maps2_en_025_jsonDescription = { name : "maps2_en_025_json", file_sizes : [2232], files : ["maps2/en/025.json"], type : "blob"};
	this.maps2_en_025_json = null;
	this.maps2_en_024_jsonDescription = { name : "maps2_en_024_json", file_sizes : [2060], files : ["maps2/en/024.json"], type : "blob"};
	this.maps2_en_024_json = null;
	this.maps2_en_023_jsonDescription = { name : "maps2_en_023_json", file_sizes : [2001], files : ["maps2/en/023.json"], type : "blob"};
	this.maps2_en_023_json = null;
	this.maps2_en_022_jsonDescription = { name : "maps2_en_022_json", file_sizes : [1460], files : ["maps2/en/022.json"], type : "blob"};
	this.maps2_en_022_json = null;
	this.maps2_en_021_jsonDescription = { name : "maps2_en_021_json", file_sizes : [1232], files : ["maps2/en/021.json"], type : "blob"};
	this.maps2_en_021_json = null;
	this.maps2_en_020_jsonDescription = { name : "maps2_en_020_json", file_sizes : [2730], files : ["maps2/en/020.json"], type : "blob"};
	this.maps2_en_020_json = null;
	this.maps2_en_019_jsonDescription = { name : "maps2_en_019_json", file_sizes : [2135], files : ["maps2/en/019.json"], type : "blob"};
	this.maps2_en_019_json = null;
	this.maps2_en_018_jsonDescription = { name : "maps2_en_018_json", file_sizes : [2129], files : ["maps2/en/018.json"], type : "blob"};
	this.maps2_en_018_json = null;
	this.maps2_en_017_jsonDescription = { name : "maps2_en_017_json", file_sizes : [1917], files : ["maps2/en/017.json"], type : "blob"};
	this.maps2_en_017_json = null;
	this.maps2_en_016_jsonDescription = { name : "maps2_en_016_json", file_sizes : [1908], files : ["maps2/en/016.json"], type : "blob"};
	this.maps2_en_016_json = null;
	this.maps2_en_015_jsonDescription = { name : "maps2_en_015_json", file_sizes : [1421], files : ["maps2/en/015.json"], type : "blob"};
	this.maps2_en_015_json = null;
	this.maps2_en_014_jsonDescription = { name : "maps2_en_014_json", file_sizes : [1333], files : ["maps2/en/014.json"], type : "blob"};
	this.maps2_en_014_json = null;
	this.maps2_en_013_jsonDescription = { name : "maps2_en_013_json", file_sizes : [3060], files : ["maps2/en/013.json"], type : "blob"};
	this.maps2_en_013_json = null;
	this.maps2_en_012_jsonDescription = { name : "maps2_en_012_json", file_sizes : [2726], files : ["maps2/en/012.json"], type : "blob"};
	this.maps2_en_012_json = null;
	this.maps2_en_011_jsonDescription = { name : "maps2_en_011_json", file_sizes : [2058], files : ["maps2/en/011.json"], type : "blob"};
	this.maps2_en_011_json = null;
	this.maps2_en_010_jsonDescription = { name : "maps2_en_010_json", file_sizes : [2104], files : ["maps2/en/010.json"], type : "blob"};
	this.maps2_en_010_json = null;
	this.maps2_en_009_jsonDescription = { name : "maps2_en_009_json", file_sizes : [2026], files : ["maps2/en/009.json"], type : "blob"};
	this.maps2_en_009_json = null;
	this.maps2_en_008_jsonDescription = { name : "maps2_en_008_json", file_sizes : [1881], files : ["maps2/en/008.json"], type : "blob"};
	this.maps2_en_008_json = null;
	this.maps2_en_007_jsonDescription = { name : "maps2_en_007_json", file_sizes : [1997], files : ["maps2/en/007.json"], type : "blob"};
	this.maps2_en_007_json = null;
	this.maps2_en_006_jsonDescription = { name : "maps2_en_006_json", file_sizes : [1783], files : ["maps2/en/006.json"], type : "blob"};
	this.maps2_en_006_json = null;
	this.maps2_en_005_jsonDescription = { name : "maps2_en_005_json", file_sizes : [1972], files : ["maps2/en/005.json"], type : "blob"};
	this.maps2_en_005_json = null;
	this.maps2_en_004_jsonDescription = { name : "maps2_en_004_json", file_sizes : [1955], files : ["maps2/en/004.json"], type : "blob"};
	this.maps2_en_004_json = null;
	this.maps2_en_003_jsonDescription = { name : "maps2_en_003_json", file_sizes : [2188], files : ["maps2/en/003.json"], type : "blob"};
	this.maps2_en_003_json = null;
	this.maps2_en_002_jsonDescription = { name : "maps2_en_002_json", file_sizes : [1437], files : ["maps2/en/002.json"], type : "blob"};
	this.maps2_en_002_json = null;
	this.maps2_en_001_jsonDescription = { name : "maps2_en_001_json", file_sizes : [1813], files : ["maps2/en/001.json"], type : "blob"};
	this.maps2_en_001_json = null;
	this.maps2_en_000_jsonDescription = { name : "maps2_en_000_json", file_sizes : [1906], files : ["maps2/en/000.json"], type : "blob"};
	this.maps2_en_000_json = null;
	this.langs_ru_jsonDescription = { name : "langs_ru_json", file_sizes : [35097], files : ["langs/ru.json"], type : "blob"};
	this.langs_ru_json = null;
	this.langs_en_jsonDescription = { name : "langs_en_json", file_sizes : [21433], files : ["langs/en.json"], type : "blob"};
	this.langs_en_json = null;
	this.index_htmlDescription = { name : "index_html", file_sizes : [289], files : ["index.html"], type : "blob"};
	this.index_html = null;
};
$hxClasses["kha._Assets.BlobList"] = kha__$Assets_BlobList;
kha__$Assets_BlobList.__name__ = "kha._Assets.BlobList";
kha__$Assets_BlobList.prototype = {
	get: function(name) {
		return Reflect.field(this,name);
	}
	,index_html: null
	,index_htmlDescription: null
	,langs_en_json: null
	,langs_en_jsonDescription: null
	,langs_ru_json: null
	,langs_ru_jsonDescription: null
	,maps2_en_000_json: null
	,maps2_en_000_jsonDescription: null
	,maps2_en_001_json: null
	,maps2_en_001_jsonDescription: null
	,maps2_en_002_json: null
	,maps2_en_002_jsonDescription: null
	,maps2_en_003_json: null
	,maps2_en_003_jsonDescription: null
	,maps2_en_004_json: null
	,maps2_en_004_jsonDescription: null
	,maps2_en_005_json: null
	,maps2_en_005_jsonDescription: null
	,maps2_en_006_json: null
	,maps2_en_006_jsonDescription: null
	,maps2_en_007_json: null
	,maps2_en_007_jsonDescription: null
	,maps2_en_008_json: null
	,maps2_en_008_jsonDescription: null
	,maps2_en_009_json: null
	,maps2_en_009_jsonDescription: null
	,maps2_en_010_json: null
	,maps2_en_010_jsonDescription: null
	,maps2_en_011_json: null
	,maps2_en_011_jsonDescription: null
	,maps2_en_012_json: null
	,maps2_en_012_jsonDescription: null
	,maps2_en_013_json: null
	,maps2_en_013_jsonDescription: null
	,maps2_en_014_json: null
	,maps2_en_014_jsonDescription: null
	,maps2_en_015_json: null
	,maps2_en_015_jsonDescription: null
	,maps2_en_016_json: null
	,maps2_en_016_jsonDescription: null
	,maps2_en_017_json: null
	,maps2_en_017_jsonDescription: null
	,maps2_en_018_json: null
	,maps2_en_018_jsonDescription: null
	,maps2_en_019_json: null
	,maps2_en_019_jsonDescription: null
	,maps2_en_020_json: null
	,maps2_en_020_jsonDescription: null
	,maps2_en_021_json: null
	,maps2_en_021_jsonDescription: null
	,maps2_en_022_json: null
	,maps2_en_022_jsonDescription: null
	,maps2_en_023_json: null
	,maps2_en_023_jsonDescription: null
	,maps2_en_024_json: null
	,maps2_en_024_jsonDescription: null
	,maps2_en_025_json: null
	,maps2_en_025_jsonDescription: null
	,maps2_en_026_json: null
	,maps2_en_026_jsonDescription: null
	,maps2_en_027_json: null
	,maps2_en_027_jsonDescription: null
	,maps2_en_028_json: null
	,maps2_en_028_jsonDescription: null
	,maps2_en_029_json: null
	,maps2_en_029_jsonDescription: null
	,maps2_en_030_json: null
	,maps2_en_030_jsonDescription: null
	,maps2_en_031_json: null
	,maps2_en_031_jsonDescription: null
	,maps2_en_032_json: null
	,maps2_en_032_jsonDescription: null
	,maps2_en_033_json: null
	,maps2_en_033_jsonDescription: null
	,maps2_en_034_json: null
	,maps2_en_034_jsonDescription: null
	,maps2_en_035_json: null
	,maps2_en_035_jsonDescription: null
	,maps2_en_036_json: null
	,maps2_en_036_jsonDescription: null
	,maps2_en_037_json: null
	,maps2_en_037_jsonDescription: null
	,maps2_en_038_json: null
	,maps2_en_038_jsonDescription: null
	,maps2_en_039_json: null
	,maps2_en_039_jsonDescription: null
	,maps2_ru_000_json: null
	,maps2_ru_000_jsonDescription: null
	,maps2_ru_001_json: null
	,maps2_ru_001_jsonDescription: null
	,maps2_ru_002_json: null
	,maps2_ru_002_jsonDescription: null
	,maps2_ru_003_json: null
	,maps2_ru_003_jsonDescription: null
	,maps2_ru_004_json: null
	,maps2_ru_004_jsonDescription: null
	,maps2_ru_005_json: null
	,maps2_ru_005_jsonDescription: null
	,maps2_ru_006_json: null
	,maps2_ru_006_jsonDescription: null
	,maps2_ru_007_json: null
	,maps2_ru_007_jsonDescription: null
	,maps2_ru_008_json: null
	,maps2_ru_008_jsonDescription: null
	,maps2_ru_009_json: null
	,maps2_ru_009_jsonDescription: null
	,maps2_ru_010_json: null
	,maps2_ru_010_jsonDescription: null
	,maps2_ru_011_json: null
	,maps2_ru_011_jsonDescription: null
	,maps2_ru_012_json: null
	,maps2_ru_012_jsonDescription: null
	,maps2_ru_013_json: null
	,maps2_ru_013_jsonDescription: null
	,maps2_ru_014_json: null
	,maps2_ru_014_jsonDescription: null
	,maps2_ru_015_json: null
	,maps2_ru_015_jsonDescription: null
	,maps2_ru_016_json: null
	,maps2_ru_016_jsonDescription: null
	,maps2_ru_017_json: null
	,maps2_ru_017_jsonDescription: null
	,maps2_ru_018_json: null
	,maps2_ru_018_jsonDescription: null
	,maps2_ru_019_json: null
	,maps2_ru_019_jsonDescription: null
	,maps2_ru_020_json: null
	,maps2_ru_020_jsonDescription: null
	,maps2_ru_021_json: null
	,maps2_ru_021_jsonDescription: null
	,maps2_ru_022_json: null
	,maps2_ru_022_jsonDescription: null
	,maps2_ru_023_json: null
	,maps2_ru_023_jsonDescription: null
	,maps2_ru_024_json: null
	,maps2_ru_024_jsonDescription: null
	,maps2_ru_025_json: null
	,maps2_ru_025_jsonDescription: null
	,maps2_ru_026_json: null
	,maps2_ru_026_jsonDescription: null
	,maps2_ru_027_json: null
	,maps2_ru_027_jsonDescription: null
	,maps2_ru_028_json: null
	,maps2_ru_028_jsonDescription: null
	,maps2_ru_029_json: null
	,maps2_ru_029_jsonDescription: null
	,maps2_ru_030_json: null
	,maps2_ru_030_jsonDescription: null
	,maps2_ru_031_json: null
	,maps2_ru_031_jsonDescription: null
	,maps2_ru_032_json: null
	,maps2_ru_032_jsonDescription: null
	,maps2_ru_033_json: null
	,maps2_ru_033_jsonDescription: null
	,maps2_ru_034_json: null
	,maps2_ru_034_jsonDescription: null
	,maps2_ru_035_json: null
	,maps2_ru_035_jsonDescription: null
	,maps2_ru_036_json: null
	,maps2_ru_036_jsonDescription: null
	,maps2_ru_037_json: null
	,maps2_ru_037_jsonDescription: null
	,maps2_ru_038_json: null
	,maps2_ru_038_jsonDescription: null
	,maps2_ru_039_json: null
	,maps2_ru_039_jsonDescription: null
	,maps_en_000_json: null
	,maps_en_000_jsonDescription: null
	,maps_en_001_json: null
	,maps_en_001_jsonDescription: null
	,maps_en_002_json: null
	,maps_en_002_jsonDescription: null
	,maps_en_003_json: null
	,maps_en_003_jsonDescription: null
	,maps_en_004_json: null
	,maps_en_004_jsonDescription: null
	,maps_en_005_json: null
	,maps_en_005_jsonDescription: null
	,maps_en_006_json: null
	,maps_en_006_jsonDescription: null
	,maps_en_007_json: null
	,maps_en_007_jsonDescription: null
	,maps_en_008_json: null
	,maps_en_008_jsonDescription: null
	,maps_en_009_json: null
	,maps_en_009_jsonDescription: null
	,maps_en_010_json: null
	,maps_en_010_jsonDescription: null
	,maps_en_011_json: null
	,maps_en_011_jsonDescription: null
	,maps_en_012_json: null
	,maps_en_012_jsonDescription: null
	,maps_en_013_json: null
	,maps_en_013_jsonDescription: null
	,maps_en_014_json: null
	,maps_en_014_jsonDescription: null
	,maps_en_015_json: null
	,maps_en_015_jsonDescription: null
	,maps_en_016_json: null
	,maps_en_016_jsonDescription: null
	,maps_en_017_json: null
	,maps_en_017_jsonDescription: null
	,maps_en_018_json: null
	,maps_en_018_jsonDescription: null
	,maps_en_019_json: null
	,maps_en_019_jsonDescription: null
	,maps_en_020_json: null
	,maps_en_020_jsonDescription: null
	,maps_en_021_json: null
	,maps_en_021_jsonDescription: null
	,maps_en_022_json: null
	,maps_en_022_jsonDescription: null
	,maps_en_023_json: null
	,maps_en_023_jsonDescription: null
	,maps_en_024_json: null
	,maps_en_024_jsonDescription: null
	,maps_en_025_json: null
	,maps_en_025_jsonDescription: null
	,maps_en_026_json: null
	,maps_en_026_jsonDescription: null
	,maps_en_027_json: null
	,maps_en_027_jsonDescription: null
	,maps_en_028_json: null
	,maps_en_028_jsonDescription: null
	,maps_en_029_json: null
	,maps_en_029_jsonDescription: null
	,maps_en_030_json: null
	,maps_en_030_jsonDescription: null
	,maps_en_031_json: null
	,maps_en_031_jsonDescription: null
	,maps_ru_000_json: null
	,maps_ru_000_jsonDescription: null
	,maps_ru_001_json: null
	,maps_ru_001_jsonDescription: null
	,maps_ru_002_json: null
	,maps_ru_002_jsonDescription: null
	,maps_ru_003_json: null
	,maps_ru_003_jsonDescription: null
	,maps_ru_004_json: null
	,maps_ru_004_jsonDescription: null
	,maps_ru_005_json: null
	,maps_ru_005_jsonDescription: null
	,maps_ru_006_json: null
	,maps_ru_006_jsonDescription: null
	,maps_ru_007_json: null
	,maps_ru_007_jsonDescription: null
	,maps_ru_008_json: null
	,maps_ru_008_jsonDescription: null
	,maps_ru_009_json: null
	,maps_ru_009_jsonDescription: null
	,maps_ru_010_json: null
	,maps_ru_010_jsonDescription: null
	,maps_ru_011_json: null
	,maps_ru_011_jsonDescription: null
	,maps_ru_012_json: null
	,maps_ru_012_jsonDescription: null
	,maps_ru_013_json: null
	,maps_ru_013_jsonDescription: null
	,maps_ru_014_json: null
	,maps_ru_014_jsonDescription: null
	,maps_ru_015_json: null
	,maps_ru_015_jsonDescription: null
	,maps_ru_016_json: null
	,maps_ru_016_jsonDescription: null
	,maps_ru_017_json: null
	,maps_ru_017_jsonDescription: null
	,maps_ru_018_json: null
	,maps_ru_018_jsonDescription: null
	,maps_ru_019_json: null
	,maps_ru_019_jsonDescription: null
	,maps_ru_020_json: null
	,maps_ru_020_jsonDescription: null
	,maps_ru_021_json: null
	,maps_ru_021_jsonDescription: null
	,maps_ru_022_json: null
	,maps_ru_022_jsonDescription: null
	,maps_ru_023_json: null
	,maps_ru_023_jsonDescription: null
	,maps_ru_024_json: null
	,maps_ru_024_jsonDescription: null
	,maps_ru_025_json: null
	,maps_ru_025_jsonDescription: null
	,maps_ru_026_json: null
	,maps_ru_026_jsonDescription: null
	,maps_ru_027_json: null
	,maps_ru_027_jsonDescription: null
	,maps_ru_028_json: null
	,maps_ru_028_jsonDescription: null
	,maps_ru_029_json: null
	,maps_ru_029_jsonDescription: null
	,maps_ru_030_json: null
	,maps_ru_030_jsonDescription: null
	,maps_ru_031_json: null
	,maps_ru_031_jsonDescription: null
	,tiles_json: null
	,tiles_jsonDescription: null
	,__class__: kha__$Assets_BlobList
};
var kha__$Assets_FontList = function() {
	this.RobotoCondensed_RegularDescription = { name : "RobotoCondensed_Regular", file_sizes : [169544], files : ["RobotoCondensed_Regular.ttf"], type : "font"};
	this.RobotoCondensed_Regular = null;
	this.OpenSans_RegularDescription = { name : "OpenSans_Regular", file_sizes : [217276], files : ["OpenSans_Regular.ttf"], type : "font"};
	this.OpenSans_Regular = null;
};
$hxClasses["kha._Assets.FontList"] = kha__$Assets_FontList;
kha__$Assets_FontList.__name__ = "kha._Assets.FontList";
kha__$Assets_FontList.prototype = {
	OpenSans_Regular: null
	,OpenSans_RegularDescription: null
	,RobotoCondensed_Regular: null
	,RobotoCondensed_RegularDescription: null
	,__class__: kha__$Assets_FontList
};
var kha__$Assets_VideoList = function() {
};
$hxClasses["kha._Assets.VideoList"] = kha__$Assets_VideoList;
kha__$Assets_VideoList.__name__ = "kha._Assets.VideoList";
kha__$Assets_VideoList.prototype = {
	__class__: kha__$Assets_VideoList
};
var kha_Assets = function() { };
$hxClasses["kha.Assets"] = kha_Assets;
kha_Assets.__name__ = "kha.Assets";
kha_Assets.loadEverything = function(callback,filter,uncompressSoundsFilter,failed) {
	var lists = [kha__$Assets_ImageList,kha__$Assets_SoundList,kha__$Assets_BlobList,kha__$Assets_FontList,kha__$Assets_VideoList];
	var listInstances = [kha_Assets.images,kha_Assets.sounds,kha_Assets.blobs,kha_Assets.fonts,kha_Assets.videos];
	var fileCount = 0;
	var _g = 0;
	while(_g < lists.length) {
		var _g1 = 0;
		var _g11 = Type.getInstanceFields(lists[_g++]);
		while(_g1 < _g11.length) if(StringTools.endsWith(_g11[_g1++],"Description")) {
			fileCount += 1;
		}
	}
	if(fileCount == 0) {
		callback();
		return;
	}
	var filesLeft = fileCount;
	var loadFunc = function(desc,done,failure) {
		var name = desc.name;
		switch(desc.type) {
		case "blob":
			kha_Assets.loadBlob(name,function(blob) {
				done();
			},failure,{ fileName : "kha/Assets.hx", lineNumber : 122, className : "kha.Assets", methodName : "loadEverything"});
			break;
		case "font":
			kha_Assets.loadFont(name,function(font) {
				done();
			},failure,{ fileName : "kha/Assets.hx", lineNumber : 124, className : "kha.Assets", methodName : "loadEverything"});
			break;
		case "image":
			kha_Assets.loadImage(name,function(image) {
				done();
			},failure,{ fileName : "kha/Assets.hx", lineNumber : 113, className : "kha.Assets", methodName : "loadEverything"});
			break;
		case "sound":
			kha_Assets.loadSound(name,function(sound) {
				if(uncompressSoundsFilter == null || uncompressSoundsFilter(desc)) {
					sound.uncompress(done);
				} else {
					done();
				}
			},failure,{ fileName : "kha/Assets.hx", lineNumber : 115, className : "kha.Assets", methodName : "loadEverything"});
			break;
		case "video":
			kha_Assets.loadVideo(name,function(video) {
				done();
			},failure,{ fileName : "kha/Assets.hx", lineNumber : 126, className : "kha.Assets", methodName : "loadEverything"});
			break;
		}
	};
	var onLoaded = function() {
		filesLeft -= 1;
		kha_Assets.progress = 1 - filesLeft / fileCount;
		if(filesLeft == 0) {
			callback();
		}
	};
	var onError = function(err) {
		(kha_Assets.reporter(failed,{ fileName : "kha/Assets.hx", lineNumber : 137, className : "kha.Assets", methodName : "loadEverything"}))(err);
		onLoaded();
	};
	var _g12 = 0;
	var _g2 = lists.length;
	while(_g12 < _g2) {
		var i = _g12++;
		var listInstance = listInstances[i];
		var _g13 = 0;
		var _g21 = Type.getInstanceFields(lists[i]);
		while(_g13 < _g21.length) {
			var field = _g21[_g13];
			++_g13;
			if(!StringTools.endsWith(field,"Description")) {
				continue;
			}
			var desc1 = Reflect.field(listInstance,field);
			if(filter == null || filter(desc1)) {
				loadFunc(desc1,onLoaded,onError);
			} else {
				onLoaded();
			}
		}
	}
};
kha_Assets.loadImage = function(name,done,failed,pos) {
	kha_LoaderImpl.loadImageFromDescription(Reflect.field(kha_Assets.images,name + "Description"),function(image) {
		kha_Assets.images[name] = image;
		done(image);
	},kha_Assets.reporter(failed,pos));
};
kha_Assets.loadBlob = function(name,done,failed,pos) {
	kha_LoaderImpl.loadBlobFromDescription(Reflect.field(kha_Assets.blobs,name + "Description"),function(blob) {
		kha_Assets.blobs[name] = blob;
		done(blob);
	},kha_Assets.reporter(failed,pos));
};
kha_Assets.loadSound = function(name,done,failed,pos) {
	kha_LoaderImpl.loadSoundFromDescription(Reflect.field(kha_Assets.sounds,name + "Description"),function(sound) {
		kha_Assets.sounds[name] = sound;
		done(sound);
	},kha_Assets.reporter(failed,pos));
	return;
};
kha_Assets.loadFont = function(name,done,failed,pos) {
	kha_LoaderImpl.loadFontFromDescription(Reflect.field(kha_Assets.fonts,name + "Description"),function(font) {
		kha_Assets.fonts[name] = font;
		done(font);
	},kha_Assets.reporter(failed,pos));
	return;
};
kha_Assets.loadVideo = function(name,done,failed,pos) {
	kha_LoaderImpl.loadVideoFromDescription(Reflect.field(kha_Assets.videos,name + "Description"),function(video) {
		kha_Assets.videos[name] = video;
		done(video);
	},kha_Assets.reporter(failed,pos));
	return;
};
kha_Assets.reporter = function(custom,pos) {
	if(custom != null) {
		return custom;
	} else {
		var f = haxe_Log.trace;
		var infos = pos;
		return function(v) {
			f(v,infos);
		};
	}
};
var kha_Canvas = function() { };
$hxClasses["kha.Canvas"] = kha_Canvas;
kha_Canvas.__name__ = "kha.Canvas";
kha_Canvas.__isInterface__ = true;
kha_Canvas.prototype = {
	get_width: null
	,get_height: null
	,get_g2: null
	,get_g4: null
	,width: null
	,height: null
	,g2: null
	,g4: null
	,__class__: kha_Canvas
};
var kha_Resource = function() { };
$hxClasses["kha.Resource"] = kha_Resource;
kha_Resource.__name__ = "kha.Resource";
kha_Resource.__isInterface__ = true;
var kha_Image = function() { };
$hxClasses["kha.Image"] = kha_Image;
kha_Image.__name__ = "kha.Image";
kha_Image.__interfaces__ = [kha_Resource,kha_Canvas];
kha_Image.create = function(width,height,format,usage) {
	if(format == null) {
		format = 0;
	}
	if(usage == null) {
		usage = 0;
	}
	if(kha_SystemImpl.gl == null) {
		return new kha_CanvasImage(width,height,format,false);
	} else {
		return new kha_WebGLImage(width,height,format,false,0,1);
	}
};
kha_Image.createRenderTarget = function(width,height,format,depthStencil,antiAliasingSamples,contextId) {
	if(contextId == null) {
		contextId = 0;
	}
	if(antiAliasingSamples == null) {
		antiAliasingSamples = 1;
	}
	if(depthStencil == null) {
		depthStencil = 0;
	}
	if(format == null) {
		format = 0;
	}
	if(kha_SystemImpl.gl == null) {
		return new kha_CanvasImage(width,height,format,true);
	} else {
		return new kha_WebGLImage(width,height,format,true,depthStencil,antiAliasingSamples);
	}
};
kha_Image.fromImage = function(image,readable) {
	if(kha_SystemImpl.gl == null) {
		var img = new kha_CanvasImage(image.width,image.height,0,false);
		img.image = image;
		img.createTexture();
		return img;
	} else {
		var img1 = new kha_WebGLImage(image.width,image.height,0,false,0,1);
		img1.image = image;
		img1.createTexture();
		return img1;
	}
};
kha_Image.fromBytes = function(bytes,width,height,format,usage) {
	if(format == null) {
		format = 0;
	}
	if(usage == null) {
		usage = 0;
	}
	if(kha_SystemImpl.gl != null) {
		var img = new kha_WebGLImage(width,height,format,false,0,1);
		img.image = img.bytesToArray(bytes);
		img.createTexture();
		return img;
	}
	var img1 = new kha_CanvasImage(width,height,format,false);
	img1.get_g2().canvas.putImageData(new ImageData(new Uint8ClampedArray(bytes.b.bufferValue),width,height),0,0);
	return img1;
};
kha_Image.fromVideo = function(video) {
	if(kha_SystemImpl.gl == null) {
		var img = new kha_CanvasImage(video.element.videoWidth,video.element.videoHeight,0,false);
		img.video = video.element;
		img.createTexture();
		return img;
	} else {
		var img1 = new kha_WebGLImage(video.element.videoWidth,video.element.videoHeight,0,false,0,1);
		img1.video = video.element;
		img1.createTexture();
		return img1;
	}
};
kha_Image.get_nonPow2Supported = function() {
	return kha_SystemImpl.gl != null;
};
kha_Image.renderTargetsInvertedY = function() {
	return true;
};
kha_Image.prototype = {
	lock: function(level) {
		if(level == null) {
			level = 0;
		}
		return null;
	}
	,unlock: function() {
	}
	,width: null
	,get_width: function() {
		return 0;
	}
	,height: null
	,get_height: function() {
		return 0;
	}
	,realWidth: null
	,get_realWidth: function() {
		return 0;
	}
	,realHeight: null
	,get_realHeight: function() {
		return 0;
	}
	,g2: null
	,get_g2: function() {
		return null;
	}
	,g4: null
	,get_g4: function() {
		return null;
	}
	,__class__: kha_Image
};
var kha_CanvasImage = function(width,height,format,renderTarget) {
	this.g2canvas = null;
	this.myWidth = width;
	this.myHeight = height;
	this.format = format;
	this.renderTarget = renderTarget;
	this.image = null;
	this.video = null;
	if(renderTarget) {
		this.createTexture();
	}
};
$hxClasses["kha.CanvasImage"] = kha_CanvasImage;
kha_CanvasImage.__name__ = "kha.CanvasImage";
kha_CanvasImage.init = function() {
	var canvas = window.document.createElement("canvas");
	if(canvas != null) {
		kha_CanvasImage.context = canvas.getContext("2d");
		canvas.width = 2048;
		canvas.height = 2048;
		kha_CanvasImage.context.globalCompositeOperation = "copy";
	}
};
kha_CanvasImage.__super__ = kha_Image;
kha_CanvasImage.prototype = $extend(kha_Image.prototype,{
	image: null
	,video: null
	,myWidth: null
	,myHeight: null
	,format: null
	,renderTarget: null
	,frameBuffer: null
	,g2canvas: null
	,get_g2: function() {
		if(this.g2canvas == null) {
			var canvas = window.document.createElement("canvas");
			this.image = canvas;
			var context = canvas.getContext("2d");
			canvas.width = this.get_width();
			canvas.height = this.get_height();
			this.g2canvas = new kha_js_CanvasGraphics(context);
		}
		return this.g2canvas;
	}
	,get_g4: function() {
		return null;
	}
	,get_width: function() {
		return this.myWidth;
	}
	,get_height: function() {
		return this.myHeight;
	}
	,get_realWidth: function() {
		return this.myWidth;
	}
	,get_realHeight: function() {
		return this.myHeight;
	}
	,texture: null
	,createTexture: function() {
		if(kha_SystemImpl.gl == null) {
			return;
		}
		this.texture = kha_SystemImpl.gl.createTexture();
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		kha_SystemImpl.gl.texParameteri(3553,10240,9729);
		kha_SystemImpl.gl.texParameteri(3553,10241,9729);
		kha_SystemImpl.gl.texParameteri(3553,10242,33071);
		kha_SystemImpl.gl.texParameteri(3553,10243,33071);
		if(this.renderTarget) {
			this.frameBuffer = kha_SystemImpl.gl.createFramebuffer();
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_realWidth(),this.get_realHeight(),0,6408,5121,null);
			kha_SystemImpl.gl.framebufferTexture2D(36160,36064,3553,this.texture,0);
			kha_SystemImpl.gl.bindFramebuffer(36160,null);
		} else if(this.video != null) {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.video);
		} else {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.image);
		}
		kha_SystemImpl.gl.bindTexture(3553,null);
	}
	,bytes: null
	,lock: function(level) {
		if(level == null) {
			level = 0;
		}
		this.bytes = new haxe_io_Bytes(new ArrayBuffer(this.format == 0 ? 4 * this.get_width() * this.get_height() : this.get_width() * this.get_height()));
		return this.bytes;
	}
	,unlock: function() {
		if(kha_SystemImpl.gl != null) {
			this.texture = kha_SystemImpl.gl.createTexture();
			kha_SystemImpl.gl.bindTexture(3553,this.texture);
			kha_SystemImpl.gl.texParameteri(3553,10240,9729);
			kha_SystemImpl.gl.texParameteri(3553,10241,9729);
			kha_SystemImpl.gl.texParameteri(3553,10242,33071);
			kha_SystemImpl.gl.texParameteri(3553,10243,33071);
			kha_SystemImpl.gl.texImage2D(3553,0,6409,this.get_width(),this.get_height(),0,6409,5121,new Uint8Array(this.bytes.b.bufferValue));
			if(kha_SystemImpl.gl.getError() == 1282) {
				var rgbaBytes = new haxe_io_Bytes(new ArrayBuffer(this.get_width() * this.get_height() * 4));
				var _g = 0;
				var _g1 = this.get_height();
				while(_g < _g1) {
					var y = _g++;
					var _g2 = 0;
					var _g11 = this.get_width();
					while(_g2 < _g11) {
						var x = _g2++;
						var value = this.bytes.b[y * this.get_width() + x];
						rgbaBytes.b[y * this.get_width() * 4 + x * 4] = value;
						rgbaBytes.b[y * this.get_width() * 4 + x * 4 + 1] = value;
						rgbaBytes.b[y * this.get_width() * 4 + x * 4 + 2] = value;
						rgbaBytes.b[y * this.get_width() * 4 + x * 4 + 3] = 255;
					}
				}
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_width(),this.get_height(),0,6408,5121,new Uint8Array(rgbaBytes.b.bufferValue));
			}
			kha_SystemImpl.gl.bindTexture(3553,null);
			this.bytes = null;
		}
	}
	,__class__: kha_CanvasImage
});
var kha__$Color_Color_$Impl_$ = {};
$hxClasses["kha._Color.Color_Impl_"] = kha__$Color_Color_$Impl_$;
kha__$Color_Color_$Impl_$.__name__ = "kha._Color.Color_Impl_";
kha__$Color_Color_$Impl_$.fromBytes = function(r,g,b,a) {
	if(a == null) {
		a = 255;
	}
	return kha__$Color_Color_$Impl_$._new(a << 24 | r << 16 | g << 8 | b);
};
kha__$Color_Color_$Impl_$._new = function(value) {
	return value;
};
var kha_Display = function() {
};
$hxClasses["kha.Display"] = kha_Display;
kha_Display.__name__ = "kha.Display";
kha_Display.get_primary = function() {
	return kha_Display.instance;
};
kha_Display.prototype = {
	get_frequency: function() {
		return 60;
	}
	,get_pixelsPerInch: function() {
		var dpiElement = window.document.createElement("div");
		dpiElement.style.position = "absolute";
		dpiElement.style.width = "1in";
		dpiElement.style.height = "1in";
		dpiElement.style.left = "-100%";
		dpiElement.style.top = "-100%";
		window.document.body.appendChild(dpiElement);
		var dpi = dpiElement.offsetHeight;
		dpiElement.remove();
		return dpi;
	}
	,__class__: kha_Display
};
var kha_DisplayMode = function() { };
$hxClasses["kha.DisplayMode"] = kha_DisplayMode;
kha_DisplayMode.__name__ = "kha.DisplayMode";
var kha_Framebuffer = function($window,g1,g2,g4) {
	this.window = $window;
	this.graphics1 = g1;
	this.graphics2 = g2;
	this.graphics4 = g4;
};
$hxClasses["kha.Framebuffer"] = kha_Framebuffer;
kha_Framebuffer.__name__ = "kha.Framebuffer";
kha_Framebuffer.__interfaces__ = [kha_Canvas];
kha_Framebuffer.prototype = {
	window: null
	,graphics1: null
	,graphics2: null
	,graphics4: null
	,init: function(g1,g2,g4) {
		this.graphics1 = g1;
		this.graphics2 = g2;
		this.graphics4 = g4;
	}
	,get_g2: function() {
		return this.graphics2;
	}
	,get_g4: function() {
		return this.graphics4;
	}
	,width: null
	,get_width: function() {
		return kha_System.windowWidth(this.window);
	}
	,height: null
	,get_height: function() {
		return kha_System.windowHeight(this.window);
	}
	,__class__: kha_Framebuffer
};
var kha_FramebufferOptions = function(frequency,verticalSync,colorBufferBits,depthBufferBits,stencilBufferBits,samplesPerPixel) {
	if(samplesPerPixel == null) {
		samplesPerPixel = 1;
	}
	if(stencilBufferBits == null) {
		stencilBufferBits = 8;
	}
	if(depthBufferBits == null) {
		depthBufferBits = 16;
	}
	if(colorBufferBits == null) {
		colorBufferBits = 32;
	}
	if(verticalSync == null) {
		verticalSync = true;
	}
	if(frequency == null) {
		frequency = 60;
	}
	this.samplesPerPixel = 1;
	this.stencilBufferBits = 8;
	this.depthBufferBits = 16;
	this.colorBufferBits = 32;
	this.verticalSync = true;
	this.frequency = 60;
	this.frequency = frequency;
	this.verticalSync = verticalSync;
	this.colorBufferBits = colorBufferBits;
	this.depthBufferBits = depthBufferBits;
	this.stencilBufferBits = stencilBufferBits;
	this.samplesPerPixel = samplesPerPixel;
};
$hxClasses["kha.FramebufferOptions"] = kha_FramebufferOptions;
kha_FramebufferOptions.__name__ = "kha.FramebufferOptions";
kha_FramebufferOptions.prototype = {
	frequency: null
	,verticalSync: null
	,colorBufferBits: null
	,depthBufferBits: null
	,stencilBufferBits: null
	,samplesPerPixel: null
	,__class__: kha_FramebufferOptions
};
var kha_AlignedQuad = function() {
};
$hxClasses["kha.AlignedQuad"] = kha_AlignedQuad;
kha_AlignedQuad.__name__ = "kha.AlignedQuad";
kha_AlignedQuad.prototype = {
	x0: null
	,y0: null
	,s0: null
	,t0: null
	,x1: null
	,y1: null
	,s1: null
	,t1: null
	,xadvance: null
	,__class__: kha_AlignedQuad
};
var kha_KravurImage = function(size,ascent,descent,lineGap,width,height,chars,pixels) {
	this.mySize = size;
	this.width = width;
	this.height = height;
	this.chars = chars;
	this.baseline = ascent;
	var _g = 0;
	while(_g < chars.length) chars[_g++].yoff += this.baseline;
	this.texture = kha_Image.create(width,height,1);
	var bytes = this.texture.lock();
	var pos = 0;
	var _g1 = 0;
	while(_g1 < height) {
		++_g1;
		var _g11 = 0;
		while(_g11 < width) {
			++_g11;
			bytes.b[pos] = pixels.readU8(pos);
			++pos;
		}
	}
	this.texture.unlock();
};
$hxClasses["kha.KravurImage"] = kha_KravurImage;
kha_KravurImage.__name__ = "kha.KravurImage";
kha_KravurImage.prototype = {
	mySize: null
	,chars: null
	,texture: null
	,width: null
	,height: null
	,baseline: null
	,getTexture: function() {
		return this.texture;
	}
	,getBakedQuad: function(q,char_index,xpos,ypos) {
		if(char_index >= this.chars.length) {
			return null;
		}
		var ipw = 1.0 / this.width;
		var iph = 1.0 / this.height;
		var b = this.chars[char_index];
		if(b == null) {
			return null;
		}
		var round_x = Math.round(xpos + b.xoff);
		var round_y = Math.round(ypos + b.yoff);
		q.x0 = round_x;
		q.y0 = round_y;
		q.x1 = round_x + b.x1 - b.x0;
		q.y1 = round_y + b.y1 - b.y0;
		q.s0 = b.x0 * ipw;
		q.t0 = b.y0 * iph;
		q.s1 = b.x1 * ipw;
		q.t1 = b.y1 * iph;
		q.xadvance = b.xadvance;
		return q;
	}
	,getCharWidth: function(charIndex) {
		if(this.chars.length == 0) {
			return 0;
		}
		var offset = kha_KravurImage.charBlocks[0];
		if(charIndex < offset) {
			return this.chars[0].xadvance;
		}
		var _g = 1;
		var _g1 = kha_KravurImage.charBlocks.length / 2 | 0;
		while(_g < _g1) {
			var i = _g++;
			var start = kha_KravurImage.charBlocks[i * 2];
			if(charIndex > start - 1) {
				offset += start - 1 - kha_KravurImage.charBlocks[i * 2 - 1];
			}
		}
		if(charIndex - offset >= this.chars.length) {
			return this.chars[0].xadvance;
		}
		return this.chars[charIndex - offset].xadvance;
	}
	,getHeight: function() {
		return this.mySize;
	}
	,stringWidth: function(str) {
		var width = 0;
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) width += this.getCharWidth(HxOverrides.cca(str,_g++));
		return width;
	}
	,__class__: kha_KravurImage
};
var kha_Kravur = function(blob) {
	this.images = new haxe_ds_IntMap();
	this.blob = blob;
};
$hxClasses["kha.Kravur"] = kha_Kravur;
kha_Kravur.__name__ = "kha.Kravur";
kha_Kravur.__interfaces__ = [kha_Resource];
kha_Kravur.prototype = {
	oldGlyphs: null
	,blob: null
	,images: null
	,_get: function(fontSize) {
		var glyphs = kha_graphics2_Graphics.fontGlyphs;
		if(glyphs != this.oldGlyphs) {
			this.oldGlyphs = glyphs;
			kha_KravurImage.charBlocks = [glyphs[0]];
			var nextChar = kha_KravurImage.charBlocks[0] + 1;
			var _g = 1;
			var _g1 = glyphs.length;
			while(_g < _g1) {
				var i = _g++;
				if(glyphs[i] != nextChar) {
					kha_KravurImage.charBlocks.push(glyphs[i - 1]);
					kha_KravurImage.charBlocks.push(glyphs[i]);
					nextChar = glyphs[i] + 1;
				} else {
					++nextChar;
				}
			}
			kha_KravurImage.charBlocks.push(glyphs[glyphs.length - 1]);
		}
		var imageIndex = fontSize * 10000 + glyphs.length;
		if(!this.images.h.hasOwnProperty(imageIndex)) {
			var width = 64;
			var height = 32;
			var baked = new Array(glyphs.length);
			var _g2 = 0;
			var _g11 = baked.length;
			while(_g2 < _g11) baked[_g2++] = new kha_graphics2_truetype_Stbtt_$bakedchar();
			var pixels = null;
			var status = -1;
			while(status <= 0) {
				if(height < width) {
					height *= 2;
				} else {
					width *= 2;
				}
				pixels = kha_internal_BytesBlob.alloc(width * height);
				status = kha_graphics2_truetype_StbTruetype.stbtt_BakeFontBitmap(this.blob,0,fontSize,pixels,width,height,glyphs,baked);
			}
			var info = new kha_graphics2_truetype_Stbtt_$fontinfo();
			kha_graphics2_truetype_StbTruetype.stbtt_InitFont(info,this.blob,0);
			var metrics = kha_graphics2_truetype_StbTruetype.stbtt_GetFontVMetrics(info);
			var scale = kha_graphics2_truetype_StbTruetype.stbtt_ScaleForPixelHeight(info,fontSize);
			var image = new kha_KravurImage(fontSize | 0,Math.round(metrics.ascent * scale),Math.round(metrics.descent * scale),Math.round(metrics.lineGap * scale),width,height,baked,pixels);
			this.images.h[imageIndex] = image;
			return image;
		}
		return this.images.h[imageIndex];
	}
	,height: function(fontSize) {
		return this._get(fontSize).getHeight();
	}
	,width: function(fontSize,str) {
		return this._get(fontSize).stringWidth(str);
	}
	,__class__: kha_Kravur
};
var kha_LoaderImpl = function() { };
$hxClasses["kha.LoaderImpl"] = kha_LoaderImpl;
kha_LoaderImpl.__name__ = "kha.LoaderImpl";
kha_LoaderImpl.loadImageFromDescription = function(desc,done,failed) {
	var readable = Object.prototype.hasOwnProperty.call(desc,"readable") && desc.readable;
	if(StringTools.endsWith(desc.files[0],".hdr")) {
		kha_LoaderImpl.loadBlobFromDescription(desc,function(blob) {
			var hdrImage = kha_internal_HdrFormat.parse(blob.toBytes());
			var tmp = kha_Image.fromBytes(haxe_io_Bytes.ofData(hdrImage.data.buffer),hdrImage.width,hdrImage.height,2,readable ? 1 : 0);
			done(tmp);
		},failed);
	} else {
		var img = window.document.createElement("img");
		img.onerror = function(event) {
			failed({ url : desc.files[0], error : event});
		};
		img.onload = function(event1) {
			var tmp1 = kha_Image.fromImage(img,readable);
			done(tmp1);
		};
		img.crossOrigin = "";
		img.src = desc.files[0];
	}
};
kha_LoaderImpl.loadSoundFromDescription = function(desc,done,failed) {
	if(kha_SystemImpl._hasWebAudio) {
		var element = window.document.createElement("audio");
		if(element.canPlayType("audio/mp4") != "") {
			var _g = 0;
			var _g1 = desc.files.length;
			while(_g < _g1) {
				var file = desc.files[_g++];
				if(StringTools.endsWith(file,".mp4")) {
					new kha_js_WebAudioSound(file,done,failed);
					return;
				}
			}
		}
		if(element.canPlayType("audio/mp3") != "") {
			var _g2 = 0;
			var _g11 = desc.files.length;
			while(_g2 < _g11) {
				var file1 = desc.files[_g2++];
				if(StringTools.endsWith(file1,".mp3")) {
					new kha_js_WebAudioSound(file1,done,failed);
					return;
				}
			}
		}
		if(element.canPlayType("audio/wav") != "") {
			var _g3 = 0;
			var _g12 = desc.files.length;
			while(_g3 < _g12) {
				var file2 = desc.files[_g3++];
				if(StringTools.endsWith(file2,".wav")) {
					new kha_js_WebAudioSound(file2,done,failed);
					return;
				}
			}
		}
		var _g4 = 0;
		var _g13 = desc.files.length;
		while(_g4 < _g13) {
			var file3 = desc.files[_g4++];
			if(StringTools.endsWith(file3,".ogg")) {
				new kha_js_WebAudioSound(file3,done,failed);
				return;
			}
		}
	} else if(kha_SystemImpl.mobile) {
		var element1 = window.document.createElement("audio");
		if(element1.canPlayType("audio/mp4") != "") {
			var _g5 = 0;
			var _g14 = desc.files.length;
			while(_g5 < _g14) {
				var file4 = desc.files[_g5++];
				if(StringTools.endsWith(file4,".mp4")) {
					new kha_js_MobileWebAudioSound(file4,done,failed);
					return;
				}
			}
		}
		if(element1.canPlayType("audio/mp3") != "") {
			var _g6 = 0;
			var _g15 = desc.files.length;
			while(_g6 < _g15) {
				var file5 = desc.files[_g6++];
				if(StringTools.endsWith(file5,".mp3")) {
					new kha_js_MobileWebAudioSound(file5,done,failed);
					return;
				}
			}
		}
		if(element1.canPlayType("audio/wav") != "") {
			var _g7 = 0;
			var _g16 = desc.files.length;
			while(_g7 < _g16) {
				var file6 = desc.files[_g7++];
				if(StringTools.endsWith(file6,".wav")) {
					new kha_js_MobileWebAudioSound(file6,done,failed);
					return;
				}
			}
		}
		var _g8 = 0;
		var _g17 = desc.files.length;
		while(_g8 < _g17) {
			var file7 = desc.files[_g8++];
			if(StringTools.endsWith(file7,".ogg")) {
				new kha_js_MobileWebAudioSound(file7,done,failed);
				return;
			}
		}
	} else {
		new kha_js_Sound(desc.files,done,failed);
	}
};
kha_LoaderImpl.loadVideoFromDescription = function(desc,done,failed) {
	kha_js_Video.fromFile(desc.files,done);
};
kha_LoaderImpl.loadRemote = function(desc,done,failed) {
	var request = new XMLHttpRequest();
	request.open("GET",desc.files[0],true);
	request.responseType = "arraybuffer";
	request.onreadystatechange = function() {
		if(request.readyState != 4) {
			return;
		}
		if(request.status >= 200 && request.status < 400 || request.status == 0 && request.statusText == "") {
			var bytes = null;
			var arrayBuffer = request.response;
			if(arrayBuffer != null) {
				var byteArray = new Uint8Array(arrayBuffer);
				bytes = haxe_io_Bytes.ofData(byteArray);
			} else if(request.responseBody != null) {
				var data = VBArray(request.responseBody).toArray();
				bytes = new haxe_io_Bytes(new ArrayBuffer(data.length));
				var _g = 0;
				var _g1 = data.length;
				while(_g < _g1) {
					var i = _g++;
					bytes.b[i] = data[i];
				}
			} else {
				failed({ url : desc.files[0]});
				return;
			}
			done(new kha_internal_BytesBlob(bytes));
		} else {
			failed({ url : desc.files[0]});
		}
	};
	request.send(null);
};
kha_LoaderImpl.loadBlobFromDescription = function(desc,done,failed) {
	kha_LoaderImpl.loadRemote(desc,done,failed);
};
kha_LoaderImpl.loadFontFromDescription = function(desc,done,failed) {
	kha_LoaderImpl.loadBlobFromDescription(desc,function(blob) {
		done(new kha_Kravur(blob));
	},failed);
};
var kha_TimeTask = function() {
};
$hxClasses["kha.TimeTask"] = kha_TimeTask;
kha_TimeTask.__name__ = "kha.TimeTask";
kha_TimeTask.prototype = {
	task: null
	,start: null
	,period: null
	,duration: null
	,next: null
	,id: null
	,groupId: null
	,active: null
	,paused: null
	,__class__: kha_TimeTask
};
var kha_FrameTask = function(task,priority,id) {
	this.task = task;
	this.priority = priority;
	this.id = id;
	this.active = true;
	this.paused = false;
};
$hxClasses["kha.FrameTask"] = kha_FrameTask;
kha_FrameTask.__name__ = "kha.FrameTask";
kha_FrameTask.prototype = {
	task: null
	,priority: null
	,id: null
	,active: null
	,paused: null
	,__class__: kha_FrameTask
};
var kha_Scheduler = function() { };
$hxClasses["kha.Scheduler"] = kha_Scheduler;
kha_Scheduler.__name__ = "kha.Scheduler";
kha_Scheduler.init = function() {
	kha_Scheduler.deltas = [];
	var _g = 0;
	var _g1 = kha_Scheduler.DIF_COUNT;
	while(_g < _g1) kha_Scheduler.deltas[_g++] = 0;
	kha_Scheduler.stopped = true;
	kha_Scheduler.frame_tasks_sorted = true;
	kha_Scheduler.current = kha_Scheduler.lastTime = kha_Scheduler.realTime();
	kha_Scheduler.currentFrameTaskId = 0;
	kha_Scheduler.currentTimeTaskId = 0;
	kha_Scheduler.currentGroupId = 0;
	kha_Scheduler.timeTasks = [];
	kha_Scheduler.pausedTimeTasks = [];
	kha_Scheduler.outdatedTimeTasks = [];
	kha_Scheduler.timeTasksScratchpad = [];
	kha_Scheduler.frameTasks = [];
	kha_Scheduler.toDeleteFrame = [];
};
kha_Scheduler.start = function(restartTimers) {
	if(restartTimers == null) {
		restartTimers = false;
	}
	kha_Scheduler.vsync = kha_Window.get(0).get_vSynced();
	var hz = kha_Display.get_primary().get_frequency();
	if(hz >= 57 && hz <= 63) {
		hz = 60;
	}
	kha_Scheduler.onedifhz = 1.0 / hz;
	kha_Scheduler.stopped = false;
	kha_Scheduler.resetTime();
	kha_Scheduler.lastTime = kha_Scheduler.realTime() - kha_Scheduler.startTime;
	var _g = 0;
	var _g1 = kha_Scheduler.DIF_COUNT;
	while(_g < _g1) kha_Scheduler.deltas[_g++] = 0;
	if(restartTimers) {
		var _g2 = 0;
		var _g3 = kha_Scheduler.timeTasks;
		while(_g2 < _g3.length) _g3[_g2++].paused = false;
		var _g4 = 0;
		var _g5 = kha_Scheduler.frameTasks;
		while(_g4 < _g5.length) _g5[_g4++].paused = false;
	}
};
kha_Scheduler.executeFrame = function() {
	var delta = kha_Scheduler.realTime() - kha_Scheduler.startTime - kha_Scheduler.lastTime;
	var frameEnd = kha_Scheduler.current;
	if(delta >= 0) {
		if(kha_netsync_Session.the() == null) {
			if(delta > kha_Scheduler.maxframetime) {
				kha_Scheduler.startTime += delta - kha_Scheduler.maxframetime;
				delta = kha_Scheduler.maxframetime;
				frameEnd += delta;
			} else if(kha_Scheduler.vsync) {
				var realdif = kha_Scheduler.onedifhz;
				while(realdif < delta - kha_Scheduler.onedifhz) realdif += kha_Scheduler.onedifhz;
				delta = realdif;
				var _g = 0;
				var _g1 = kha_Scheduler.DIF_COUNT - 2;
				while(_g < _g1) {
					var i = _g++;
					delta += kha_Scheduler.deltas[i];
					kha_Scheduler.deltas[i] = kha_Scheduler.deltas[i + 1];
				}
				delta += kha_Scheduler.deltas[kha_Scheduler.DIF_COUNT - 2];
				delta /= kha_Scheduler.DIF_COUNT;
				kha_Scheduler.deltas[kha_Scheduler.DIF_COUNT - 2] = realdif;
				frameEnd += delta;
			} else {
				var _g2 = 0;
				var _g11 = kha_Scheduler.DIF_COUNT - 1;
				while(_g2 < _g11) {
					var i1 = _g2++;
					kha_Scheduler.deltas[i1] = kha_Scheduler.deltas[i1 + 1];
				}
				kha_Scheduler.deltas[kha_Scheduler.DIF_COUNT - 1] = delta;
				var next = 0;
				var _g21 = 0;
				var _g3 = kha_Scheduler.DIF_COUNT;
				while(_g21 < _g3) next += kha_Scheduler.deltas[_g21++];
				next /= kha_Scheduler.DIF_COUNT;
				frameEnd += next;
			}
		} else {
			frameEnd += delta;
		}
		kha_Scheduler.lastTime = frameEnd;
		if(!kha_Scheduler.stopped) {
			kha_Scheduler.current = frameEnd;
		}
		var _g4 = 0;
		var _g12 = kha_Scheduler.pausedTimeTasks;
		while(_g4 < _g12.length) _g12[_g4++].next += delta;
		if(kha_Scheduler.stopped) {
			var _g22 = 0;
			var _g31 = kha_Scheduler.timeTasks;
			while(_g22 < _g31.length) _g31[_g22++].next += delta;
		}
		kha_Scheduler.executeTimeTasks(frameEnd);
		var _g23 = 0;
		var _g32 = kha_Scheduler.outdatedTimeTasks;
		while(_g23 < _g32.length) {
			var task = _g32[_g23];
			++_g23;
			if(task.next < frameEnd - 10.0) {
				kha_Scheduler.timeTasksScratchpad.push(task);
			}
		}
		var _g41 = 0;
		var _g5 = kha_Scheduler.timeTasksScratchpad;
		while(_g41 < _g5.length) HxOverrides.remove(kha_Scheduler.outdatedTimeTasks,_g5[_g41++]);
		while(kha_Scheduler.timeTasksScratchpad.length > 0) HxOverrides.remove(kha_Scheduler.timeTasksScratchpad,kha_Scheduler.timeTasksScratchpad[0]);
	}
	kha_Scheduler.sortFrameTasks();
	var _g6 = 0;
	var _g13 = kha_Scheduler.frameTasks;
	while(_g6 < _g13.length) {
		var frameTask = _g13[_g6];
		++_g6;
		if(!kha_Scheduler.stopped && !frameTask.paused && frameTask.active) {
			if(!frameTask.task()) {
				frameTask.active = false;
			}
		}
	}
	var _g24 = 0;
	var _g33 = kha_Scheduler.frameTasks;
	while(_g24 < _g33.length) {
		var frameTask1 = _g33[_g24];
		++_g24;
		if(!frameTask1.active) {
			kha_Scheduler.toDeleteFrame.push(frameTask1);
		}
	}
	while(kha_Scheduler.toDeleteFrame.length > 0) HxOverrides.remove(kha_Scheduler.frameTasks,kha_Scheduler.toDeleteFrame.pop());
};
kha_Scheduler.executeTimeTasks = function(until) {
	while(kha_Scheduler.timeTasks.length > 0) {
		kha_Scheduler.activeTimeTask = kha_Scheduler.timeTasks[0];
		if(kha_Scheduler.activeTimeTask.next <= until) {
			kha_Scheduler.activeTimeTask.next += kha_Scheduler.activeTimeTask.period;
			HxOverrides.remove(kha_Scheduler.timeTasks,kha_Scheduler.activeTimeTask);
			if(kha_Scheduler.activeTimeTask.active && kha_Scheduler.activeTimeTask.task()) {
				if(kha_Scheduler.activeTimeTask.period > 0 && (kha_Scheduler.activeTimeTask.duration == 0 || kha_Scheduler.activeTimeTask.duration >= kha_Scheduler.activeTimeTask.start + kha_Scheduler.activeTimeTask.next)) {
					kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,kha_Scheduler.activeTimeTask);
				}
			} else {
				kha_Scheduler.activeTimeTask.active = false;
			}
		} else {
			break;
		}
	}
	kha_Scheduler.activeTimeTask = null;
};
kha_Scheduler.realTime = function() {
	return kha_System.get_time();
};
kha_Scheduler.resetTime = function() {
	var now = kha_System.get_time();
	var dif = now - kha_Scheduler.startTime;
	kha_Scheduler.startTime = now;
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		timeTask.start -= dif;
		timeTask.next -= dif;
	}
	var _g2 = 0;
	var _g3 = kha_Scheduler.DIF_COUNT;
	while(_g2 < _g3) kha_Scheduler.deltas[_g2++] = 0;
	kha_Scheduler.current = 0;
	kha_Scheduler.lastTime = 0;
};
kha_Scheduler.addBreakableTimeTaskToGroup = function(groupId,task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	var t = new kha_TimeTask();
	t.active = true;
	t.task = task;
	t.id = ++kha_Scheduler.currentTimeTaskId;
	t.groupId = groupId;
	t.start = kha_Scheduler.current + start;
	t.period = 0;
	if(period != 0) {
		t.period = period;
	}
	t.duration = 0;
	if(duration != 0) {
		t.duration = t.start + duration;
	}
	t.next = t.start;
	kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,t);
	return t.id;
};
kha_Scheduler.addTimeTaskToGroup = function(groupId,task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	return kha_Scheduler.addBreakableTimeTaskToGroup(groupId,function() {
		task();
		return true;
	},start,period,duration);
};
kha_Scheduler.addTimeTask = function(task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	return kha_Scheduler.addTimeTaskToGroup(0,task,start,period,duration);
};
kha_Scheduler.getTimeTask = function(id) {
	if(kha_Scheduler.activeTimeTask != null && kha_Scheduler.activeTimeTask.id == id) {
		return kha_Scheduler.activeTimeTask;
	}
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		if(timeTask.id == id) {
			return timeTask;
		}
	}
	var _g2 = 0;
	var _g3 = kha_Scheduler.pausedTimeTasks;
	while(_g2 < _g3.length) {
		var timeTask1 = _g3[_g2];
		++_g2;
		if(timeTask1.id == id) {
			return timeTask1;
		}
	}
	return null;
};
kha_Scheduler.removeTimeTask = function(id) {
	var timeTask = kha_Scheduler.getTimeTask(id);
	if(timeTask != null) {
		timeTask.active = false;
		HxOverrides.remove(kha_Scheduler.timeTasks,timeTask);
	}
};
kha_Scheduler.insertSorted = function(list,task) {
	var _g = 0;
	var _g1 = list.length;
	while(_g < _g1) {
		var i = _g++;
		if(list[i].next > task.next) {
			list.splice(i,0,task);
			return;
		}
	}
	list.push(task);
};
kha_Scheduler.sortFrameTasks = function() {
	if(kha_Scheduler.frame_tasks_sorted) {
		return;
	}
	kha_Scheduler.frameTasks.sort(function(a,b) {
		if(a.priority > b.priority) {
			return 1;
		} else if(a.priority < b.priority) {
			return -1;
		} else {
			return 0;
		}
	});
	kha_Scheduler.frame_tasks_sorted = true;
};
var kha_Shaders = function() { };
$hxClasses["kha.Shaders"] = kha_Shaders;
kha_Shaders.__name__ = "kha.Shaders";
kha_Shaders.init = function() {
	var blobs = [];
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_colored_fragData" + 0))));
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_colored_fragData" + 1))));
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_colored_fragData" + 2))));
	kha_Shaders.painter_colored_frag = new kha_graphics4_FragmentShader(blobs,["painter-colored.frag.essl","painter-colored-relaxed.frag.essl","painter-colored-webgl2.frag.essl"]);
	var blobs1 = [];
	blobs1.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_colored_vertData" + 0))));
	blobs1.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_colored_vertData" + 1))));
	blobs1.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_colored_vertData" + 2))));
	kha_Shaders.painter_colored_vert = new kha_graphics4_VertexShader(blobs1,["painter-colored.vert.essl","painter-colored-relaxed.vert.essl","painter-colored-webgl2.vert.essl"]);
	var blobs2 = [];
	blobs2.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_image_fragData" + 0))));
	blobs2.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_image_fragData" + 1))));
	blobs2.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_image_fragData" + 2))));
	kha_Shaders.painter_image_frag = new kha_graphics4_FragmentShader(blobs2,["painter-image.frag.essl","painter-image-relaxed.frag.essl","painter-image-webgl2.frag.essl"]);
	var blobs3 = [];
	blobs3.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_image_vertData" + 0))));
	blobs3.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_image_vertData" + 1))));
	blobs3.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_image_vertData" + 2))));
	kha_Shaders.painter_image_vert = new kha_graphics4_VertexShader(blobs3,["painter-image.vert.essl","painter-image-relaxed.vert.essl","painter-image-webgl2.vert.essl"]);
	var blobs4 = [];
	blobs4.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_text_fragData" + 0))));
	blobs4.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_text_fragData" + 1))));
	blobs4.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_text_fragData" + 2))));
	kha_Shaders.painter_text_frag = new kha_graphics4_FragmentShader(blobs4,["painter-text.frag.essl","painter-text-relaxed.frag.essl","painter-text-webgl2.frag.essl"]);
	var blobs5 = [];
	blobs5.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_text_vertData" + 0))));
	blobs5.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_text_vertData" + 1))));
	blobs5.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_text_vertData" + 2))));
	kha_Shaders.painter_text_vert = new kha_graphics4_VertexShader(blobs5,["painter-text.vert.essl","painter-text-relaxed.vert.essl","painter-text-webgl2.vert.essl"]);
	var blobs6 = [];
	blobs6.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_video_fragData" + 0))));
	blobs6.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_video_fragData" + 1))));
	blobs6.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_video_fragData" + 2))));
	kha_Shaders.painter_video_frag = new kha_graphics4_FragmentShader(blobs6,["painter-video.frag.essl","painter-video-relaxed.frag.essl","painter-video-webgl2.frag.essl"]);
	var blobs7 = [];
	blobs7.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_video_vertData" + 0))));
	blobs7.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_video_vertData" + 1))));
	blobs7.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_video_vertData" + 2))));
	kha_Shaders.painter_video_vert = new kha_graphics4_VertexShader(blobs7,["painter-video.vert.essl","painter-video-relaxed.vert.essl","painter-video-webgl2.vert.essl"]);
};
var kha_Sound = function() {
	this.sampleRate = 0;
	this.channels = 0;
	this.length = 0;
};
$hxClasses["kha.Sound"] = kha_Sound;
kha_Sound.__name__ = "kha.Sound";
kha_Sound.__interfaces__ = [kha_Resource];
kha_Sound.prototype = {
	compressedData: null
	,uncompressedData: null
	,length: null
	,channels: null
	,sampleRate: null
	,uncompress: function(done) {
		if(this.uncompressedData != null) {
			done();
			return;
		}
		var output = new haxe_io_BytesOutput();
		var header = kha_audio2_ogg_vorbis_Reader.readAll(this.compressedData,output,true);
		var soundBytes = output.getBytes();
		var count = soundBytes.length / 4 | 0;
		if(header.channel == 1) {
			this.length = count / kha_audio2_Audio.samplesPerSecond;
			this.uncompressedData = new Float32Array(count * 2);
			var _g = 0;
			while(_g < count) {
				var i = _g++;
				this.uncompressedData[i * 2] = soundBytes.getFloat(i * 4);
				this.uncompressedData[i * 2 + 1] = soundBytes.getFloat(i * 4);
			}
		} else {
			this.length = count / 2 / kha_audio2_Audio.samplesPerSecond;
			this.uncompressedData = new Float32Array(count);
			var _g1 = 0;
			while(_g1 < count) {
				var i1 = _g1++;
				this.uncompressedData[i1] = soundBytes.getFloat(i1 * 4);
			}
		}
		this.channels = header.channel;
		this.sampleRate = header.sampleRate;
		this.compressedData = null;
		done();
	}
	,unload: function() {
		this.compressedData = null;
		this.uncompressedData = null;
	}
	,__class__: kha_Sound
};
var kha_StorageFile = function() { };
$hxClasses["kha.StorageFile"] = kha_StorageFile;
kha_StorageFile.__name__ = "kha.StorageFile";
kha_StorageFile.prototype = {
	read: function() {
		return null;
	}
	,write: function(data) {
	}
	,writeString: function(data) {
		this.write(kha_internal_BytesBlob.fromBytes(haxe_io_Bytes.ofString(data)));
	}
	,readString: function() {
		var blob = this.read();
		if(blob == null) {
			return null;
		} else {
			return blob.toString();
		}
	}
	,writeObject: function(object) {
		this.writeString(haxe_Serializer.run(object));
	}
	,readObject: function() {
		var s = this.readString();
		if(s == null) {
			return null;
		}
		try {
			return haxe_Unserializer.run(s);
		} catch( e ) {
			return null;
		}
	}
	,__class__: kha_StorageFile
};
var kha_LocalStorageFile = function(name) {
	this.name = name;
};
$hxClasses["kha.LocalStorageFile"] = kha_LocalStorageFile;
kha_LocalStorageFile.__name__ = "kha.LocalStorageFile";
kha_LocalStorageFile.encode = function(source) {
	var reserved = [0,10,13,61];
	var output = "";
	var converted;
	var ele;
	var bytes = new Uint8Array(source);
	var _g = 0;
	var _g1 = bytes.length;
	while(_g < _g1) {
		ele = bytes[_g++];
		converted = (ele + 42) % 256;
		if(!Lambda.has(reserved,converted)) {
			output += String.fromCodePoint(converted);
		} else {
			converted = (converted + 64) % 256;
			output += "=" + String.fromCodePoint(converted);
		}
	}
	return output;
};
kha_LocalStorageFile.decode = function(source) {
	var output = new haxe_io_BytesBuffer();
	var ck = false;
	var c;
	var _g = 0;
	var _g1 = source.length;
	while(_g < _g1) {
		c = source.charCodeAt(_g++);
		if(c == 13 || c == 10) {
			continue;
		}
		if(c == 61 && !ck) {
			ck = true;
			continue;
		}
		if(ck) {
			ck = false;
			c -= 64;
		}
		if(c < 42 && c > 0) {
			output.addByte(c + 214);
		} else {
			output.addByte(c - 42);
		}
	}
	return output.getBytes();
};
kha_LocalStorageFile.__super__ = kha_StorageFile;
kha_LocalStorageFile.prototype = $extend(kha_StorageFile.prototype,{
	name: null
	,read: function() {
		var storage = js_Browser.getLocalStorage();
		if(storage == null) {
			return null;
		}
		var value = storage.getItem(kha_System.get_title() + "_" + this.name);
		if(value == null) {
			return null;
		} else {
			return kha_internal_BytesBlob.fromBytes(kha_LocalStorageFile.decode(value));
		}
	}
	,write: function(data) {
		var storage = js_Browser.getLocalStorage();
		if(storage == null) {
			return;
		}
		storage.setItem(kha_System.get_title() + "_" + this.name,kha_LocalStorageFile.encode(data.bytes.b.bufferValue));
	}
	,__class__: kha_LocalStorageFile
});
var kha_Storage = function() { };
$hxClasses["kha.Storage"] = kha_Storage;
kha_Storage.__name__ = "kha.Storage";
kha_Storage.namedFile = function(name) {
	return new kha_LocalStorageFile(name);
};
kha_Storage.defaultFile = function() {
	return kha_Storage.namedFile("default.kha");
};
var kha_SystemOptions = function(title,width,height,$window,framebuffer) {
	if(height == null) {
		height = -1;
	}
	if(width == null) {
		width = -1;
	}
	if(title == null) {
		title = "Kha";
	}
	this.framebuffer = null;
	this.window = null;
	this.height = -1;
	this.width = -1;
	this.title = "Kha";
	this.title = title;
	this.window = $window == null ? new kha_WindowOptions(null,null,null,null,null,null,null,null,null) : $window;
	if(width > 0) {
		this.window.width = width;
		this.width = width;
	} else {
		this.width = this.window.width;
	}
	if(height > 0) {
		this.window.height = height;
		this.height = height;
	} else {
		this.height = this.window.height;
	}
	if(this.window.title == null) {
		this.window.title = title;
	}
	this.framebuffer = framebuffer == null ? new kha_FramebufferOptions(null,null,null,null,null,null) : framebuffer;
};
$hxClasses["kha.SystemOptions"] = kha_SystemOptions;
kha_SystemOptions.__name__ = "kha.SystemOptions";
kha_SystemOptions.prototype = {
	title: null
	,width: null
	,height: null
	,window: null
	,framebuffer: null
	,__class__: kha_SystemOptions
};
var kha_System = function() { };
$hxClasses["kha.System"] = kha_System;
kha_System.__name__ = "kha.System";
kha_System.start = function(options,callback) {
	kha_System.theTitle = options.title;
	kha_SystemImpl.init(options,callback);
};
kha_System.get_title = function() {
	return kha_System.theTitle;
};
kha_System.notifyOnFrames = function(listener) {
	kha_System.renderListeners.push(listener);
};
kha_System.removeFramesListener = function(listener) {
	HxOverrides.remove(kha_System.renderListeners,listener);
};
kha_System.notifyOnCutCopyPaste = function(cutListener,copyListener,pasteListener) {
	kha_System.cutListener = cutListener;
	kha_System.copyListener = copyListener;
	kha_System.pasteListener = pasteListener;
};
kha_System.render = function(framebuffers) {
	var _g = 0;
	var _g1 = kha_System.renderListeners;
	while(_g < _g1.length) _g1[_g++](framebuffers);
};
kha_System.foreground = function() {
	var _g = 0;
	var _g1 = kha_System.foregroundListeners;
	while(_g < _g1.length) _g1[_g++]();
};
kha_System.background = function() {
	var _g = 0;
	var _g1 = kha_System.backgroundListeners;
	while(_g < _g1.length) _g1[_g++]();
};
kha_System.shutdown = function() {
	var _g = 0;
	var _g1 = kha_System.shutdownListeners;
	while(_g < _g1.length) _g1[_g++]();
};
kha_System.get_time = function() {
	return kha_SystemImpl.getTime();
};
kha_System.windowWidth = function($window) {
	if($window == null) {
		$window = 0;
	}
	return kha_Window.get($window).get_width();
};
kha_System.windowHeight = function($window) {
	if($window == null) {
		$window = 0;
	}
	return kha_Window.get_all()[$window].get_height();
};
kha_System.vibrate = function(ms) {
	kha_SystemImpl.vibrate(ms);
	return;
};
kha_System.get_language = function() {
	return kha_SystemImpl.getLanguage();
};
kha_System.stop = function() {
	return kha_SystemImpl.requestShutdown();
};
var kha_GamepadStates = function() {
	this.axes = [];
	this.buttons = [];
};
$hxClasses["kha.GamepadStates"] = kha_GamepadStates;
kha_GamepadStates.__name__ = "kha.GamepadStates";
kha_GamepadStates.prototype = {
	axes: null
	,buttons: null
	,__class__: kha_GamepadStates
};
var kha_SystemImpl = function() { };
$hxClasses["kha.SystemImpl"] = kha_SystemImpl;
kha_SystemImpl.__name__ = "kha.SystemImpl";
kha_SystemImpl.init = function(options,callback) {
	kha_SystemImpl.options = options;
	kha_SystemImpl.mobile = kha_SystemImpl.isMobile();
	kha_SystemImpl.ios = kha_SystemImpl.isIOS();
	kha_SystemImpl.chrome = kha_SystemImpl.isChrome();
	kha_SystemImpl.firefox = kha_SystemImpl.isFirefox();
	kha_SystemImpl.ie = kha_SystemImpl.isIE();
	if(kha_SystemImpl.mobile || kha_SystemImpl.chrome) {
		kha_SystemImpl.mobileAudioPlaying = false;
	} else {
		kha_SystemImpl.mobileAudioPlaying = true;
	}
	kha_SystemImpl.initSecondStep(callback);
};
kha_SystemImpl.initSecondStep = function(callback) {
	kha_SystemImpl.init2(kha_SystemImpl.options.window.width,kha_SystemImpl.options.window.height);
	callback(kha_SystemImpl.window);
};
kha_SystemImpl.isMobile = function() {
	var agent = window.navigator.userAgent;
	if(agent.indexOf("Android") >= 0 || agent.indexOf("webOS") >= 0 || agent.indexOf("BlackBerry") >= 0 || agent.indexOf("Windows Phone") >= 0) {
		return true;
	}
	if(kha_SystemImpl.isIOS()) {
		return true;
	}
	return false;
};
kha_SystemImpl.isIOS = function() {
	var agent = window.navigator.userAgent;
	if(agent.indexOf("iPhone") >= 0 || agent.indexOf("iPad") >= 0 || agent.indexOf("iPod") >= 0) {
		return true;
	}
	return false;
};
kha_SystemImpl.isChrome = function() {
	if(window.navigator.userAgent.indexOf("Chrome") >= 0) {
		return true;
	}
	return false;
};
kha_SystemImpl.isFirefox = function() {
	if(window.navigator.userAgent.indexOf("Firefox") >= 0) {
		return true;
	}
	return false;
};
kha_SystemImpl.isIE = function() {
	var agent = window.navigator.userAgent;
	if(agent.indexOf("MSIE ") >= 0 || agent.indexOf("Trident/") >= 0) {
		return true;
	}
	return false;
};
kha_SystemImpl.setCanvas = function(canvas) {
	kha_SystemImpl.khanvas = canvas;
};
kha_SystemImpl.getTime = function() {
	var performance = window.performance ? window.performance : window.Date;
	return performance.now() / 1000;
};
kha_SystemImpl.vibrate = function(ms) {
	window.navigator.vibrate(ms);
};
kha_SystemImpl.getLanguage = function() {
	return HxOverrides.substr(window.navigator.language,0,2).toLowerCase();
};
kha_SystemImpl.requestShutdown = function() {
	window.close();
	return true;
};
kha_SystemImpl.init2 = function(defaultWidth,defaultHeight,backbufferFormat) {
	kha_SystemImpl.keyboard = new kha_input_Keyboard();
	kha_SystemImpl.mouse = new kha_input_MouseImpl();
	kha_SystemImpl.surface = new kha_input_Surface();
	kha_SystemImpl.gamepads = [];
	kha_SystemImpl.gamepadStates = [];
	kha_SystemImpl.gamepads[0] = new kha_input_Gamepad(0);
	kha_SystemImpl.gamepadStates[0] = new kha_GamepadStates();
	kha_SystemImpl.gamepads[1] = new kha_input_Gamepad(1);
	kha_SystemImpl.gamepadStates[1] = new kha_GamepadStates();
	kha_SystemImpl.gamepads[2] = new kha_input_Gamepad(2);
	kha_SystemImpl.gamepadStates[2] = new kha_GamepadStates();
	kha_SystemImpl.gamepads[3] = new kha_input_Gamepad(3);
	kha_SystemImpl.gamepadStates[3] = new kha_GamepadStates();
	window.addEventListener("gamepadconnected",function(e) {
		kha_input_Gamepad.sendConnectEvent(e.gamepad.index);
	});
	window.addEventListener("gamepaddisconnected",function(e1) {
		kha_input_Gamepad.sendDisconnectEvent(e1.gamepad.index);
	});
	if(kha_SystemImpl.ie) {
		kha_SystemImpl.pressedKeys = [];
		var _g = 0;
		while(_g < 256) {
			++_g;
			kha_SystemImpl.pressedKeys.push(false);
		}
		var _g1 = 0;
		while(_g1 < 256) {
			++_g1;
			kha_SystemImpl.pressedKeys.push(null);
		}
	}
	var onCopy = function(e2) {
		if(kha_System.copyListener != null) {
			var data = kha_System.copyListener();
			if(data != null) {
				e2.clipboardData.setData("text/plain",data);
			}
			e2.preventDefault();
		}
	};
	var onCut = function(e3) {
		if(kha_System.cutListener != null) {
			var data1 = kha_System.cutListener();
			if(data1 != null) {
				e3.clipboardData.setData("text/plain",data1);
			}
			e3.preventDefault();
		}
	};
	var onPaste = function(e4) {
		if(kha_System.pasteListener != null) {
			var onPaste1 = e4.clipboardData.getData("text/plain");
			kha_System.pasteListener(onPaste1);
			e4.preventDefault();
		}
	};
	var document = window.document;
	document.addEventListener("copy",onCopy);
	document.addEventListener("cut",onCut);
	document.addEventListener("paste",onPaste);
	kha_CanvasImage.init();
	kha_Scheduler.init();
	kha_SystemImpl.loadFinished(defaultWidth,defaultHeight);
};
kha_SystemImpl.getMouse = function(num) {
	if(num != 0) {
		return null;
	}
	return kha_SystemImpl.mouse;
};
kha_SystemImpl.getKeyboard = function(num) {
	if(num != 0) {
		return null;
	}
	return kha_SystemImpl.keyboard;
};
kha_SystemImpl.checkGamepad = function(pad) {
	var _g = 0;
	var _g1 = pad.axes.length;
	while(_g < _g1) {
		var i = _g++;
		if(pad.axes[i] != null) {
			var axis = pad.axes[i];
			if(kha_SystemImpl.gamepadStates[pad.index].axes[i] != axis) {
				kha_SystemImpl.gamepadStates[pad.index].axes[i] = axis;
				kha_SystemImpl.gamepads[pad.index].sendAxisEvent(i,axis);
			}
		}
	}
	var _g2 = 0;
	var _g3 = pad.buttons.length;
	while(_g2 < _g3) {
		var i1 = _g2++;
		if(pad.buttons[i1] != null) {
			if(kha_SystemImpl.gamepadStates[pad.index].buttons[i1] != pad.buttons[i1].value) {
				kha_SystemImpl.gamepadStates[pad.index].buttons[i1] = pad.buttons[i1].value;
				kha_SystemImpl.gamepads[pad.index].sendButtonEvent(i1,pad.buttons[i1].value);
			}
		}
	}
	if(pad.axes.length <= 4 && pad.buttons.length > 7) {
		kha_SystemImpl.gamepadStates[pad.index].axes[4] = pad.buttons[6].value;
		kha_SystemImpl.gamepads[pad.index].sendAxisEvent(4,pad.buttons[6].value);
		kha_SystemImpl.gamepadStates[pad.index].axes[5] = pad.buttons[7].value;
		kha_SystemImpl.gamepads[pad.index].sendAxisEvent(5,pad.buttons[7].value);
	}
};
kha_SystemImpl.getCanvasElement = function() {
	if(kha_SystemImpl.khanvas != null) {
		return kha_SystemImpl.khanvas;
	}
	return window.document.getElementById("khanvas");
};
kha_SystemImpl.loadFinished = function(defaultWidth,defaultHeight) {
	var canvas = kha_SystemImpl.getCanvasElement();
	canvas.style.cursor = "default";
	var gl = false;
	try {
		kha_SystemImpl.gl = canvas.getContext("webgl2",{ alpha : false, antialias : kha_SystemImpl.options.framebuffer.samplesPerPixel > 1, stencil : true});
		kha_SystemImpl.gl.pixelStorei(37441,1);
		kha_SystemImpl.halfFloat = { HALF_FLOAT_OES : 5131};
		kha_SystemImpl.depthTexture = { UNSIGNED_INT_24_8_WEBGL : 34042};
		kha_SystemImpl.drawBuffers = { COLOR_ATTACHMENT0_WEBGL : 36064};
		kha_SystemImpl.elementIndexUint = true;
		kha_SystemImpl.gl.getExtension("EXT_color_buffer_float");
		kha_SystemImpl.gl.getExtension("OES_texture_float_linear");
		kha_SystemImpl.gl.getExtension("OES_texture_half_float_linear");
		kha_SystemImpl.anisotropicFilter = kha_SystemImpl.gl.getExtension("EXT_texture_filter_anisotropic");
		if(kha_SystemImpl.anisotropicFilter == null) {
			kha_SystemImpl.anisotropicFilter = kha_SystemImpl.gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
		}
		gl = true;
		kha_SystemImpl.gl2 = true;
		kha_Shaders.init();
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		haxe_Log.trace("Could not initialize WebGL 2, falling back to WebGL.",{ fileName : "kha/SystemImpl.hx", lineNumber : 345, className : "kha.SystemImpl", methodName : "loadFinished"});
	}
	if(!kha_SystemImpl.gl2) {
		try {
			kha_SystemImpl.gl = canvas.getContext("experimental-webgl",{ alpha : false, antialias : kha_SystemImpl.options.framebuffer.samplesPerPixel > 1, stencil : true});
			kha_SystemImpl.gl.pixelStorei(37441,1);
			kha_SystemImpl.gl.getExtension("OES_texture_float");
			kha_SystemImpl.gl.getExtension("OES_texture_float_linear");
			kha_SystemImpl.halfFloat = kha_SystemImpl.gl.getExtension("OES_texture_half_float");
			kha_SystemImpl.gl.getExtension("OES_texture_half_float_linear");
			kha_SystemImpl.depthTexture = kha_SystemImpl.gl.getExtension("WEBGL_depth_texture");
			kha_SystemImpl.gl.getExtension("EXT_shader_texture_lod");
			kha_SystemImpl.gl.getExtension("OES_standard_derivatives");
			kha_SystemImpl.anisotropicFilter = kha_SystemImpl.gl.getExtension("EXT_texture_filter_anisotropic");
			if(kha_SystemImpl.anisotropicFilter == null) {
				kha_SystemImpl.anisotropicFilter = kha_SystemImpl.gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
			}
			kha_SystemImpl.drawBuffers = kha_SystemImpl.gl.getExtension("WEBGL_draw_buffers");
			kha_SystemImpl.elementIndexUint = kha_SystemImpl.gl.getExtension("OES_element_index_uint");
			gl = true;
			kha_Shaders.init();
		} catch( e2 ) {
			var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
			haxe_Log.trace("Could not initialize WebGL, falling back to <canvas>.",{ fileName : "kha/SystemImpl.hx", lineNumber : 367, className : "kha.SystemImpl", methodName : "loadFinished"});
		}
	}
	kha_SystemImpl.setCanvas(canvas);
	kha_SystemImpl.window = new kha_Window(defaultWidth,defaultHeight,canvas);
	if(gl) {
		var g4 = new kha_js_graphics4_Graphics();
		kha_SystemImpl.frame = new kha_Framebuffer(0,null,null,g4);
		kha_SystemImpl.frame.init(new kha_graphics2_Graphics1(kha_SystemImpl.frame),new kha_js_graphics4_Graphics2(kha_SystemImpl.frame),g4);
	} else {
		kha_js_Font.Kravur = kha_Kravur; kha_Kravur = kha_js_Font;
		var g2 = new kha_js_CanvasGraphics(canvas.getContext("2d"));
		kha_SystemImpl.frame = new kha_Framebuffer(0,null,g2,null);
		kha_SystemImpl.frame.init(new kha_graphics2_Graphics1(kha_SystemImpl.frame),g2,null);
	}
	if(!kha_SystemImpl.mobile && kha_audio2_Audio._init()) {
		kha_SystemImpl._hasWebAudio = true;
		kha_audio2_Audio1._init();
	} else if(kha_SystemImpl.mobile) {
		kha_SystemImpl._hasWebAudio = false;
		kha_js_MobileWebAudio._init();
		kha_audio2_Audio1 = kha_js_MobileWebAudio;
	} else {
		kha_SystemImpl._hasWebAudio = false;
		kha_audio2_Audio1 = kha_js_AudioElementAudio;
	}
	kha_vr_VrInterface.instance = new kha_js_vr_VrInterface();
	kha_Scheduler.start();
	var $window = window;
	var requestAnimationFrame = $window.requestAnimationFrame;
	if(requestAnimationFrame == null) {
		requestAnimationFrame = $window.mozRequestAnimationFrame;
	}
	if(requestAnimationFrame == null) {
		requestAnimationFrame = $window.webkitRequestAnimationFrame;
	}
	if(requestAnimationFrame == null) {
		requestAnimationFrame = $window.msRequestAnimationFrame;
	}
	var animate = null;
	animate = function(timestamp) {
		var window1 = window;
		if(requestAnimationFrame == null) {
			window1.setTimeout(animate,16.6666666666666679);
		} else {
			requestAnimationFrame(animate);
		}
		var sysGamepads = kha_SystemImpl.getGamepads();
		if(sysGamepads != null) {
			var _g = 0;
			var _g1 = sysGamepads.length;
			while(_g < _g1) {
				var i = _g++;
				var pad = sysGamepads[i];
				if(pad != null) {
					kha_SystemImpl.checkGamepad(pad);
				}
			}
		}
		kha_Scheduler.executeFrame();
		if(canvas.getContext != null) {
			var displayWidth = canvas.clientWidth;
			var displayHeight = canvas.clientHeight;
			if(canvas.width != displayWidth || canvas.height != displayHeight) {
				canvas.width = displayWidth;
				canvas.height = displayHeight;
			}
			kha_System.render([kha_SystemImpl.frame]);
			if(kha_SystemImpl.gl != null) {
				kha_SystemImpl.gl.clearColor(1,1,1,1);
				kha_SystemImpl.gl.colorMask(false,false,false,true);
				kha_SystemImpl.gl.clear(16384);
				kha_SystemImpl.gl.colorMask(true,true,true,true);
			}
		}
	};
	if(requestAnimationFrame == null) {
		$window.setTimeout(animate,16.6666666666666679);
	} else {
		requestAnimationFrame(animate);
	}
	canvas.focus();
	canvas.oncontextmenu = function(event) {
		event.stopPropagation();
		event.preventDefault();
	};
	canvas.onmousedown = kha_SystemImpl.mouseDown;
	canvas.onmousemove = kha_SystemImpl.mouseMove;
	if(kha_SystemImpl.keyboard != null) {
		canvas.onkeydown = kha_SystemImpl.keyDown;
		canvas.onkeyup = kha_SystemImpl.keyUp;
		canvas.onkeypress = kha_SystemImpl.keyPress;
	}
	canvas.onblur = kha_SystemImpl.onBlur;
	canvas.onfocus = kha_SystemImpl.onFocus;
	canvas.onmousewheel = canvas.onwheel = kha_SystemImpl.mouseWheel;
	canvas.onmouseleave = kha_SystemImpl.mouseLeave;
	canvas.addEventListener("wheel mousewheel",kha_SystemImpl.mouseWheel,false);
	canvas.addEventListener("touchstart",kha_SystemImpl.touchDown,false);
	canvas.addEventListener("touchend",kha_SystemImpl.touchUp,false);
	canvas.addEventListener("touchmove",kha_SystemImpl.touchMove,false);
	canvas.addEventListener("touchcancel",kha_SystemImpl.touchCancel,false);
	window.addEventListener("unload",function() {
		kha_System.shutdown();
	});
};
kha_SystemImpl.lockMouse = function() {
	if(($_=kha_SystemImpl.khanvas,$bind($_,$_.requestPointerLock))) {
		kha_SystemImpl.khanvas.requestPointerLock();
	} else if(kha_SystemImpl.khanvas.mozRequestPointerLock) {
		kha_SystemImpl.khanvas.mozRequestPointerLock();
	} else if(kha_SystemImpl.khanvas.webkitRequestPointerLock) {
		kha_SystemImpl.khanvas.webkitRequestPointerLock();
	}
};
kha_SystemImpl.unlockMouse = function() {
	if(document.exitPointerLock) {
		document.exitPointerLock();
	} else if(document.mozExitPointerLock) {
		document.mozExitPointerLock();
	} else if(document.webkitExitPointerLock) {
		document.webkitExitPointerLock();
	}
};
kha_SystemImpl.canLockMouse = function() {
	return 'pointerLockElement' in document ||
		'mozPointerLockElement' in document ||
		'webkitPointerLockElement' in document;
};
kha_SystemImpl.isMouseLocked = function() {
	return document.pointerLockElement === kha_SystemImpl.khanvas ||
			document.mozPointerLockElement === kha_SystemImpl.khanvas ||
			document.webkitPointerLockElement === kha_SystemImpl.khanvas;
};
kha_SystemImpl.notifyOfMouseLockChange = function(func,error) {
	window.document.addEventListener("pointerlockchange",func,false);
	window.document.addEventListener("mozpointerlockchange",func,false);
	window.document.addEventListener("webkitpointerlockchange",func,false);
	window.document.addEventListener("pointerlockerror",error,false);
	window.document.addEventListener("mozpointerlockerror",error,false);
	window.document.addEventListener("webkitpointerlockerror",error,false);
};
kha_SystemImpl.removeFromMouseLockChange = function(func,error) {
	window.document.removeEventListener("pointerlockchange",func,false);
	window.document.removeEventListener("mozpointerlockchange",func,false);
	window.document.removeEventListener("webkitpointerlockchange",func,false);
	window.document.removeEventListener("pointerlockerror",error,false);
	window.document.removeEventListener("mozpointerlockerror",error,false);
	window.document.removeEventListener("webkitpointerlockerror",error,false);
};
kha_SystemImpl.setMouseXY = function(event) {
	var rect = kha_SystemImpl.khanvas.getBoundingClientRect();
	var borderWidth = kha_SystemImpl.khanvas.clientLeft;
	var borderHeight = kha_SystemImpl.khanvas.clientTop;
	kha_SystemImpl.mouseX = (event.clientX - rect.left - borderWidth) * kha_SystemImpl.khanvas.width / (rect.width - 2 * borderWidth) | 0;
	kha_SystemImpl.mouseY = (event.clientY - rect.top - borderHeight) * kha_SystemImpl.khanvas.height / (rect.height - 2 * borderHeight) | 0;
};
kha_SystemImpl.unlockiOSSound = function() {
	if(!kha_SystemImpl.ios || kha_SystemImpl.iosSoundEnabled) {
		return;
	}
	var buffer = kha_js_MobileWebAudio._context.createBuffer(1,1,22050);
	var source = kha_js_MobileWebAudio._context.createBufferSource();
	source.buffer = buffer;
	source.connect(kha_js_MobileWebAudio._context.destination);
	source.start();
	source.stop();
	kha_SystemImpl.iosSoundEnabled = true;
};
kha_SystemImpl.unlockSound = function() {
	if(!kha_SystemImpl.soundEnabled) {
		var context = kha_audio2_Audio._context;
		if(context == null) {
			context = kha_audio2_Audio1._context;
		}
		if(context != null) {
			context.resume().then(function(c) {
				kha_SystemImpl.soundEnabled = true;
			}).catch(function(err) {
				haxe_Log.trace(err,{ fileName : "kha/SystemImpl.hx", lineNumber : 607, className : "kha.SystemImpl", methodName : "unlockSound"});
			});
		}
		kha_audio2_Audio.wakeChannels();
	}
	kha_SystemImpl.unlockiOSSound();
};
kha_SystemImpl.mouseLeave = function() {
	kha_SystemImpl.mouse.sendLeaveEvent(0);
};
kha_SystemImpl.mouseWheel = function(event) {
	kha_SystemImpl.unlockSound();
	kha_SystemImpl.insideInputEvent = true;
	var _g = kha_input_Mouse.wheelEventBlockBehavior;
	switch(_g._hx_index) {
	case 0:
		event.preventDefault();
		break;
	case 1:
		break;
	case 2:
		if(_g.func(event)) {
			event.preventDefault();
		}
		break;
	}
	if(event.deltaMode == 0) {
		if(event.deltaY < 0) {
			kha_SystemImpl.mouse.sendWheelEvent(0,-1);
		} else if(event.deltaY > 0) {
			kha_SystemImpl.mouse.sendWheelEvent(0,1);
		}
		kha_SystemImpl.insideInputEvent = false;
		return;
	}
	if(event.deltaMode == 1) {
		kha_SystemImpl.minimumScroll = Math.min(kha_SystemImpl.minimumScroll,Math.abs(event.deltaY)) | 0;
		kha_SystemImpl.mouse.sendWheelEvent(0,event.deltaY / kha_SystemImpl.minimumScroll | 0);
		kha_SystemImpl.insideInputEvent = false;
		return;
	}
	kha_SystemImpl.insideInputEvent = false;
	return;
};
kha_SystemImpl.mouseDown = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	kha_SystemImpl.setMouseXY(event);
	if(event.which == 1) {
		kha_SystemImpl.mouse.sendDownEvent(0,0,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
		if(kha_SystemImpl.khanvas.setCapture != null) {
			kha_SystemImpl.khanvas.setCapture();
		} else {
			kha_SystemImpl.khanvas.ownerDocument.addEventListener("mousemove",kha_SystemImpl.documentMouseMove,true);
		}
		kha_SystemImpl.khanvas.ownerDocument.addEventListener("mouseup",kha_SystemImpl.mouseLeftUp);
	} else if(event.which == 2) {
		kha_SystemImpl.mouse.sendDownEvent(0,2,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
		kha_SystemImpl.khanvas.ownerDocument.addEventListener("mouseup",kha_SystemImpl.mouseMiddleUp);
	} else if(event.which == 3) {
		kha_SystemImpl.mouse.sendDownEvent(0,1,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
		kha_SystemImpl.khanvas.ownerDocument.addEventListener("mouseup",kha_SystemImpl.mouseRightUp);
	}
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.mouseLeftUp = function(event) {
	kha_SystemImpl.unlockSound();
	if(event.which != 1) {
		return;
	}
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mouseup",kha_SystemImpl.mouseLeftUp);
	if(kha_SystemImpl.khanvas.releaseCapture != null) {
		kha_SystemImpl.khanvas.ownerDocument.releaseCapture();
	} else {
		kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mousemove",kha_SystemImpl.documentMouseMove,true);
	}
	kha_SystemImpl.mouse.sendUpEvent(0,0,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.mouseMiddleUp = function(event) {
	kha_SystemImpl.unlockSound();
	if(event.which != 2) {
		return;
	}
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mouseup",kha_SystemImpl.mouseMiddleUp);
	kha_SystemImpl.mouse.sendUpEvent(0,2,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.mouseRightUp = function(event) {
	kha_SystemImpl.unlockSound();
	if(event.which != 3) {
		return;
	}
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mouseup",kha_SystemImpl.mouseRightUp);
	kha_SystemImpl.mouse.sendUpEvent(0,1,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.documentMouseMove = function(event) {
	event.stopPropagation();
	kha_SystemImpl.mouseMove(event);
};
kha_SystemImpl.mouseMove = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	var lastMouseX = kha_SystemImpl.mouseX;
	var lastMouseY = kha_SystemImpl.mouseY;
	kha_SystemImpl.setMouseXY(event);
	var movementX = event.movementX;
	var movementY = event.movementY;
	if(event.movementX == null) {
		movementX = event.mozMovementX != null ? event.mozMovementX : event.webkitMovementX != null ? event.webkitMovementX : kha_SystemImpl.mouseX - lastMouseX;
		movementY = event.mozMovementY != null ? event.mozMovementY : event.webkitMovementY != null ? event.webkitMovementY : kha_SystemImpl.mouseY - lastMouseY;
	}
	if(kha_SystemImpl.firefox) {
		movementX = movementX * window.devicePixelRatio | 0;
		movementY = movementY * window.devicePixelRatio | 0;
	}
	kha_SystemImpl.mouse.sendMoveEvent(0,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY,movementX,movementY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.setTouchXY = function(touch) {
	var rect = kha_SystemImpl.khanvas.getBoundingClientRect();
	var borderWidth = kha_SystemImpl.khanvas.clientLeft;
	var borderHeight = kha_SystemImpl.khanvas.clientTop;
	kha_SystemImpl.touchX = (touch.clientX - rect.left - borderWidth) * kha_SystemImpl.khanvas.width / (rect.width - 2 * borderWidth) | 0;
	kha_SystemImpl.touchY = (touch.clientY - rect.top - borderHeight) * kha_SystemImpl.khanvas.height / (rect.height - 2 * borderHeight) | 0;
};
kha_SystemImpl.touchDown = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	event.stopPropagation();
	var _g = kha_input_Surface.touchDownEventBlockBehavior;
	switch(_g._hx_index) {
	case 0:
		event.preventDefault();
		break;
	case 1:
		break;
	case 2:
		if(_g.func(event)) {
			event.preventDefault();
		}
		break;
	}
	var index = 0;
	var _g2 = 0;
	var _g3 = event.changedTouches;
	while(_g2 < _g3.length) {
		var touch = _g3[_g2];
		++_g2;
		var id = touch.identifier;
		if(kha_SystemImpl.ios) {
			id = kha_SystemImpl.iosTouchs.indexOf(-1);
			if(id == -1) {
				id = kha_SystemImpl.iosTouchs.length;
			}
			kha_SystemImpl.iosTouchs[id] = touch.identifier;
		}
		kha_SystemImpl.setTouchXY(touch);
		kha_SystemImpl.mouse.sendDownEvent(0,0,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		kha_SystemImpl.surface.sendTouchStartEvent(id,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		if(index == 0) {
			kha_SystemImpl.lastFirstTouchX = kha_SystemImpl.touchX;
			kha_SystemImpl.lastFirstTouchY = kha_SystemImpl.touchY;
		}
		++index;
	}
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.touchUp = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	var _g = 0;
	var _g1 = event.changedTouches;
	while(_g < _g1.length) {
		var touch = _g1[_g];
		++_g;
		var id = touch.identifier;
		if(kha_SystemImpl.ios) {
			id = kha_SystemImpl.iosTouchs.indexOf(id);
			kha_SystemImpl.iosTouchs[id] = -1;
		}
		kha_SystemImpl.setTouchXY(touch);
		kha_SystemImpl.mouse.sendUpEvent(0,0,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		kha_SystemImpl.surface.sendTouchEndEvent(id,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
	}
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.touchMove = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	var index = 0;
	var _g = 0;
	var _g1 = event.changedTouches;
	while(_g < _g1.length) {
		var touch = _g1[_g];
		++_g;
		kha_SystemImpl.setTouchXY(touch);
		if(index == 0) {
			var movementX = kha_SystemImpl.touchX - kha_SystemImpl.lastFirstTouchX;
			var movementY = kha_SystemImpl.touchY - kha_SystemImpl.lastFirstTouchY;
			kha_SystemImpl.lastFirstTouchX = kha_SystemImpl.touchX;
			kha_SystemImpl.lastFirstTouchY = kha_SystemImpl.touchY;
			kha_SystemImpl.mouse.sendMoveEvent(0,kha_SystemImpl.touchX,kha_SystemImpl.touchY,movementX,movementY);
		}
		var id = touch.identifier;
		if(kha_SystemImpl.ios) {
			id = kha_SystemImpl.iosTouchs.indexOf(id);
		}
		kha_SystemImpl.surface.sendMoveEvent(id,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		++index;
	}
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.touchCancel = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	var _g = 0;
	var _g1 = event.changedTouches;
	while(_g < _g1.length) {
		var touch = _g1[_g];
		++_g;
		var id = touch.identifier;
		if(kha_SystemImpl.ios) {
			id = kha_SystemImpl.iosTouchs.indexOf(id);
		}
		kha_SystemImpl.setTouchXY(touch);
		kha_SystemImpl.mouse.sendUpEvent(0,0,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		kha_SystemImpl.surface.sendTouchEndEvent(id,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
	}
	kha_SystemImpl.iosTouchs = [];
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.onBlur = function() {
	kha_System.background();
};
kha_SystemImpl.onFocus = function() {
	kha_System.foreground();
};
kha_SystemImpl.keyDown = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	var _g = kha_input_Keyboard.keyBehavior;
	switch(_g._hx_index) {
	case 0:
		kha_SystemImpl.defaultKeyBlock(event);
		break;
	case 1:
		event.preventDefault();
		break;
	case 2:
		break;
	case 3:
		if(_g.func(event.keyCode)) {
			event.preventDefault();
		}
		break;
	}
	event.stopPropagation();
	if(kha_SystemImpl.ie) {
		if(kha_SystemImpl.pressedKeys[event.keyCode]) {
			event.preventDefault();
			return;
		}
		kha_SystemImpl.pressedKeys[event.keyCode] = true;
	} else if(event.repeat) {
		event.preventDefault();
		return;
	}
	kha_SystemImpl.keyboard.sendDownEvent(kha_SystemImpl.fixedKeyCode(event));
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.fixedKeyCode = function(event) {
	switch(event.keyCode) {
	case 91:case 93:
		return 224;
	case 186:
		return 59;
	case 187:
		return 61;
	case 189:
		return 173;
	default:
		return event.keyCode;
	}
};
kha_SystemImpl.defaultKeyBlock = function(e) {
	if(e.ctrlKey || e.metaKey) {
		if(e.keyCode == 67 || e.keyCode == 88 || e.keyCode == 86) {
			return;
		}
		e.preventDefault();
		return;
	}
	if(e.keyCode >= 112 && e.keyCode <= 123) {
		return;
	}
	if(e.key == null || e.key.length == 1) {
		return;
	}
	e.preventDefault();
};
kha_SystemImpl.keyUp = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	event.preventDefault();
	event.stopPropagation();
	if(kha_SystemImpl.ie) {
		kha_SystemImpl.pressedKeys[event.keyCode] = false;
	}
	kha_SystemImpl.keyboard.sendUpEvent(kha_SystemImpl.fixedKeyCode(event));
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.keyPress = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	if(event.which == 0) {
		return;
	}
	event.preventDefault();
	event.stopPropagation();
	var code = event.which;
	kha_SystemImpl.keyboard.sendPressEvent(String.fromCodePoint(code));
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.getGamepadId = function(index) {
	var sysGamepads = kha_SystemImpl.getGamepads();
	if(sysGamepads != null && sysGamepads[index]) {
		return sysGamepads[index].id;
	}
	return "unkown";
};
kha_SystemImpl.getGamepadVendor = function(index) {
	return "unknown";
};
kha_SystemImpl.getGamepads = function() {
	if(kha_SystemImpl.chrome && kha_vr_VrInterface.instance.IsVrEnabled()) {
		return null;
	}
	if(navigator.getGamepads) {
		return window.navigator.getGamepads();
	} else {
		return null;
	}
};
var kha_Video = function() {
};
$hxClasses["kha.Video"] = kha_Video;
kha_Video.__name__ = "kha.Video";
kha_Video.__interfaces__ = [kha_Resource];
kha_Video.prototype = {
	__class__: kha_Video
};
var kha_WebGLImage = function(width,height,format,renderTarget,depthStencilFormat,samples) {
	this.MSAAFrameBuffer = null;
	this.depthTexture = null;
	this.texture = null;
	this.renderBuffer = null;
	this.frameBuffer = null;
	this.myWidth = width;
	this.myHeight = height;
	this.format = format;
	this.renderTarget = renderTarget;
	this.samples = samples;
	this.image = null;
	this.video = null;
	this.depthStencilFormat = depthStencilFormat;
	kha_WebGLImage.init();
	if(renderTarget) {
		this.createTexture();
	}
};
$hxClasses["kha.WebGLImage"] = kha_WebGLImage;
kha_WebGLImage.__name__ = "kha.WebGLImage";
kha_WebGLImage.init = function() {
	if(kha_WebGLImage.context == null) {
		kha_WebGLImage.canvas = window.document.createElement("canvas");
		if(kha_WebGLImage.canvas != null) {
			kha_WebGLImage.context = kha_WebGLImage.canvas.getContext("2d");
			kha_WebGLImage.canvas.width = 4096;
			kha_WebGLImage.canvas.height = 4096;
			kha_WebGLImage.context.globalCompositeOperation = "copy";
		}
	}
};
kha_WebGLImage.formatByteSize = function(format) {
	switch(format) {
	case 0:
		return 4;
	case 1:
		return 1;
	case 2:
		return 16;
	case 3:
		return 2;
	case 4:
		return 8;
	case 5:
		return 4;
	case 6:
		return 2;
	default:
		return 4;
	}
};
kha_WebGLImage.__super__ = kha_Image;
kha_WebGLImage.prototype = $extend(kha_Image.prototype,{
	image: null
	,video: null
	,myWidth: null
	,myHeight: null
	,format: null
	,renderTarget: null
	,samples: null
	,frameBuffer: null
	,renderBuffer: null
	,texture: null
	,depthTexture: null
	,MSAAFrameBuffer: null
	,MSAAColorBuffer: null
	,MSAADepthBuffer: null
	,graphics2: null
	,graphics4: null
	,depthStencilFormat: null
	,get_g2: function() {
		if(this.graphics2 == null) {
			this.graphics2 = new kha_js_graphics4_Graphics2(this);
		}
		return this.graphics2;
	}
	,get_g4: function() {
		if(this.graphics4 == null) {
			this.graphics4 = new kha_js_graphics4_Graphics(this);
		}
		return this.graphics4;
	}
	,get_width: function() {
		return this.myWidth;
	}
	,get_height: function() {
		return this.myHeight;
	}
	,get_realWidth: function() {
		return this.myWidth;
	}
	,get_realHeight: function() {
		return this.myHeight;
	}
	,createTexture: function() {
		if(kha_SystemImpl.gl == null) {
			return;
		}
		this.texture = kha_SystemImpl.gl.createTexture();
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		kha_SystemImpl.gl.texParameteri(3553,10240,9729);
		kha_SystemImpl.gl.texParameteri(3553,10241,9729);
		kha_SystemImpl.gl.texParameteri(3553,10242,33071);
		kha_SystemImpl.gl.texParameteri(3553,10243,33071);
		if(this.renderTarget) {
			this.frameBuffer = kha_SystemImpl.gl.createFramebuffer();
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			switch(this.format) {
			case 0:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_realWidth(),this.get_realHeight(),0,6408,5121,null);
				break;
			case 2:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.get_realWidth(),this.get_realHeight(),0,6408,5126,null);
				break;
			case 3:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.get_realWidth(),this.get_realHeight(),0,6402,5123,null);
				break;
			case 4:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.get_realWidth(),this.get_realHeight(),0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				break;
			case 5:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.get_realWidth(),this.get_realHeight(),0,kha_SystemImpl.gl2 ? 6403 : 6406,5126,null);
				break;
			case 6:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.get_realWidth(),this.get_realHeight(),0,kha_SystemImpl.gl2 ? 6403 : 6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				break;
			default:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_realWidth(),this.get_realHeight(),0,6408,5121,null);
			}
			if(this.format == 3) {
				kha_SystemImpl.gl.texParameteri(3553,10240,9728);
				kha_SystemImpl.gl.texParameteri(3553,10241,9728);
				kha_SystemImpl.gl.framebufferTexture2D(36160,36096,3553,this.texture,0);
				if(!kha_SystemImpl.gl2) {
					var colortex = kha_SystemImpl.gl.createTexture();
					kha_SystemImpl.gl.bindTexture(3553,colortex);
					kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_realWidth(),this.get_realHeight(),0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,3553,colortex,0);
					kha_SystemImpl.gl.bindTexture(3553,this.texture);
				}
			} else {
				if(this.samples > 1 && kha_SystemImpl.gl2) {
					this.MSAAFrameBuffer = kha_SystemImpl.gl.createFramebuffer();
					this.MSAAColorBuffer = kha_SystemImpl.gl.createRenderbuffer();
					kha_SystemImpl.gl.bindRenderbuffer(36161,this.MSAAColorBuffer);
					var MSAAFormat;
					switch(this.format) {
					case 0:
						MSAAFormat = kha_SystemImpl.gl.RGBA8;
						break;
					case 2:
						MSAAFormat = kha_SystemImpl.gl.RGBA32F;
						break;
					case 4:
						MSAAFormat = kha_SystemImpl.gl.RGBA16F;
						break;
					case 5:
						MSAAFormat = 33326;
						break;
					case 6:
						MSAAFormat = 33325;
						break;
					default:
						MSAAFormat = kha_SystemImpl.gl.RGBA8;
					}
					kha_SystemImpl.gl.renderbufferStorageMultisample(36161,this.samples,MSAAFormat,this.get_realWidth(),this.get_realHeight());
					kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
					kha_SystemImpl.gl.framebufferRenderbuffer(36160,36064,36161,this.MSAAColorBuffer);
					kha_SystemImpl.gl.bindFramebuffer(36160,this.MSAAFrameBuffer);
				}
				kha_SystemImpl.gl.framebufferTexture2D(36160,36064,3553,this.texture,0);
				kha_SystemImpl.gl.bindFramebuffer(36160,null);
			}
			this.initDepthStencilBuffer(this.depthStencilFormat);
			var e = kha_SystemImpl.gl.checkFramebufferStatus(36160);
			if(e != 36053) {
				haxe_Log.trace("checkframebufferStatus error " + e,{ fileName : "kha/WebGLImage.hx", lineNumber : 250, className : "kha.WebGLImage", methodName : "createTexture"});
			}
			kha_SystemImpl.gl.bindRenderbuffer(36161,null);
			kha_SystemImpl.gl.bindFramebuffer(36160,null);
		} else if(this.video != null) {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.video);
		} else {
			switch(this.format) {
			case 0:
				if(((this.image) instanceof Uint8Array)) {
					kha_SystemImpl.gl.texImage2D(3553,0,6408,this.myWidth,this.myHeight,0,6408,5121,this.image);
				} else {
					kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.image);
				}
				break;
			case 1:
				kha_SystemImpl.gl.texImage2D(3553,0,6409,this.myWidth,this.myHeight,0,6409,5121,this.image);
				break;
			case 2:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,this.image);
				break;
			case 4:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.image);
				break;
			case 5:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,kha_SystemImpl.gl2 ? 6403 : 6406,5126,this.image);
				break;
			case 6:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,kha_SystemImpl.gl2 ? 6403 : 6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.image);
				break;
			default:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.image);
			}
		}
		kha_SystemImpl.gl.bindTexture(3553,null);
	}
	,initDepthStencilBuffer: function(depthStencilFormat) {
		switch(depthStencilFormat) {
		case 0:
			break;
		case 1:case 5:
			if(kha_SystemImpl.depthTexture == null) {
				this.renderBuffer = kha_SystemImpl.gl.createRenderbuffer();
				kha_SystemImpl.gl.bindRenderbuffer(36161,this.renderBuffer);
				kha_SystemImpl.gl.renderbufferStorage(36161,33189,this.get_realWidth(),this.get_realHeight());
				kha_SystemImpl.gl.framebufferRenderbuffer(36160,36096,36161,this.renderBuffer);
			} else {
				this.depthTexture = kha_SystemImpl.gl.createTexture();
				kha_SystemImpl.gl.bindTexture(3553,this.depthTexture);
				if(depthStencilFormat == 1) {
					kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33190 : 6402,this.get_realWidth(),this.get_realHeight(),0,6402,5125,null);
				} else {
					kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.get_realWidth(),this.get_realHeight(),0,6402,5123,null);
				}
				kha_SystemImpl.gl.texParameteri(3553,10240,9728);
				kha_SystemImpl.gl.texParameteri(3553,10241,9728);
				kha_SystemImpl.gl.texParameteri(3553,10242,33071);
				kha_SystemImpl.gl.texParameteri(3553,10243,33071);
				kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
				if(this.samples > 1 && kha_SystemImpl.gl2) {
					this.MSAADepthBuffer = kha_SystemImpl.gl.createRenderbuffer();
					kha_SystemImpl.gl.bindRenderbuffer(36161,this.MSAADepthBuffer);
					if(depthStencilFormat == 1) {
						kha_SystemImpl.gl.renderbufferStorageMultisample(36161,this.samples,33190,this.get_realWidth(),this.get_realHeight());
					} else {
						kha_SystemImpl.gl.renderbufferStorageMultisample(36161,this.samples,33189,this.get_realWidth(),this.get_realHeight());
					}
					kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
					kha_SystemImpl.gl.framebufferRenderbuffer(36160,36096,36161,this.MSAADepthBuffer);
					kha_SystemImpl.gl.bindFramebuffer(36160,this.MSAAFrameBuffer);
				}
				kha_SystemImpl.gl.framebufferTexture2D(36160,36096,3553,this.depthTexture,0);
				kha_SystemImpl.gl.bindFramebuffer(36160,null);
			}
			break;
		case 2:case 3:case 4:
			if(kha_SystemImpl.depthTexture == null) {
				this.renderBuffer = kha_SystemImpl.gl.createRenderbuffer();
				kha_SystemImpl.gl.bindRenderbuffer(36161,this.renderBuffer);
				kha_SystemImpl.gl.renderbufferStorage(36161,34041,this.get_realWidth(),this.get_realHeight());
				kha_SystemImpl.gl.framebufferRenderbuffer(36160,33306,36161,this.renderBuffer);
			} else {
				this.depthTexture = kha_SystemImpl.gl.createTexture();
				kha_SystemImpl.gl.bindTexture(3553,this.depthTexture);
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 35056 : 34041,this.get_realWidth(),this.get_realHeight(),0,34041,kha_SystemImpl.depthTexture.UNSIGNED_INT_24_8_WEBGL,null);
				kha_SystemImpl.gl.texParameteri(3553,10240,9728);
				kha_SystemImpl.gl.texParameteri(3553,10241,9728);
				kha_SystemImpl.gl.texParameteri(3553,10242,33071);
				kha_SystemImpl.gl.texParameteri(3553,10243,33071);
				kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
				if(this.samples > 1 && kha_SystemImpl.gl2) {
					this.MSAADepthBuffer = kha_SystemImpl.gl.createRenderbuffer();
					kha_SystemImpl.gl.bindRenderbuffer(36161,this.MSAADepthBuffer);
					kha_SystemImpl.gl.renderbufferStorageMultisample(36161,this.samples,35056,this.get_realWidth(),this.get_realHeight());
					kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
					kha_SystemImpl.gl.framebufferRenderbuffer(36160,33306,36161,this.MSAADepthBuffer);
					kha_SystemImpl.gl.bindFramebuffer(36160,this.MSAAFrameBuffer);
				}
				kha_SystemImpl.gl.framebufferTexture2D(36160,33306,3553,this.depthTexture,0);
			}
			break;
		}
	}
	,set: function(stage) {
		kha_SystemImpl.gl.activeTexture(33984 + stage);
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		if(this.video != null) {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.video);
		}
	}
	,bytesToArray: function(bytes) {
		switch(this.format) {
		case 0:case 1:
			return new Uint8Array(bytes.b.bufferValue);
		case 2:case 4:case 5:case 6:
			return new Float32Array(bytes.b.bufferValue);
		default:
			return new Uint8Array(bytes.b.bufferValue);
		}
	}
	,bytes: null
	,lock: function(level) {
		if(level == null) {
			level = 0;
		}
		this.bytes = new haxe_io_Bytes(new ArrayBuffer(kha_WebGLImage.formatByteSize(this.format) * this.get_width() * this.get_height()));
		return this.bytes;
	}
	,unlock: function() {
		if(kha_SystemImpl.gl != null) {
			this.texture = kha_SystemImpl.gl.createTexture();
			kha_SystemImpl.gl.bindTexture(3553,this.texture);
			kha_SystemImpl.gl.texParameteri(3553,10240,9729);
			kha_SystemImpl.gl.texParameteri(3553,10241,9729);
			kha_SystemImpl.gl.texParameteri(3553,10242,33071);
			kha_SystemImpl.gl.texParameteri(3553,10243,33071);
			switch(this.format) {
			case 0:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_width(),this.get_height(),0,6408,5121,this.bytesToArray(this.bytes));
				break;
			case 1:
				kha_SystemImpl.gl.texImage2D(3553,0,6409,this.get_width(),this.get_height(),0,6409,5121,this.bytesToArray(this.bytes));
				if(kha_SystemImpl.gl.getError() == 1282) {
					var rgbaBytes = new haxe_io_Bytes(new ArrayBuffer(this.get_width() * this.get_height() * 4));
					var _g = 0;
					var _g1 = this.get_height();
					while(_g < _g1) {
						var y = _g++;
						var _g2 = 0;
						var _g11 = this.get_width();
						while(_g2 < _g11) {
							var x = _g2++;
							var value = this.bytes.b[y * this.get_width() + x];
							rgbaBytes.b[y * this.get_width() * 4 + x * 4] = value;
							rgbaBytes.b[y * this.get_width() * 4 + x * 4 + 1] = value;
							rgbaBytes.b[y * this.get_width() * 4 + x * 4 + 2] = value;
							rgbaBytes.b[y * this.get_width() * 4 + x * 4 + 3] = 255;
						}
					}
					kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_width(),this.get_height(),0,6408,5121,this.bytesToArray(rgbaBytes));
				}
				break;
			case 2:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.get_width(),this.get_height(),0,6408,5126,this.bytesToArray(this.bytes));
				break;
			case 4:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.get_width(),this.get_height(),0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.bytesToArray(this.bytes));
				break;
			case 5:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.get_width(),this.get_height(),0,kha_SystemImpl.gl2 ? 6403 : 6406,5126,this.bytesToArray(this.bytes));
				break;
			case 6:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.get_width(),this.get_height(),0,kha_SystemImpl.gl2 ? 6403 : 6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.bytesToArray(this.bytes));
				break;
			default:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_width(),this.get_height(),0,6408,5121,this.bytesToArray(this.bytes));
			}
			kha_SystemImpl.gl.bindTexture(3553,null);
			this.bytes = null;
		}
	}
	,__class__: kha_WebGLImage
});
var kha_Window = function(defaultWidth,defaultHeight,canvas) {
	this.canvas = canvas;
	this.defaultWidth = defaultWidth;
	this.defaultHeight = defaultHeight;
	kha_Window.windows.push(this);
};
$hxClasses["kha.Window"] = kha_Window;
kha_Window.__name__ = "kha.Window";
kha_Window.get = function(index) {
	return kha_Window.windows[index];
};
kha_Window.get_all = function() {
	return kha_Window.windows;
};
kha_Window.prototype = {
	canvas: null
	,defaultWidth: null
	,defaultHeight: null
	,get_width: function() {
		if(this.canvas.clientWidth == 0) {
			return this.defaultWidth;
		} else {
			return this.canvas.clientWidth;
		}
	}
	,get_height: function() {
		if(this.canvas.clientHeight == 0) {
			return this.defaultHeight;
		} else {
			return this.canvas.clientHeight;
		}
	}
	,get_vSynced: function() {
		return true;
	}
	,__class__: kha_Window
};
var kha_WindowOptions = function(title,x,y,width,height,display,visible,windowFeatures,mode) {
	if(mode == null) {
		mode = 0;
	}
	if(visible == null) {
		visible = true;
	}
	if(display == null) {
		display = -1;
	}
	if(height == null) {
		height = 600;
	}
	if(width == null) {
		width = 800;
	}
	if(y == null) {
		y = -1;
	}
	if(x == null) {
		x = -1;
	}
	this.mode = 0;
	this.windowFeatures = 1 | 4 | 2;
	this.visible = true;
	this.display = -1;
	this.height = 600;
	this.width = 800;
	this.y = -1;
	this.x = -1;
	this.title = null;
	this.title = title;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
	this.display = display;
	this.visible = visible;
	this.windowFeatures = windowFeatures == null ? 1 | 4 | 2 : windowFeatures;
	this.mode = mode;
};
$hxClasses["kha.WindowOptions"] = kha_WindowOptions;
kha_WindowOptions.__name__ = "kha.WindowOptions";
kha_WindowOptions.prototype = {
	title: null
	,x: null
	,y: null
	,width: null
	,height: null
	,display: null
	,visible: null
	,windowFeatures: null
	,mode: null
	,__class__: kha_WindowOptions
};
var kha_audio1_AudioChannel = function() { };
$hxClasses["kha.audio1.AudioChannel"] = kha_audio1_AudioChannel;
kha_audio1_AudioChannel.__name__ = "kha.audio1.AudioChannel";
kha_audio1_AudioChannel.__isInterface__ = true;
kha_audio1_AudioChannel.prototype = {
	play: null
	,pause: null
	,stop: null
	,get_position: null
	,set_position: null
	,get_volume: null
	,set_volume: null
	,finished: null
	,get_finished: null
	,__class__: kha_audio1_AudioChannel
};
var kha_internal_IntBox = function(value) {
	this.value = value;
};
$hxClasses["kha.internal.IntBox"] = kha_internal_IntBox;
kha_internal_IntBox.__name__ = "kha.internal.IntBox";
kha_internal_IntBox.prototype = {
	value: null
	,__class__: kha_internal_IntBox
};
var kha_audio2_Audio = function() { };
$hxClasses["kha.audio2.Audio"] = kha_audio2_Audio;
kha_audio2_Audio.__name__ = "kha.audio2.Audio";
kha_audio2_Audio.initContext = function() {
	try {
		kha_audio2_Audio._context = new AudioContext();
		return;
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
	}
	try {
		this._context = new webkitAudioContext();
		return;
	} catch( e2 ) {
		var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
	}
};
kha_audio2_Audio._init = function() {
	kha_audio2_Audio.initContext();
	if(kha_audio2_Audio._context == null) {
		return false;
	}
	kha_audio2_Audio.samplesPerSecond = Math.round(kha_audio2_Audio._context.sampleRate);
	kha_audio2_Audio.buffer = new kha_audio2_Buffer(8192,2,kha_audio2_Audio._context.sampleRate | 0);
	kha_audio2_Audio.processingNode = kha_audio2_Audio._context.createScriptProcessor(2048,0,2);
	kha_audio2_Audio.processingNode.onaudioprocess = function(e) {
		var output1 = e.outputBuffer.getChannelData(0);
		var output2 = e.outputBuffer.getChannelData(1);
		if(kha_audio2_Audio.audioCallback != null) {
			kha_audio2_Audio.intBox.value = e.outputBuffer.length * 2;
			kha_audio2_Audio.audioCallback(kha_audio2_Audio.intBox,kha_audio2_Audio.buffer);
			var _g = 0;
			var _g1 = e.outputBuffer.length;
			while(_g < _g1) {
				var i = _g++;
				output1[i] = kha_audio2_Audio.buffer.data[kha_audio2_Audio.buffer.readLocation];
				kha_audio2_Audio.buffer.readLocation += 1;
				output2[i] = kha_audio2_Audio.buffer.data[kha_audio2_Audio.buffer.readLocation];
				kha_audio2_Audio.buffer.readLocation += 1;
				if(kha_audio2_Audio.buffer.readLocation >= kha_audio2_Audio.buffer.size) {
					kha_audio2_Audio.buffer.readLocation = 0;
				}
			}
		} else {
			var _g2 = 0;
			var _g11 = e.outputBuffer.length;
			while(_g2 < _g11) {
				var i1 = _g2++;
				output1[i1] = 0;
				output2[i1] = 0;
			}
		}
	};
	kha_audio2_Audio.processingNode.connect(kha_audio2_Audio._context.destination);
	return true;
};
kha_audio2_Audio.wakeChannels = function() {
	kha_SystemImpl.mobileAudioPlaying = true;
	var _g = 0;
	var _g1 = kha_audio2_Audio.virtualChannels;
	while(_g < _g1.length) _g1[_g++].wake();
};
kha_audio2_Audio.stream = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	var element = window.document.createElement("audio");
	element.src = URL.createObjectURL(new Blob([sound.compressedData.b.bufferValue],{ type : "audio/mp4"}));
	element.loop = loop;
	var channel = new kha_js_AEAudioChannel(element,loop);
	if(kha_SystemImpl.mobileAudioPlaying) {
		channel.play();
		return channel;
	} else {
		var virtualChannel = new kha_audio2_VirtualStreamChannel(channel,loop);
		kha_audio2_Audio.virtualChannels.push(virtualChannel);
		return virtualChannel;
	}
};
var kha_audio2_Audio1 = function() { };
$hxClasses["kha.audio2.Audio1"] = kha_audio2_Audio1;
kha_audio2_Audio1.__name__ = "kha.audio2.Audio1";
kha_audio2_Audio1._init = function() {
	kha_audio2_Audio1.soundChannels = new Array(32);
	kha_audio2_Audio1.streamChannels = new Array(32);
	kha_audio2_Audio1.internalSoundChannels = new Array(32);
	kha_audio2_Audio1.internalStreamChannels = new Array(32);
	kha_audio2_Audio1.sampleCache1 = new Float32Array(512);
	kha_audio2_Audio1.sampleCache2 = new Float32Array(512);
	kha_audio2_Audio1.lastAllocationCount = 0;
	kha_audio2_Audio.audioCallback = kha_audio2_Audio1.mix;
};
kha_audio2_Audio1.mix = function(samplesBox,buffer) {
	var samples = samplesBox.value;
	if(kha_audio2_Audio1.sampleCache1.length < samples) {
		if(kha_audio2_Audio.disableGcInteractions) {
			haxe_Log.trace("Unexpected allocation request in audio thread.",{ fileName : "kha/audio2/Audio1.hx", lineNumber : 50, className : "kha.audio2.Audio1", methodName : "mix"});
			var _g = 0;
			while(_g < samples) {
				++_g;
				buffer.data[buffer.writeLocation] = 0;
				buffer.writeLocation += 1;
				if(buffer.writeLocation >= buffer.size) {
					buffer.writeLocation = 0;
				}
			}
			kha_audio2_Audio1.lastAllocationCount = 0;
			kha_audio2_Audio.disableGcInteractions = false;
			return;
		}
		kha_audio2_Audio1.sampleCache1 = new Float32Array(samples * 2);
		kha_audio2_Audio1.sampleCache2 = new Float32Array(samples * 2);
		kha_audio2_Audio1.lastAllocationCount = 0;
	} else if(kha_audio2_Audio1.lastAllocationCount > 100) {
		kha_audio2_Audio.disableGcInteractions = true;
	} else {
		kha_audio2_Audio1.lastAllocationCount += 1;
	}
	var _g1 = 0;
	while(_g1 < samples) kha_audio2_Audio1.sampleCache2[_g1++] = 0;
	var _g2 = 0;
	while(_g2 < 32) {
		var i = _g2++;
		kha_audio2_Audio1.internalSoundChannels[i] = kha_audio2_Audio1.soundChannels[i];
	}
	var _g3 = 0;
	while(_g3 < 32) {
		var i1 = _g3++;
		kha_audio2_Audio1.internalStreamChannels[i1] = kha_audio2_Audio1.streamChannels[i1];
	}
	var _g4 = 0;
	var _g5 = kha_audio2_Audio1.internalSoundChannels;
	while(_g4 < _g5.length) {
		var channel = _g5[_g4];
		++_g4;
		if(channel == null || channel.get_finished()) {
			continue;
		}
		channel.nextSamples(kha_audio2_Audio1.sampleCache1,samples,buffer.samplesPerSecond);
		var _g51 = 0;
		while(_g51 < samples) {
			var i2 = _g51++;
			kha_audio2_Audio1.sampleCache2[i2] += kha_audio2_Audio1.sampleCache1[i2] * channel.get_volume();
		}
	}
	var _g6 = 0;
	var _g7 = kha_audio2_Audio1.internalStreamChannels;
	while(_g6 < _g7.length) {
		var channel1 = _g7[_g6];
		++_g6;
		if(channel1 == null || channel1.get_finished()) {
			continue;
		}
		channel1.nextSamples(kha_audio2_Audio1.sampleCache1,samples,buffer.samplesPerSecond);
		var _g71 = 0;
		while(_g71 < samples) {
			var i3 = _g71++;
			kha_audio2_Audio1.sampleCache2[i3] += kha_audio2_Audio1.sampleCache1[i3] * channel1.get_volume();
		}
	}
	var _g8 = 0;
	while(_g8 < samples) {
		var a = kha_audio2_Audio1.sampleCache2[_g8++];
		var a1 = a < 1.0 ? a : 1.0;
		buffer.data[buffer.writeLocation] = a1 > -1.0 ? a1 : -1.0;
		buffer.writeLocation += 1;
		if(buffer.writeLocation >= buffer.size) {
			buffer.writeLocation = 0;
		}
	}
};
kha_audio2_Audio1.play = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	var channel = null;
	if(kha_audio2_Audio.samplesPerSecond != sound.sampleRate) {
		channel = new kha_audio2_ResamplingAudioChannel(loop,sound.sampleRate);
	} else {
		channel = new kha_audio2_AudioChannel(loop);
	}
	channel.data = sound.uncompressedData;
	var foundChannel = false;
	var _g = 0;
	while(_g < 32) {
		var i = _g++;
		if(kha_audio2_Audio1.soundChannels[i] == null || kha_audio2_Audio1.soundChannels[i].get_finished()) {
			kha_audio2_Audio1.soundChannels[i] = channel;
			foundChannel = true;
			break;
		}
	}
	if(foundChannel) {
		return channel;
	} else {
		return null;
	}
};
kha_audio2_Audio1._playAgain = function(channel) {
	var _g = 0;
	while(_g < 32) {
		var i = _g++;
		if(kha_audio2_Audio1.soundChannels[i] == channel) {
			kha_audio2_Audio1.soundChannels[i] = null;
		}
	}
	var _g1 = 0;
	while(_g1 < 32) {
		var i1 = _g1++;
		if(kha_audio2_Audio1.soundChannels[i1] == null || kha_audio2_Audio1.soundChannels[i1].get_finished() || kha_audio2_Audio1.soundChannels[i1] == channel) {
			kha_audio2_Audio1.soundChannels[i1] = channel;
			break;
		}
	}
};
kha_audio2_Audio1.stream = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	var hardwareChannel = kha_audio2_Audio.stream(sound,loop);
	if(hardwareChannel != null) {
		return hardwareChannel;
	}
	var channel = new kha_audio2_StreamChannel(sound.compressedData,loop);
	var foundChannel = false;
	var _g = 0;
	while(_g < 32) {
		var i = _g++;
		if(kha_audio2_Audio1.streamChannels[i] == null || kha_audio2_Audio1.streamChannels[i].get_finished()) {
			kha_audio2_Audio1.streamChannels[i] = channel;
			foundChannel = true;
			break;
		}
	}
	if(foundChannel) {
		return channel;
	} else {
		return null;
	}
};
var kha_audio2_AudioChannel = function(looping) {
	this.looping = false;
	this.stopped = false;
	this.paused = false;
	this.myPosition = 0;
	this.myVolume = 1;
	this.data = null;
	this.looping = looping;
};
$hxClasses["kha.audio2.AudioChannel"] = kha_audio2_AudioChannel;
kha_audio2_AudioChannel.__name__ = "kha.audio2.AudioChannel";
kha_audio2_AudioChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_audio2_AudioChannel.prototype = {
	data: null
	,myVolume: null
	,myPosition: null
	,paused: null
	,stopped: null
	,looping: null
	,nextSamples: function(requestedSamples,requestedLength,sampleRate) {
		if(this.paused || this.stopped) {
			var _g = 0;
			while(_g < requestedLength) requestedSamples[_g++] = 0;
			return;
		}
		var requestedSamplesIndex = 0;
		while(requestedSamplesIndex < requestedLength) {
			var _g1 = 0;
			var a = this.data.length - this.myPosition;
			var b = requestedLength - requestedSamplesIndex;
			var _g11 = a < b ? a : b;
			while(_g1 < _g11) {
				++_g1;
				requestedSamples[requestedSamplesIndex++] = this.data[this.myPosition++];
			}
			if(this.myPosition >= this.data.length) {
				this.myPosition = 0;
				if(!this.looping) {
					this.stopped = true;
					break;
				}
			}
		}
		while(requestedSamplesIndex < requestedLength) requestedSamples[requestedSamplesIndex++] = 0;
	}
	,play: function() {
		this.paused = false;
		this.stopped = false;
		kha_audio2_Audio1._playAgain(this);
	}
	,pause: function() {
		this.paused = true;
	}
	,stop: function() {
		this.myPosition = 0;
		this.stopped = true;
	}
	,get_position: function() {
		return this.myPosition / kha_audio2_Audio.samplesPerSecond / 2;
	}
	,set_position: function(value) {
		this.myPosition = Math.round(value * kha_audio2_Audio.samplesPerSecond * 2);
		var a = this.myPosition;
		var b = this.data.length;
		var a1 = a < b ? a : b;
		this.myPosition = a1 > 0 ? a1 : 0;
		return value;
	}
	,get_volume: function() {
		return this.myVolume;
	}
	,set_volume: function(value) {
		return this.myVolume = value;
	}
	,finished: null
	,get_finished: function() {
		return this.stopped;
	}
	,__class__: kha_audio2_AudioChannel
};
var kha_audio2_Buffer = function(size,channels,samplesPerSecond) {
	this.size = size;
	this.data = new Float32Array(size);
	this.channels = channels;
	this.samplesPerSecond = samplesPerSecond;
	this.readLocation = 0;
	this.writeLocation = 0;
};
$hxClasses["kha.audio2.Buffer"] = kha_audio2_Buffer;
kha_audio2_Buffer.__name__ = "kha.audio2.Buffer";
kha_audio2_Buffer.prototype = {
	channels: null
	,samplesPerSecond: null
	,data: null
	,size: null
	,readLocation: null
	,writeLocation: null
	,__class__: kha_audio2_Buffer
};
var kha_audio2_ResamplingAudioChannel = function(looping,sampleRate) {
	kha_audio2_AudioChannel.call(this,looping);
	this.sampleRate = sampleRate;
};
$hxClasses["kha.audio2.ResamplingAudioChannel"] = kha_audio2_ResamplingAudioChannel;
kha_audio2_ResamplingAudioChannel.__name__ = "kha.audio2.ResamplingAudioChannel";
kha_audio2_ResamplingAudioChannel.__super__ = kha_audio2_AudioChannel;
kha_audio2_ResamplingAudioChannel.prototype = $extend(kha_audio2_AudioChannel.prototype,{
	sampleRate: null
	,nextSamples: function(requestedSamples,requestedLength,sampleRate) {
		if(this.paused || this.stopped) {
			var _g = 0;
			while(_g < requestedLength) requestedSamples[_g++] = 0;
			return;
		}
		var requestedSamplesIndex = 0;
		while(requestedSamplesIndex < requestedLength) {
			var _g1 = 0;
			var value = Math.ceil(this.data.length * (sampleRate / this.sampleRate));
			var a = (value % 2 == 0 ? value : value + 1) - this.myPosition;
			var b = requestedLength - requestedSamplesIndex;
			var _g11 = a < b ? a : b;
			while(_g1 < _g11) {
				++_g1;
				var index = requestedSamplesIndex++;
				var position = this.myPosition++;
				var factor = this.sampleRate / sampleRate;
				var value1;
				if(position % 2 == 0) {
					position = position / 2 | 0;
					var pos = factor * position;
					var pos1 = Math.floor(pos);
					var pos2 = Math.floor(pos + 1);
					pos1 *= 2;
					pos2 *= 2;
					var maximum = this.data.length - 1;
					if(maximum % 2 == 0) {
						maximum = maximum;
					} else {
						--maximum;
					}
					var t = pos - Math.floor(pos);
					value1 = (1 - t) * (pos1 < 0 || pos1 > maximum ? 0 : this.data[pos1]) + t * (pos2 < 0 || pos2 > maximum ? 0 : this.data[pos2]);
				} else {
					position = position / 2 | 0;
					var pos3 = factor * position;
					var pos11 = Math.floor(pos3);
					var pos21 = Math.floor(pos3 + 1);
					pos11 = pos11 * 2 + 1;
					pos21 = pos21 * 2 + 1;
					var maximum1 = this.data.length - 1;
					if(maximum1 % 2 != 0) {
						maximum1 = maximum1;
					} else {
						--maximum1;
					}
					var t1 = pos3 - Math.floor(pos3);
					value1 = (1 - t1) * (pos11 < 1 || pos11 > maximum1 ? 0 : this.data[pos11]) + t1 * (pos21 < 1 || pos21 > maximum1 ? 0 : this.data[pos21]);
				}
				requestedSamples[index] = value1;
			}
			var value2 = Math.ceil(this.data.length * (sampleRate / this.sampleRate));
			if(this.myPosition >= (value2 % 2 == 0 ? value2 : value2 + 1)) {
				this.myPosition = 0;
				if(!this.looping) {
					this.stopped = true;
					break;
				}
			}
		}
		while(requestedSamplesIndex < requestedLength) requestedSamples[requestedSamplesIndex++] = 0;
	}
	,play: function() {
		this.paused = false;
		this.stopped = false;
		kha_audio2_Audio1._playAgain(this);
	}
	,pause: function() {
		this.paused = true;
	}
	,stop: function() {
		this.myPosition = 0;
		this.stopped = true;
	}
	,get_position: function() {
		return this.myPosition / kha_audio2_Audio.samplesPerSecond / 2;
	}
	,set_position: function(value) {
		var pos = Math.round(value * kha_audio2_Audio.samplesPerSecond * 2.0);
		if(pos % 2 == 0) {
			pos = pos;
		} else {
			++pos;
		}
		var value1 = Math.ceil(this.data.length * (kha_audio2_Audio.samplesPerSecond / this.sampleRate));
		var b = value1 % 2 == 0 ? value1 : value1 + 1;
		var a = pos < b ? pos : b;
		this.myPosition = a > 0 ? a : 0;
		return value;
	}
	,get_volume: function() {
		return this.myVolume;
	}
	,set_volume: function(value) {
		return this.myVolume = value;
	}
	,get_finished: function() {
		return this.stopped;
	}
	,__class__: kha_audio2_ResamplingAudioChannel
});
var kha_audio2_StreamChannel = function(data,loop) {
	this.paused = false;
	this.atend = false;
	this.myVolume = 1;
	this.loop = loop;
	this.reader = kha_audio2_ogg_vorbis_Reader.openFromBytes(data);
};
$hxClasses["kha.audio2.StreamChannel"] = kha_audio2_StreamChannel;
kha_audio2_StreamChannel.__name__ = "kha.audio2.StreamChannel";
kha_audio2_StreamChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_audio2_StreamChannel.prototype = {
	reader: null
	,atend: null
	,loop: null
	,myVolume: null
	,paused: null
	,nextSamples: function(samples,length,sampleRate) {
		if(this.paused) {
			var _g = 0;
			while(_g < length) samples[_g++] = 0;
			return;
		}
		var count = this.reader.read(samples,length / 2 | 0,2,sampleRate,true) * 2;
		if(count < length) {
			if(this.loop) {
				this.reader.set_currentMillisecond(0);
			} else {
				this.atend = true;
			}
			var _g1 = count;
			while(_g1 < length) samples[_g1++] = 0;
		}
	}
	,play: function() {
		this.paused = false;
	}
	,pause: function() {
		this.paused = true;
	}
	,stop: function() {
		this.atend = true;
	}
	,get_position: function() {
		return this.reader.get_currentMillisecond() / 1000.0;
	}
	,set_position: function(value) {
		return value;
	}
	,get_volume: function() {
		return this.myVolume;
	}
	,set_volume: function(value) {
		return this.myVolume = value;
	}
	,finished: null
	,get_finished: function() {
		return this.atend;
	}
	,__class__: kha_audio2_StreamChannel
};
var kha_audio2_VirtualStreamChannel = function(aeChannel,looping) {
	this.mode = 2;
	this.aeChannel = aeChannel;
	this.looping = looping;
	this.lastTickTime = kha_Scheduler.realTime();
	this.lastPosition = 0;
};
$hxClasses["kha.audio2.VirtualStreamChannel"] = kha_audio2_VirtualStreamChannel;
kha_audio2_VirtualStreamChannel.__name__ = "kha.audio2.VirtualStreamChannel";
kha_audio2_VirtualStreamChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_audio2_VirtualStreamChannel.prototype = {
	aeChannel: null
	,mode: null
	,lastTickTime: null
	,lastPosition: null
	,looping: null
	,wake: function() {
		this.updatePosition();
		this.aeChannel.set_position(this.lastPosition);
		this.aeChannel.play();
	}
	,updatePosition: function() {
		var now = kha_Scheduler.realTime();
		switch(this.mode) {
		case 0:
			this.lastPosition = 0;
			break;
		case 1:
			break;
		case 2:
			this.lastPosition += now - this.lastTickTime;
			while(this.lastPosition > this.get_length()) this.lastPosition -= this.get_length();
			break;
		}
		this.lastTickTime = now;
	}
	,play: function() {
		if(kha_SystemImpl.mobileAudioPlaying) {
			this.aeChannel.play();
		} else {
			this.updatePosition();
			this.mode = 2;
		}
	}
	,pause: function() {
		if(kha_SystemImpl.mobileAudioPlaying) {
			this.aeChannel.pause();
		} else {
			this.updatePosition();
			this.mode = 1;
		}
	}
	,stop: function() {
		if(kha_SystemImpl.mobileAudioPlaying) {
			this.aeChannel.stop();
		} else {
			this.updatePosition();
			this.mode = 0;
		}
	}
	,length: null
	,get_length: function() {
		return this.aeChannel.get_length();
	}
	,get_position: function() {
		if(kha_SystemImpl.mobileAudioPlaying) {
			return this.aeChannel.get_position();
		} else {
			this.updatePosition();
			return this.lastPosition;
		}
	}
	,set_position: function(value) {
		if(kha_SystemImpl.mobileAudioPlaying) {
			return this.aeChannel.set_position(value);
		} else {
			this.updatePosition();
			return this.lastPosition = value;
		}
	}
	,get_volume: function() {
		return this.aeChannel.get_volume();
	}
	,set_volume: function(value) {
		return this.aeChannel.set_volume(value);
	}
	,finished: null
	,get_finished: function() {
		if(kha_SystemImpl.mobileAudioPlaying) {
			return this.aeChannel.get_finished();
		} else if(this.mode != 0) {
			if(!this.looping) {
				return this.get_position() >= this.get_length();
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__class__: kha_audio2_VirtualStreamChannel
};
var kha_audio2_ogg_tools_Crc32 = function() { };
$hxClasses["kha.audio2.ogg.tools.Crc32"] = kha_audio2_ogg_tools_Crc32;
kha_audio2_ogg_tools_Crc32.__name__ = "kha.audio2.ogg.tools.Crc32";
kha_audio2_ogg_tools_Crc32.init = function() {
	if(kha_audio2_ogg_tools_Crc32.table != null) {
		return;
	}
	kha_audio2_ogg_tools_Crc32.table = new Array(256);
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		var s = i << 24;
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		kha_audio2_ogg_tools_Crc32.table[i] = s;
	}
};
var kha_audio2_ogg_vorbis_Reader = function(input,seekFunc,inputLength) {
	this.seekFunc = seekFunc;
	this.inputLength = inputLength;
	this.decoder = kha_audio2_ogg_vorbis_VorbisDecoder.start(input);
	this.decoder.setupSampleNumber(seekFunc,inputLength);
	this.loopStart = this.get_header().comment.get_loopStart();
	this.loopLength = this.get_header().comment.get_loopLength();
};
$hxClasses["kha.audio2.ogg.vorbis.Reader"] = kha_audio2_ogg_vorbis_Reader;
kha_audio2_ogg_vorbis_Reader.__name__ = "kha.audio2.ogg.vorbis.Reader";
kha_audio2_ogg_vorbis_Reader.openFromBytes = function(bytes) {
	var input = new haxe_io_BytesInput(bytes);
	var bytes1 = input;
	return new kha_audio2_ogg_vorbis_Reader(input,function(pos) {
		kha_audio2_ogg_vorbis_Reader.seekBytes(bytes1,pos);
	},bytes.length);
};
kha_audio2_ogg_vorbis_Reader.seekBytes = function(bytes,pos) {
	bytes.set_position(pos);
};
kha_audio2_ogg_vorbis_Reader.readAll = function(bytes,output,useFloat) {
	if(useFloat == null) {
		useFloat = false;
	}
	var input = new haxe_io_BytesInput(bytes);
	var decoder = kha_audio2_ogg_vorbis_VorbisDecoder.start(input);
	var bytes1 = input;
	decoder.setupSampleNumber(function(pos) {
		kha_audio2_ogg_vorbis_Reader.seekBytes(bytes1,pos);
	},bytes.length);
	var header = decoder.header;
	var buffer = new Float32Array(4096 * header.channel);
	while(true) {
		var n = decoder.read(buffer,4096,header.channel,header.sampleRate,useFloat);
		var _g = 0;
		var _g1 = n * header.channel;
		while(_g < _g1) output.writeFloat(buffer[_g++]);
		if(n == 0) {
			break;
		}
	}
	return decoder.header;
};
kha_audio2_ogg_vorbis_Reader.prototype = {
	decoder: null
	,get_header: function() {
		return this.decoder.header;
	}
	,get_currentSample: function() {
		return this.decoder.currentSample;
	}
	,set_currentSample: function(value) {
		this.decoder.seek(this.seekFunc,this.inputLength,value);
		return this.decoder.currentSample;
	}
	,get_currentMillisecond: function() {
		return _$UInt_UInt_$Impl_$.toFloat(this.get_currentSample()) / _$UInt_UInt_$Impl_$.toFloat(this.get_header().sampleRate) * 1000;
	}
	,set_currentMillisecond: function(value) {
		this.set_currentSample(Math.floor(_$UInt_UInt_$Impl_$.toFloat(this.get_header().sampleRate) * (value / 1000)));
		return this.get_currentMillisecond();
	}
	,loopStart: null
	,loopLength: null
	,seekFunc: null
	,inputLength: null
	,read: function(output,samples,channels,sampleRate,useFloat) {
		if(useFloat == null) {
			useFloat = false;
		}
		this.decoder.ensurePosition(this.seekFunc);
		if(samples == null) {
			samples = this.decoder.totalSample;
		}
		if(channels == null) {
			channels = this.get_header().channel;
		}
		if(sampleRate == null) {
			sampleRate = this.get_header().sampleRate;
		}
		return this.decoder.read(output,samples,channels,sampleRate,useFloat);
	}
	,__class__: kha_audio2_ogg_vorbis_Reader
};
var kha_audio2_ogg_vorbis_VorbisDecodeState = function(input) {
	this.nextSeg = 0;
	this.firstDecode = false;
	this.bytesInSeg = 0;
	this.validBits = 0;
	this.input = input;
	this.inputPosition = 0;
	this.page = new kha_audio2_ogg_vorbis_data_Page();
	kha_audio2_ogg_tools_Crc32.init();
};
$hxClasses["kha.audio2.ogg.vorbis.VorbisDecodeState"] = kha_audio2_ogg_vorbis_VorbisDecodeState;
kha_audio2_ogg_vorbis_VorbisDecodeState.__name__ = "kha.audio2.ogg.vorbis.VorbisDecodeState";
kha_audio2_ogg_vorbis_VorbisDecodeState.prototype = {
	page: null
	,eof: null
	,pFirst: null
	,pLast: null
	,validBits: null
	,inputPosition: null
	,input: null
	,discardSamplesDeferred: null
	,segments: null
	,bytesInSeg: null
	,firstDecode: null
	,nextSeg: null
	,acc: null
	,lastSeg: null
	,lastSegWhich: null
	,endSegWithKnownLoc: null
	,knownLocForPacket: null
	,error: null
	,currentLoc: null
	,currentLocValid: null
	,firstAudioPageOffset: null
	,setup: function(loc0,loc1) {
		this.inputPosition += 1;
		var segmentCount = this.input.readByte();
		this.inputPosition += segmentCount;
		var vec = new Array(segmentCount);
		var _g = 0;
		while(_g < segmentCount) vec[_g++] = this.input.readByte();
		this.segments = vec;
		this.endSegWithKnownLoc = -2;
		if(loc0 != -1 || loc1 != -1) {
			var i = segmentCount - 1;
			while(i >= 0) {
				if(this.segments[i] < 255) {
					break;
				}
				if(i >= 0) {
					this.endSegWithKnownLoc = i;
					this.knownLocForPacket = loc0;
				}
				--i;
			}
		}
		if(this.firstDecode) {
			var len = 0;
			var p = new kha_audio2_ogg_vorbis_data_ProbedPage();
			var _g1 = 0;
			while(_g1 < segmentCount) len += this.segments[_g1++];
			len += 27 + segmentCount;
			p.pageStart = this.firstAudioPageOffset;
			p.pageEnd = p.pageStart + len;
			p.firstDecodedSample = 0;
			p.lastDecodedSample = loc0;
			this.pFirst = p;
		}
		this.nextSeg = 0;
	}
	,clone: function(seekFunc) {
		var state = Object.create(kha_audio2_ogg_vorbis_VorbisDecodeState.prototype);
		seekFunc(this.inputPosition);
		state.input = this.input;
		state.eof = this.eof;
		state.validBits = this.validBits;
		state.discardSamplesDeferred = this.discardSamplesDeferred;
		state.firstDecode = this.firstDecode;
		state.nextSeg = this.nextSeg;
		state.bytesInSeg = this.bytesInSeg;
		state.acc = state.acc;
		state.lastSeg = this.lastSeg;
		state.lastSegWhich = this.lastSegWhich;
		state.currentLoc = this.currentLoc;
		state.currentLocValid = this.currentLocValid;
		state.inputPosition = this.inputPosition;
		state.firstAudioPageOffset = this.firstAudioPageOffset;
		state.error = this.error;
		state.segments = this.segments;
		state.pFirst = this.pFirst;
		state.pLast = this.pLast;
		state.page = this.page.clone();
		return state;
	}
	,next: function() {
		if(this.lastSeg) {
			return 0;
		}
		if(this.nextSeg == -1) {
			this.lastSegWhich = this.segments.length - 1;
			try {
				this.page.start(this);
			} catch( e ) {
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				if(((e1) instanceof kha_audio2_ogg_vorbis_data_ReaderError)) {
					this.lastSeg = true;
					this.error = e1;
					return 0;
				} else {
					throw e;
				}
			}
			if((this.page.flag & 1) == 0) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.CONTINUED_PACKET_FLAG_INVALID,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 171, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "next"}));
			}
		}
		var len = this.segments[this.nextSeg++];
		if(len < 255) {
			this.lastSeg = true;
			this.lastSegWhich = this.nextSeg - 1;
		}
		if(this.nextSeg >= this.segments.length) {
			this.nextSeg = -1;
		}
		this.bytesInSeg = len;
		return len;
	}
	,startPacket: function() {
		while(this.nextSeg == -1) {
			this.page.start(this);
			if((this.page.flag & 1) != 0) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 193, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "startPacket"}));
			}
		}
		this.lastSeg = false;
		this.validBits = 0;
		this.bytesInSeg = 0;
	}
	,maybeStartPacket: function() {
		if(this.nextSeg == -1) {
			var eof = false;
			var x;
			try {
				this.inputPosition += 1;
				x = this.input.readByte();
			} catch( e ) {
				if(((((e) instanceof js__$Boot_HaxeError) ? e.val : e) instanceof haxe_io_Eof)) {
					eof = true;
					x = 0;
				} else {
					throw e;
				}
			}
			if(eof) {
				return false;
			}
			var tmp;
			var tmp1;
			var tmp2;
			if(x == 79) {
				this.inputPosition += 1;
				tmp2 = this.input.readByte() != 103;
			} else {
				tmp2 = true;
			}
			if(!tmp2) {
				this.inputPosition += 1;
				tmp1 = this.input.readByte() != 103;
			} else {
				tmp1 = true;
			}
			if(!tmp1) {
				this.inputPosition += 1;
				tmp = this.input.readByte() != 83;
			} else {
				tmp = true;
			}
			if(tmp) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 218, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "maybeStartPacket"}));
			}
			this.page.startWithoutCapturePattern(this);
		}
		this.startPacket();
		return true;
	}
	,readBits: function(n) {
		if(this.validBits < 0) {
			return 0;
		} else if(this.validBits < n) {
			if(n > 24) {
				return this.readBits(24) + (this.readBits(n - 24) << 24);
			} else {
				if(this.validBits == 0) {
					this.acc = 0;
				}
				while(true) {
					if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
						this.validBits = -1;
						break;
					} else {
						this.bytesInSeg--;
						this.inputPosition += 1;
						this.acc = this.acc + (this.input.readByte() << this.validBits);
						this.validBits += 8;
					}
					if(!(this.validBits < n)) {
						break;
					}
				}
				if(this.validBits < 0) {
					return 0;
				} else {
					var z = this.acc & (1 << n) - 1;
					this.acc = this.acc >>> n;
					this.validBits -= n;
					return z;
				}
			}
		} else {
			var z1 = this.acc & (1 << n) - 1;
			this.acc = this.acc >>> n;
			this.validBits -= n;
			return z1;
		}
	}
	,firstPageValidate: function() {
		if(this.segments.length != 1) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"segmentCount",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 308, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "firstPageValidate"}));
		}
		if(this.segments[0] != 30) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"decodeState head",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 311, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "firstPageValidate"}));
		}
	}
	,startFirstDecode: function() {
		this.firstAudioPageOffset = this.inputPosition;
		this.firstDecode = true;
	}
	,prepHuffman: function() {
		if(this.validBits <= 24) {
			if(this.validBits == 0) {
				this.acc = 0;
			}
			while(true) {
				if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
					return;
				} else {
					this.bytesInSeg--;
					this.inputPosition += 1;
					this.acc = this.acc + (this.input.readByte() << this.validBits);
					this.validBits += 8;
				}
				if(!(this.validBits <= 24)) {
					break;
				}
			}
		}
	}
	,finishDecodePacket: function(previousLength,n,r) {
		var left = r.left.start;
		var currentLocValid = false;
		var n2 = n >> 1;
		if(this.firstDecode) {
			this.currentLoc = -n2;
			this.discardSamplesDeferred = n - r.right.end;
			currentLocValid = true;
			this.firstDecode = false;
		} else if(this.discardSamplesDeferred != 0) {
			r.left.start += this.discardSamplesDeferred;
			left = r.left.start;
			this.discardSamplesDeferred = 0;
		}
		if(this.lastSegWhich == this.endSegWithKnownLoc) {
			if(currentLocValid && (this.page.flag & 4) != 0) {
				var currentEnd = this.knownLocForPacket - (n - r.right.end);
				if(currentEnd < this.currentLoc + r.right.end) {
					var len = currentEnd < this.currentLoc ? 0 : currentEnd - this.currentLoc;
					len += r.left.start;
					this.currentLoc += len;
					return { len : len, left : left, right : r.right.start};
				}
			}
			this.currentLoc = this.knownLocForPacket - (n2 - r.left.start);
			currentLocValid = true;
		}
		if(currentLocValid) {
			this.currentLoc += r.right.start - r.left.start;
		}
		return { len : r.right.end, left : left, right : r.right.start};
	}
	,getSampleNumber: function(seekFunc,inputLength) {
		var restoreOffset = this.inputPosition;
		var previousSafe = _$UInt_UInt_$Impl_$.gte(inputLength,65536) && _$UInt_UInt_$Impl_$.gte(inputLength - 65536,this.firstAudioPageOffset) ? inputLength - 65536 : this.firstAudioPageOffset;
		seekFunc(this.inputPosition = previousSafe);
		var end = 0;
		var last = false;
		var _g = this.findPage(seekFunc,inputLength);
		switch(_g._hx_index) {
		case 0:
			end = _g.end;
			last = _g.last;
			break;
		case 1:
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 519, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "getSampleNumber"}));
		}
		var lastPageLoc = this.inputPosition;
		_hx_loop1: while(!last) {
			seekFunc(this.inputPosition = end);
			var _g3 = this.findPage(seekFunc,inputLength);
			switch(_g3._hx_index) {
			case 0:
				end = _g3.end;
				last = _g3.last;
				break;
			case 1:
				break _hx_loop1;
			}
			previousSafe = lastPageLoc + 1;
			lastPageLoc = this.inputPosition;
		}
		seekFunc(this.inputPosition = lastPageLoc);
		this.inputPosition += 6;
		var vec = new Array(6);
		var _g1 = 0;
		while(_g1 < 6) vec[_g1++] = this.input.readByte();
		this.inputPosition += 4;
		var lo = this.input.readInt32();
		this.inputPosition += 4;
		var hi = this.input.readInt32();
		if(lo == -1 && hi == -1 || hi > 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 553, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "getSampleNumber"}));
		}
		this.pLast = new kha_audio2_ogg_vorbis_data_ProbedPage();
		this.pLast.pageStart = lastPageLoc;
		this.pLast.pageEnd = end;
		this.pLast.lastDecodedSample = lo;
		this.pLast.firstDecodedSample = null;
		this.pLast.afterPreviousPageStart = previousSafe;
		seekFunc(this.inputPosition = restoreOffset);
		return lo;
	}
	,findPage: function(seekFunc,inputLength) {
		try {
			while(true) {
				this.inputPosition += 1;
				if(this.input.readByte() == 79) {
					var retryLoc = this.inputPosition;
					if(retryLoc - 25 > inputLength) {
						return kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.NotFound;
					}
					var tmp;
					var tmp1;
					this.inputPosition += 1;
					if(this.input.readByte() == 103) {
						this.inputPosition += 1;
						tmp1 = this.input.readByte() != 103;
					} else {
						tmp1 = true;
					}
					if(!tmp1) {
						this.inputPosition += 1;
						tmp = this.input.readByte() != 83;
					} else {
						tmp = true;
					}
					if(tmp) {
						continue;
					}
					var header = new Array(27);
					header[0] = 79;
					header[1] = 103;
					header[2] = 103;
					header[3] = 83;
					this.inputPosition += 1;
					header[4] = this.input.readByte();
					this.inputPosition += 1;
					header[5] = this.input.readByte();
					this.inputPosition += 1;
					header[6] = this.input.readByte();
					this.inputPosition += 1;
					header[7] = this.input.readByte();
					this.inputPosition += 1;
					header[8] = this.input.readByte();
					this.inputPosition += 1;
					header[9] = this.input.readByte();
					this.inputPosition += 1;
					header[10] = this.input.readByte();
					this.inputPosition += 1;
					header[11] = this.input.readByte();
					this.inputPosition += 1;
					header[12] = this.input.readByte();
					this.inputPosition += 1;
					header[13] = this.input.readByte();
					this.inputPosition += 1;
					header[14] = this.input.readByte();
					this.inputPosition += 1;
					header[15] = this.input.readByte();
					this.inputPosition += 1;
					header[16] = this.input.readByte();
					this.inputPosition += 1;
					header[17] = this.input.readByte();
					this.inputPosition += 1;
					header[18] = this.input.readByte();
					this.inputPosition += 1;
					header[19] = this.input.readByte();
					this.inputPosition += 1;
					header[20] = this.input.readByte();
					this.inputPosition += 1;
					header[21] = this.input.readByte();
					this.inputPosition += 1;
					header[22] = this.input.readByte();
					this.inputPosition += 1;
					header[23] = this.input.readByte();
					this.inputPosition += 1;
					header[24] = this.input.readByte();
					this.inputPosition += 1;
					header[25] = this.input.readByte();
					this.inputPosition += 1;
					header[26] = this.input.readByte();
					if(header[4] != 0) {
						seekFunc(this.inputPosition = retryLoc);
						continue;
					}
					var goal = header[22] + (header[23] << 8) + (header[24] << 16) + (header[25] << 24);
					header[22] = 0;
					header[23] = 0;
					header[24] = 0;
					header[25] = 0;
					var crc = 0;
					var _g = 0;
					while(_g < 27) crc = crc << 8 ^ kha_audio2_ogg_tools_Crc32.table[header[_g++] ^ crc >>> 24];
					var len = 0;
					try {
						var _g1 = 0;
						var _g2 = header[26];
						while(_g1 < _g2) {
							++_g1;
							this.inputPosition += 1;
							var s = this.input.readByte();
							crc = crc << 8 ^ kha_audio2_ogg_tools_Crc32.table[s ^ crc >>> 24];
							len += s;
						}
						var _g3 = 0;
						var _g4 = len;
						while(_g3 < _g4) {
							++_g3;
							this.inputPosition += 1;
							var byte = this.input.readByte();
							crc = crc << 8 ^ kha_audio2_ogg_tools_Crc32.table[byte ^ crc >>> 24];
						}
					} catch( e ) {
						if(((((e) instanceof js__$Boot_HaxeError) ? e.val : e) instanceof haxe_io_Eof)) {
							return kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.NotFound;
						} else {
							throw e;
						}
					}
					if(crc == goal) {
						var end = this.inputPosition;
						seekFunc(this.inputPosition = retryLoc - 1);
						return kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.Found(end,(header[5] & 4) != 0);
					}
				}
			}
		} catch( e1 ) {
			if(((((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1) instanceof haxe_io_Eof)) {
				return kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.NotFound;
			} else {
				throw e1;
			}
		}
	}
	,analyzePage: function(seekFunc,h) {
		var z = new kha_audio2_ogg_vorbis_data_ProbedPage();
		var packetType = new Array(255);
		z.pageStart = this.inputPosition;
		this.inputPosition += 27;
		var vec = new Array(27);
		var _g = 0;
		while(_g < 27) vec[_g++] = this.input.readByte();
		var n = vec[26];
		this.inputPosition += n;
		var vec1 = new Array(n);
		var _g1 = 0;
		while(_g1 < n) vec1[_g1++] = this.input.readByte();
		var len = 0;
		var _g2 = 0;
		var _g11 = vec[26];
		while(_g2 < _g11) len += vec1[_g2++];
		z.pageEnd = z.pageStart + 27 + vec[26] + len;
		z.lastDecodedSample = vec[6] + (vec[7] << 8) + (vec[8] << 16) + (vec[9] << 16);
		if((vec[5] & 4) != 0) {
			z.firstDecodedSample = null;
			seekFunc(this.inputPosition = z.pageStart);
			return z;
		}
		var numPacket = 0;
		var packetStart = (vec[5] & 1) == 0;
		var modeCount = h.modes.length;
		var _g21 = 0;
		var _g3 = vec[26];
		while(_g21 < _g3) {
			var i = _g21++;
			if(packetStart) {
				if(vec1[i] == 0) {
					seekFunc(this.inputPosition = z.pageStart);
					return null;
				}
				this.inputPosition += 1;
				var n1 = this.input.readByte();
				if((n1 & 1) != 0) {
					seekFunc(this.inputPosition = z.pageStart);
					return null;
				}
				n1 >>= 1;
				var n2 = modeCount - 1;
				var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
				n1 &= (1 << (n2 < 16384 ? n2 < 16 ? log2_4[n2] : n2 < 512 ? 5 + log2_4[n2 >> 5] : 10 + log2_4[n2 >> 10] : n2 < 16777216 ? n2 < 524288 ? 15 + log2_4[n2 >> 15] : 20 + log2_4[n2 >> 20] : n2 < 536870912 ? 25 + log2_4[n2 >> 25] : n2 < -2147483648 ? 30 + log2_4[n2 >> 30] : 0)) - 1;
				if(n1 >= modeCount) {
					seekFunc(this.inputPosition = z.pageStart);
					return null;
				}
				packetType[numPacket++] = h.modes[n1].blockflag;
				var len1 = vec1[i] - 1;
				this.inputPosition += len1;
				var vec2 = new Array(len1);
				var _g4 = 0;
				while(_g4 < len1) vec2[_g4++] = this.input.readByte();
			} else {
				var len2 = vec1[i];
				this.inputPosition += len2;
				var vec3 = new Array(len2);
				var _g5 = 0;
				while(_g5 < len2) vec3[_g5++] = this.input.readByte();
			}
			packetStart = vec1[i] < 255;
		}
		var samples = 0;
		if(numPacket > 1) {
			samples = packetType[numPacket - 1] ? h.blocksize1 : h.blocksize0;
		}
		var i1 = numPacket - 2;
		while(i1 >= 1) {
			--i1;
			if(packetType[i1]) {
				if(packetType[i1 + 1]) {
					samples += h.blocksize1 >> 1;
				} else {
					samples += (h.blocksize1 - h.blocksize0 >> 2) + (h.blocksize0 >> 1);
				}
			} else {
				samples += h.blocksize0 >> 1;
			}
			--i1;
		}
		z.firstDecodedSample = z.lastDecodedSample - samples;
		seekFunc(this.inputPosition = z.pageStart);
		return z;
	}
	,decodeScalarRaw: function(c) {
		this.prepHuffman();
		var codewordLengths = c.codewordLengths;
		var codewords = c.codewords;
		var sortedCodewords = c.sortedCodewords;
		if(c.entries > 8 ? sortedCodewords != null : codewords != null) {
			var n = this.acc;
			n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
			n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
			n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
			n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
			var code = n >>> 16 | n << 16;
			var x = 0;
			var n1 = c.sortedEntries;
			while(n1 > 1) {
				var m = x + (n1 >> 1);
				if(_$UInt_UInt_$Impl_$.gte(code,sortedCodewords[m])) {
					x = m;
					n1 -= n1 >> 1;
				} else {
					n1 >>= 1;
				}
			}
			if(!c.sparse) {
				x = c.sortedValues[x];
			}
			var len = codewordLengths[x];
			if(this.validBits >= len) {
				this.acc = this.acc >>> len;
				this.validBits -= len;
				return x;
			}
			this.validBits = 0;
			return -1;
		}
		var _g = 0;
		var _g1 = c.entries;
		while(_g < _g1) {
			var i = _g++;
			var cl = codewordLengths[i];
			if(cl == 255) {
				continue;
			}
			if(codewords[i] == (this.acc & (1 << cl) - 1)) {
				if(this.validBits >= cl) {
					this.acc = this.acc >>> cl;
					this.validBits -= cl;
					return i;
				}
				this.validBits = 0;
				return -1;
			}
		}
		this.error = new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 847, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "decodeScalarRaw"});
		this.validBits = 0;
		return -1;
	}
	,__class__: kha_audio2_ogg_vorbis_VorbisDecodeState
};
var kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult = $hxEnums["kha.audio2.ogg.vorbis._VorbisDecodeState.FindPageResult"] = { __ename__ : "kha.audio2.ogg.vorbis._VorbisDecodeState.FindPageResult", __constructs__ : ["Found","NotFound"]
	,Found: ($_=function(end,last) { return {_hx_index:0,end:end,last:last,__enum__:"kha.audio2.ogg.vorbis._VorbisDecodeState.FindPageResult",toString:$estr}; },$_.__params__ = ["end","last"],$_)
	,NotFound: {_hx_index:1,__enum__:"kha.audio2.ogg.vorbis._VorbisDecodeState.FindPageResult",toString:$estr}
};
var kha_audio2_ogg_vorbis_VorbisDecoder = function(header,decodeState) {
	this.header = header;
	this.decodeState = decodeState;
	this.totalSample = null;
	this.currentSample = 0;
	this.previousLength = 0;
	this.channelBuffers = new Array(header.channel);
	this.previousWindow = new Array(header.channel);
	this.finalY = new Array(header.channel);
	var _g = 0;
	var _g1 = header.channel;
	while(_g < _g1) {
		var i = _g++;
		this.channelBuffers[i] = new Array(header.blocksize1);
		this.previousWindow[i] = new Array(header.blocksize1 / 2 | 0);
		this.finalY[i] = [];
	}
	this.a = new Array(2);
	this.b = new Array(2);
	this.c = new Array(2);
	this.window = new Array(2);
	this.bitReverseData = new Array(2);
	this.initBlocksize(0,header.blocksize0);
	this.initBlocksize(1,header.blocksize1);
};
$hxClasses["kha.audio2.ogg.vorbis.VorbisDecoder"] = kha_audio2_ogg_vorbis_VorbisDecoder;
kha_audio2_ogg_vorbis_VorbisDecoder.__name__ = "kha.audio2.ogg.vorbis.VorbisDecoder";
kha_audio2_ogg_vorbis_VorbisDecoder.start = function(input) {
	var decodeState = new kha_audio2_ogg_vorbis_VorbisDecodeState(input);
	var decoder = new kha_audio2_ogg_vorbis_VorbisDecoder(kha_audio2_ogg_vorbis_data_Header.read(decodeState),decodeState);
	decodeState.startFirstDecode();
	decoder.pumpFirstFrame();
	return decoder;
};
kha_audio2_ogg_vorbis_VorbisDecoder.prototype = {
	previousWindow: null
	,previousLength: null
	,finalY: null
	,a: null
	,b: null
	,c: null
	,window: null
	,bitReverseData: null
	,channelBuffers: null
	,channelBufferStart: null
	,channelBufferEnd: null
	,header: null
	,currentSample: null
	,totalSample: null
	,decodeState: null
	,read: function(output,samples,channels,sampleRate,useFloat) {
		if((_$UInt_UInt_$Impl_$.toFloat(sampleRate) % _$UInt_UInt_$Impl_$.toFloat(this.header.sampleRate) | 0) != 0) {
			var this1 = this.header.sampleRate;
			throw new js__$Boot_HaxeError("Unsupported sampleRate : can't convert " + Std.string(this1 == null ? null : _$UInt_UInt_$Impl_$.toFloat(this1)) + " to " + sampleRate);
		}
		if(channels % this.header.channel != 0) {
			throw new js__$Boot_HaxeError("Unsupported channels : can't convert " + this.header.channel + " to " + channels);
		}
		var sampleRepeat = _$UInt_UInt_$Impl_$.toFloat(sampleRate) / _$UInt_UInt_$Impl_$.toFloat(this.header.sampleRate) | 0;
		var channelRepeat = channels / this.header.channel | 0;
		var n = 0;
		var len = Math.floor(samples / sampleRepeat);
		if(this.totalSample != null && len > this.totalSample - this.currentSample) {
			len = this.totalSample - this.currentSample;
		}
		var index = 0;
		while(n < len) {
			var k = this.channelBufferEnd - this.channelBufferStart;
			if(k >= len - n) {
				k = len - n;
			}
			var _g = this.channelBufferStart;
			var _g1 = this.channelBufferStart + k;
			while(_g < _g1) {
				var j = _g++;
				var _g2 = 0;
				while(_g2 < sampleRepeat) {
					++_g2;
					var _g3 = 0;
					var _g11 = this.header.channel;
					while(_g3 < _g11) {
						var i = _g3++;
						var _g4 = 0;
						while(_g4 < channelRepeat) {
							++_g4;
							var value = this.channelBuffers[i][j];
							if(value > 1) {
								value = 1;
							} else if(value < -1) {
								value = -1;
							}
							if(useFloat) {
								output[index] = value;
								++index;
							}
						}
					}
				}
			}
			n += k;
			this.channelBufferStart += k;
			if(n == len || this.getFrameFloat() == 0) {
				break;
			}
		}
		var _g5 = n;
		var _g12 = len;
		while(_g5 < _g12) {
			++_g5;
			var _g6 = 0;
			while(_g6 < sampleRepeat) {
				++_g6;
				var _g7 = 0;
				var _g13 = this.header.channel;
				while(_g7 < _g13) {
					++_g7;
					var _g8 = 0;
					while(_g8 < channelRepeat) {
						++_g8;
						if(useFloat) {
							output[index] = 0;
							++index;
						}
					}
				}
			}
		}
		this.currentSample += len;
		return len * sampleRepeat;
	}
	,skipSamples: function(len) {
		var n = 0;
		if(this.totalSample != null && len > this.totalSample - this.currentSample) {
			len = this.totalSample - this.currentSample;
		}
		while(n < len) {
			var k = this.channelBufferEnd - this.channelBufferStart;
			if(k >= len - n) {
				k = len - n;
			}
			n += k;
			this.channelBufferStart += k;
			if(n == len || this.getFrameFloat() == 0) {
				break;
			}
		}
		this.currentSample += len;
		return len;
	}
	,setupSampleNumber: function(seekFunc,inputLength) {
		if(this.totalSample == null) {
			this.totalSample = this.decodeState.getSampleNumber(seekFunc,inputLength);
		}
	}
	,seek: function(seekFunc,inputLength,sampleNumber) {
		if(this.currentSample == sampleNumber) {
			return;
		}
		if(this.totalSample == null) {
			this.setupSampleNumber(seekFunc,inputLength);
			if(this.totalSample == 0) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 187, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
			}
		}
		if(sampleNumber < 0) {
			sampleNumber = 0;
		}
		var p0 = this.decodeState.pFirst;
		var p1 = this.decodeState.pLast;
		if(sampleNumber >= p1.lastDecodedSample) {
			sampleNumber = p1.lastDecodedSample - 1;
		}
		if(sampleNumber < p0.lastDecodedSample) {
			this.seekFrameFromPage(seekFunc,p0.pageStart,0,sampleNumber);
		} else {
			var attempts = 0;
			while(p0.pageEnd < p1.pageStart) {
				var startOffset = p0.pageEnd;
				var endOffset = p1.afterPreviousPageStart;
				var startSample = p0.lastDecodedSample;
				var endSample = p1.lastDecodedSample;
				if(startSample == null || endSample == null) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 219, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
				}
				if(_$UInt_UInt_$Impl_$.gt(endOffset,startOffset + 4000)) {
					endOffset = endOffset - 4000;
				}
				var probe = startOffset + Math.floor(_$UInt_UInt_$Impl_$.toFloat(endOffset - startOffset) / _$UInt_UInt_$Impl_$.toFloat(endSample - startSample) * (sampleNumber - startSample));
				if(attempts >= 4) {
					var probe2 = startOffset + (endOffset - startOffset >>> 1);
					probe = attempts >= 8 ? probe2 : _$UInt_UInt_$Impl_$.gt(probe2,probe) ? probe + (probe2 - probe >>> 1) : probe2 + (probe - probe2 >>> 1);
				}
				++attempts;
				seekFunc(this.decodeState.inputPosition = probe);
				switch(this.decodeState.findPage(seekFunc,inputLength)._hx_index) {
				case 0:
					break;
				case 1:
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 249, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
				}
				var q = this.decodeState.analyzePage(seekFunc,this.header);
				if(q == null) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 255, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
				}
				q.afterPreviousPageStart = probe;
				if(q.pageStart == p1.pageStart) {
					p1 = q;
					continue;
				}
				if(sampleNumber < q.lastDecodedSample) {
					p1 = q;
				} else {
					p0 = q;
				}
			}
			if(p0.lastDecodedSample <= sampleNumber && sampleNumber < p1.lastDecodedSample) {
				this.seekFrameFromPage(seekFunc,p1.pageStart,p0.lastDecodedSample,sampleNumber);
			} else {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 275, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
			}
		}
	}
	,seekFrameFromPage: function(seekFunc,pageStart,firstSample,targetSample) {
		var frame = 0;
		var frameStart = firstSample;
		seekFunc(this.decodeState.inputPosition = pageStart);
		this.decodeState.nextSeg = -1;
		var leftEnd = 0;
		var leftStart = 0;
		var prevState = null;
		var lastState = null;
		while(true) {
			prevState = lastState;
			lastState = this.decodeState.clone(seekFunc);
			var initialResult = this.decodeInitial();
			if(initialResult == null) {
				lastState = prevState;
				break;
			}
			leftStart = initialResult.left.start;
			leftEnd = initialResult.left.end;
			var start = frame == 0 ? leftEnd : leftStart;
			if(targetSample < frameStart + initialResult.right.start - start) {
				break;
			}
			var _this = this.decodeState;
			while(_this.bytesInSeg != 0 || !_this.lastSeg && _this.next() != 0) {
				_this.bytesInSeg--;
				_this.inputPosition += 1;
				_this.input.readByte();
			}
			frameStart += initialResult.right.start - start;
			++frame;
		}
		this.decodeState = lastState;
		seekFunc(this.decodeState.inputPosition);
		this.previousLength = 0;
		this.pumpFirstFrame();
		this.currentSample = frameStart;
		this.skipSamples(targetSample - frameStart);
	}
	,ensurePosition: function(seekFunc) {
		seekFunc(this.decodeState.inputPosition);
	}
	,getFrameFloat: function() {
		var result = this.decodePacket();
		if(result == null) {
			this.channelBufferStart = this.channelBufferEnd = 0;
			return 0;
		}
		var len = this.finishFrame(result);
		this.channelBufferStart = result.left;
		this.channelBufferEnd = result.left + len;
		return len;
	}
	,pumpFirstFrame: function() {
		this.finishFrame(this.decodePacket());
	}
	,finishFrame: function(r) {
		var len = r.len;
		var right = r.right;
		var left = r.left;
		if(this.previousLength != 0) {
			var n = this.previousLength;
			var w = this.getWindow(n);
			var _g = 0;
			var _g1 = this.header.channel;
			while(_g < _g1) {
				var i = _g++;
				var cb = this.channelBuffers[i];
				var pw = this.previousWindow[i];
				var _g2 = 0;
				while(_g2 < n) {
					var j = _g2++;
					cb[left + j] = cb[left + j] * w[j] + pw[j] * w[n - 1 - j];
				}
			}
		}
		var prev = this.previousLength;
		this.previousLength = len - right;
		var _g3 = 0;
		var _g11 = this.header.channel;
		while(_g3 < _g11) {
			var i1 = _g3++;
			var pw1 = this.previousWindow[i1];
			var cb1 = this.channelBuffers[i1];
			var _g4 = 0;
			var _g12 = len - right;
			while(_g4 < _g12) {
				var j1 = _g4++;
				pw1[j1] = cb1[right + j1];
			}
		}
		if(prev == 0) {
			return 0;
		}
		if(len < right) {
			right = len;
		}
		return right - left;
	}
	,getWindow: function(len) {
		len <<= 1;
		if(len == this.header.blocksize0) {
			return this.window[0];
		} else if(len == this.header.blocksize1) {
			return this.window[1];
		} else {
			return null;
		}
	}
	,initBlocksize: function(bs,n) {
		var n2 = n >> 1;
		this.a[bs] = new Array(n2);
		this.b[bs] = new Array(n2);
		this.c[bs] = new Array(n >> 2);
		this.window[bs] = new Array(n2);
		this.bitReverseData[bs] = new Array(n >> 3);
		kha_audio2_ogg_vorbis_VorbisTools.computeTwiddleFactors(n,this.a[bs],this.b[bs],this.c[bs]);
		kha_audio2_ogg_vorbis_VorbisTools.computeWindow(n,this.window[bs]);
		kha_audio2_ogg_vorbis_VorbisTools.computeBitReverse(n,this.bitReverseData[bs]);
	}
	,inverseMdct: function(buffer,n,blocktype) {
		var bt = blocktype ? 1 : 0;
		var a = this.a[bt];
		var b = this.b[bt];
		var c = this.c[bt];
		var bitReverse = this.bitReverseData[bt];
		var n2 = n >> 1;
		var n4 = n >> 2;
		var n8 = n >> 3;
		var buf2 = new Array(n2);
		var dOffset = n2 - 2;
		var aaOffset = 0;
		var eOffset = 0;
		while(eOffset != n2) {
			buf2[dOffset + 1] = buffer[eOffset] * a[aaOffset] - buffer[eOffset + 2] * a[aaOffset + 1];
			buf2[dOffset] = buffer[eOffset] * a[aaOffset + 1] + buffer[eOffset + 2] * a[aaOffset];
			dOffset -= 2;
			aaOffset += 2;
			eOffset += 4;
		}
		eOffset = n2 - 3;
		while(dOffset >= 0) {
			buf2[dOffset + 1] = -buffer[eOffset + 2] * a[aaOffset] - -buffer[eOffset] * a[aaOffset + 1];
			buf2[dOffset] = -buffer[eOffset + 2] * a[aaOffset + 1] + -buffer[eOffset] * a[aaOffset];
			dOffset -= 2;
			aaOffset += 2;
			eOffset -= 4;
		}
		var aaOffset1 = n2 - 8;
		var eOffset0 = n4;
		var eOffset1 = 0;
		var dOffset0 = n4;
		var dOffset1 = 0;
		while(aaOffset1 >= 0) {
			var v41_21 = buf2[eOffset0 + 1] - buf2[eOffset1 + 1];
			var v40_20 = buf2[eOffset0] - buf2[eOffset1];
			buffer[dOffset0 + 1] = buf2[eOffset0 + 1] + buf2[eOffset1 + 1];
			buffer[dOffset0] = buf2[eOffset0] + buf2[eOffset1];
			buffer[dOffset1 + 1] = v41_21 * a[aaOffset1 + 4] - v40_20 * a[aaOffset1 + 5];
			buffer[dOffset1] = v40_20 * a[aaOffset1 + 4] + v41_21 * a[aaOffset1 + 5];
			v41_21 = buf2[eOffset0 + 3] - buf2[eOffset1 + 3];
			v40_20 = buf2[eOffset0 + 2] - buf2[eOffset1 + 2];
			buffer[dOffset0 + 3] = buf2[eOffset0 + 3] + buf2[eOffset1 + 3];
			buffer[dOffset0 + 2] = buf2[eOffset0 + 2] + buf2[eOffset1 + 2];
			buffer[dOffset1 + 3] = v41_21 * a[aaOffset1] - v40_20 * a[aaOffset1 + 1];
			buffer[dOffset1 + 2] = v40_20 * a[aaOffset1] + v41_21 * a[aaOffset1 + 1];
			aaOffset1 -= 8;
			dOffset0 += 4;
			dOffset1 += 4;
			eOffset0 += 4;
			eOffset1 += 4;
		}
		var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
		var ld = (n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0) - 1;
		var i_off = n2 - 1 - n4 * 0;
		var eeOffset0 = i_off;
		var eeOffset2 = i_off + -(n >> 3);
		var aOffset = 0;
		var i = (n >> 4 >> 2) + 1;
		while(--i > 0) {
			var k00_20 = buffer[eeOffset0] - buffer[eeOffset2];
			var k01_21 = buffer[eeOffset0 + (-1)] - buffer[eeOffset2 + (-1)];
			var _g = eeOffset0;
			buffer[_g] = buffer[_g] + buffer[eeOffset2];
			var _g1 = eeOffset0 + (-1);
			buffer[_g1] = buffer[_g1] + buffer[eeOffset2 + (-1)];
			buffer[eeOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			buffer[eeOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			k00_20 = buffer[eeOffset0 + (-2)] - buffer[eeOffset2 + (-2)];
			k01_21 = buffer[eeOffset0 + (-3)] - buffer[eeOffset2 + (-3)];
			var _g2 = eeOffset0 + (-2);
			buffer[_g2] = buffer[_g2] + buffer[eeOffset2 + (-2)];
			var _g3 = eeOffset0 + (-3);
			buffer[_g3] = buffer[_g3] + buffer[eeOffset2 + (-3)];
			buffer[eeOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			buffer[eeOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			k00_20 = buffer[eeOffset0 + (-4)] - buffer[eeOffset2 + (-4)];
			k01_21 = buffer[eeOffset0 + (-5)] - buffer[eeOffset2 + (-5)];
			var _g4 = eeOffset0 + (-4);
			buffer[_g4] = buffer[_g4] + buffer[eeOffset2 + (-4)];
			var _g5 = eeOffset0 + (-5);
			buffer[_g5] = buffer[_g5] + buffer[eeOffset2 + (-5)];
			buffer[eeOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			buffer[eeOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			k00_20 = buffer[eeOffset0 + (-6)] - buffer[eeOffset2 + (-6)];
			k01_21 = buffer[eeOffset0 + (-7)] - buffer[eeOffset2 + (-7)];
			var _g6 = eeOffset0 + (-6);
			buffer[_g6] = buffer[_g6] + buffer[eeOffset2 + (-6)];
			var _g7 = eeOffset0 + (-7);
			buffer[_g7] = buffer[_g7] + buffer[eeOffset2 + (-7)];
			buffer[eeOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			buffer[eeOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			eeOffset0 -= 8;
			eeOffset2 -= 8;
		}
		var i_off1 = n2 - 1 - n4;
		var eeOffset01 = i_off1;
		var eeOffset21 = i_off1 + -(n >> 3);
		var aOffset1 = 0;
		var i1 = (n >> 4 >> 2) + 1;
		while(--i1 > 0) {
			var k00_201 = buffer[eeOffset01] - buffer[eeOffset21];
			var k01_211 = buffer[eeOffset01 + (-1)] - buffer[eeOffset21 + (-1)];
			var _g8 = eeOffset01;
			buffer[_g8] = buffer[_g8] + buffer[eeOffset21];
			var _g9 = eeOffset01 + (-1);
			buffer[_g9] = buffer[_g9] + buffer[eeOffset21 + (-1)];
			buffer[eeOffset21] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
			buffer[eeOffset21 + (-1)] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
			aOffset1 += 8;
			k00_201 = buffer[eeOffset01 + (-2)] - buffer[eeOffset21 + (-2)];
			k01_211 = buffer[eeOffset01 + (-3)] - buffer[eeOffset21 + (-3)];
			var _g10 = eeOffset01 + (-2);
			buffer[_g10] = buffer[_g10] + buffer[eeOffset21 + (-2)];
			var _g11 = eeOffset01 + (-3);
			buffer[_g11] = buffer[_g11] + buffer[eeOffset21 + (-3)];
			buffer[eeOffset21 + (-2)] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
			buffer[eeOffset21 + (-3)] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
			aOffset1 += 8;
			k00_201 = buffer[eeOffset01 + (-4)] - buffer[eeOffset21 + (-4)];
			k01_211 = buffer[eeOffset01 + (-5)] - buffer[eeOffset21 + (-5)];
			var _g12 = eeOffset01 + (-4);
			buffer[_g12] = buffer[_g12] + buffer[eeOffset21 + (-4)];
			var _g13 = eeOffset01 + (-5);
			buffer[_g13] = buffer[_g13] + buffer[eeOffset21 + (-5)];
			buffer[eeOffset21 + (-4)] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
			buffer[eeOffset21 + (-5)] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
			aOffset1 += 8;
			k00_201 = buffer[eeOffset01 + (-6)] - buffer[eeOffset21 + (-6)];
			k01_211 = buffer[eeOffset01 + (-7)] - buffer[eeOffset21 + (-7)];
			var _g14 = eeOffset01 + (-6);
			buffer[_g14] = buffer[_g14] + buffer[eeOffset21 + (-6)];
			var _g15 = eeOffset01 + (-7);
			buffer[_g15] = buffer[_g15] + buffer[eeOffset21 + (-7)];
			buffer[eeOffset21 + (-6)] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
			buffer[eeOffset21 + (-7)] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
			aOffset1 += 8;
			eeOffset01 -= 8;
			eeOffset21 -= 8;
		}
		var d0 = n2 - 1 - n8 * 0;
		var aOffset2 = 0;
		var eOffset01 = d0;
		var eOffset2 = d0 + -(n >> 4);
		var i2 = (n >> 5 >> 2) + 1;
		while(--i2 > 0) {
			var k00_202 = buffer[eOffset01] - buffer[eOffset2];
			var k01_212 = buffer[eOffset01 + (-1)] - buffer[eOffset2 + (-1)];
			var _g16 = eOffset01;
			buffer[_g16] = buffer[_g16] + buffer[eOffset2];
			var _g17 = eOffset01 + (-1);
			buffer[_g17] = buffer[_g17] + buffer[eOffset2 + (-1)];
			buffer[eOffset2] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
			buffer[eOffset2 + (-1)] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
			aOffset2 += 16;
			k00_202 = buffer[eOffset01 + (-2)] - buffer[eOffset2 + (-2)];
			k01_212 = buffer[eOffset01 + (-3)] - buffer[eOffset2 + (-3)];
			var _g18 = eOffset01 + (-2);
			buffer[_g18] = buffer[_g18] + buffer[eOffset2 + (-2)];
			var _g19 = eOffset01 + (-3);
			buffer[_g19] = buffer[_g19] + buffer[eOffset2 + (-3)];
			buffer[eOffset2 + (-2)] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
			buffer[eOffset2 + (-3)] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
			aOffset2 += 16;
			k00_202 = buffer[eOffset01 + (-4)] - buffer[eOffset2 + (-4)];
			k01_212 = buffer[eOffset01 + (-5)] - buffer[eOffset2 + (-5)];
			var _g20 = eOffset01 + (-4);
			buffer[_g20] = buffer[_g20] + buffer[eOffset2 + (-4)];
			var _g21 = eOffset01 + (-5);
			buffer[_g21] = buffer[_g21] + buffer[eOffset2 + (-5)];
			buffer[eOffset2 + (-4)] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
			buffer[eOffset2 + (-5)] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
			aOffset2 += 16;
			k00_202 = buffer[eOffset01 + (-6)] - buffer[eOffset2 + (-6)];
			k01_212 = buffer[eOffset01 + (-7)] - buffer[eOffset2 + (-7)];
			var _g22 = eOffset01 + (-6);
			buffer[_g22] = buffer[_g22] + buffer[eOffset2 + (-6)];
			var _g23 = eOffset01 + (-7);
			buffer[_g23] = buffer[_g23] + buffer[eOffset2 + (-7)];
			buffer[eOffset2 + (-6)] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
			buffer[eOffset2 + (-7)] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
			eOffset01 -= 8;
			eOffset2 -= 8;
			aOffset2 += 16;
		}
		var d01 = n2 - 1 - n8;
		var aOffset3 = 0;
		var eOffset02 = d01;
		var eOffset21 = d01 + -(n >> 4);
		var i3 = (n >> 5 >> 2) + 1;
		while(--i3 > 0) {
			var k00_203 = buffer[eOffset02] - buffer[eOffset21];
			var k01_213 = buffer[eOffset02 + (-1)] - buffer[eOffset21 + (-1)];
			var _g24 = eOffset02;
			buffer[_g24] = buffer[_g24] + buffer[eOffset21];
			var _g25 = eOffset02 + (-1);
			buffer[_g25] = buffer[_g25] + buffer[eOffset21 + (-1)];
			buffer[eOffset21] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
			buffer[eOffset21 + (-1)] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
			aOffset3 += 16;
			k00_203 = buffer[eOffset02 + (-2)] - buffer[eOffset21 + (-2)];
			k01_213 = buffer[eOffset02 + (-3)] - buffer[eOffset21 + (-3)];
			var _g26 = eOffset02 + (-2);
			buffer[_g26] = buffer[_g26] + buffer[eOffset21 + (-2)];
			var _g27 = eOffset02 + (-3);
			buffer[_g27] = buffer[_g27] + buffer[eOffset21 + (-3)];
			buffer[eOffset21 + (-2)] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
			buffer[eOffset21 + (-3)] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
			aOffset3 += 16;
			k00_203 = buffer[eOffset02 + (-4)] - buffer[eOffset21 + (-4)];
			k01_213 = buffer[eOffset02 + (-5)] - buffer[eOffset21 + (-5)];
			var _g28 = eOffset02 + (-4);
			buffer[_g28] = buffer[_g28] + buffer[eOffset21 + (-4)];
			var _g29 = eOffset02 + (-5);
			buffer[_g29] = buffer[_g29] + buffer[eOffset21 + (-5)];
			buffer[eOffset21 + (-4)] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
			buffer[eOffset21 + (-5)] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
			aOffset3 += 16;
			k00_203 = buffer[eOffset02 + (-6)] - buffer[eOffset21 + (-6)];
			k01_213 = buffer[eOffset02 + (-7)] - buffer[eOffset21 + (-7)];
			var _g30 = eOffset02 + (-6);
			buffer[_g30] = buffer[_g30] + buffer[eOffset21 + (-6)];
			var _g31 = eOffset02 + (-7);
			buffer[_g31] = buffer[_g31] + buffer[eOffset21 + (-7)];
			buffer[eOffset21 + (-6)] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
			buffer[eOffset21 + (-7)] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
			eOffset02 -= 8;
			eOffset21 -= 8;
			aOffset3 += 16;
		}
		var d02 = n2 - 1 - n8 * 2;
		var aOffset4 = 0;
		var eOffset03 = d02;
		var eOffset22 = d02 + -(n >> 4);
		var i4 = (n >> 5 >> 2) + 1;
		while(--i4 > 0) {
			var k00_204 = buffer[eOffset03] - buffer[eOffset22];
			var k01_214 = buffer[eOffset03 + (-1)] - buffer[eOffset22 + (-1)];
			var _g32 = eOffset03;
			buffer[_g32] = buffer[_g32] + buffer[eOffset22];
			var _g33 = eOffset03 + (-1);
			buffer[_g33] = buffer[_g33] + buffer[eOffset22 + (-1)];
			buffer[eOffset22] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
			buffer[eOffset22 + (-1)] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
			aOffset4 += 16;
			k00_204 = buffer[eOffset03 + (-2)] - buffer[eOffset22 + (-2)];
			k01_214 = buffer[eOffset03 + (-3)] - buffer[eOffset22 + (-3)];
			var _g34 = eOffset03 + (-2);
			buffer[_g34] = buffer[_g34] + buffer[eOffset22 + (-2)];
			var _g35 = eOffset03 + (-3);
			buffer[_g35] = buffer[_g35] + buffer[eOffset22 + (-3)];
			buffer[eOffset22 + (-2)] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
			buffer[eOffset22 + (-3)] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
			aOffset4 += 16;
			k00_204 = buffer[eOffset03 + (-4)] - buffer[eOffset22 + (-4)];
			k01_214 = buffer[eOffset03 + (-5)] - buffer[eOffset22 + (-5)];
			var _g36 = eOffset03 + (-4);
			buffer[_g36] = buffer[_g36] + buffer[eOffset22 + (-4)];
			var _g37 = eOffset03 + (-5);
			buffer[_g37] = buffer[_g37] + buffer[eOffset22 + (-5)];
			buffer[eOffset22 + (-4)] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
			buffer[eOffset22 + (-5)] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
			aOffset4 += 16;
			k00_204 = buffer[eOffset03 + (-6)] - buffer[eOffset22 + (-6)];
			k01_214 = buffer[eOffset03 + (-7)] - buffer[eOffset22 + (-7)];
			var _g38 = eOffset03 + (-6);
			buffer[_g38] = buffer[_g38] + buffer[eOffset22 + (-6)];
			var _g39 = eOffset03 + (-7);
			buffer[_g39] = buffer[_g39] + buffer[eOffset22 + (-7)];
			buffer[eOffset22 + (-6)] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
			buffer[eOffset22 + (-7)] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
			eOffset03 -= 8;
			eOffset22 -= 8;
			aOffset4 += 16;
		}
		var d03 = n2 - 1 - n8 * 3;
		var aOffset5 = 0;
		var eOffset04 = d03;
		var eOffset23 = d03 + -(n >> 4);
		var i5 = (n >> 5 >> 2) + 1;
		while(--i5 > 0) {
			var k00_205 = buffer[eOffset04] - buffer[eOffset23];
			var k01_215 = buffer[eOffset04 + (-1)] - buffer[eOffset23 + (-1)];
			var _g40 = eOffset04;
			buffer[_g40] = buffer[_g40] + buffer[eOffset23];
			var _g41 = eOffset04 + (-1);
			buffer[_g41] = buffer[_g41] + buffer[eOffset23 + (-1)];
			buffer[eOffset23] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
			buffer[eOffset23 + (-1)] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
			aOffset5 += 16;
			k00_205 = buffer[eOffset04 + (-2)] - buffer[eOffset23 + (-2)];
			k01_215 = buffer[eOffset04 + (-3)] - buffer[eOffset23 + (-3)];
			var _g42 = eOffset04 + (-2);
			buffer[_g42] = buffer[_g42] + buffer[eOffset23 + (-2)];
			var _g43 = eOffset04 + (-3);
			buffer[_g43] = buffer[_g43] + buffer[eOffset23 + (-3)];
			buffer[eOffset23 + (-2)] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
			buffer[eOffset23 + (-3)] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
			aOffset5 += 16;
			k00_205 = buffer[eOffset04 + (-4)] - buffer[eOffset23 + (-4)];
			k01_215 = buffer[eOffset04 + (-5)] - buffer[eOffset23 + (-5)];
			var _g44 = eOffset04 + (-4);
			buffer[_g44] = buffer[_g44] + buffer[eOffset23 + (-4)];
			var _g45 = eOffset04 + (-5);
			buffer[_g45] = buffer[_g45] + buffer[eOffset23 + (-5)];
			buffer[eOffset23 + (-4)] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
			buffer[eOffset23 + (-5)] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
			aOffset5 += 16;
			k00_205 = buffer[eOffset04 + (-6)] - buffer[eOffset23 + (-6)];
			k01_215 = buffer[eOffset04 + (-7)] - buffer[eOffset23 + (-7)];
			var _g46 = eOffset04 + (-6);
			buffer[_g46] = buffer[_g46] + buffer[eOffset23 + (-6)];
			var _g47 = eOffset04 + (-7);
			buffer[_g47] = buffer[_g47] + buffer[eOffset23 + (-7)];
			buffer[eOffset23 + (-6)] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
			buffer[eOffset23 + (-7)] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
			eOffset04 -= 8;
			eOffset23 -= 8;
			aOffset5 += 16;
		}
		var _g48 = 2;
		var _g110 = ld - 3 >> 1;
		while(_g48 < _g110) {
			var l = _g48++;
			var k0 = n >> l + 2;
			var k0_2 = k0 >> 1;
			var lim = 1 << l + 1;
			var _g49 = 0;
			while(_g49 < lim) {
				var d04 = n2 - 1 - k0 * _g49++;
				var k1 = 1 << l + 3;
				var aOffset6 = 0;
				var eOffset05 = d04;
				var eOffset24 = d04 + -k0_2;
				var i6 = (n >> l + 4 >> 2) + 1;
				while(--i6 > 0) {
					var k00_206 = buffer[eOffset05] - buffer[eOffset24];
					var k01_216 = buffer[eOffset05 + (-1)] - buffer[eOffset24 + (-1)];
					var _g50 = eOffset05;
					buffer[_g50] = buffer[_g50] + buffer[eOffset24];
					var _g51 = eOffset05 + (-1);
					buffer[_g51] = buffer[_g51] + buffer[eOffset24 + (-1)];
					buffer[eOffset24] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
					buffer[eOffset24 + (-1)] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
					aOffset6 += k1;
					k00_206 = buffer[eOffset05 + (-2)] - buffer[eOffset24 + (-2)];
					k01_216 = buffer[eOffset05 + (-3)] - buffer[eOffset24 + (-3)];
					var _g52 = eOffset05 + (-2);
					buffer[_g52] = buffer[_g52] + buffer[eOffset24 + (-2)];
					var _g53 = eOffset05 + (-3);
					buffer[_g53] = buffer[_g53] + buffer[eOffset24 + (-3)];
					buffer[eOffset24 + (-2)] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
					buffer[eOffset24 + (-3)] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
					aOffset6 += k1;
					k00_206 = buffer[eOffset05 + (-4)] - buffer[eOffset24 + (-4)];
					k01_216 = buffer[eOffset05 + (-5)] - buffer[eOffset24 + (-5)];
					var _g54 = eOffset05 + (-4);
					buffer[_g54] = buffer[_g54] + buffer[eOffset24 + (-4)];
					var _g55 = eOffset05 + (-5);
					buffer[_g55] = buffer[_g55] + buffer[eOffset24 + (-5)];
					buffer[eOffset24 + (-4)] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
					buffer[eOffset24 + (-5)] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
					aOffset6 += k1;
					k00_206 = buffer[eOffset05 + (-6)] - buffer[eOffset24 + (-6)];
					k01_216 = buffer[eOffset05 + (-7)] - buffer[eOffset24 + (-7)];
					var _g56 = eOffset05 + (-6);
					buffer[_g56] = buffer[_g56] + buffer[eOffset24 + (-6)];
					var _g57 = eOffset05 + (-7);
					buffer[_g57] = buffer[_g57] + buffer[eOffset24 + (-7)];
					buffer[eOffset24 + (-6)] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
					buffer[eOffset24 + (-7)] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
					eOffset05 -= 8;
					eOffset24 -= 8;
					aOffset6 += k1;
				}
			}
		}
		var _g210 = ld - 3 >> 1;
		var _g310 = ld - 6;
		while(_g210 < _g310) {
			var l1 = _g210++;
			var k01 = n >> l1 + 2;
			var k11 = 1 << l1 + 3;
			var k0_21 = k01 >> 1;
			var lim1 = 1 << l1 + 1;
			var aOffset7 = 0;
			var i_off2 = n2 - 1;
			var r = (n >> l1 + 6) + 1;
			while(--r > 0) {
				var A0 = a[aOffset7];
				var A1 = a[aOffset7 + 1];
				var A2 = a[aOffset7 + k11];
				var A3 = a[aOffset7 + k11 + 1];
				var A4 = a[aOffset7 + k11 * 2];
				var A5 = a[aOffset7 + k11 * 2 + 1];
				var A6 = a[aOffset7 + k11 * 3];
				var A7 = a[aOffset7 + k11 * 3 + 1];
				var eeOffset02 = i_off2;
				var eeOffset22 = i_off2 + -k0_21;
				var i7 = lim1 + 1;
				while(--i7 > 0) {
					var k00 = buffer[eeOffset02] - buffer[eeOffset22];
					var k111 = buffer[eeOffset02 + (-1)] - buffer[eeOffset22 + (-1)];
					buffer[eeOffset02] = buffer[eeOffset02] + buffer[eeOffset22];
					buffer[eeOffset02 + (-1)] = buffer[eeOffset02 + (-1)] + buffer[eeOffset22 + (-1)];
					buffer[eeOffset22] = k00 * A0 - k111 * A1;
					buffer[eeOffset22 + (-1)] = k111 * A0 + k00 * A1;
					k00 = buffer[eeOffset02 + (-2)] - buffer[eeOffset22 + (-2)];
					k111 = buffer[eeOffset02 + (-3)] - buffer[eeOffset22 + (-3)];
					buffer[eeOffset02 + (-2)] = buffer[eeOffset02 + (-2)] + buffer[eeOffset22 + (-2)];
					buffer[eeOffset02 + (-3)] = buffer[eeOffset02 + (-3)] + buffer[eeOffset22 + (-3)];
					buffer[eeOffset22 + (-2)] = k00 * A2 - k111 * A3;
					buffer[eeOffset22 + (-3)] = k111 * A2 + k00 * A3;
					k00 = buffer[eeOffset02 + (-4)] - buffer[eeOffset22 + (-4)];
					k111 = buffer[eeOffset02 + (-5)] - buffer[eeOffset22 + (-5)];
					buffer[eeOffset02 + (-4)] = buffer[eeOffset02 + (-4)] + buffer[eeOffset22 + (-4)];
					buffer[eeOffset02 + (-5)] = buffer[eeOffset02 + (-5)] + buffer[eeOffset22 + (-5)];
					buffer[eeOffset22 + (-4)] = k00 * A4 - k111 * A5;
					buffer[eeOffset22 + (-5)] = k111 * A4 + k00 * A5;
					k00 = buffer[eeOffset02 + (-6)] - buffer[eeOffset22 + (-6)];
					k111 = buffer[eeOffset02 + (-7)] - buffer[eeOffset22 + (-7)];
					buffer[eeOffset02 + (-6)] = buffer[eeOffset02 + (-6)] + buffer[eeOffset22 + (-6)];
					buffer[eeOffset02 + (-7)] = buffer[eeOffset02 + (-7)] + buffer[eeOffset22 + (-7)];
					buffer[eeOffset22 + (-6)] = k00 * A6 - k111 * A7;
					buffer[eeOffset22 + (-7)] = k111 * A6 + k00 * A7;
					eeOffset02 -= k01;
					eeOffset22 -= k01;
				}
				aOffset7 += k11 * 4;
				i_off2 -= 8;
			}
		}
		var i_off3 = n2 - 1;
		var A21 = a[n >> 3];
		var zOffset = i_off3;
		var baseOffset = i_off3 - 16 * (n >> 5);
		while(zOffset > baseOffset) {
			var t0 = buffer[zOffset];
			var t1 = buffer[zOffset + (-8)];
			buffer[zOffset + (-8)] = t0 - t1;
			buffer[zOffset] = t0 + t1;
			t0 = buffer[zOffset + (-1)];
			t1 = buffer[zOffset + (-9)];
			buffer[zOffset + (-9)] = t0 - t1;
			buffer[zOffset + (-1)] = t0 + t1;
			t0 = buffer[zOffset + (-2)];
			t1 = buffer[zOffset + (-10)];
			var k001 = t0 - t1;
			buffer[zOffset + (-2)] = t0 + t1;
			t0 = buffer[zOffset + (-3)];
			t1 = buffer[zOffset + (-11)];
			var k112 = t0 - t1;
			buffer[zOffset + (-3)] = t0 + t1;
			buffer[zOffset + (-10)] = (k001 + k112) * A21;
			buffer[zOffset + (-11)] = (k112 - k001) * A21;
			t0 = buffer[zOffset + (-4)];
			t1 = buffer[zOffset + (-12)];
			k001 = t1 - t0;
			buffer[zOffset + (-4)] = t0 + t1;
			t0 = buffer[zOffset + (-5)];
			t1 = buffer[zOffset + (-13)];
			k112 = t0 - t1;
			buffer[zOffset + (-5)] = t0 + t1;
			buffer[zOffset + (-12)] = k112;
			buffer[zOffset + (-13)] = k001;
			t0 = buffer[zOffset + (-6)];
			t1 = buffer[zOffset + (-14)];
			k001 = t1 - t0;
			buffer[zOffset + (-6)] = t0 + t1;
			t0 = buffer[zOffset + (-7)];
			t1 = buffer[zOffset + (-15)];
			k112 = t0 - t1;
			buffer[zOffset + (-7)] = t0 + t1;
			buffer[zOffset + (-14)] = (k001 + k112) * A21;
			buffer[zOffset + (-15)] = (k001 - k112) * A21;
			var t01 = buffer[zOffset];
			var t11 = buffer[zOffset + (-4)];
			var k002 = t01 - t11;
			var y0 = t01 + t11;
			t01 = buffer[zOffset + (-2)];
			t11 = buffer[zOffset + (-6)];
			var y2 = t01 + t11;
			var k22 = t01 - t11;
			buffer[zOffset] = y0 + y2;
			buffer[zOffset + (-2)] = y0 - y2;
			var k33 = buffer[zOffset + (-3)] - buffer[zOffset + (-7)];
			buffer[zOffset + (-4)] = k002 + k33;
			buffer[zOffset + (-6)] = k002 - k33;
			t01 = buffer[zOffset + (-1)];
			t11 = buffer[zOffset + (-5)];
			var k113 = t01 - t11;
			var y1 = t01 + t11;
			var y3 = buffer[zOffset + (-3)] + buffer[zOffset + (-7)];
			buffer[zOffset + (-1)] = y1 + y3;
			buffer[zOffset + (-3)] = y1 - y3;
			buffer[zOffset + (-5)] = k113 - k22;
			buffer[zOffset + (-7)] = k113 + k22;
			var zOffset1 = zOffset - 8;
			var t02 = buffer[zOffset1];
			var t12 = buffer[zOffset1 + (-4)];
			var k003 = t02 - t12;
			var y01 = t02 + t12;
			t02 = buffer[zOffset1 + (-2)];
			t12 = buffer[zOffset1 + (-6)];
			var y21 = t02 + t12;
			var k221 = t02 - t12;
			buffer[zOffset1] = y01 + y21;
			buffer[zOffset1 + (-2)] = y01 - y21;
			var k331 = buffer[zOffset1 + (-3)] - buffer[zOffset1 + (-7)];
			buffer[zOffset1 + (-4)] = k003 + k331;
			buffer[zOffset1 + (-6)] = k003 - k331;
			t02 = buffer[zOffset1 + (-1)];
			t12 = buffer[zOffset1 + (-5)];
			var k114 = t02 - t12;
			var y11 = t02 + t12;
			var y31 = buffer[zOffset1 + (-3)] + buffer[zOffset1 + (-7)];
			buffer[zOffset1 + (-1)] = y11 + y31;
			buffer[zOffset1 + (-3)] = y11 - y31;
			buffer[zOffset1 + (-5)] = k114 - k221;
			buffer[zOffset1 + (-7)] = k114 + k221;
			zOffset -= 16;
		}
		var brOffset = 0;
		var dOffset01 = n4 - 4;
		var dOffset11 = n2 - 4;
		while(dOffset01 >= 0) {
			var k4 = bitReverse[brOffset];
			buf2[dOffset11 + 3] = buffer[k4];
			buf2[dOffset11 + 2] = buffer[k4 + 1];
			buf2[dOffset01 + 3] = buffer[k4 + 2];
			buf2[dOffset01 + 2] = buffer[k4 + 3];
			k4 = bitReverse[brOffset + 1];
			buf2[dOffset11 + 1] = buffer[k4];
			buf2[dOffset11] = buffer[k4 + 1];
			buf2[dOffset01 + 1] = buffer[k4 + 2];
			buf2[dOffset01] = buffer[k4 + 3];
			dOffset01 -= 4;
			dOffset11 -= 4;
			brOffset += 2;
		}
		var cOffset = 0;
		var dOffset2 = 0;
		var eOffset3 = n2 - 4;
		while(dOffset2 < eOffset3) {
			var a02 = buf2[dOffset2] - buf2[eOffset3 + 2];
			var a11 = buf2[dOffset2 + 1] + buf2[eOffset3 + 3];
			var b0 = c[cOffset + 1] * a02 + c[cOffset] * a11;
			var b1 = c[cOffset + 1] * a11 - c[cOffset] * a02;
			var b2 = buf2[dOffset2] + buf2[eOffset3 + 2];
			var b3 = buf2[dOffset2 + 1] - buf2[eOffset3 + 3];
			buf2[dOffset2] = b2 + b0;
			buf2[dOffset2 + 1] = b3 + b1;
			buf2[eOffset3 + 2] = b2 - b0;
			buf2[eOffset3 + 3] = b1 - b3;
			a02 = buf2[dOffset2 + 2] - buf2[eOffset3];
			a11 = buf2[dOffset2 + 3] + buf2[eOffset3 + 1];
			b0 = c[cOffset + 3] * a02 + c[cOffset + 2] * a11;
			b1 = c[cOffset + 3] * a11 - c[cOffset + 2] * a02;
			b2 = buf2[dOffset2 + 2] + buf2[eOffset3];
			b3 = buf2[dOffset2 + 3] - buf2[eOffset3 + 1];
			buf2[dOffset2 + 2] = b2 + b0;
			buf2[dOffset2 + 3] = b3 + b1;
			buf2[eOffset3] = b2 - b0;
			buf2[eOffset3 + 1] = b1 - b3;
			cOffset += 4;
			dOffset2 += 4;
			eOffset3 -= 4;
		}
		var bOffset = n2 - 8;
		var eOffset4 = n2 - 8;
		var dOffset02 = 0;
		var dOffset12 = n2 - 4;
		var dOffset21 = n2;
		var dOffset3 = n - 4;
		while(eOffset4 >= 0) {
			var p3 = buf2[eOffset4 + 6] * b[bOffset + 7] - buf2[eOffset4 + 7] * b[bOffset + 6];
			var p2 = -buf2[eOffset4 + 6] * b[bOffset + 6] - buf2[eOffset4 + 7] * b[bOffset + 7];
			buffer[dOffset02] = p3;
			buffer[dOffset12 + 3] = -p3;
			buffer[dOffset21] = p2;
			buffer[dOffset3 + 3] = p2;
			var p1 = buf2[eOffset4 + 4] * b[bOffset + 5] - buf2[eOffset4 + 5] * b[bOffset + 4];
			var p0 = -buf2[eOffset4 + 4] * b[bOffset + 4] - buf2[eOffset4 + 5] * b[bOffset + 5];
			buffer[dOffset02 + 1] = p1;
			buffer[dOffset12 + 2] = -p1;
			buffer[dOffset21 + 1] = p0;
			buffer[dOffset3 + 2] = p0;
			p3 = buf2[eOffset4 + 2] * b[bOffset + 3] - buf2[eOffset4 + 3] * b[bOffset + 2];
			p2 = -buf2[eOffset4 + 2] * b[bOffset + 2] - buf2[eOffset4 + 3] * b[bOffset + 3];
			buffer[dOffset02 + 2] = p3;
			buffer[dOffset12 + 1] = -p3;
			buffer[dOffset21 + 2] = p2;
			buffer[dOffset3 + 1] = p2;
			p1 = buf2[eOffset4] * b[bOffset + 1] - buf2[eOffset4 + 1] * b[bOffset];
			p0 = -buf2[eOffset4] * b[bOffset] - buf2[eOffset4 + 1] * b[bOffset + 1];
			buffer[dOffset02 + 3] = p1;
			buffer[dOffset12] = -p1;
			buffer[dOffset21 + 3] = p0;
			buffer[dOffset3] = p0;
			bOffset -= 8;
			eOffset4 -= 8;
			dOffset02 += 4;
			dOffset21 += 4;
			dOffset12 -= 4;
			dOffset3 -= 4;
		}
	}
	,decodePacket: function() {
		var result = this.decodeInitial();
		if(result == null) {
			return null;
		}
		return this.decodePacketRest(result);
	}
	,decodeInitial: function() {
		this.channelBufferStart = this.channelBufferEnd = 0;
		while(true) {
			if(!this.decodeState.maybeStartPacket()) {
				return null;
			}
			if(this.decodeState.readBits(1) != 0) {
				while(true) {
					var _this = this.decodeState;
					var x;
					if(_this.bytesInSeg == 0 && (_this.lastSeg || _this.next() == 0)) {
						x = -1;
					} else {
						_this.bytesInSeg--;
						_this.inputPosition += 1;
						x = _this.input.readByte();
					}
					_this.validBits = 0;
					if(!(-1 != x)) {
						break;
					}
				}
				continue;
			}
			break;
		}
		var n = this.header.modes.length - 1;
		var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
		var i = this.decodeState.readBits(n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0);
		if(i == -1 || i >= this.header.modes.length) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 519, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "decodeInitial"}));
		}
		var m = this.header.modes[i];
		var n1;
		var prev;
		var next;
		if(m.blockflag) {
			n1 = this.header.blocksize1;
			prev = this.decodeState.readBits(1);
			next = this.decodeState.readBits(1);
		} else {
			next = 0;
			prev = 0;
			n1 = this.header.blocksize0;
		}
		var windowCenter = n1 >> 1;
		return { mode : i, left : m.blockflag && prev == 0 ? { start : n1 - this.header.blocksize0 >> 2, end : n1 + this.header.blocksize0 >> 2} : { start : 0, end : windowCenter}, right : m.blockflag && next == 0 ? { start : n1 * 3 - this.header.blocksize0 >> 2, end : n1 * 3 + this.header.blocksize0 >> 2} : { start : windowCenter, end : n1}};
	}
	,decodePacketRest: function(r) {
		var m = this.header.modes[r.mode];
		var zeroChannel = new Array(256);
		var reallyZeroChannel = new Array(256);
		var n = m.blockflag ? this.header.blocksize1 : this.header.blocksize0;
		var map = this.header.mapping[m.mapping];
		var n2 = n >> 1;
		var rangeList = [256,128,86,64];
		var codebooks = this.header.codebooks;
		var _g = 0;
		var _g1 = this.header.channel;
		while(_g < _g1) {
			var i = _g++;
			var s = map.chan[i].mux;
			zeroChannel[i] = false;
			var floor = this.header.floorConfig[map.submapFloor[s]];
			if(floor.type == 0) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 581, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "decodePacketRest"}));
			} else {
				var g = floor.floor1;
				if(this.decodeState.readBits(1) != 0) {
					var fy = [];
					var step2Flag = new Array(256);
					var range = rangeList[g.floor1Multiplier - 1];
					var offset = 2;
					fy = this.finalY[i];
					var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
					fy[0] = this.decodeState.readBits((range < 16384 ? range < 16 ? log2_4[range] : range < 512 ? 5 + log2_4[range >> 5] : 10 + log2_4[range >> 10] : range < 16777216 ? range < 524288 ? 15 + log2_4[range >> 15] : 20 + log2_4[range >> 20] : range < 536870912 ? 25 + log2_4[range >> 25] : range < -2147483648 ? 30 + log2_4[range >> 30] : 0) - 1);
					var log2_41 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
					fy[1] = this.decodeState.readBits((range < 16384 ? range < 16 ? log2_41[range] : range < 512 ? 5 + log2_41[range >> 5] : 10 + log2_41[range >> 10] : range < 16777216 ? range < 524288 ? 15 + log2_41[range >> 15] : 20 + log2_41[range >> 20] : range < 536870912 ? 25 + log2_41[range >> 25] : range < -2147483648 ? 30 + log2_41[range >> 30] : 0) - 1);
					var _g2 = 0;
					var _g11 = g.partitions;
					while(_g2 < _g11) {
						var pclass = g.partitionClassList[_g2++];
						var cdim = g.classDimensions[pclass];
						var cbits = g.classSubclasses[pclass];
						var csub = (1 << cbits) - 1;
						var cval = 0;
						if(cbits != 0) {
							var c = codebooks[g.classMasterbooks[pclass]];
							var _this = this.decodeState;
							if(_this.validBits < 10) {
								_this.prepHuffman();
							}
							var i1 = c.fastHuffman[_this.acc & 1023];
							var val;
							if(i1 >= 0) {
								var l = c.codewordLengths[i1];
								_this.acc = _this.acc >>> l;
								_this.validBits -= l;
								if(_this.validBits < 0) {
									_this.validBits = 0;
									val = -1;
								} else {
									val = i1;
								}
							} else {
								val = _this.decodeScalarRaw(c);
							}
							if(c.sparse) {
								val = c.sortedValues[val];
							}
							cval = val;
						}
						var books = g.subclassBooks[pclass];
						var _g3 = 0;
						while(_g3 < cdim) {
							++_g3;
							var book = books[cval & csub];
							cval >>= cbits;
							var tmp = offset++;
							var tmp1;
							if(book >= 0) {
								var _this1 = this.decodeState;
								var c1 = codebooks[book];
								if(_this1.validBits < 10) {
									_this1.prepHuffman();
								}
								var i2 = c1.fastHuffman[_this1.acc & 1023];
								var val1;
								if(i2 >= 0) {
									var l1 = c1.codewordLengths[i2];
									_this1.acc = _this1.acc >>> l1;
									_this1.validBits -= l1;
									if(_this1.validBits < 0) {
										_this1.validBits = 0;
										val1 = -1;
									} else {
										val1 = i2;
									}
								} else {
									val1 = _this1.decodeScalarRaw(c1);
								}
								if(c1.sparse) {
									val1 = c1.sortedValues[val1];
								}
								tmp1 = val1;
							} else {
								tmp1 = 0;
							}
							fy[tmp] = tmp1;
						}
					}
					if(this.decodeState.validBits == -1) {
						zeroChannel[i] = true;
						continue;
					}
					step2Flag[1] = true;
					step2Flag[0] = true;
					var naighbors = g.neighbors;
					var xlist = g.xlist;
					var _g21 = 2;
					var _g31 = g.values;
					while(_g21 < _g31) {
						var j = _g21++;
						var low = naighbors[j][0];
						var high = naighbors[j][1];
						var x0 = xlist[low];
						var y0 = fy[low];
						var dy = fy[high] - y0;
						var off = Math.abs(dy) * (xlist[j] - x0) / (xlist[high] - x0) | 0;
						var lowroom = dy < 0 ? y0 - off : y0 + off;
						var val2 = fy[j];
						var highroom = range - lowroom;
						if(val2 != 0) {
							step2Flag[high] = true;
							step2Flag[low] = true;
							step2Flag[j] = true;
							if(val2 >= (highroom < lowroom ? highroom * 2 : lowroom * 2)) {
								if(highroom > lowroom) {
									fy[j] = val2 - lowroom + lowroom;
								} else {
									fy[j] = lowroom - val2 + highroom - 1;
								}
							} else if((val2 & 1) != 0) {
								fy[j] = lowroom - (val2 + 1 >> 1);
							} else {
								fy[j] = lowroom + (val2 >> 1);
							}
						} else {
							step2Flag[j] = false;
							fy[j] = lowroom;
						}
					}
					var _g4 = 0;
					var _g5 = g.values;
					while(_g4 < _g5) {
						var j1 = _g4++;
						if(!step2Flag[j1]) {
							fy[j1] = -1;
						}
					}
				} else {
					zeroChannel[i] = true;
				}
			}
		}
		var _g22 = 0;
		var _g32 = this.header.channel;
		while(_g22 < _g32) {
			var i3 = _g22++;
			reallyZeroChannel[i3] = zeroChannel[i3];
		}
		var _g41 = 0;
		var _g51 = map.couplingSteps;
		while(_g41 < _g51) {
			var i4 = _g41++;
			if(!zeroChannel[map.chan[i4].magnitude] || !zeroChannel[map.chan[i4].angle]) {
				var index = map.chan[i4].magnitude;
				zeroChannel[map.chan[i4].angle] = false;
				zeroChannel[index] = false;
			}
		}
		var _g6 = 0;
		var _g7 = map.submaps;
		while(_g6 < _g7) {
			var i5 = _g6++;
			var residueBuffers = new Array(this.header.channel);
			var doNotDecode = new Array(256);
			var ch = 0;
			var _g61 = 0;
			var _g71 = this.header.channel;
			while(_g61 < _g71) {
				var j2 = _g61++;
				if(map.chan[j2].mux == i5) {
					if(zeroChannel[j2]) {
						doNotDecode[ch] = true;
						residueBuffers[ch] = null;
					} else {
						doNotDecode[ch] = false;
						residueBuffers[ch] = this.channelBuffers[j2];
					}
					++ch;
				}
			}
			this.header.residueConfig[map.submapResidue[i5]].decode(this.decodeState,this.header,residueBuffers,ch,n2,doNotDecode,this.channelBuffers);
		}
		var i6 = map.couplingSteps;
		var n21 = n >> 1;
		while(--i6 >= 0) {
			var m1 = this.channelBuffers[map.chan[i6].magnitude];
			var a = this.channelBuffers[map.chan[i6].angle];
			var _g8 = 0;
			while(_g8 < n21) {
				var j3 = _g8++;
				var a2;
				var m2;
				if(m1[j3] > 0) {
					if(a[j3] > 0) {
						m2 = m1[j3];
						a2 = m1[j3] - a[j3];
					} else {
						a2 = m1[j3];
						m2 = m1[j3] + a[j3];
					}
				} else if(a[j3] > 0) {
					m2 = m1[j3];
					a2 = m1[j3] + a[j3];
				} else {
					a2 = m1[j3];
					m2 = m1[j3] - a[j3];
				}
				m1[j3] = m2;
				a[j3] = a2;
			}
		}
		var _g81 = 0;
		var _g9 = this.header.channel;
		while(_g81 < _g9) {
			var i7 = _g81++;
			if(reallyZeroChannel[i7]) {
				var _g82 = 0;
				while(_g82 < n21) this.channelBuffers[i7][_g82++] = 0;
			} else {
				map.doFloor(this.header.floorConfig,i7,n,this.channelBuffers[i7],this.finalY[i7],null);
			}
		}
		var _g10 = 0;
		var _g111 = this.header.channel;
		while(_g10 < _g111) this.inverseMdct(this.channelBuffers[_g10++],n,m.blockflag);
		var _this2 = this.decodeState;
		while(_this2.bytesInSeg != 0 || !_this2.lastSeg && _this2.next() != 0) {
			_this2.bytesInSeg--;
			_this2.inputPosition += 1;
			_this2.input.readByte();
		}
		return this.decodeState.finishDecodePacket(this.previousLength,n,r);
	}
	,__class__: kha_audio2_ogg_vorbis_VorbisDecoder
};
var kha_audio2_ogg_vorbis_VorbisTools = function() { };
$hxClasses["kha.audio2.ogg.vorbis.VorbisTools"] = kha_audio2_ogg_vorbis_VorbisTools;
kha_audio2_ogg_vorbis_VorbisTools.__name__ = "kha.audio2.ogg.vorbis.VorbisTools";
kha_audio2_ogg_vorbis_VorbisTools.pointCompare = function(a,b) {
	if(a.x < b.x) {
		return -1;
	} else if(a.x > b.x) {
		return 1;
	} else {
		return 0;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.uintAsc = function(a,b) {
	if(_$UInt_UInt_$Impl_$.gt(b,a)) {
		return -1;
	} else if(a == b) {
		return 0;
	} else {
		return 1;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.lookup1Values = function(entries,dim) {
	var r = Math.exp(Math.log(entries) / dim) | 0;
	if((Math.pow(r + 1,dim) | 0) <= entries) {
		++r;
	}
	return r;
};
kha_audio2_ogg_vorbis_VorbisTools.computeWindow = function(n,$window) {
	var n2 = n >> 1;
	var _g = 0;
	while(_g < n2) {
		var i = _g++;
		$window[i] = Math.sin(1.57079632679489656 * kha_audio2_ogg_vorbis_VorbisTools.square(Math.sin((i + 0.5) / n2 * 0.5 * 3.14159265358979323846264)));
	}
};
kha_audio2_ogg_vorbis_VorbisTools.square = function(f) {
	return f * f;
};
kha_audio2_ogg_vorbis_VorbisTools.computeBitReverse = function(n,rev) {
	var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
	var ld = (n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0) - 1;
	var n8 = n >> 3;
	var _g = 0;
	while(_g < n8) {
		var i = _g++;
		var n1 = i;
		n1 = (n1 & -1431655766) >>> 1 | (n1 & 1431655765) << 1;
		n1 = (n1 & -858993460) >>> 2 | (n1 & 858993459) << 2;
		n1 = (n1 & -252645136) >>> 4 | (n1 & 252645135) << 4;
		n1 = (n1 & -16711936) >>> 8 | (n1 & 16711935) << 8;
		rev[i] = (n1 >>> 16 | n1 << 16) >>> 32 - ld + 3 << 2;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.computeTwiddleFactors = function(n,af,bf,cf) {
	var n4 = n >> 2;
	var n8 = n >> 3;
	var k2 = 0;
	var _g = 0;
	while(_g < n4) {
		var k = _g++;
		af[k2] = Math.cos(4 * k * 3.14159265358979323846264 / n);
		af[k2 + 1] = -Math.sin(4 * k * 3.14159265358979323846264 / n);
		bf[k2] = Math.cos((k2 + 1) * 3.14159265358979323846264 / n / 2) * 0.5;
		bf[k2 + 1] = Math.sin((k2 + 1) * 3.14159265358979323846264 / n / 2) * 0.5;
		k2 += 2;
	}
	var k21 = 0;
	var _g2 = 0;
	while(_g2 < n8) {
		++_g2;
		cf[k21] = Math.cos(2 * (k21 + 1) * 3.14159265358979323846264 / n);
		cf[k21 + 1] = -Math.sin(2 * (k21 + 1) * 3.14159265358979323846264 / n);
		k21 += 2;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.drawLine = function(output,x0,y0,x1,y1,n) {
	if(kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable == null) {
		kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable = new Array(32);
		var _g = 0;
		while(_g < 32) {
			var i = _g++;
			kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable[i] = new Array(64);
			var _g1 = 1;
			while(_g1 < 64) {
				var j = _g1++;
				kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable[i][j] = i / j | 0;
			}
		}
	}
	var dy = y1 - y0;
	var adx = x1 - x0;
	var ady = dy < 0 ? -dy : dy;
	var base;
	var y = y0;
	var err = 0;
	var sy;
	if(adx < 64 && ady < 32) {
		if(dy < 0) {
			base = -kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable[ady][adx];
			sy = base - 1;
		} else {
			base = kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable[ady][adx];
			sy = base + 1;
		}
	} else {
		base = dy / adx | 0;
		sy = dy < 0 ? base - 1 : base + 1;
	}
	ady -= (base < 0 ? -base : base) * adx;
	if(x1 > n) {
		x1 = n;
	}
	output[x0] = output[x0] * kha_audio2_ogg_vorbis_VorbisTools.INVERSE_DB_TABLE[y0];
	var _g2 = x0 + 1;
	var _g11 = x1;
	while(_g2 < _g11) {
		var i1 = _g2++;
		err += ady;
		if(err >= adx) {
			err -= adx;
			y += sy;
		} else {
			y += base;
		}
		output[i1] = output[i1] * kha_audio2_ogg_vorbis_VorbisTools.INVERSE_DB_TABLE[y];
	}
};
var kha_audio2_ogg_vorbis_data_Codebook = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Codebook"] = kha_audio2_ogg_vorbis_data_Codebook;
kha_audio2_ogg_vorbis_data_Codebook.__name__ = "kha.audio2.ogg.vorbis.data.Codebook";
kha_audio2_ogg_vorbis_data_Codebook.read = function(decodeState) {
	var c = new kha_audio2_ogg_vorbis_data_Codebook();
	if(decodeState.readBits(8) != 66 || decodeState.readBits(8) != 67 || decodeState.readBits(8) != 86) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 40, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
	}
	var x = decodeState.readBits(8);
	c.dimensions = (decodeState.readBits(8) << 8) + x;
	var x1 = decodeState.readBits(8);
	var y = decodeState.readBits(8);
	c.entries = (decodeState.readBits(8) << 16) + (y << 8) + x1;
	var ordered = decodeState.readBits(1);
	c.sparse = ordered != 0 ? false : decodeState.readBits(1) != 0;
	var lengths = new Array(c.entries);
	if(!c.sparse) {
		c.codewordLengths = lengths;
	}
	var total = 0;
	if(ordered != 0) {
		var currentEntry = 0;
		var currentLength = decodeState.readBits(5) + 1;
		while(currentEntry < c.entries) {
			var limit = c.entries - currentEntry;
			var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
			var n = decodeState.readBits(limit < 16384 ? limit < 16 ? log2_4[limit] : limit < 512 ? 5 + log2_4[limit >> 5] : 10 + log2_4[limit >> 10] : limit < 16777216 ? limit < 524288 ? 15 + log2_4[limit >> 15] : 20 + log2_4[limit >> 20] : limit < 536870912 ? 25 + log2_4[limit >> 25] : limit < -2147483648 ? 30 + log2_4[limit >> 30] : 0);
			if(currentEntry + n > c.entries) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"codebook entrys",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 67, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
			}
			var _g = 0;
			while(_g < n) lengths[currentEntry + _g++] = currentLength;
			currentEntry += n;
			++currentLength;
		}
	} else {
		var _g1 = 0;
		var _g11 = c.entries;
		while(_g1 < _g11) {
			var j = _g1++;
			if((c.sparse ? decodeState.readBits(1) : 1) != 0) {
				lengths[j] = decodeState.readBits(5) + 1;
				++total;
			} else {
				lengths[j] = 255;
			}
		}
	}
	if(c.sparse && total >= c.entries >> 2) {
		c.codewordLengths = lengths;
		c.sparse = false;
	}
	var tmp;
	if(c.sparse) {
		tmp = total;
	} else {
		var sortedCount = 0;
		var _g2 = 0;
		var _g12 = c.entries;
		while(_g2 < _g12) {
			var l = lengths[_g2++];
			if(l > 10 && l != 255) {
				++sortedCount;
			}
		}
		tmp = sortedCount;
	}
	c.sortedEntries = tmp;
	var values = null;
	if(!c.sparse) {
		c.codewords = new Array(c.entries);
	} else if(c.sortedEntries != 0) {
		c.codewordLengths = new Array(c.sortedEntries);
		c.codewords = new Array(c.entries);
		values = new Array(c.entries);
	}
	if(!c.computeCodewords(lengths,c.entries,values)) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"compute codewords",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 120, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
	}
	if(c.sortedEntries != 0) {
		c.sortedCodewords = [];
		c.sortedValues = new Array(c.sortedEntries);
		c.computeSortedHuffman(lengths,values);
	}
	if(c.sparse) {
		c.codewords = null;
		lengths = null;
	}
	c.computeAcceleratedHuffman();
	c.lookupType = decodeState.readBits(4);
	if(c.lookupType > 2) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"codebook lookup type",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 143, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
	}
	if(c.lookupType > 0) {
		var x2 = decodeState.readBits(32);
		var mantissa = _$UInt_UInt_$Impl_$.toFloat(x2 & 2097151);
		c.minimumValue = ((x2 & -2147483648) != 0 ? -mantissa : mantissa) * Math.pow(2,((x2 & 2145386496) >>> 21) - 788);
		var x3 = decodeState.readBits(32);
		var mantissa1 = _$UInt_UInt_$Impl_$.toFloat(x3 & 2097151);
		c.deltaValue = ((x3 & -2147483648) != 0 ? -mantissa1 : mantissa1) * Math.pow(2,((x3 & 2145386496) >>> 21) - 788);
		c.valueBits = decodeState.readBits(4) + 1;
		c.sequenceP = decodeState.readBits(1) != 0;
		if(c.lookupType == 1) {
			c.lookupValues = kha_audio2_ogg_vorbis_VorbisTools.lookup1Values(c.entries,c.dimensions);
		} else {
			c.lookupValues = c.entries * c.dimensions;
		}
		var mults = new Array(c.lookupValues);
		var _g3 = 0;
		var _g13 = c.lookupValues;
		while(_g3 < _g13) {
			var j1 = _g3++;
			var q = decodeState.readBits(c.valueBits);
			if(q == -1) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"fail lookup",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 161, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
			}
			mults[j1] = q;
		}
		c.multiplicands = new Array(c.lookupValues);
		var _g21 = 0;
		var _g31 = c.lookupValues;
		while(_g21 < _g31) {
			var j2 = _g21++;
			c.multiplicands[j2] = mults[j2] * c.deltaValue + c.minimumValue;
		}
		if(c.lookupType == 2 && c.sequenceP) {
			var _g22 = 1;
			var _g32 = c.lookupValues;
			while(_g22 < _g32) {
				var j3 = _g22++;
				c.multiplicands[j3] = c.multiplicands[j3 - 1];
			}
			c.sequenceP = false;
		}
	}
	return c;
};
kha_audio2_ogg_vorbis_data_Codebook.prototype = {
	dimensions: null
	,entries: null
	,codewordLengths: null
	,minimumValue: null
	,deltaValue: null
	,valueBits: null
	,lookupType: null
	,sequenceP: null
	,sparse: null
	,lookupValues: null
	,multiplicands: null
	,codewords: null
	,fastHuffman: null
	,sortedCodewords: null
	,sortedValues: null
	,sortedEntries: null
	,computeCodewords: function(len,n,values) {
		var available = new Array(32);
		available[0] = 0;
		available[1] = 0;
		available[2] = 0;
		available[3] = 0;
		available[4] = 0;
		available[5] = 0;
		available[6] = 0;
		available[7] = 0;
		available[8] = 0;
		available[9] = 0;
		available[10] = 0;
		available[11] = 0;
		available[12] = 0;
		available[13] = 0;
		available[14] = 0;
		available[15] = 0;
		available[16] = 0;
		available[17] = 0;
		available[18] = 0;
		available[19] = 0;
		available[20] = 0;
		available[21] = 0;
		available[22] = 0;
		available[23] = 0;
		available[24] = 0;
		available[25] = 0;
		available[26] = 0;
		available[27] = 0;
		available[28] = 0;
		available[29] = 0;
		available[30] = 0;
		available[31] = 0;
		var k = 0;
		while(k < n) {
			if(len[k] < 255) {
				break;
			}
			++k;
		}
		if(k == n) {
			return true;
		}
		var m = 0;
		m = 1;
		if(!this.sparse) {
			this.codewords[k] = 0;
		} else {
			this.codewords[0] = 0;
			this.codewordLengths[0] = len[k];
			values[0] = k;
		}
		var i = 0;
		while(++i <= len[k]) available[i] = 1 << 32 - i;
		i = k;
		while(++i < n) {
			var z = len[i];
			if(z == 255) {
				continue;
			}
			while(z > 0 && available[z] == 0) --z;
			if(z == 0) {
				return false;
			}
			var res = available[z];
			available[z] = 0;
			var n1 = res;
			n1 = (res & -1431655766) >>> 1 | (res & 1431655765) << 1;
			n1 = (n1 & -858993460) >>> 2 | (n1 & 858993459) << 2;
			n1 = (n1 & -252645136) >>> 4 | (n1 & 252645135) << 4;
			n1 = (n1 & -16711936) >>> 8 | (n1 & 16711935) << 8;
			var huffCode = n1 >>> 16 | n1 << 16;
			var count = m++;
			if(!this.sparse) {
				this.codewords[i] = huffCode;
			} else {
				this.codewords[count] = huffCode;
				this.codewordLengths[count] = len[i];
				values[count] = i;
			}
			if(z != len[i]) {
				var y = len[i];
				while(y > z) {
					available[y] = res + (1 << 32 - y);
					--y;
				}
			}
		}
		return true;
	}
	,computeSortedHuffman: function(lengths,values) {
		if(!this.sparse) {
			var k = 0;
			var _g = 0;
			var _g1 = this.entries;
			while(_g < _g1) {
				var i = _g++;
				var len = lengths[i];
				if(this.sparse ? true : len == 255 ? false : len > 10) {
					var n = this.codewords[i];
					n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
					n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
					n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
					n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
					this.sortedCodewords[k++] = n >>> 16 | n << 16;
				}
			}
		} else {
			var _g2 = 0;
			var _g11 = this.sortedEntries;
			while(_g2 < _g11) {
				var i1 = _g2++;
				var n1 = this.codewords[i1];
				n1 = (n1 & -1431655766) >>> 1 | (n1 & 1431655765) << 1;
				n1 = (n1 & -858993460) >>> 2 | (n1 & 858993459) << 2;
				n1 = (n1 & -252645136) >>> 4 | (n1 & 252645135) << 4;
				n1 = (n1 & -16711936) >>> 8 | (n1 & 16711935) << 8;
				this.sortedCodewords[i1] = n1 >>> 16 | n1 << 16;
			}
		}
		this.sortedCodewords[this.sortedEntries] = -1;
		this.sortedCodewords.sort(kha_audio2_ogg_vorbis_VorbisTools.uintAsc);
		var _g3 = 0;
		var _g12 = this.sparse ? this.sortedEntries : this.entries;
		while(_g3 < _g12) {
			var i2 = _g3++;
			var huffLen = this.sparse ? lengths[values[i2]] : lengths[i2];
			if(this.sparse ? true : huffLen == 255 ? false : huffLen > 10) {
				var n2 = this.codewords[i2];
				n2 = (n2 & -1431655766) >>> 1 | (n2 & 1431655765) << 1;
				n2 = (n2 & -858993460) >>> 2 | (n2 & 858993459) << 2;
				n2 = (n2 & -252645136) >>> 4 | (n2 & 252645135) << 4;
				n2 = (n2 & -16711936) >>> 8 | (n2 & 16711935) << 8;
				var code = n2 >>> 16 | n2 << 16;
				var x = 0;
				var n3 = this.sortedEntries;
				while(n3 > 1) {
					var m = x + (n3 >> 1);
					if(_$UInt_UInt_$Impl_$.gte(code,this.sortedCodewords[m])) {
						x = m;
						n3 -= n3 >> 1;
					} else {
						n3 >>= 1;
					}
				}
				if(this.sparse) {
					this.sortedValues[x] = values[i2];
					this.codewordLengths[x] = huffLen;
				} else {
					this.sortedValues[x] = i2;
				}
			}
		}
	}
	,computeAcceleratedHuffman: function() {
		this.fastHuffman = new Array(1024);
		this.fastHuffman[0] = -1;
		var _g = 0;
		while(_g < 1024) this.fastHuffman[_g++] = -1;
		var _g2 = 0;
		var _g3 = this.sparse ? this.sortedEntries : this.entries;
		while(_g2 < _g3) {
			var i = _g2++;
			if(this.codewordLengths[i] <= 10) {
				var z;
				if(this.sparse) {
					var n = this.sortedCodewords[i];
					n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
					n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
					n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
					n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
					z = n >>> 16 | n << 16;
				} else {
					z = this.codewords[i];
				}
				while(z < 1024) {
					this.fastHuffman[z] = i;
					z += 1 << this.codewordLengths[i];
				}
			}
		}
	}
	,codebookDecode: function(decodeState,output,offset,len) {
		if(decodeState.validBits < 10) {
			decodeState.prepHuffman();
		}
		var i = this.fastHuffman[decodeState.acc & 1023];
		var val;
		if(i >= 0) {
			var l = this.codewordLengths[i];
			decodeState.acc = decodeState.acc >>> l;
			decodeState.validBits -= l;
			if(decodeState.validBits < 0) {
				decodeState.validBits = 0;
				val = -1;
			} else {
				val = i;
			}
		} else {
			val = decodeState.decodeScalarRaw(this);
		}
		if(this.sparse) {
			val = this.sortedValues[val];
		}
		var z = val;
		var lookupValues = this.lookupValues;
		var sequenceP = this.sequenceP;
		var multiplicands = this.multiplicands;
		var minimumValue = this.minimumValue;
		if(z < 0) {
			return false;
		}
		if(len > this.dimensions) {
			len = this.dimensions;
		}
		if(this.lookupType == 1) {
			var div = 1;
			var last = 0.0;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var val1 = multiplicands[_$UInt_UInt_$Impl_$.toFloat(z / div | 0) % _$UInt_UInt_$Impl_$.toFloat(lookupValues) | 0] + last;
				var _g2 = offset + _g++;
				output[_g2] = output[_g2] + val1;
				if(sequenceP) {
					last = val1 + minimumValue;
				}
				div = div * lookupValues;
			}
			return true;
		}
		z *= this.dimensions;
		if(sequenceP) {
			var last1 = 0.0;
			var _g3 = 0;
			var _g11 = len;
			while(_g3 < _g11) {
				var i1 = _g3++;
				var val2 = multiplicands[z + i1] + last1;
				var _g4 = offset + i1;
				output[_g4] = output[_g4] + val2;
				last1 = val2 + minimumValue;
			}
		} else {
			var _g5 = 0;
			var _g12 = len;
			while(_g5 < _g12) {
				var i2 = _g5++;
				var _g6 = offset + i2;
				output[_g6] = output[_g6] + multiplicands[z + i2];
			}
		}
		return true;
	}
	,codebookDecodeStep: function(decodeState,output,offset,len,step) {
		if(decodeState.validBits < 10) {
			decodeState.prepHuffman();
		}
		var i = this.fastHuffman[decodeState.acc & 1023];
		var val;
		if(i >= 0) {
			var l = this.codewordLengths[i];
			decodeState.acc = decodeState.acc >>> l;
			decodeState.validBits -= l;
			if(decodeState.validBits < 0) {
				decodeState.validBits = 0;
				val = -1;
			} else {
				val = i;
			}
		} else {
			val = decodeState.decodeScalarRaw(this);
		}
		if(this.sparse) {
			val = this.sortedValues[val];
		}
		var z = val;
		var last = 0.0;
		if(z < 0) {
			return false;
		}
		if(len > this.dimensions) {
			len = this.dimensions;
		}
		var lookupValues = this.lookupValues;
		var sequenceP = this.sequenceP;
		var multiplicands = this.multiplicands;
		if(this.lookupType == 1) {
			var div = 1;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var val1 = multiplicands[_$UInt_UInt_$Impl_$.toFloat(z / div | 0) % _$UInt_UInt_$Impl_$.toFloat(lookupValues) | 0] + last;
				var _g2 = offset + _g++ * step;
				output[_g2] = output[_g2] + val1;
				if(sequenceP) {
					last = val1;
				}
				div = div * lookupValues;
			}
			return true;
		}
		z *= this.dimensions;
		var _g3 = 0;
		var _g11 = len;
		while(_g3 < _g11) {
			var i1 = _g3++;
			var val2 = multiplicands[z + i1] + last;
			var _g4 = offset + i1 * step;
			output[_g4] = output[_g4] + val2;
			if(sequenceP) {
				last = val2;
			}
		}
		return true;
	}
	,decodeDeinterleaveRepeat: function(decodeState,residueBuffers,ch,cInter,pInter,len,totalDecode) {
		var effective = this.dimensions;
		if(this.lookupType == 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 488, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "decodeDeinterleaveRepeat"}));
		}
		var multiplicands = this.multiplicands;
		var sequenceP = this.sequenceP;
		var lookupValues = this.lookupValues;
		while(totalDecode > 0) {
			var last = 0.0;
			if(decodeState.validBits < 10) {
				decodeState.prepHuffman();
			}
			var i = this.fastHuffman[decodeState.acc & 1023];
			var val;
			if(i >= 0) {
				var l = this.codewordLengths[i];
				decodeState.acc = decodeState.acc >>> l;
				decodeState.validBits -= l;
				if(decodeState.validBits < 0) {
					decodeState.validBits = 0;
					val = -1;
				} else {
					val = i;
				}
			} else {
				val = decodeState.decodeScalarRaw(this);
			}
			if(this.sparse) {
				val = this.sortedValues[val];
			}
			var z = val;
			if(z < 0) {
				if(decodeState.bytesInSeg == 0 && decodeState.lastSeg) {
					return null;
				}
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 503, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "decodeDeinterleaveRepeat"}));
			}
			if(cInter + pInter * ch + effective > len * ch) {
				effective = len * ch - (pInter * ch - cInter);
			}
			if(this.lookupType == 1) {
				var div = 1;
				if(sequenceP) {
					var _g = 0;
					var _g1 = effective;
					while(_g < _g1) {
						++_g;
						var val1 = multiplicands[_$UInt_UInt_$Impl_$.toFloat(z / div | 0) % _$UInt_UInt_$Impl_$.toFloat(lookupValues) | 0] + last;
						var _g2 = pInter;
						var _g11 = residueBuffers[cInter];
						_g11[_g2] = _g11[_g2] + val1;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
						last = val1;
						div = div * lookupValues;
					}
				} else {
					var _g3 = 0;
					var _g12 = effective;
					while(_g3 < _g12) {
						++_g3;
						var _g4 = pInter;
						var _g13 = residueBuffers[cInter];
						_g13[_g4] = _g13[_g4] + multiplicands[_$UInt_UInt_$Impl_$.toFloat(z / div | 0) % _$UInt_UInt_$Impl_$.toFloat(lookupValues) | 0];
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
						div = div * lookupValues;
					}
				}
			} else {
				z *= this.dimensions;
				if(sequenceP) {
					var _g5 = 0;
					var _g14 = effective;
					while(_g5 < _g14) {
						var val2 = multiplicands[z + _g5++] + last;
						var _g6 = pInter;
						var _g15 = residueBuffers[cInter];
						_g15[_g6] = _g15[_g6] + val2;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
						last = val2;
					}
				} else {
					var _g7 = 0;
					var _g16 = effective;
					while(_g7 < _g16) {
						var _g8 = pInter;
						var _g17 = residueBuffers[cInter];
						_g17[_g8] = _g17[_g8] + multiplicands[z + _g7++];
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
					}
				}
			}
			totalDecode -= effective;
		}
		return { cInter : cInter, pInter : pInter};
	}
	,residueDecode: function(decodeState,target,offset,n,rtype) {
		if(rtype == 0) {
			var step = n / this.dimensions | 0;
			var _g = 0;
			while(_g < step) {
				var k = _g++;
				if(!this.codebookDecodeStep(decodeState,target,offset + k,n - offset - k,step)) {
					return false;
				}
			}
		} else {
			var k1 = 0;
			while(k1 < n) {
				if(!this.codebookDecode(decodeState,target,offset,n - k1)) {
					return false;
				}
				k1 += this.dimensions;
				offset += this.dimensions;
			}
		}
		return true;
	}
	,__class__: kha_audio2_ogg_vorbis_data_Codebook
};
var kha_audio2_ogg_vorbis_data_Comment = function() {
	this.data = new haxe_ds_StringMap();
};
$hxClasses["kha.audio2.ogg.vorbis.data.Comment"] = kha_audio2_ogg_vorbis_data_Comment;
kha_audio2_ogg_vorbis_data_Comment.__name__ = "kha.audio2.ogg.vorbis.data.Comment";
kha_audio2_ogg_vorbis_data_Comment.prototype = {
	data: null
	,get_loopStart: function() {
		return Std.parseInt(this.getString("loopstart"));
	}
	,get_loopLength: function() {
		return Std.parseInt(this.getString("looplength"));
	}
	,add: function(key,value) {
		key = key.toLowerCase();
		var _this = this.data;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this.data;
			(__map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key]).push(value);
		} else {
			var v = [value];
			var _this2 = this.data;
			if(__map_reserved[key] != null) {
				_this2.setReserved(key,v);
			} else {
				_this2.h[key] = v;
			}
		}
	}
	,getString: function(key) {
		key = key.toLowerCase();
		var _this = this.data;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this.data;
			return (__map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key])[0];
		} else {
			return null;
		}
	}
	,__class__: kha_audio2_ogg_vorbis_data_Comment
};
var kha_audio2_ogg_vorbis_data_Floor = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Floor"] = kha_audio2_ogg_vorbis_data_Floor;
kha_audio2_ogg_vorbis_data_Floor.__name__ = "kha.audio2.ogg.vorbis.data.Floor";
kha_audio2_ogg_vorbis_data_Floor.read = function(decodeState,codebooks) {
	var floor = new kha_audio2_ogg_vorbis_data_Floor();
	floor.type = decodeState.readBits(16);
	if(floor.type > 1) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Floor.hx", lineNumber : 28, className : "kha.audio2.ogg.vorbis.data.Floor", methodName : "read"}));
	}
	if(floor.type == 0) {
		var g = floor.floor0 = new kha_audio2_ogg_vorbis_data_Floor0();
		g.order = decodeState.readBits(8);
		g.rate = decodeState.readBits(16);
		g.barkMapSize = decodeState.readBits(16);
		g.amplitudeBits = decodeState.readBits(6);
		g.amplitudeOffset = decodeState.readBits(8);
		g.numberOfBooks = decodeState.readBits(4) + 1;
		var _g = 0;
		var _g1 = g.numberOfBooks;
		while(_g < _g1) g.bookList[_g++] = decodeState.readBits(8);
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.FEATURE_NOT_SUPPORTED,null,{ fileName : "kha/audio2/ogg/vorbis/data/Floor.hx", lineNumber : 41, className : "kha.audio2.ogg.vorbis.data.Floor", methodName : "read"}));
	} else {
		var p = [];
		var g1 = floor.floor1 = new kha_audio2_ogg_vorbis_data_Floor1();
		var maxClass = -1;
		g1.partitions = decodeState.readBits(5);
		g1.partitionClassList = new Array(g1.partitions);
		var _g2 = 0;
		var _g11 = g1.partitions;
		while(_g2 < _g11) {
			var j = _g2++;
			g1.partitionClassList[j] = decodeState.readBits(4);
			if(g1.partitionClassList[j] > maxClass) {
				maxClass = g1.partitionClassList[j];
			}
		}
		g1.classDimensions = new Array(maxClass + 1);
		g1.classMasterbooks = new Array(maxClass + 1);
		g1.classSubclasses = new Array(maxClass + 1);
		g1.subclassBooks = new Array(maxClass + 1);
		var _g21 = 0;
		var _g3 = maxClass + 1;
		while(_g21 < _g3) {
			var j1 = _g21++;
			g1.classDimensions[j1] = decodeState.readBits(3) + 1;
			g1.classSubclasses[j1] = decodeState.readBits(2);
			if(g1.classSubclasses[j1] != 0) {
				g1.classMasterbooks[j1] = decodeState.readBits(8);
				if(g1.classMasterbooks[j1] >= codebooks.length) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Floor.hx", lineNumber : 64, className : "kha.audio2.ogg.vorbis.data.Floor", methodName : "read"}));
				}
			}
			var kl = 1 << g1.classSubclasses[j1];
			g1.subclassBooks[j1] = new Array(kl);
			var _g22 = 0;
			while(_g22 < kl) {
				var k = _g22++;
				g1.subclassBooks[j1][k] = decodeState.readBits(8) - 1;
				if(g1.subclassBooks[j1][k] >= codebooks.length) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Floor.hx", lineNumber : 73, className : "kha.audio2.ogg.vorbis.data.Floor", methodName : "read"}));
				}
			}
		}
		g1.floor1Multiplier = decodeState.readBits(2) + 1;
		g1.rangebits = decodeState.readBits(4);
		g1.xlist = new Array(250);
		g1.xlist[0] = 0;
		g1.xlist[1] = 1 << g1.rangebits;
		g1.values = 2;
		var _g4 = 0;
		var _g5 = g1.partitions;
		while(_g4 < _g5) {
			var _g41 = 0;
			var _g51 = g1.classDimensions[g1.partitionClassList[_g4++]];
			while(_g41 < _g51) {
				++_g41;
				g1.xlist[g1.values] = decodeState.readBits(g1.rangebits);
				g1.values++;
			}
		}
		var _g6 = 0;
		var _g7 = g1.values;
		while(_g6 < _g7) {
			var j2 = _g6++;
			p.push(new kha_audio2_ogg_vorbis_data_IntPoint());
			p[j2].x = g1.xlist[j2];
			p[j2].y = j2;
		}
		p.sort(kha_audio2_ogg_vorbis_VorbisTools.pointCompare);
		g1.sortedOrder = new Array(g1.values);
		var _g8 = 0;
		var _g9 = g1.values;
		while(_g8 < _g9) {
			var j3 = _g8++;
			g1.sortedOrder[j3] = p[j3].y;
		}
		g1.neighbors = new Array(g1.values);
		var _g10 = 2;
		var _g111 = g1.values;
		while(_g10 < _g111) {
			var j4 = _g10++;
			var x = g1.xlist;
			var low = -1;
			var high = 65536;
			var plow = 0;
			var phigh = 0;
			var _g12 = 0;
			while(_g12 < j4) {
				var i = _g12++;
				if(x[i] > low && x[i] < x[j4]) {
					plow = i;
					low = x[i];
				}
				if(x[i] < high && x[i] > x[j4]) {
					phigh = i;
					high = x[i];
				}
			}
			g1.neighbors[j4] = new Array(g1.values);
			g1.neighbors[j4][0] = plow;
			g1.neighbors[j4][1] = phigh;
		}
	}
	return floor;
};
kha_audio2_ogg_vorbis_data_Floor.prototype = {
	floor0: null
	,floor1: null
	,type: null
	,__class__: kha_audio2_ogg_vorbis_data_Floor
};
var kha_audio2_ogg_vorbis_data_Floor0 = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Floor0"] = kha_audio2_ogg_vorbis_data_Floor0;
kha_audio2_ogg_vorbis_data_Floor0.__name__ = "kha.audio2.ogg.vorbis.data.Floor0";
kha_audio2_ogg_vorbis_data_Floor0.prototype = {
	order: null
	,rate: null
	,barkMapSize: null
	,amplitudeBits: null
	,amplitudeOffset: null
	,numberOfBooks: null
	,bookList: null
	,__class__: kha_audio2_ogg_vorbis_data_Floor0
};
var kha_audio2_ogg_vorbis_data_Floor1 = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Floor1"] = kha_audio2_ogg_vorbis_data_Floor1;
kha_audio2_ogg_vorbis_data_Floor1.__name__ = "kha.audio2.ogg.vorbis.data.Floor1";
kha_audio2_ogg_vorbis_data_Floor1.prototype = {
	partitions: null
	,partitionClassList: null
	,classDimensions: null
	,classSubclasses: null
	,classMasterbooks: null
	,subclassBooks: null
	,xlist: null
	,sortedOrder: null
	,neighbors: null
	,floor1Multiplier: null
	,rangebits: null
	,values: null
	,__class__: kha_audio2_ogg_vorbis_data_Floor1
};
var kha_audio2_ogg_vorbis_data_Header = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Header"] = kha_audio2_ogg_vorbis_data_Header;
kha_audio2_ogg_vorbis_data_Header.__name__ = "kha.audio2.ogg.vorbis.data.Header";
kha_audio2_ogg_vorbis_data_Header.read = function(decodeState) {
	var page = decodeState.page;
	page.start(decodeState);
	if((page.flag & 2) == 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"not firstPage",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 46, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	if((page.flag & 4) != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"lastPage",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 49, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	if((page.flag & 1) != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"continuedPacket",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 52, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.firstPageValidate();
	decodeState.inputPosition += 1;
	if(decodeState.input.readByte() != 1) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"decodeState head",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 57, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	var header = new haxe_io_Bytes(new ArrayBuffer(6));
	var x;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[0] = x;
	var x1;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x1 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x1 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[1] = x1;
	var x2;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x2 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x2 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[2] = x2;
	var x3;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x3 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x3 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[3] = x3;
	var x4;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x4 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x4 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[4] = x4;
	var x5;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x5 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x5 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[5] = x5;
	if(header.toString() != "vorbis") {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"vorbis header",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 301, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "vorbisValidate"}));
	}
	decodeState.inputPosition += 4;
	var version = decodeState.input.readInt32();
	if(version != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"vorbis version : " + version,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 66, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	var header1 = new kha_audio2_ogg_vorbis_data_Header();
	decodeState.inputPosition += 1;
	header1.channel = decodeState.input.readByte();
	if(header1.channel == 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"no channel",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 73, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	} else if(header1.channel > 16) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.TOO_MANY_CHANNELS,"too many channels",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 75, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.inputPosition += 4;
	header1.sampleRate = decodeState.input.readInt32();
	if(header1.sampleRate == 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"no sampling rate",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 80, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.inputPosition += 4;
	header1.maximumBitRate = decodeState.input.readInt32();
	decodeState.inputPosition += 4;
	header1.nominalBitRate = decodeState.input.readInt32();
	decodeState.inputPosition += 4;
	header1.minimumBitRate = decodeState.input.readInt32();
	decodeState.inputPosition += 1;
	var x6 = decodeState.input.readByte();
	var log0 = x6 & 15;
	var log1 = x6 >> 4;
	header1.blocksize0 = 1 << log0;
	header1.blocksize1 = 1 << log1;
	if(log0 < 6 || log0 > 13) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 93, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	if(log1 < 6 || log1 > 13) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 96, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	if(log0 > log1) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 99, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.inputPosition += 1;
	var x7 = decodeState.input.readByte();
	if((x7 & 1) == 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 105, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.page.start(decodeState);
	decodeState.startPacket();
	var len = 0;
	var output = new haxe_io_BytesOutput();
	while(true) {
		len = decodeState.next();
		if(!(len != 0)) {
			break;
		}
		decodeState.inputPosition += len;
		output.write(decodeState.input.read(len));
		decodeState.bytesInSeg = 0;
	}
	var packetInput = new haxe_io_BytesInput(output.getBytes());
	packetInput.readByte();
	packetInput.read(6);
	header1.vendor = packetInput.readString(packetInput.readInt32());
	header1.comment = new kha_audio2_ogg_vorbis_data_Comment();
	var commentCount = packetInput.readInt32();
	var _g = 0;
	while(_g < commentCount) {
		++_g;
		var str = packetInput.readString(packetInput.readInt32());
		var splitter = str.indexOf("=");
		if(splitter != -1) {
			header1.comment.add(str.substring(0,splitter),str.substring(splitter + 1));
		}
	}
	if((packetInput.readByte() & 1) == 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 141, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.startPacket();
	var x8;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x8 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x8 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	if(x8 != 5) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"setup packet",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 149, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	var header2 = new haxe_io_Bytes(new ArrayBuffer(6));
	var x9;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x9 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x9 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header2.b[0] = x9;
	var x10;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x10 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x10 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header2.b[1] = x10;
	var x11;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x11 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x11 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header2.b[2] = x11;
	var x12;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x12 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x12 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header2.b[3] = x12;
	var x13;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x13 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x13 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header2.b[4] = x13;
	var x14;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x14 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x14 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header2.b[5] = x14;
	if(header2.toString() != "vorbis") {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"vorbis header",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 301, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "vorbisValidate"}));
	}
	var codebookCount = decodeState.readBits(8) + 1;
	header1.codebooks = new Array(codebookCount);
	var _g1 = 0;
	while(_g1 < codebookCount) header1.codebooks[_g1++] = kha_audio2_ogg_vorbis_data_Codebook.read(decodeState);
	x7 = decodeState.readBits(6) + 1;
	var _g2 = 0;
	var _g3 = x7;
	while(_g2 < _g3) {
		++_g2;
		if(decodeState.readBits(16) != 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 165, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
		}
	}
	var floorCount = decodeState.readBits(6) + 1;
	header1.floorConfig = new Array(floorCount);
	var _g4 = 0;
	while(_g4 < floorCount) header1.floorConfig[_g4++] = kha_audio2_ogg_vorbis_data_Floor.read(decodeState,header1.codebooks);
	var residueCount = decodeState.readBits(6) + 1;
	header1.residueConfig = new Array(residueCount);
	var _g6 = 0;
	while(_g6 < residueCount) header1.residueConfig[_g6++] = kha_audio2_ogg_vorbis_data_Residue.read(decodeState,header1.codebooks);
	var mappingCount = decodeState.readBits(6) + 1;
	header1.mapping = new Array(mappingCount);
	var _g8 = 0;
	while(_g8 < mappingCount) {
		var map = kha_audio2_ogg_vorbis_data_Mapping.read(decodeState,header1.channel);
		header1.mapping[_g8++] = map;
		var _g81 = 0;
		var _g9 = map.submaps;
		while(_g81 < _g9) {
			var j = _g81++;
			if(map.submapFloor[j] >= header1.floorConfig.length) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 191, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
			}
			if(map.submapResidue[j] >= header1.residueConfig.length) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 194, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
			}
		}
	}
	var modeCount = decodeState.readBits(6) + 1;
	header1.modes = new Array(modeCount);
	var _g10 = 0;
	while(_g10 < modeCount) {
		var mode = kha_audio2_ogg_vorbis_data_Mode.read(decodeState);
		header1.modes[_g10++] = mode;
		if(mode.mapping >= header1.mapping.length) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 205, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
		}
	}
	while(decodeState.bytesInSeg != 0 || !decodeState.lastSeg && decodeState.next() != 0) {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		decodeState.input.readByte();
	}
	return header1;
};
kha_audio2_ogg_vorbis_data_Header.prototype = {
	maximumBitRate: null
	,nominalBitRate: null
	,minimumBitRate: null
	,sampleRate: null
	,channel: null
	,blocksize0: null
	,blocksize1: null
	,codebooks: null
	,floorConfig: null
	,residueConfig: null
	,mapping: null
	,modes: null
	,comment: null
	,vendor: null
	,__class__: kha_audio2_ogg_vorbis_data_Header
};
var kha_audio2_ogg_vorbis_data_IntPoint = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.IntPoint"] = kha_audio2_ogg_vorbis_data_IntPoint;
kha_audio2_ogg_vorbis_data_IntPoint.__name__ = "kha.audio2.ogg.vorbis.data.IntPoint";
kha_audio2_ogg_vorbis_data_IntPoint.prototype = {
	x: null
	,y: null
	,__class__: kha_audio2_ogg_vorbis_data_IntPoint
};
var kha_audio2_ogg_vorbis_data_Mapping = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Mapping"] = kha_audio2_ogg_vorbis_data_Mapping;
kha_audio2_ogg_vorbis_data_Mapping.__name__ = "kha.audio2.ogg.vorbis.data.Mapping";
kha_audio2_ogg_vorbis_data_Mapping.read = function(decodeState,channels) {
	var m = new kha_audio2_ogg_vorbis_data_Mapping();
	var mappingType = decodeState.readBits(16);
	if(mappingType != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"mapping type " + mappingType,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 22, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
	}
	m.chan = new Array(channels);
	var _g = 0;
	while(_g < channels) m.chan[_g++] = new kha_audio2_ogg_vorbis_data_MappingChannel();
	if(decodeState.readBits(1) != 0) {
		m.submaps = decodeState.readBits(4) + 1;
	} else {
		m.submaps = 1;
	}
	if(decodeState.readBits(1) != 0) {
		m.couplingSteps = decodeState.readBits(8) + 1;
		var _g2 = 0;
		var _g3 = m.couplingSteps;
		while(_g2 < _g3) {
			var k = _g2++;
			var n = channels - 1;
			var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
			m.chan[k].magnitude = decodeState.readBits(n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0);
			var n1 = channels - 1;
			var log2_41 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
			m.chan[k].angle = decodeState.readBits(n1 < 16384 ? n1 < 16 ? log2_41[n1] : n1 < 512 ? 5 + log2_41[n1 >> 5] : 10 + log2_41[n1 >> 10] : n1 < 16777216 ? n1 < 524288 ? 15 + log2_41[n1 >> 15] : 20 + log2_41[n1 >> 20] : n1 < 536870912 ? 25 + log2_41[n1 >> 25] : n1 < -2147483648 ? 30 + log2_41[n1 >> 30] : 0);
			if(m.chan[k].magnitude >= channels) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 46, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
			}
			if(m.chan[k].angle >= channels) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 49, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
			}
			if(m.chan[k].magnitude == m.chan[k].angle) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 52, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
			}
		}
	} else {
		m.couplingSteps = 0;
	}
	if(decodeState.readBits(2) != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 61, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
	}
	if(m.submaps > 1) {
		var _g21 = 0;
		while(_g21 < channels) {
			var j = _g21++;
			m.chan[j].mux = decodeState.readBits(4);
			if(m.chan[j].mux >= m.submaps) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 67, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
			}
		}
	} else {
		var _g22 = 0;
		while(_g22 < channels) m.chan[_g22++].mux = 0;
	}
	m.submapFloor = new Array(m.submaps);
	m.submapResidue = new Array(m.submaps);
	var _g23 = 0;
	var _g31 = m.submaps;
	while(_g23 < _g31) {
		var j1 = _g23++;
		decodeState.readBits(8);
		m.submapFloor[j1] = decodeState.readBits(8);
		m.submapResidue[j1] = decodeState.readBits(8);
	}
	return m;
};
kha_audio2_ogg_vorbis_data_Mapping.prototype = {
	couplingSteps: null
	,chan: null
	,submaps: null
	,submapFloor: null
	,submapResidue: null
	,doFloor: function(floors,i,n,target,finalY,step2Flag) {
		var n2 = n >> 1;
		var floor = floors[this.submapFloor[this.chan[i].mux]];
		if(floor.type == 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 94, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "doFloor"}));
		} else {
			var g = floor.floor1;
			var lx = 0;
			var ly = finalY[0] * g.floor1Multiplier;
			var _g = 1;
			var _g1 = g.values;
			while(_g < _g1) {
				var j = g.sortedOrder[_g++];
				if(finalY[j] >= 0) {
					var hy = finalY[j] * g.floor1Multiplier;
					var hx = g.xlist[j];
					kha_audio2_ogg_vorbis_VorbisTools.drawLine(target,lx,ly,hx,hy,n2);
					lx = hx;
					ly = hy;
				}
			}
			if(lx < n2) {
				var _g2 = lx;
				while(_g2 < n2) {
					var j1 = _g2++;
					target[j1] = target[j1] * kha_audio2_ogg_vorbis_VorbisTools.INVERSE_DB_TABLE[ly];
				}
			}
		}
	}
	,__class__: kha_audio2_ogg_vorbis_data_Mapping
};
var kha_audio2_ogg_vorbis_data_MappingChannel = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.MappingChannel"] = kha_audio2_ogg_vorbis_data_MappingChannel;
kha_audio2_ogg_vorbis_data_MappingChannel.__name__ = "kha.audio2.ogg.vorbis.data.MappingChannel";
kha_audio2_ogg_vorbis_data_MappingChannel.prototype = {
	magnitude: null
	,angle: null
	,mux: null
	,__class__: kha_audio2_ogg_vorbis_data_MappingChannel
};
var kha_audio2_ogg_vorbis_data_Mode = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Mode"] = kha_audio2_ogg_vorbis_data_Mode;
kha_audio2_ogg_vorbis_data_Mode.__name__ = "kha.audio2.ogg.vorbis.data.Mode";
kha_audio2_ogg_vorbis_data_Mode.read = function(decodeState) {
	var m = new kha_audio2_ogg_vorbis_data_Mode();
	m.blockflag = decodeState.readBits(1) != 0;
	m.windowtype = decodeState.readBits(16);
	m.transformtype = decodeState.readBits(16);
	m.mapping = decodeState.readBits(8);
	if(m.windowtype != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mode.hx", lineNumber : 22, className : "kha.audio2.ogg.vorbis.data.Mode", methodName : "read"}));
	}
	if(m.transformtype != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mode.hx", lineNumber : 25, className : "kha.audio2.ogg.vorbis.data.Mode", methodName : "read"}));
	}
	return m;
};
kha_audio2_ogg_vorbis_data_Mode.prototype = {
	blockflag: null
	,mapping: null
	,windowtype: null
	,transformtype: null
	,__class__: kha_audio2_ogg_vorbis_data_Mode
};
var kha_audio2_ogg_vorbis_data_Page = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Page"] = kha_audio2_ogg_vorbis_data_Page;
kha_audio2_ogg_vorbis_data_Page.__name__ = "kha.audio2.ogg.vorbis.data.Page";
kha_audio2_ogg_vorbis_data_Page.prototype = {
	flag: null
	,clone: function() {
		var page = new kha_audio2_ogg_vorbis_data_Page();
		page.flag = this.flag;
		return page;
	}
	,start: function(decodeState) {
		var tmp;
		var tmp1;
		var tmp2;
		decodeState.inputPosition += 1;
		if(decodeState.input.readByte() == 79) {
			decodeState.inputPosition += 1;
			tmp2 = decodeState.input.readByte() != 103;
		} else {
			tmp2 = true;
		}
		if(!tmp2) {
			decodeState.inputPosition += 1;
			tmp1 = decodeState.input.readByte() != 103;
		} else {
			tmp1 = true;
		}
		if(!tmp1) {
			decodeState.inputPosition += 1;
			tmp = decodeState.input.readByte() != 83;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 324, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "capturePattern"}));
		}
		this.startWithoutCapturePattern(decodeState);
	}
	,startWithoutCapturePattern: function(decodeState) {
		decodeState.inputPosition += 1;
		var version = decodeState.input.readByte();
		if(version != 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM_STRUCTURE_VERSION,"" + version,{ fileName : "kha/audio2/ogg/vorbis/data/Page.hx", lineNumber : 34, className : "kha.audio2.ogg.vorbis.data.Page", methodName : "startWithoutCapturePattern"}));
		}
		decodeState.inputPosition += 1;
		this.flag = decodeState.input.readByte();
		decodeState.inputPosition += 4;
		var loc0 = decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		var loc1 = decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		decodeState.input.readInt32();
		decodeState.setup(loc0,loc1);
	}
	,__class__: kha_audio2_ogg_vorbis_data_Page
};
var kha_audio2_ogg_vorbis_data_ProbedPage = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.ProbedPage"] = kha_audio2_ogg_vorbis_data_ProbedPage;
kha_audio2_ogg_vorbis_data_ProbedPage.__name__ = "kha.audio2.ogg.vorbis.data.ProbedPage";
kha_audio2_ogg_vorbis_data_ProbedPage.prototype = {
	pageStart: null
	,pageEnd: null
	,afterPreviousPageStart: null
	,firstDecodedSample: null
	,lastDecodedSample: null
	,__class__: kha_audio2_ogg_vorbis_data_ProbedPage
};
var kha_audio2_ogg_vorbis_data_ReaderError = function(type,message,posInfos) {
	if(message == null) {
		message = "";
	}
	this.type = type;
	this.message = message;
	this.posInfos = posInfos;
};
$hxClasses["kha.audio2.ogg.vorbis.data.ReaderError"] = kha_audio2_ogg_vorbis_data_ReaderError;
kha_audio2_ogg_vorbis_data_ReaderError.__name__ = "kha.audio2.ogg.vorbis.data.ReaderError";
kha_audio2_ogg_vorbis_data_ReaderError.prototype = {
	type: null
	,message: null
	,posInfos: null
	,__class__: kha_audio2_ogg_vorbis_data_ReaderError
};
var kha_audio2_ogg_vorbis_data_ReaderErrorType = $hxEnums["kha.audio2.ogg.vorbis.data.ReaderErrorType"] = { __ename__ : "kha.audio2.ogg.vorbis.data.ReaderErrorType", __constructs__ : ["NEED_MORE_DATA","INVALID_API_MIXING","OUTOFMEM","FEATURE_NOT_SUPPORTED","TOO_MANY_CHANNELS","FILE_OPEN_FAILURE","SEEK_WITHOUT_LENGTH","UNEXPECTED_EOF","SEEK_INVALID","INVALID_SETUP","INVALID_STREAM","MISSING_CAPTURE_PATTERN","INVALID_STREAM_STRUCTURE_VERSION","CONTINUED_PACKET_FLAG_INVALID","INCORRECT_STREAM_SERIAL_NUMBER","INVALID_FIRST_PAGE","BAD_PACKET_TYPE","CANT_FIND_LAST_PAGE","SEEK_FAILED","OTHER"]
	,NEED_MORE_DATA: {_hx_index:0,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_API_MIXING: {_hx_index:1,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,OUTOFMEM: {_hx_index:2,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,FEATURE_NOT_SUPPORTED: {_hx_index:3,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,TOO_MANY_CHANNELS: {_hx_index:4,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,FILE_OPEN_FAILURE: {_hx_index:5,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,SEEK_WITHOUT_LENGTH: {_hx_index:6,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,UNEXPECTED_EOF: {_hx_index:7,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,SEEK_INVALID: {_hx_index:8,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_SETUP: {_hx_index:9,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_STREAM: {_hx_index:10,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,MISSING_CAPTURE_PATTERN: {_hx_index:11,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_STREAM_STRUCTURE_VERSION: {_hx_index:12,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,CONTINUED_PACKET_FLAG_INVALID: {_hx_index:13,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INCORRECT_STREAM_SERIAL_NUMBER: {_hx_index:14,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_FIRST_PAGE: {_hx_index:15,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,BAD_PACKET_TYPE: {_hx_index:16,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,CANT_FIND_LAST_PAGE: {_hx_index:17,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,SEEK_FAILED: {_hx_index:18,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,OTHER: {_hx_index:19,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
};
var kha_audio2_ogg_vorbis_data_Residue = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Residue"] = kha_audio2_ogg_vorbis_data_Residue;
kha_audio2_ogg_vorbis_data_Residue.__name__ = "kha.audio2.ogg.vorbis.data.Residue";
kha_audio2_ogg_vorbis_data_Residue.read = function(decodeState,codebooks) {
	var r = new kha_audio2_ogg_vorbis_data_Residue();
	r.type = decodeState.readBits(16);
	if(r.type > 2) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Residue.hx", lineNumber : 29, className : "kha.audio2.ogg.vorbis.data.Residue", methodName : "read"}));
	}
	var residueCascade = new Array(64);
	r.begin = decodeState.readBits(24);
	r.end = decodeState.readBits(24);
	r.partSize = decodeState.readBits(24) + 1;
	var classifications = r.classifications = decodeState.readBits(6) + 1;
	r.classbook = decodeState.readBits(8);
	var _g = 0;
	var _g1 = r.classifications;
	while(_g < _g1) {
		var j = _g++;
		var highBits = 0;
		var lowBits = decodeState.readBits(3);
		if(decodeState.readBits(1) != 0) {
			highBits = decodeState.readBits(5);
		}
		residueCascade[j] = highBits * 8 + lowBits;
	}
	r.residueBooks = new Array(r.classifications);
	var _g2 = 0;
	var _g3 = r.classifications;
	while(_g2 < _g3) {
		var j1 = _g2++;
		r.residueBooks[j1] = new Array(8);
		var _g21 = 0;
		while(_g21 < 8) {
			var k = _g21++;
			if((residueCascade[j1] & 1 << k) != 0) {
				r.residueBooks[j1][k] = decodeState.readBits(8);
				if(r.residueBooks[j1][k] >= codebooks.length) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Residue.hx", lineNumber : 55, className : "kha.audio2.ogg.vorbis.data.Residue", methodName : "read"}));
				}
			} else {
				r.residueBooks[j1][k] = -1;
			}
		}
	}
	var el = codebooks[r.classbook].entries;
	var classwords = codebooks[r.classbook].dimensions;
	r.classdata = new Array(el);
	var _g4 = 0;
	while(_g4 < el) {
		var j2 = _g4++;
		var temp = j2;
		var k1 = classwords;
		var cd = r.classdata[j2] = new Array(classwords);
		while(--k1 >= 0) {
			cd[k1] = temp % classifications;
			temp = temp / classifications | 0;
		}
	}
	return r;
};
kha_audio2_ogg_vorbis_data_Residue.prototype = {
	begin: null
	,end: null
	,partSize: null
	,classifications: null
	,classbook: null
	,classdata: null
	,residueBooks: null
	,type: null
	,decode: function(decodeState,header,residueBuffers,ch,n,doNotDecode,channelBuffers) {
		var codebooks = header.codebooks;
		var classwords = codebooks[this.classbook].dimensions;
		var partSize = this.partSize;
		var partRead = _$UInt_UInt_$Impl_$.toFloat(this.end - this.begin) / _$UInt_UInt_$Impl_$.toFloat(partSize) | 0;
		var classifications = new Array(header.channel * partRead + 1);
		var _g = 0;
		while(_g < ch) {
			var i = _g++;
			if(!doNotDecode[i]) {
				var buffer = residueBuffers[i];
				var _g1 = 0;
				var _g11 = buffer.length;
				while(_g1 < _g11) buffer[_g1++] = 0;
			}
		}
		if(this.type == 2 && ch != 1) {
			var _g2 = 0;
			while(_g2 < ch) {
				var j = _g2++;
				if(!doNotDecode[j]) {
					break;
				} else if(j == ch - 1) {
					return;
				}
			}
			var _g4 = 0;
			while(_g4 < 8) {
				var pass = _g4++;
				var pcount = 0;
				if(ch == 2) {
					while(pcount < partRead) {
						var z = this.begin + pcount * partSize;
						var cInter = z & 1;
						var pInter = z >>> 1;
						if(pass == 0) {
							var c = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i1 = c.fastHuffman[decodeState.acc & 1023];
							var val;
							if(i1 >= 0) {
								var l = c.codewordLengths[i1];
								decodeState.acc = decodeState.acc >>> l;
								decodeState.validBits -= l;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val = -1;
								} else {
									val = i1;
								}
							} else {
								val = decodeState.decodeScalarRaw(c);
							}
							if(c.sparse) {
								val = c.sortedValues[val];
							}
							var q = val;
							if(q == -1) {
								return;
							}
							var i2 = classwords;
							while(--i2 >= 0) {
								classifications[i2 + pcount] = q % this.classifications;
								q = q / this.classifications | 0;
							}
						}
						var _g41 = 0;
						while(_g41 < classwords) {
							++_g41;
							if(pcount >= partRead) {
								break;
							}
							var z1 = this.begin + pcount * partSize;
							var b = this.residueBooks[classifications[pcount]][pass];
							if(b >= 0) {
								var result = codebooks[b].decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter,pInter,n,partSize);
								if(result == null) {
									return;
								} else {
									cInter = result.cInter;
									pInter = result.pInter;
								}
							} else {
								z1 = z1 + partSize;
								cInter = z1 & 1;
								pInter = z1 >>> 1;
							}
							++pcount;
						}
					}
				} else if(ch == 1) {
					while(pcount < partRead) {
						var cInter1 = 0;
						var pInter1 = this.begin + pcount * partSize;
						if(pass == 0) {
							var c1 = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i3 = c1.fastHuffman[decodeState.acc & 1023];
							var val1;
							if(i3 >= 0) {
								var l1 = c1.codewordLengths[i3];
								decodeState.acc = decodeState.acc >>> l1;
								decodeState.validBits -= l1;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val1 = -1;
								} else {
									val1 = i3;
								}
							} else {
								val1 = decodeState.decodeScalarRaw(c1);
							}
							if(c1.sparse) {
								val1 = c1.sortedValues[val1];
							}
							var q1 = val1;
							if(q1 == -1) {
								return;
							}
							var i4 = classwords;
							while(--i4 >= 0) {
								classifications[i4 + pcount] = q1 % this.classifications;
								q1 = q1 / this.classifications | 0;
							}
						}
						var _g42 = 0;
						while(_g42 < classwords) {
							++_g42;
							if(pcount >= partRead) {
								break;
							}
							var z2 = this.begin + pcount * partSize;
							var b1 = this.residueBooks[classifications[pcount]][pass];
							if(b1 >= 0) {
								var result1 = codebooks[b1].decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter1,pInter1,n,partSize);
								if(result1 == null) {
									return;
								} else {
									cInter1 = result1.cInter;
									pInter1 = result1.pInter;
								}
							} else {
								z2 = z2 + partSize;
								cInter1 = 0;
								pInter1 = z2;
							}
							++pcount;
						}
					}
				} else {
					while(pcount < partRead) {
						var z3 = this.begin + pcount * partSize;
						var cInter2 = _$UInt_UInt_$Impl_$.toFloat(z3) % _$UInt_UInt_$Impl_$.toFloat(ch) | 0;
						var pInter2 = _$UInt_UInt_$Impl_$.toFloat(z3) / _$UInt_UInt_$Impl_$.toFloat(ch) | 0;
						if(pass == 0) {
							var c2 = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i5 = c2.fastHuffman[decodeState.acc & 1023];
							var val2;
							if(i5 >= 0) {
								var l2 = c2.codewordLengths[i5];
								decodeState.acc = decodeState.acc >>> l2;
								decodeState.validBits -= l2;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val2 = -1;
								} else {
									val2 = i5;
								}
							} else {
								val2 = decodeState.decodeScalarRaw(c2);
							}
							if(c2.sparse) {
								val2 = c2.sortedValues[val2];
							}
							var q2 = val2;
							if(q2 == -1) {
								return;
							}
							var i6 = classwords;
							while(--i6 >= 0) {
								classifications[i6 + pcount] = q2 % this.classifications;
								q2 = q2 / this.classifications | 0;
							}
						}
						var _g43 = 0;
						while(_g43 < classwords) {
							++_g43;
							if(pcount >= partRead) {
								break;
							}
							var z4 = this.begin + pcount * partSize;
							var b2 = this.residueBooks[classifications[pcount]][pass];
							if(b2 >= 0) {
								var result2 = codebooks[b2].decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter2,pInter2,n,partSize);
								if(result2 == null) {
									return;
								} else {
									cInter2 = result2.cInter;
									pInter2 = result2.pInter;
								}
							} else {
								z4 = z4 + partSize;
								cInter2 = _$UInt_UInt_$Impl_$.toFloat(z4) % _$UInt_UInt_$Impl_$.toFloat(ch) | 0;
								pInter2 = _$UInt_UInt_$Impl_$.toFloat(z4) / _$UInt_UInt_$Impl_$.toFloat(ch) | 0;
							}
							++pcount;
						}
					}
				}
			}
			return;
		}
		var _g21 = 0;
		while(_g21 < 8) {
			var pass1 = _g21++;
			var pcount1 = 0;
			while(pcount1 < partRead) {
				if(pass1 == 0) {
					var _g22 = 0;
					while(_g22 < ch) {
						var j1 = _g22++;
						if(!doNotDecode[j1]) {
							var c3 = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i7 = c3.fastHuffman[decodeState.acc & 1023];
							var val3;
							if(i7 >= 0) {
								var l3 = c3.codewordLengths[i7];
								decodeState.acc = decodeState.acc >>> l3;
								decodeState.validBits -= l3;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val3 = -1;
								} else {
									val3 = i7;
								}
							} else {
								val3 = decodeState.decodeScalarRaw(c3);
							}
							if(c3.sparse) {
								val3 = c3.sortedValues[val3];
							}
							var temp = val3;
							if(temp == -1) {
								return;
							}
							var i8 = classwords;
							while(--i8 >= 0) {
								classifications[j1 * partRead + i8 + pcount1] = temp % this.classifications;
								temp = temp / this.classifications | 0;
							}
						}
					}
				}
				var _g23 = 0;
				while(_g23 < classwords) {
					++_g23;
					if(pcount1 >= partRead) {
						break;
					}
					var _g24 = 0;
					while(_g24 < ch) {
						var j2 = _g24++;
						if(!doNotDecode[j2]) {
							var b3 = this.residueBooks[classifications[j2 * partRead + pcount1]][pass1];
							if(b3 >= 0) {
								if(!codebooks[b3].residueDecode(decodeState,residueBuffers[j2],this.begin + pcount1 * partSize,partSize,this.type)) {
									return;
								}
							}
						}
					}
					++pcount1;
				}
			}
		}
	}
	,__class__: kha_audio2_ogg_vorbis_data_Residue
};
var kha_graphics1_Graphics = function() { };
$hxClasses["kha.graphics1.Graphics"] = kha_graphics1_Graphics;
kha_graphics1_Graphics.__name__ = "kha.graphics1.Graphics";
kha_graphics1_Graphics.__isInterface__ = true;
var kha_graphics2_Graphics = function() {
	this.transformations = [new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1)];
	this.transformationIndex = 0;
	this.opacities = [1];
	this.myFontSize = 12;
	this.pipe = null;
};
$hxClasses["kha.graphics2.Graphics"] = kha_graphics2_Graphics;
kha_graphics2_Graphics.__name__ = "kha.graphics2.Graphics";
kha_graphics2_Graphics.prototype = {
	begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
	}
	,end: function() {
	}
	,drawImage: function(img,x,y) {
		this.drawSubImage(img,x,y,0,0,img.get_width(),img.get_height());
	}
	,drawSubImage: function(img,x,y,sx,sy,sw,sh) {
		this.drawScaledSubImage(img,sx,sy,sw,sh,x,y,sw,sh);
	}
	,drawScaledImage: function(img,dx,dy,dw,dh) {
		this.drawScaledSubImage(img,0,0,img.get_width(),img.get_height(),dx,dy,dw,dh);
	}
	,drawScaledSubImage: function(image,sx,sy,sw,sh,dx,dy,dw,dh) {
	}
	,drawRect: function(x,y,width,height,strength) {
		if(strength == null) {
			strength = 1.0;
		}
	}
	,fillRect: function(x,y,width,height) {
	}
	,drawString: function(text,x,y) {
	}
	,drawLine: function(x1,y1,x2,y2,strength) {
		if(strength == null) {
			strength = 1.0;
		}
	}
	,fillTriangle: function(x1,y1,x2,y2,x3,y3) {
	}
	,set_imageScaleQuality: function(value) {
		return 1;
	}
	,get_color: function() {
		return -16777216;
	}
	,set_color: function(color) {
		return -16777216;
	}
	,get_font: function() {
		return null;
	}
	,set_font: function(font) {
		return null;
	}
	,get_fontSize: function() {
		return this.myFontSize;
	}
	,set_fontSize: function(value) {
		return this.myFontSize = value;
	}
	,popTransformation: function() {
		this.transformationIndex--;
		this.setTransformation(this.transformations[this.transformationIndex]);
		return this.transformations[this.transformationIndex + 1];
	}
	,pushRotation: function(angle,centerx,centery) {
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var _00 = Math.cos(angle);
		var _10 = -Math.sin(angle);
		var _01 = Math.sin(angle);
		var _11 = Math.cos(angle);
		var m__20 = 0;
		var m__21 = 0;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var _001 = _this__00 * _00 + _this__10 * _01 + centerx * m__02;
		var _101 = _this__00 * _10 + _this__10 * _11 + centerx * m__12;
		var _20 = _this__00 * m__20 + _this__10 * m__21 + centerx * m__22;
		var _011 = _this__01 * _00 + _this__11 * _01 + centery * m__02;
		var _111 = _this__01 * _10 + _this__11 * _11 + centery * m__12;
		var _21 = _this__01 * m__20 + _this__11 * m__21 + centery * m__22;
		var _02 = _this__02 * _00 + _this__12 * _01 + _this__22 * m__02;
		var _12 = _this__02 * _10 + _this__12 * _11 + _this__22 * m__12;
		var _22 = _this__02 * m__20 + _this__12 * m__21 + _this__22 * m__22;
		var m__00 = 1;
		var m__10 = 0;
		var m__201 = -centerx;
		var m__01 = 0;
		var m__11 = 1;
		var m__211 = -centery;
		var m__021 = 0;
		var m__121 = 0;
		var m__221 = 1;
		var _002 = _001 * m__00 + _101 * m__01 + _20 * m__021;
		var _102 = _001 * m__10 + _101 * m__11 + _20 * m__121;
		var _201 = _001 * m__201 + _101 * m__211 + _20 * m__221;
		var _012 = _011 * m__00 + _111 * m__01 + _21 * m__021;
		var _112 = _011 * m__10 + _111 * m__11 + _21 * m__121;
		var _211 = _011 * m__201 + _111 * m__211 + _21 * m__221;
		var _021 = _02 * m__00 + _12 * m__01 + _22 * m__021;
		var _121 = _02 * m__10 + _12 * m__11 + _22 * m__121;
		var _221 = _02 * m__201 + _12 * m__211 + _22 * m__221;
		var m = this.transformations[this.transformationIndex];
		var _003 = _002 * m._00 + _102 * m._01 + _201 * m._02;
		var _103 = _002 * m._10 + _102 * m._11 + _201 * m._12;
		var _202 = _002 * m._20 + _102 * m._21 + _201 * m._22;
		var _013 = _012 * m._00 + _112 * m._01 + _211 * m._02;
		var _113 = _012 * m._10 + _112 * m._11 + _211 * m._12;
		var _212 = _012 * m._20 + _112 * m._21 + _211 * m._22;
		var _022 = _021 * m._00 + _121 * m._01 + _221 * m._02;
		var _122 = _021 * m._10 + _121 * m._11 + _221 * m._12;
		var _222 = _021 * m._20 + _121 * m._21 + _221 * m._22;
		this.transformationIndex++;
		if(this.transformationIndex == this.transformations.length) {
			this.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
		}
		var _this = this.transformations[this.transformationIndex];
		_this._00 = _003;
		_this._10 = _103;
		_this._20 = _202;
		_this._01 = _013;
		_this._11 = _113;
		_this._21 = _212;
		_this._02 = _022;
		_this._12 = _122;
		_this._22 = _222;
		this.setTransformation(this.transformations[this.transformationIndex]);
	}
	,get_opacity: function() {
		return this.opacities[this.opacities.length - 1];
	}
	,set_opacity: function(opacity) {
		return this.opacities[this.opacities.length - 1] = opacity;
	}
	,pipe: null
	,transformations: null
	,transformationIndex: null
	,opacities: null
	,myFontSize: null
	,setTransformation: function(transformation) {
	}
	,__class__: kha_graphics2_Graphics
};
var kha_graphics2_Graphics1 = function(canvas) {
	this.canvas = canvas;
};
$hxClasses["kha.graphics2.Graphics1"] = kha_graphics2_Graphics1;
kha_graphics2_Graphics1.__name__ = "kha.graphics2.Graphics1";
kha_graphics2_Graphics1.__interfaces__ = [kha_graphics1_Graphics];
kha_graphics2_Graphics1.prototype = {
	canvas: null
	,__class__: kha_graphics2_Graphics1
};
var kha_graphics2_truetype_VectorOfIntPointer = function() {
};
$hxClasses["kha.graphics2.truetype.VectorOfIntPointer"] = kha_graphics2_truetype_VectorOfIntPointer;
kha_graphics2_truetype_VectorOfIntPointer.__name__ = "kha.graphics2.truetype.VectorOfIntPointer";
kha_graphics2_truetype_VectorOfIntPointer.prototype = {
	value: null
	,__class__: kha_graphics2_truetype_VectorOfIntPointer
};
var kha_graphics2_truetype_Stbtt_$temp_$rect = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_rect"] = kha_graphics2_truetype_Stbtt_$temp_$rect;
kha_graphics2_truetype_Stbtt_$temp_$rect.__name__ = "kha.graphics2.truetype.Stbtt_temp_rect";
kha_graphics2_truetype_Stbtt_$temp_$rect.prototype = {
	x0: null
	,y0: null
	,x1: null
	,y1: null
	,__class__: kha_graphics2_truetype_Stbtt_$temp_$rect
};
var kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_glyph_h_metrics"] = kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics;
kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics.__name__ = "kha.graphics2.truetype.Stbtt_temp_glyph_h_metrics";
kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics.prototype = {
	advanceWidth: null
	,leftSideBearing: null
	,__class__: kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics
};
var kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_font_v_metrics"] = kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics;
kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics.__name__ = "kha.graphics2.truetype.Stbtt_temp_font_v_metrics";
kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics.prototype = {
	ascent: null
	,descent: null
	,lineGap: null
	,__class__: kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics
};
var kha_graphics2_truetype_Stbtt_$bakedchar = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_bakedchar"] = kha_graphics2_truetype_Stbtt_$bakedchar;
kha_graphics2_truetype_Stbtt_$bakedchar.__name__ = "kha.graphics2.truetype.Stbtt_bakedchar";
kha_graphics2_truetype_Stbtt_$bakedchar.prototype = {
	x0: null
	,y0: null
	,x1: null
	,y1: null
	,xoff: null
	,yoff: null
	,xadvance: null
	,__class__: kha_graphics2_truetype_Stbtt_$bakedchar
};
var kha_graphics2_truetype_Stbtt_$fontinfo = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_fontinfo"] = kha_graphics2_truetype_Stbtt_$fontinfo;
kha_graphics2_truetype_Stbtt_$fontinfo.__name__ = "kha.graphics2.truetype.Stbtt_fontinfo";
kha_graphics2_truetype_Stbtt_$fontinfo.prototype = {
	data: null
	,fontstart: null
	,numGlyphs: null
	,loca: null
	,head: null
	,glyf: null
	,hhea: null
	,hmtx: null
	,kern: null
	,index_map: null
	,indexToLocFormat: null
	,__class__: kha_graphics2_truetype_Stbtt_$fontinfo
};
var kha_graphics2_truetype_Stbtt_$vertex = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_vertex"] = kha_graphics2_truetype_Stbtt_$vertex;
kha_graphics2_truetype_Stbtt_$vertex.__name__ = "kha.graphics2.truetype.Stbtt_vertex";
kha_graphics2_truetype_Stbtt_$vertex.prototype = {
	x: null
	,y: null
	,cx: null
	,cy: null
	,type: null
	,__class__: kha_graphics2_truetype_Stbtt_$vertex
};
var kha_graphics2_truetype_Stbtt_$_$bitmap = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__bitmap"] = kha_graphics2_truetype_Stbtt_$_$bitmap;
kha_graphics2_truetype_Stbtt_$_$bitmap.__name__ = "kha.graphics2.truetype.Stbtt__bitmap";
kha_graphics2_truetype_Stbtt_$_$bitmap.prototype = {
	w: null
	,h: null
	,stride: null
	,pixels: null
	,pixels_offset: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$bitmap
};
var kha_graphics2_truetype_Stbtt_$_$edge = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__edge"] = kha_graphics2_truetype_Stbtt_$_$edge;
kha_graphics2_truetype_Stbtt_$_$edge.__name__ = "kha.graphics2.truetype.Stbtt__edge";
kha_graphics2_truetype_Stbtt_$_$edge.prototype = {
	x0: null
	,y0: null
	,x1: null
	,y1: null
	,invert: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$edge
};
var kha_graphics2_truetype_Stbtt_$_$active_$edge = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__active_edge"] = kha_graphics2_truetype_Stbtt_$_$active_$edge;
kha_graphics2_truetype_Stbtt_$_$active_$edge.__name__ = "kha.graphics2.truetype.Stbtt__active_edge";
kha_graphics2_truetype_Stbtt_$_$active_$edge.prototype = {
	next: null
	,fx: null
	,fdx: null
	,fdy: null
	,direction: null
	,sy: null
	,ey: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$active_$edge
};
var kha_graphics2_truetype_Stbtt_$_$point = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__point"] = kha_graphics2_truetype_Stbtt_$_$point;
kha_graphics2_truetype_Stbtt_$_$point.__name__ = "kha.graphics2.truetype.Stbtt__point";
kha_graphics2_truetype_Stbtt_$_$point.prototype = {
	x: null
	,y: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$point
};
var kha_graphics2_truetype_StbTruetype = function() { };
$hxClasses["kha.graphics2.truetype.StbTruetype"] = kha_graphics2_truetype_StbTruetype;
kha_graphics2_truetype_StbTruetype.__name__ = "kha.graphics2.truetype.StbTruetype";
kha_graphics2_truetype_StbTruetype.stbtt__find_table = function(data,fontstart,tag) {
	var pos = fontstart + 4;
	if(pos == null) {
		pos = 0;
	}
	var num_tables = data.readU8(pos + 1) | data.readU8(pos) << 8;
	var tabledir = fontstart + 12;
	var _g = 0;
	while(_g < num_tables) {
		var loc = tabledir + 16 * _g++;
		if(data.readU8(loc) == HxOverrides.cca(tag,0) && data.readU8(loc + 1) == HxOverrides.cca(tag,1) && data.readU8(loc + 2) == HxOverrides.cca(tag,2) && data.readU8(loc + 3) == HxOverrides.cca(tag,3)) {
			var pos1 = loc + 8;
			if(pos1 == null) {
				pos1 = 0;
			}
			var pos2 = pos1;
			if(pos2 == null) {
				pos2 = 0;
			}
			return data.readU8(pos2 + 3) | data.readU8(pos2 + 2) << 8 | data.readU8(pos2 + 1) << 16 | data.readU8(pos2) << 24;
		}
	}
	return 0;
};
kha_graphics2_truetype_StbTruetype.stbtt_InitFont = function(info,data,fontstart) {
	info.data = data;
	info.fontstart = fontstart;
	var cmap = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"cmap");
	info.loca = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"loca");
	info.head = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"head");
	info.glyf = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"glyf");
	info.hhea = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"hhea");
	info.hmtx = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"hmtx");
	info.kern = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"kern");
	if(cmap == 0 || info.loca == 0 || info.head == 0 || info.glyf == 0 || info.hhea == 0 || info.hmtx == 0) {
		return false;
	}
	var t = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"maxp");
	if(t != 0) {
		var pos = t + 4;
		if(pos == null) {
			pos = 0;
		}
		info.numGlyphs = data.readU8(pos + 1) | data.readU8(pos) << 8;
	} else {
		info.numGlyphs = 65535;
	}
	var pos1 = cmap + 2;
	if(pos1 == null) {
		pos1 = 0;
	}
	var numTables = data.readU8(pos1 + 1) | data.readU8(pos1) << 8;
	info.index_map = 0;
	var _g = 0;
	while(_g < numTables) {
		var encoding_record = cmap + 4 + 8 * _g++;
		var pos2 = encoding_record;
		if(encoding_record == null) {
			pos2 = 0;
		}
		switch(data.readU8(pos2 + 1) | data.readU8(pos2) << 8) {
		case 0:
			var pos3 = encoding_record + 4;
			if(pos3 == null) {
				pos3 = 0;
			}
			var pos4 = pos3;
			if(pos4 == null) {
				pos4 = 0;
			}
			info.index_map = cmap + (data.readU8(pos4 + 3) | data.readU8(pos4 + 2) << 8 | data.readU8(pos4 + 1) << 16 | data.readU8(pos4) << 24);
			break;
		case 3:
			var pos5 = encoding_record + 2;
			if(pos5 == null) {
				pos5 = 0;
			}
			switch(data.readU8(pos5 + 1) | data.readU8(pos5) << 8) {
			case 1:case 10:
				var pos6 = encoding_record + 4;
				if(pos6 == null) {
					pos6 = 0;
				}
				var pos7 = pos6;
				if(pos7 == null) {
					pos7 = 0;
				}
				info.index_map = cmap + (data.readU8(pos7 + 3) | data.readU8(pos7 + 2) << 8 | data.readU8(pos7 + 1) << 16 | data.readU8(pos7) << 24);
				break;
			}
			break;
		}
	}
	if(info.index_map == 0) {
		return false;
	}
	var pos8 = info.head + 50;
	if(pos8 == null) {
		pos8 = 0;
	}
	info.indexToLocFormat = data.readU8(pos8 + 1) | data.readU8(pos8) << 8;
	return true;
};
kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex = function(info,unicode_codepoint) {
	var data = info.data;
	var index_map = info.index_map;
	var pos = index_map;
	if(index_map == null) {
		pos = 0;
	}
	var format = data.readU8(pos + 1) | data.readU8(pos) << 8;
	if(format == 0) {
		var pos1 = index_map + 2;
		if(pos1 == null) {
			pos1 = 0;
		}
		if(unicode_codepoint < (data.readU8(pos1 + 1) | data.readU8(pos1) << 8) - 6) {
			var pos2 = index_map + 6 + unicode_codepoint;
			if(pos2 == null) {
				pos2 = 0;
			}
			return data.readU8(pos2);
		}
		return 0;
	} else if(format == 6) {
		var pos3 = index_map + 6;
		if(pos3 == null) {
			pos3 = 0;
		}
		var first = data.readU8(pos3 + 1) | data.readU8(pos3) << 8;
		var pos4 = index_map + 8;
		if(pos4 == null) {
			pos4 = 0;
		}
		if(unicode_codepoint >= first && unicode_codepoint < first + (data.readU8(pos4 + 1) | data.readU8(pos4) << 8)) {
			var pos5 = index_map + 10 + (unicode_codepoint - first) * 2;
			if(pos5 == null) {
				pos5 = 0;
			}
			return data.readU8(pos5 + 1) | data.readU8(pos5) << 8;
		}
		return 0;
	} else if(format == 2) {
		throw new js__$Boot_HaxeError("Error");
	} else if(format == 4) {
		var pos6 = index_map + 6;
		if(pos6 == null) {
			pos6 = 0;
		}
		var segcount = (data.readU8(pos6 + 1) | data.readU8(pos6) << 8) >> 1;
		var pos7 = index_map + 8;
		if(pos7 == null) {
			pos7 = 0;
		}
		var searchRange = (data.readU8(pos7 + 1) | data.readU8(pos7) << 8) >> 1;
		var pos8 = index_map + 10;
		if(pos8 == null) {
			pos8 = 0;
		}
		var entrySelector = data.readU8(pos8 + 1) | data.readU8(pos8) << 8;
		var pos9 = index_map + 12;
		if(pos9 == null) {
			pos9 = 0;
		}
		var rangeShift = (data.readU8(pos9 + 1) | data.readU8(pos9) << 8) >> 1;
		var endCount = index_map + 14;
		var search = endCount;
		if(unicode_codepoint > 65535) {
			return 0;
		}
		var pos10 = endCount + rangeShift * 2;
		if(pos10 == null) {
			pos10 = 0;
		}
		if(unicode_codepoint >= (data.readU8(pos10 + 1) | data.readU8(pos10) << 8)) {
			search = endCount + rangeShift * 2;
		}
		search -= 2;
		while(entrySelector != 0) {
			searchRange >>= 1;
			var pos11 = search + searchRange * 2;
			if(pos11 == null) {
				pos11 = 0;
			}
			if(unicode_codepoint > (data.readU8(pos11 + 1) | data.readU8(pos11) << 8)) {
				search += searchRange * 2;
			}
			--entrySelector;
		}
		search += 2;
		var item = search - endCount >> 1 & 65535;
		var pos12 = endCount + 2 * item;
		if(pos12 == null) {
			pos12 = 0;
		}
		if(unicode_codepoint > (data.readU8(pos12 + 1) | data.readU8(pos12) << 8)) {
			throw new js__$Boot_HaxeError("Error");
		}
		var pos13 = index_map + 14 + segcount * 2 + 2 + 2 * item;
		if(pos13 == null) {
			pos13 = 0;
		}
		var start = data.readU8(pos13 + 1) | data.readU8(pos13) << 8;
		if(unicode_codepoint < start) {
			return 0;
		}
		var pos14 = index_map + 14 + segcount * 6 + 2 + 2 * item;
		if(pos14 == null) {
			pos14 = 0;
		}
		var offset = data.readU8(pos14 + 1) | data.readU8(pos14) << 8;
		if(offset == 0) {
			var pos15 = index_map + 14 + segcount * 4 + 2 + 2 * item;
			if(pos15 == null) {
				pos15 = 0;
			}
			var n = data.readU8(pos15 + 1) | data.readU8(pos15) << 8;
			return unicode_codepoint + ((n & 32768) != 0 ? n - 65536 : n) & 65535;
		}
		var pos16 = offset + (unicode_codepoint - start) * 2 + index_map + 14 + segcount * 6 + 2 + 2 * item;
		if(pos16 == null) {
			pos16 = 0;
		}
		return data.readU8(pos16 + 1) | data.readU8(pos16) << 8;
	} else if(format == 12 || format == 13) {
		var pos17 = index_map + 12;
		if(pos17 == null) {
			pos17 = 0;
		}
		var pos18 = pos17;
		if(pos18 == null) {
			pos18 = 0;
		}
		var low = 0;
		var high = data.readU8(pos18 + 3) | data.readU8(pos18 + 2) << 8 | data.readU8(pos18 + 1) << 16 | data.readU8(pos18) << 24;
		while(low < high) {
			var mid = low + (high - low >> 1);
			var pos19 = index_map + 16 + mid * 12;
			if(pos19 == null) {
				pos19 = 0;
			}
			var pos20 = pos19;
			if(pos20 == null) {
				pos20 = 0;
			}
			var start_char = data.readU8(pos20 + 3) | data.readU8(pos20 + 2) << 8 | data.readU8(pos20 + 1) << 16 | data.readU8(pos20) << 24;
			var pos21 = index_map + 16 + mid * 12 + 4;
			if(pos21 == null) {
				pos21 = 0;
			}
			var pos22 = pos21;
			if(pos22 == null) {
				pos22 = 0;
			}
			if(unicode_codepoint < start_char) {
				high = mid;
			} else if(unicode_codepoint > (data.readU8(pos22 + 3) | data.readU8(pos22 + 2) << 8 | data.readU8(pos22 + 1) << 16 | data.readU8(pos22) << 24)) {
				low = mid + 1;
			} else {
				var pos23 = index_map + 16 + mid * 12 + 8;
				if(pos23 == null) {
					pos23 = 0;
				}
				var pos24 = pos23;
				if(pos24 == null) {
					pos24 = 0;
				}
				var start_glyph = data.readU8(pos24 + 3) | data.readU8(pos24 + 2) << 8 | data.readU8(pos24 + 1) << 16 | data.readU8(pos24) << 24;
				if(format == 12) {
					return start_glyph + unicode_codepoint - start_char;
				} else {
					return start_glyph;
				}
			}
		}
		return 0;
	}
	throw new js__$Boot_HaxeError("Error");
};
kha_graphics2_truetype_StbTruetype.stbtt_setvertex = function(v,type,x,y,cx,cy) {
	v.type = type;
	v.x = x;
	v.y = y;
	v.cx = cx;
	v.cy = cy;
};
kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset = function(info,glyph_index) {
	var g1;
	var g2;
	if(glyph_index >= info.numGlyphs) {
		return -1;
	}
	if(info.indexToLocFormat >= 2) {
		return -1;
	}
	if(info.indexToLocFormat == 0) {
		var p = info.data;
		var pos = info.loca + glyph_index * 2;
		if(pos == null) {
			pos = 0;
		}
		g1 = info.glyf + (p.readU8(pos + 1) | p.readU8(pos) << 8) * 2;
		var p1 = info.data;
		var pos1 = info.loca + glyph_index * 2 + 2;
		if(pos1 == null) {
			pos1 = 0;
		}
		g2 = info.glyf + (p1.readU8(pos1 + 1) | p1.readU8(pos1) << 8) * 2;
	} else {
		var p2 = info.data;
		var pos2 = info.loca + glyph_index * 4;
		if(pos2 == null) {
			pos2 = 0;
		}
		var pos3 = pos2;
		if(pos3 == null) {
			pos3 = 0;
		}
		g1 = info.glyf + (p2.readU8(pos3 + 3) | p2.readU8(pos3 + 2) << 8 | p2.readU8(pos3 + 1) << 16 | p2.readU8(pos3) << 24);
		var p3 = info.data;
		var pos4 = info.loca + glyph_index * 4 + 4;
		if(pos4 == null) {
			pos4 = 0;
		}
		var pos5 = pos4;
		if(pos5 == null) {
			pos5 = 0;
		}
		g2 = info.glyf + (p3.readU8(pos5 + 3) | p3.readU8(pos5 + 2) << 8 | p3.readU8(pos5 + 1) << 16 | p3.readU8(pos5) << 24);
	}
	if(g1 == g2) {
		return -1;
	} else {
		return g1;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBox = function(info,glyph_index,rect) {
	var g = kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset(info,glyph_index);
	if(g < 0) {
		return false;
	}
	var p = info.data;
	var pos = g + 2;
	if(pos == null) {
		pos = 0;
	}
	var n = p.readU8(pos + 1) | p.readU8(pos) << 8;
	rect.x0 = (n & 32768) != 0 ? n - 65536 : n;
	var p1 = info.data;
	var pos1 = g + 4;
	if(pos1 == null) {
		pos1 = 0;
	}
	var n1 = p1.readU8(pos1 + 1) | p1.readU8(pos1) << 8;
	rect.y0 = (n1 & 32768) != 0 ? n1 - 65536 : n1;
	var p2 = info.data;
	var pos2 = g + 6;
	if(pos2 == null) {
		pos2 = 0;
	}
	var n2 = p2.readU8(pos2 + 1) | p2.readU8(pos2) << 8;
	rect.x1 = (n2 & 32768) != 0 ? n2 - 65536 : n2;
	var p3 = info.data;
	var pos3 = g + 8;
	if(pos3 == null) {
		pos3 = 0;
	}
	var n3 = p3.readU8(pos3 + 1) | p3.readU8(pos3) << 8;
	rect.y1 = (n3 & 32768) != 0 ? n3 - 65536 : n3;
	return true;
};
kha_graphics2_truetype_StbTruetype.stbtt__close_shape = function(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy) {
	if(start_off) {
		if(was_off) {
			kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,cx + scx >> 1,cy + scy >> 1,cx,cy);
		}
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,sx,sy,scx,scy);
	} else if(was_off) {
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,sx,sy,cx,cy);
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],2,sx,sy,0,0);
	}
	return num_vertices;
};
kha_graphics2_truetype_StbTruetype.copyVertices = function(from,to,offset,count) {
	var _g = 0;
	while(_g < count) {
		var i = _g++;
		to[offset + i] = from[i];
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape = function(info,glyph_index) {
	var data = info.data;
	var vertices = null;
	var num_vertices = 0;
	var g = kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset(info,glyph_index);
	if(g < 0) {
		return null;
	}
	var pos = g;
	if(g == null) {
		pos = 0;
	}
	var n = data.readU8(pos + 1) | data.readU8(pos) << 8;
	var numberOfContours = (n & 32768) != 0 ? n - 65536 : n;
	if(numberOfContours > 0) {
		var flags = 0;
		var j = 0;
		var next_move = 0;
		var off = 0;
		var was_off = false;
		var start_off = false;
		var endPtsOfContoursOffset = g + 10;
		var pos1 = endPtsOfContoursOffset + numberOfContours * 2;
		if(pos1 == null) {
			pos1 = 0;
		}
		var pointsIndex = endPtsOfContoursOffset + numberOfContours * 2 + 2 + (data.readU8(pos1 + 1) | data.readU8(pos1) << 8);
		var pos2 = endPtsOfContoursOffset + numberOfContours * 2 - 2;
		if(pos2 == null) {
			pos2 = 0;
		}
		var n1 = 1 + (data.readU8(pos2 + 1) | data.readU8(pos2) << 8);
		var m = n1 + 2 * numberOfContours;
		vertices = new Array(m);
		if(vertices == null) {
			return null;
		} else {
			var _g = 0;
			var _g1 = vertices.length;
			while(_g < _g1) vertices[_g++] = new kha_graphics2_truetype_Stbtt_$vertex();
		}
		next_move = 0;
		var flagcount = 0;
		off = m - n1;
		var _g2 = 0;
		while(_g2 < n1) {
			var i = _g2++;
			if(flagcount == 0) {
				flags = data.readU8(pointsIndex++);
				if((flags & 8) != 0) {
					flagcount = data.readU8(pointsIndex++);
				}
			} else {
				--flagcount;
			}
			vertices[off + i].type = flags;
		}
		var x = 0;
		var _g21 = 0;
		while(_g21 < n1) {
			var i1 = _g21++;
			flags = vertices[off + i1].type;
			if((flags & 2) != 0) {
				var dx = data.readU8(pointsIndex++);
				x += (flags & 16) != 0 ? dx : -dx;
			} else if((flags & 16) == 0) {
				var value;
				var n2 = data.readU8(pointsIndex + 1) | data.readU8(pointsIndex) << 8;
				if((n2 & 32768) != 0) {
					value = n2 - 65536;
				} else {
					value = n2;
				}
				x += value;
				pointsIndex += 2;
			}
			vertices[off + i1].x = x;
		}
		var y = 0;
		var _g4 = 0;
		while(_g4 < n1) {
			var i2 = _g4++;
			flags = vertices[off + i2].type;
			if((flags & 4) != 0) {
				var dy = data.readU8(pointsIndex++);
				y += (flags & 32) != 0 ? dy : -dy;
			} else if((flags & 32) == 0) {
				var value1;
				var n3 = data.readU8(pointsIndex + 1) | data.readU8(pointsIndex) << 8;
				if((n3 & 32768) != 0) {
					value1 = n3 - 65536;
				} else {
					value1 = n3;
				}
				y += value1;
				pointsIndex += 2;
			}
			vertices[off + i2].y = y;
		}
		num_vertices = 0;
		var scy = 0;
		var scx = 0;
		var cy = 0;
		var cx = 0;
		var sy = 0;
		var sx = 0;
		var i3 = 0;
		while(i3 < n1) {
			flags = vertices[off + i3].type;
			x = vertices[off + i3].x;
			y = vertices[off + i3].y;
			if(next_move == i3) {
				if(i3 != 0) {
					num_vertices = kha_graphics2_truetype_StbTruetype.stbtt__close_shape(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy);
				}
				start_off = (flags & 1) == 0;
				if(start_off) {
					scx = x;
					scy = y;
					if((vertices[off + i3 + 1].type & 1) == 0) {
						sx = x + vertices[off + i3 + 1].x >> 1;
						sy = y + vertices[off + i3 + 1].y >> 1;
					} else {
						sx = vertices[off + i3 + 1].x;
						sy = vertices[off + i3 + 1].y;
						++i3;
					}
				} else {
					sx = x;
					sy = y;
				}
				kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],1,sx,sy,0,0);
				was_off = false;
				var pos3 = endPtsOfContoursOffset + j * 2;
				if(pos3 == null) {
					pos3 = 0;
				}
				next_move = 1 + (data.readU8(pos3 + 1) | data.readU8(pos3) << 8);
				++j;
			} else if((flags & 1) == 0) {
				if(was_off) {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,cx + x >> 1,cy + y >> 1,cx,cy);
				}
				cx = x;
				cy = y;
				was_off = true;
			} else {
				if(was_off) {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,x,y,cx,cy);
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],2,x,y,0,0);
				}
				was_off = false;
			}
			++i3;
		}
		num_vertices = kha_graphics2_truetype_StbTruetype.stbtt__close_shape(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy);
	} else if(numberOfContours == -1) {
		var more = 1;
		var compIndex = g + 10;
		num_vertices = 0;
		vertices = null;
		while(more != 0) {
			var comp_num_verts = 0;
			var comp_verts = null;
			var tmp = null;
			var mtx0 = 1;
			var mtx1 = 0;
			var mtx2 = 0;
			var mtx3 = 1;
			var mtx4 = 0;
			var mtx5 = 0;
			var pos4 = compIndex;
			if(pos4 == null) {
				pos4 = 0;
			}
			var n4 = data.readU8(pos4 + 1) | data.readU8(pos4) << 8;
			var flags1 = (n4 & 32768) != 0 ? n4 - 65536 : n4;
			var pos5 = compIndex += 2;
			if(pos5 == null) {
				pos5 = 0;
			}
			var n5 = data.readU8(pos5 + 1) | data.readU8(pos5) << 8;
			compIndex += 2;
			if((flags1 & 2) != 0) {
				if((flags1 & 1) != 0) {
					var pos6 = compIndex;
					if(pos6 == null) {
						pos6 = 0;
					}
					var n6 = data.readU8(pos6 + 1) | data.readU8(pos6) << 8;
					mtx4 = (n6 & 32768) != 0 ? n6 - 65536 : n6;
					var pos7 = compIndex += 2;
					if(pos7 == null) {
						pos7 = 0;
					}
					var n7 = data.readU8(pos7 + 1) | data.readU8(pos7) << 8;
					mtx5 = (n7 & 32768) != 0 ? n7 - 65536 : n7;
					compIndex += 2;
				} else {
					var pos8 = compIndex;
					if(pos8 == null) {
						pos8 = 0;
					}
					var n8 = data.readU8(pos8);
					mtx4 = n8 >= 128 ? n8 - 256 : n8;
					var pos9 = ++compIndex;
					if(pos9 == null) {
						pos9 = 0;
					}
					var n9 = data.readU8(pos9);
					mtx5 = n9 >= 128 ? n9 - 256 : n9;
					++compIndex;
				}
			} else {
				throw new js__$Boot_HaxeError("Error");
			}
			if((flags1 & 8) != 0) {
				var pos10 = compIndex;
				if(pos10 == null) {
					pos10 = 0;
				}
				var n10 = data.readU8(pos10 + 1) | data.readU8(pos10) << 8;
				mtx3 = ((n10 & 32768) != 0 ? n10 - 65536 : n10) / 16384.0;
				mtx0 = mtx3;
				compIndex += 2;
				mtx2 = 0;
				mtx1 = mtx2;
			} else if((flags1 & 64) != 0) {
				var pos11 = compIndex;
				if(pos11 == null) {
					pos11 = 0;
				}
				var n11 = data.readU8(pos11 + 1) | data.readU8(pos11) << 8;
				mtx0 = ((n11 & 32768) != 0 ? n11 - 65536 : n11) / 16384.0;
				compIndex += 2;
				mtx2 = 0;
				mtx1 = mtx2;
				var pos12 = compIndex;
				if(pos12 == null) {
					pos12 = 0;
				}
				var n12 = data.readU8(pos12 + 1) | data.readU8(pos12) << 8;
				mtx3 = ((n12 & 32768) != 0 ? n12 - 65536 : n12) / 16384.0;
				compIndex += 2;
			} else if((flags1 & 128) != 0) {
				var pos13 = compIndex;
				if(pos13 == null) {
					pos13 = 0;
				}
				var n13 = data.readU8(pos13 + 1) | data.readU8(pos13) << 8;
				mtx0 = ((n13 & 32768) != 0 ? n13 - 65536 : n13) / 16384.0;
				var pos14 = compIndex += 2;
				if(pos14 == null) {
					pos14 = 0;
				}
				var n14 = data.readU8(pos14 + 1) | data.readU8(pos14) << 8;
				mtx1 = ((n14 & 32768) != 0 ? n14 - 65536 : n14) / 16384.0;
				var pos15 = compIndex += 2;
				if(pos15 == null) {
					pos15 = 0;
				}
				var n15 = data.readU8(pos15 + 1) | data.readU8(pos15) << 8;
				mtx2 = ((n15 & 32768) != 0 ? n15 - 65536 : n15) / 16384.0;
				var pos16 = compIndex += 2;
				if(pos16 == null) {
					pos16 = 0;
				}
				var n16 = data.readU8(pos16 + 1) | data.readU8(pos16) << 8;
				mtx3 = ((n16 & 32768) != 0 ? n16 - 65536 : n16) / 16384.0;
				compIndex += 2;
			}
			var m1 = Math.sqrt(mtx0 * mtx0 + mtx1 * mtx1);
			var n17 = Math.sqrt(mtx2 * mtx2 + mtx3 * mtx3);
			comp_verts = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,(n5 & 32768) != 0 ? n5 - 65536 : n5);
			comp_num_verts = comp_verts == null ? 0 : comp_verts.length;
			if(comp_num_verts > 0) {
				var _g3 = 0;
				var _g11 = comp_num_verts;
				while(_g3 < _g11) {
					var v = comp_verts[_g3++];
					var x1 = v.x;
					var y1 = v.y;
					v.x = m1 * (mtx0 * x1 + mtx2 * y1 + mtx4) | 0;
					v.y = n17 * (mtx1 * x1 + mtx3 * y1 + mtx5) | 0;
					x1 = v.cx;
					y1 = v.cy;
					v.cx = m1 * (mtx0 * x1 + mtx2 * y1 + mtx4) | 0;
					v.cy = n17 * (mtx1 * x1 + mtx3 * y1 + mtx5) | 0;
				}
				tmp = new Array(num_vertices + comp_num_verts);
				if(tmp == null) {
					return null;
				}
				if(num_vertices > 0) {
					kha_graphics2_truetype_StbTruetype.copyVertices(vertices,tmp,0,num_vertices);
				}
				kha_graphics2_truetype_StbTruetype.copyVertices(comp_verts,tmp,num_vertices,comp_num_verts);
				vertices = tmp;
				num_vertices += comp_num_verts;
			}
			more = flags1 & 32;
		}
	} else if(numberOfContours < 0) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(vertices == null) {
		return null;
	}
	if(vertices.length < num_vertices) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(num_vertices < vertices.length) {
		var tmp1 = new Array(num_vertices);
		kha_graphics2_truetype_StbTruetype.copyVertices(vertices,tmp1,0,num_vertices);
		return tmp1;
	} else {
		return vertices;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphHMetrics = function(info,glyph_index) {
	var p = info.data;
	var pos = info.hhea + 34;
	if(pos == null) {
		pos = 0;
	}
	var numOfLongHorMetrics = p.readU8(pos + 1) | p.readU8(pos) << 8;
	var metrics = new kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics();
	if(glyph_index < numOfLongHorMetrics) {
		var p1 = info.data;
		var pos1 = info.hmtx + 4 * glyph_index;
		if(pos1 == null) {
			pos1 = 0;
		}
		var n = p1.readU8(pos1 + 1) | p1.readU8(pos1) << 8;
		metrics.advanceWidth = (n & 32768) != 0 ? n - 65536 : n;
		var p2 = info.data;
		var pos2 = info.hmtx + 4 * glyph_index + 2;
		if(pos2 == null) {
			pos2 = 0;
		}
		var n1 = p2.readU8(pos2 + 1) | p2.readU8(pos2) << 8;
		metrics.leftSideBearing = (n1 & 32768) != 0 ? n1 - 65536 : n1;
	} else {
		var p3 = info.data;
		var pos3 = info.hmtx + 4 * (numOfLongHorMetrics - 1);
		if(pos3 == null) {
			pos3 = 0;
		}
		var n2 = p3.readU8(pos3 + 1) | p3.readU8(pos3) << 8;
		metrics.advanceWidth = (n2 & 32768) != 0 ? n2 - 65536 : n2;
		var p4 = info.data;
		var pos4 = info.hmtx + 4 * numOfLongHorMetrics + 2 * (glyph_index - numOfLongHorMetrics);
		if(pos4 == null) {
			pos4 = 0;
		}
		var n3 = p4.readU8(pos4 + 1) | p4.readU8(pos4) << 8;
		metrics.leftSideBearing = (n3 & 32768) != 0 ? n3 - 65536 : n3;
	}
	return metrics;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetFontVMetrics = function(info) {
	var metrics = new kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics();
	var p = info.data;
	var pos = info.hhea + 4;
	if(pos == null) {
		pos = 0;
	}
	var n = p.readU8(pos + 1) | p.readU8(pos) << 8;
	metrics.ascent = (n & 32768) != 0 ? n - 65536 : n;
	var p1 = info.data;
	var pos1 = info.hhea + 6;
	if(pos1 == null) {
		pos1 = 0;
	}
	var n1 = p1.readU8(pos1 + 1) | p1.readU8(pos1) << 8;
	metrics.descent = (n1 & 32768) != 0 ? n1 - 65536 : n1;
	var p2 = info.data;
	var pos2 = info.hhea + 8;
	if(pos2 == null) {
		pos2 = 0;
	}
	var n2 = p2.readU8(pos2 + 1) | p2.readU8(pos2) << 8;
	metrics.lineGap = (n2 & 32768) != 0 ? n2 - 65536 : n2;
	return metrics;
};
kha_graphics2_truetype_StbTruetype.stbtt_ScaleForPixelHeight = function(info,height) {
	var p = info.data;
	var pos = info.hhea + 4;
	if(pos == null) {
		pos = 0;
	}
	var n = p.readU8(pos + 1) | p.readU8(pos) << 8;
	var p1 = info.data;
	var pos1 = info.hhea + 6;
	if(pos1 == null) {
		pos1 = 0;
	}
	var n1 = p1.readU8(pos1 + 1) | p1.readU8(pos1) << 8;
	return height / (((n & 32768) != 0 ? n - 65536 : n) - ((n1 & 32768) != 0 ? n1 - 65536 : n1));
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel = function(font,glyph,scale_x,scale_y,shift_x,shift_y) {
	var rect = new kha_graphics2_truetype_Stbtt_$temp_$rect();
	if(!kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBox(font,glyph,rect)) {
		rect.x0 = 0;
		rect.y0 = 0;
		rect.x1 = 0;
		rect.y1 = 0;
	} else {
		var y0 = rect.y0;
		rect.x0 = Math.floor(rect.x0 * scale_x + shift_x);
		rect.y0 = Math.floor(-rect.y1 * scale_y + shift_y);
		rect.x1 = Math.ceil(rect.x1 * scale_x + shift_x);
		rect.y1 = Math.ceil(-y0 * scale_y + shift_y);
	}
	return rect;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBox = function(font,glyph,scale_x,scale_y) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(font,glyph,scale_x,scale_y,0.0,0.0);
};
kha_graphics2_truetype_StbTruetype.stbtt__new_active = function(e,eIndex,off_x,start_point) {
	var z = new kha_graphics2_truetype_Stbtt_$_$active_$edge();
	var dxdy = (e[eIndex].x1 - e[eIndex].x0) / (e[eIndex].y1 - e[eIndex].y0);
	if(z == null) {
		return z;
	}
	z.fdx = dxdy;
	z.fdy = dxdy != 0.0 ? 1.0 / dxdy : 0.0;
	z.fx = e[eIndex].x0 + dxdy * (start_point - e[eIndex].y0);
	z.fx -= off_x;
	z.direction = e[eIndex].invert ? 1.0 : -1.0;
	z.sy = e[eIndex].y0;
	z.ey = e[eIndex].y1;
	z.next = null;
	return z;
};
kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge = function(scanline,scanlineIndex,x,e,x0,y0,x1,y1) {
	if(y0 == y1) {
		return;
	}
	if(!(y0 < y1)) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(!(e.sy <= e.ey)) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(y0 > e.ey) {
		return;
	}
	if(y1 < e.sy) {
		return;
	}
	if(y0 < e.sy) {
		x0 += (x1 - x0) * (e.sy - y0) / (y1 - y0);
		y0 = e.sy;
	}
	if(y1 > e.ey) {
		x1 += (x1 - x0) * (e.ey - y1) / (y1 - y0);
		y1 = e.ey;
	}
	if(x0 == x) {
		if(!(x1 <= x + 1)) {
			throw new js__$Boot_HaxeError("Error");
		}
	} else if(x0 == x + 1) {
		if(!(x1 >= x)) {
			throw new js__$Boot_HaxeError("Error");
		}
	} else if(x0 <= x) {
		if(!(x1 <= x)) {
			throw new js__$Boot_HaxeError("Error");
		}
	} else if(x0 >= x + 1) {
		if(!(x1 >= x + 1)) {
			throw new js__$Boot_HaxeError("Error");
		}
	} else if(!(x1 >= x && x1 <= x + 1)) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(x0 <= x && x1 <= x) {
		var _g = scanlineIndex + x;
		scanline[_g] = scanline[_g] + e.direction * (y1 - y0);
	} else if(!(x0 >= x + 1 && x1 >= x + 1)) {
		if(!(x0 >= x && x0 <= x + 1 && x1 >= x && x1 <= x + 1)) {
			throw new js__$Boot_HaxeError("Error");
		}
		var _g1 = scanlineIndex + x;
		scanline[_g1] = scanline[_g1] + e.direction * (y1 - y0) * (1 - (x0 - x + (x1 - x)) / 2);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__fill_active_edges_new = function(scanline,scanline_fill,scanline_fillIndex,len,e,y_top) {
	var y_bottom = y_top + 1;
	while(e != null) {
		if(!(e.ey >= y_top)) {
			throw new js__$Boot_HaxeError("Error");
		}
		if(e.fdx == 0) {
			var x0 = e.fx;
			if(x0 < len) {
				if(x0 >= 0) {
					kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x0 | 0,e,x0,y_top,x0,y_bottom);
					kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline_fill,scanline_fillIndex - 1,x0 + 1 | 0,e,x0,y_top,x0,y_bottom);
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline_fill,scanline_fillIndex - 1,0,e,x0,y_top,x0,y_bottom);
				}
			}
		} else {
			var x01 = e.fx;
			var dx = e.fdx;
			var xb = x01 + dx;
			var x_top;
			var x_bottom;
			var sy0;
			var sy1;
			var dy = e.fdy;
			if(!(e.sy <= y_bottom && e.ey >= y_top)) {
				throw new js__$Boot_HaxeError("Error");
			}
			if(e.sy > y_top) {
				x_top = x01 + dx * (e.sy - y_top);
				sy0 = e.sy;
			} else {
				x_top = x01;
				sy0 = y_top;
			}
			if(e.ey < y_bottom) {
				x_bottom = x01 + dx * (e.ey - y_top);
				sy1 = e.ey;
			} else {
				x_bottom = xb;
				sy1 = y_bottom;
			}
			if(x_top >= 0 && x_bottom >= 0 && x_top < len && x_bottom < len) {
				if((x_top | 0) == (x_bottom | 0)) {
					var x = x_top | 0;
					var height = sy1 - sy0;
					if(!(x >= 0 && x < len)) {
						throw new js__$Boot_HaxeError("Error");
					}
					scanline[x] = scanline[x] + e.direction * (1 - (x_top - x + (x_bottom - x)) / 2) * height;
					var _g = scanline_fillIndex + x;
					scanline_fill[_g] = scanline_fill[_g] + e.direction * height;
				} else {
					if(x_top > x_bottom) {
						sy0 = y_bottom - (sy0 - y_top);
						sy1 = y_bottom - (sy1 - y_top);
						var t = sy0;
						sy0 = sy1;
						sy1 = t;
						t = x_bottom;
						x_bottom = x_top;
						x_top = t;
						dx = -dx;
						dy = -dy;
						t = x01;
						x01 = xb;
						xb = t;
					}
					var x1 = x_top | 0;
					var x2 = x_bottom | 0;
					var y_crossing = (x1 + 1 - x01) * dy + y_top;
					var sign = e.direction;
					var area = sign * (y_crossing - sy0);
					scanline[x1] = scanline[x1] + area * (1 - (x_top - x1 + (x1 + 1 - x1)) / 2);
					var step = sign * dy;
					var _g1 = x1 + 1;
					while(_g1 < x2) {
						var x3 = _g1++;
						scanline[x3] = scanline[x3] + (area + step / 2);
						area += step;
					}
					y_crossing += dy * (x2 - (x1 + 1));
					if(!(Math.abs(area) <= 1.01)) {
						throw new js__$Boot_HaxeError("Error");
					}
					scanline[x2] = scanline[x2] + (area + sign * (1 - (x2 - x2 + (x_bottom - x2)) / 2) * (sy1 - y_crossing));
					var _g2 = scanline_fillIndex + x2;
					scanline_fill[_g2] = scanline_fill[_g2] + sign * (sy1 - sy0);
				}
			} else {
				var _g3 = 0;
				while(_g3 < len) {
					var x4 = _g3++;
					var x11 = x4;
					var x21 = x4 + 1;
					var x31 = xb;
					var y1 = (x4 - x01) / dx + y_top;
					var y2 = (x4 + 1 - x01) / dx + y_top;
					if(x01 < x11 && x31 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y_top,x11,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x11,y1,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x31,y_bottom);
					} else if(x31 < x11 && x01 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y_top,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x11,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x11,y1,x31,y_bottom);
					} else if(x01 < x11 && x31 > x11) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y_top,x11,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x11,y1,x31,y_bottom);
					} else if(x31 < x11 && x01 > x11) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y_top,x11,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x11,y1,x31,y_bottom);
					} else if(x01 < x21 && x31 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y_top,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x31,y_bottom);
					} else if(x31 < x21 && x01 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y_top,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x31,y_bottom);
					} else {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y_top,x31,y_bottom);
					}
				}
			}
		}
		e = e.next;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__rasterize_sorted_edges = function(result,e,n,vsubsample,off_x,off_y) {
	var active = null;
	var j = 0;
	var scanline;
	var scanline2Index = 0;
	var eIndex = 0;
	if(result.w > 64) {
		scanline = new Array(result.w * 2 + 1);
	} else {
		scanline = new Array(129);
	}
	var scanline2 = scanline;
	scanline2Index = result.w;
	var y = off_y;
	e[n].y0 = off_y + result.h + 1;
	while(j < result.h) {
		var scan_y_top = y + 0.0;
		var scan_y_bottom = y + 1.0;
		var step_value = active;
		var step_parent = null;
		var _g = 0;
		var _g1 = result.w;
		while(_g < _g1) scanline[_g++] = 0;
		var _g2 = 0;
		var _g3 = result.w + 1;
		while(_g2 < _g3) scanline2[scanline2Index + _g2++] = 0;
		while(step_value != null) {
			var z = step_value;
			if(z.ey <= scan_y_top) {
				if(step_parent == null) {
					active = z.next;
					step_value = z.next;
				} else {
					step_parent.next = z.next;
					step_value = z.next;
				}
				if(z.direction == 0) {
					throw new js__$Boot_HaxeError("Error");
				}
				z.direction = 0;
			} else {
				step_parent = step_value;
				step_value = step_value.next;
			}
		}
		while(e[eIndex].y0 <= scan_y_bottom) {
			if(e[eIndex].y0 != e[eIndex].y1) {
				var z1 = kha_graphics2_truetype_StbTruetype.stbtt__new_active(e,eIndex,off_x,scan_y_top);
				if(!(z1.ey >= scan_y_top)) {
					throw new js__$Boot_HaxeError("Error");
				}
				z1.next = active;
				active = z1;
			}
			++eIndex;
		}
		if(active != null) {
			kha_graphics2_truetype_StbTruetype.stbtt__fill_active_edges_new(scanline,scanline2,scanline2Index + 1,result.w,active,scan_y_top);
		}
		var sum = 0;
		var _g4 = 0;
		var _g5 = result.w;
		while(_g4 < _g5) {
			var i = _g4++;
			sum += scanline2[scanline2Index + i];
			var k = scanline[i] + sum;
			k = Math.abs(k) * 255.0 + 0.5;
			var m = k | 0;
			if(m > 255) {
				m = 255;
			}
			result.pixels.writeU8(result.pixels_offset + j * result.stride + i,m);
		}
		step_parent = null;
		step_value = active;
		while(step_value != null) {
			var z2 = step_value;
			z2.fx += z2.fdx;
			step_parent = step_value;
			step_value = step_value.next;
		}
		++y;
		++j;
	}
};
kha_graphics2_truetype_StbTruetype.STBTT__COMPARE = function(a,b) {
	return a.y0 < b.y0;
};
kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_ins_sort = function(p,n) {
	var j;
	var _g = 1;
	while(_g < n) {
		var i = _g++;
		var t = p[i];
		j = i;
		while(j > 0) {
			if(!kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(t,p[j - 1])) {
				break;
			}
			p[j] = p[j - 1];
			--j;
		}
		if(i != j) {
			p[j] = t;
		}
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort = function(p,pIndex,n) {
	while(n > 12) {
		var t;
		var c;
		var m = n >> 1;
		var c12 = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex + m],p[pIndex + n - 1]);
		if(kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex],p[pIndex + m]) != c12) {
			c = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex],p[pIndex + n - 1]);
			var z = c == c12 ? 0 : n - 1;
			t = p[pIndex + z];
			p[pIndex + z] = p[pIndex + m];
			p[pIndex + m] = t;
		}
		t = p[pIndex];
		p[pIndex] = p[pIndex + m];
		p[pIndex + m] = t;
		var i = 1;
		var j = n - 1;
		while(true) {
			while(kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex + i],p[pIndex])) ++i;
			while(kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex],p[pIndex + j])) --j;
			if(i >= j) {
				break;
			}
			t = p[pIndex + i];
			p[pIndex + i] = p[pIndex + j];
			p[pIndex + j] = t;
			++i;
			--j;
		}
		if(j < n - i) {
			kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort(p,pIndex,j);
			pIndex += i;
			n -= i;
		} else {
			kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort(p,pIndex + i,n - i);
			n = j;
		}
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__sort_edges = function(p,n) {
	kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort(p,0,n);
	kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_ins_sort(p,n);
};
kha_graphics2_truetype_StbTruetype.stbtt__rasterize = function(result,pts,wcount,windings,scale_x,scale_y,shift_x,shift_y,off_x,off_y,invert) {
	var y_scale_inv = invert ? -scale_y : scale_y;
	var j;
	var n = 0;
	var _g = 0;
	while(_g < windings) n += wcount[_g++];
	var e = new Array(n + 1);
	if(e == null) {
		return;
	} else {
		var _g2 = 0;
		var _g3 = e.length;
		while(_g2 < _g3) e[_g2++] = new kha_graphics2_truetype_Stbtt_$_$edge();
	}
	n = 0;
	var m = 0;
	var _g21 = 0;
	while(_g21 < windings) {
		var i = _g21++;
		var pIndex = m;
		m += wcount[i];
		j = wcount[i] - 1;
		var _g22 = 0;
		var _g31 = wcount[i];
		while(_g22 < _g31) {
			var k = _g22++;
			var a = k;
			var b = j;
			if(pts[pIndex + j].y == pts[pIndex + k].y) {
				j = k;
				continue;
			}
			e[n].invert = false;
			if(invert ? pts[pIndex + j].y > pts[pIndex + k].y : pts[pIndex + j].y < pts[pIndex + k].y) {
				e[n].invert = true;
				a = j;
				b = k;
			}
			e[n].x0 = pts[pIndex + a].x * scale_x + shift_x;
			e[n].y0 = pts[pIndex + a].y * y_scale_inv + shift_y;
			e[n].x1 = pts[pIndex + b].x * scale_x + shift_x;
			e[n].y1 = pts[pIndex + b].y * y_scale_inv + shift_y;
			++n;
			j = k;
		}
	}
	kha_graphics2_truetype_StbTruetype.stbtt__sort_edges(e,n);
	kha_graphics2_truetype_StbTruetype.stbtt__rasterize_sorted_edges(result,e,n,1,off_x,off_y);
};
kha_graphics2_truetype_StbTruetype.stbtt__add_point = function(points,n,x,y) {
	if(points == null) {
		return;
	}
	points[n].x = x;
	points[n].y = y;
};
kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve = function(points,num_points,x0,y0,x1,y1,x2,y2,objspace_flatness_squared,n) {
	var mx = (x0 + 2 * x1 + x2) / 4;
	var my = (y0 + 2 * y1 + y2) / 4;
	var dx = (x0 + x2) / 2 - mx;
	var dy = (y0 + y2) / 2 - my;
	if(n > 16) {
		return 1;
	}
	if(dx * dx + dy * dy > objspace_flatness_squared) {
		kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve(points,num_points,x0,y0,(x0 + x1) / 2.0,(y0 + y1) / 2.0,mx,my,objspace_flatness_squared,n + 1);
		kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve(points,num_points,mx,my,(x1 + x2) / 2.0,(y1 + y2) / 2.0,x2,y2,objspace_flatness_squared,n + 1);
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points.value,x2,y2);
		num_points.value += 1;
	}
	return 1;
};
kha_graphics2_truetype_StbTruetype.stbtt_FlattenCurves = function(vertices,num_verts,objspace_flatness,contour_lengths,num_contours) {
	var points = null;
	var num_points = 0;
	var objspace_flatness_squared = objspace_flatness * objspace_flatness;
	var n = 0;
	var start = 0;
	var _g = 0;
	while(_g < num_verts) if(vertices[_g++].type == 1) {
		++n;
	}
	num_contours.value = n;
	if(n == 0) {
		return null;
	}
	contour_lengths.value = new Array(n);
	if(contour_lengths.value == null) {
		num_contours.value = 0;
		return null;
	}
	var _g2 = 0;
	while(_g2 < 2) {
		var x = 0;
		var y = 0;
		if(_g2++ == 1) {
			points = new Array(num_points);
			if(points == null) {
				contour_lengths.value = null;
				num_contours.value = 0;
				return null;
			} else {
				var _g21 = 0;
				var _g3 = points.length;
				while(_g21 < _g3) points[_g21++] = new kha_graphics2_truetype_Stbtt_$_$point();
			}
		}
		num_points = 0;
		n = -1;
		var _g22 = 0;
		while(_g22 < num_verts) {
			var i = _g22++;
			switch(vertices[i].type) {
			case 1:
				if(n >= 0) {
					contour_lengths.value[n] = num_points - start;
				}
				++n;
				start = num_points;
				x = vertices[i].x;
				y = vertices[i].y;
				kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points++,x,y);
				break;
			case 2:
				x = vertices[i].x;
				y = vertices[i].y;
				kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points++,x,y);
				break;
			case 3:
				var num_points_reference = { value : num_points};
				kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve(points,num_points_reference,x,y,vertices[i].cx,vertices[i].cy,vertices[i].x,vertices[i].y,objspace_flatness_squared,0);
				num_points = num_points_reference.value;
				x = vertices[i].x;
				y = vertices[i].y;
				break;
			}
		}
		contour_lengths.value[n] = num_points - start;
	}
	return points;
};
kha_graphics2_truetype_StbTruetype.stbtt_Rasterize = function(result,flatness_in_pixels,vertices,num_verts,scale_x,scale_y,shift_x,shift_y,x_off,y_off,invert) {
	var winding_count = 0;
	var winding_lengths = null;
	var winding_count_reference = { value : 0};
	var winding_lengths_reference = new kha_graphics2_truetype_VectorOfIntPointer();
	var windings = kha_graphics2_truetype_StbTruetype.stbtt_FlattenCurves(vertices,num_verts,flatness_in_pixels / (scale_x > scale_y ? scale_y : scale_x),winding_lengths_reference,winding_count_reference);
	winding_count = winding_count_reference.value;
	winding_lengths = winding_lengths_reference.value;
	if(windings != null) {
		kha_graphics2_truetype_StbTruetype.stbtt__rasterize(result,windings,winding_lengths,winding_count,scale_x,scale_y,shift_x,shift_y,x_off,y_off,invert);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmapSubpixel = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,shift_x,shift_y,glyph) {
	var ix0 = 0;
	var iy0 = 0;
	var vertices = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,glyph);
	var num_verts = vertices == null ? 0 : vertices.length;
	var gbm = new kha_graphics2_truetype_Stbtt_$_$bitmap();
	var rect = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(info,glyph,scale_x,scale_y,shift_x,shift_y);
	ix0 = rect.x0;
	iy0 = rect.y0;
	gbm.pixels = output;
	gbm.pixels_offset = output_offset;
	gbm.w = out_w;
	gbm.h = out_h;
	gbm.stride = out_stride;
	if(gbm.w != 0 && gbm.h != 0) {
		kha_graphics2_truetype_StbTruetype.stbtt_Rasterize(gbm,0.35,vertices,num_verts,scale_x,scale_y,shift_x,shift_y,ix0,iy0,true);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmap = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,glyph) {
	kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmapSubpixel(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,0.0,0.0,glyph);
};
kha_graphics2_truetype_StbTruetype.stbtt_BakeFontBitmap = function(data,offset,pixel_height,pixels,pw,ph,chars,chardata) {
	var f = new kha_graphics2_truetype_Stbtt_$fontinfo();
	if(!kha_graphics2_truetype_StbTruetype.stbtt_InitFont(f,data,offset)) {
		return -1;
	}
	var y = 1;
	var x = 1;
	var bottom_y = 1;
	var scale = kha_graphics2_truetype_StbTruetype.stbtt_ScaleForPixelHeight(f,pixel_height);
	var i = 0;
	var _g = 0;
	while(_g < chars.length) {
		var g = kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(f,chars[_g++]);
		var advance = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphHMetrics(f,g).advanceWidth;
		var rect = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBox(f,g,scale,scale);
		var x0 = rect.x0;
		var y0 = rect.y0;
		var gw = rect.x1 - x0;
		var gh = rect.y1 - y0;
		if(x + gw + 1 >= pw) {
			y = bottom_y;
			x = 1;
		}
		if(y + gh + 1 >= ph) {
			return -i;
		}
		if(x + gw >= pw) {
			throw new js__$Boot_HaxeError("Error");
		}
		if(y + gh >= ph) {
			throw new js__$Boot_HaxeError("Error");
		}
		chardata[i].x0 = x;
		chardata[i].y0 = y;
		chardata[i].x1 = x + gw;
		chardata[i].y1 = y + gh;
		chardata[i].xadvance = scale * advance;
		chardata[i].xoff = x0;
		chardata[i].yoff = y0;
		x = x + gw + 1;
		if(y + gh + 1 > bottom_y) {
			bottom_y = y + gh + 1;
		}
		++i;
	}
	var _g1 = 0;
	var _g2 = pw * ph;
	while(_g1 < _g2) pixels.writeU8(_g1++,0);
	i = 0;
	var ch;
	var _g3 = 0;
	while(_g3 < chars.length) {
		var g1 = kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(f,chars[_g3++]);
		ch = chardata[i];
		kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmap(f,pixels,ch.x0 + ch.y0 * pw,ch.x1 - ch.x0,ch.y1 - ch.y0,pw,scale,scale,g1);
		++i;
	}
	return bottom_y;
};
var kha_graphics4_ConstantLocation = function() { };
$hxClasses["kha.graphics4.ConstantLocation"] = kha_graphics4_ConstantLocation;
kha_graphics4_ConstantLocation.__name__ = "kha.graphics4.ConstantLocation";
kha_graphics4_ConstantLocation.__isInterface__ = true;
var kha_graphics4_CubeMap = function(size,format,renderTarget,depthStencilFormat) {
	this.isDepthAttachment = false;
	this.depthTexture = null;
	this.texture = null;
	this.frameBuffer = null;
	this.myWidth = size;
	this.myHeight = size;
	this.format = format;
	this.renderTarget = renderTarget;
	this.depthStencilFormat = depthStencilFormat;
	if(renderTarget) {
		this.createTexture();
	}
};
$hxClasses["kha.graphics4.CubeMap"] = kha_graphics4_CubeMap;
kha_graphics4_CubeMap.__name__ = "kha.graphics4.CubeMap";
kha_graphics4_CubeMap.__interfaces__ = [kha_Resource,kha_Canvas];
kha_graphics4_CubeMap.prototype = {
	myWidth: null
	,myHeight: null
	,format: null
	,renderTarget: null
	,depthStencilFormat: null
	,graphics4: null
	,frameBuffer: null
	,texture: null
	,depthTexture: null
	,isDepthAttachment: null
	,createTexture: function() {
		if(kha_SystemImpl.gl == null) {
			return;
		}
		this.texture = kha_SystemImpl.gl.createTexture();
		kha_SystemImpl.gl.bindTexture(34067,this.texture);
		kha_SystemImpl.gl.texParameteri(34067,10240,9729);
		kha_SystemImpl.gl.texParameteri(34067,10241,9729);
		kha_SystemImpl.gl.texParameteri(34067,10242,33071);
		kha_SystemImpl.gl.texParameteri(34067,10243,33071);
		if(this.renderTarget) {
			this.frameBuffer = kha_SystemImpl.gl.createFramebuffer();
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			switch(this.format) {
			case 0:
				kha_SystemImpl.gl.texImage2D(34069,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34070,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34071,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34072,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34073,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34074,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				break;
			case 2:
				kha_SystemImpl.gl.texImage2D(34069,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				kha_SystemImpl.gl.texImage2D(34070,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				kha_SystemImpl.gl.texImage2D(34071,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				kha_SystemImpl.gl.texImage2D(34072,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				kha_SystemImpl.gl.texImage2D(34073,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				kha_SystemImpl.gl.texImage2D(34074,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				break;
			case 3:
				kha_SystemImpl.gl.texImage2D(34069,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				kha_SystemImpl.gl.texImage2D(34070,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				kha_SystemImpl.gl.texImage2D(34071,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				kha_SystemImpl.gl.texImage2D(34072,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				kha_SystemImpl.gl.texImage2D(34073,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				kha_SystemImpl.gl.texImage2D(34074,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				break;
			case 4:
				kha_SystemImpl.gl.texImage2D(34069,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34070,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34071,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34072,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34073,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34074,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				break;
			case 5:
				kha_SystemImpl.gl.texImage2D(34069,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				kha_SystemImpl.gl.texImage2D(34070,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				kha_SystemImpl.gl.texImage2D(34071,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				kha_SystemImpl.gl.texImage2D(34072,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				kha_SystemImpl.gl.texImage2D(34073,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				kha_SystemImpl.gl.texImage2D(34074,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				break;
			case 6:
				kha_SystemImpl.gl.texImage2D(34069,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34070,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34071,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34072,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34073,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34074,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				break;
			default:
				kha_SystemImpl.gl.texImage2D(34069,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34070,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34071,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34072,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34073,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34074,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
			}
			if(this.format == 3) {
				kha_SystemImpl.gl.texParameteri(34067,10240,9728);
				kha_SystemImpl.gl.texParameteri(34067,10241,9728);
				this.isDepthAttachment = true;
				if(!kha_SystemImpl.gl2) {
					var colortex = kha_SystemImpl.gl.createTexture();
					kha_SystemImpl.gl.bindTexture(34067,colortex);
					kha_SystemImpl.gl.texImage2D(34069,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34069,colortex,0);
					kha_SystemImpl.gl.texImage2D(34070,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34070,colortex,0);
					kha_SystemImpl.gl.texImage2D(34071,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34071,colortex,0);
					kha_SystemImpl.gl.texImage2D(34072,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34072,colortex,0);
					kha_SystemImpl.gl.texImage2D(34073,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34073,colortex,0);
					kha_SystemImpl.gl.texImage2D(34074,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34074,colortex,0);
					kha_SystemImpl.gl.bindTexture(34067,this.texture);
				}
			}
			this.initDepthStencilBuffer(this.depthStencilFormat);
			kha_SystemImpl.gl.bindFramebuffer(36160,null);
		}
		kha_SystemImpl.gl.bindTexture(34067,null);
	}
	,initDepthStencilBuffer: function(depthStencilFormat) {
		switch(depthStencilFormat) {
		case 0:
			break;
		case 1:case 5:
			this.depthTexture = kha_SystemImpl.gl.createTexture();
			kha_SystemImpl.gl.bindTexture(34067,this.depthTexture);
			if(depthStencilFormat == 1) {
				kha_SystemImpl.gl.texImage2D(34067,0,kha_SystemImpl.gl2 ? 33190 : 6402,this.myWidth,this.myHeight,0,6402,5125,null);
			} else {
				kha_SystemImpl.gl.texImage2D(34067,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
			}
			kha_SystemImpl.gl.texParameteri(34067,10240,9728);
			kha_SystemImpl.gl.texParameteri(34067,10241,9728);
			kha_SystemImpl.gl.texParameteri(34067,10242,33071);
			kha_SystemImpl.gl.texParameteri(34067,10243,33071);
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			kha_SystemImpl.gl.framebufferTexture2D(36160,36096,34067,this.depthTexture,0);
			break;
		case 2:case 3:case 4:
			this.depthTexture = kha_SystemImpl.gl.createTexture();
			kha_SystemImpl.gl.bindTexture(34067,this.depthTexture);
			kha_SystemImpl.gl.texImage2D(34067,0,kha_SystemImpl.gl2 ? 35056 : 34041,this.myWidth,this.myHeight,0,34041,kha_SystemImpl.depthTexture.UNSIGNED_INT_24_8_WEBGL,null);
			kha_SystemImpl.gl.texParameteri(34067,10240,9728);
			kha_SystemImpl.gl.texParameteri(34067,10241,9728);
			kha_SystemImpl.gl.texParameteri(34067,10242,33071);
			kha_SystemImpl.gl.texParameteri(34067,10243,33071);
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			kha_SystemImpl.gl.framebufferTexture2D(36160,33306,34067,this.depthTexture,0);
			break;
		}
	}
	,width: null
	,get_width: function() {
		return this.myWidth;
	}
	,height: null
	,get_height: function() {
		return this.myHeight;
	}
	,g2: null
	,get_g2: function() {
		return null;
	}
	,g4: null
	,get_g4: function() {
		if(this.graphics4 == null) {
			this.graphics4 = new kha_js_graphics4_Graphics(this);
		}
		return this.graphics4;
	}
	,__class__: kha_graphics4_CubeMap
};
var kha_graphics4_FragmentShader = function(sources,files) {
	this.sources = [];
	var _g = 0;
	while(_g < sources.length) this.sources.push(sources[_g++].toString());
	this.type = 35632;
	this.shader = null;
	this.files = files;
};
$hxClasses["kha.graphics4.FragmentShader"] = kha_graphics4_FragmentShader;
kha_graphics4_FragmentShader.__name__ = "kha.graphics4.FragmentShader";
kha_graphics4_FragmentShader.prototype = {
	sources: null
	,type: null
	,shader: null
	,files: null
	,__class__: kha_graphics4_FragmentShader
};
var kha_graphics4_GeometryShader = function() { };
$hxClasses["kha.graphics4.GeometryShader"] = kha_graphics4_GeometryShader;
kha_graphics4_GeometryShader.__name__ = "kha.graphics4.GeometryShader";
var kha_graphics4_Graphics = function() { };
$hxClasses["kha.graphics4.Graphics"] = kha_graphics4_Graphics;
kha_graphics4_Graphics.__name__ = "kha.graphics4.Graphics";
kha_graphics4_Graphics.__isInterface__ = true;
kha_graphics4_Graphics.prototype = {
	begin: null
	,end: null
	,clear: null
	,setVertexBuffer: null
	,setIndexBuffer: null
	,setTexture: null
	,setTextureParameters: null
	,setPipeline: null
	,setMatrix: null
	,drawIndexedVertices: null
	,__class__: kha_graphics4_Graphics
};
var kha_graphics4_PipelineCache = function(pipeline) {
	this.pipeline = pipeline;
	try {
		this.projectionLocation = pipeline.getConstantLocation("projectionMatrix");
	} catch( x ) {
		haxe_Log.trace(((x) instanceof js__$Boot_HaxeError) ? x.val : x,{ fileName : "kha/graphics4/Graphics2.hx", lineNumber : 39, className : "kha.graphics4.PipelineCache", methodName : "new"});
	}
	try {
		this.textureLocation = pipeline.getTextureUnit("tex");
	} catch( x1 ) {
		haxe_Log.trace(((x1) instanceof js__$Boot_HaxeError) ? x1.val : x1,{ fileName : "kha/graphics4/Graphics2.hx", lineNumber : 40, className : "kha.graphics4.PipelineCache", methodName : "new"});
	}
};
$hxClasses["kha.graphics4.PipelineCache"] = kha_graphics4_PipelineCache;
kha_graphics4_PipelineCache.__name__ = "kha.graphics4.PipelineCache";
kha_graphics4_PipelineCache.prototype = {
	pipeline: null
	,projectionLocation: null
	,textureLocation: null
	,__class__: kha_graphics4_PipelineCache
};
var kha_graphics4_ImageShaderPainter = function(g4) {
	this.myPipeline = null;
	this.bilinearMipmaps = false;
	this.bilinear = false;
	this.g = g4;
	kha_graphics4_ImageShaderPainter.bufferIndex = 0;
	kha_graphics4_ImageShaderPainter.initShaders();
	this.myPipeline = kha_graphics4_ImageShaderPainter.standardImagePipeline;
	this.initBuffers();
};
$hxClasses["kha.graphics4.ImageShaderPainter"] = kha_graphics4_ImageShaderPainter;
kha_graphics4_ImageShaderPainter.__name__ = "kha.graphics4.ImageShaderPainter";
kha_graphics4_ImageShaderPainter.initShaders = function() {
	if(kha_graphics4_ImageShaderPainter.structure == null) {
		kha_graphics4_ImageShaderPainter.structure = kha_graphics4_Graphics2.createImageVertexStructure();
	}
	if(kha_graphics4_ImageShaderPainter.standardImagePipeline == null) {
		var pipeline = kha_graphics4_Graphics2.createImagePipeline(kha_graphics4_ImageShaderPainter.structure);
		pipeline.compile();
		kha_graphics4_ImageShaderPainter.standardImagePipeline = new kha_graphics4_PipelineCache(pipeline);
	}
};
kha_graphics4_ImageShaderPainter.prototype = {
	projectionMatrix: null
	,bilinear: null
	,bilinearMipmaps: null
	,g: null
	,myPipeline: null
	,setProjection: function(projectionMatrix) {
		this.projectionMatrix = projectionMatrix;
	}
	,initBuffers: function() {
		if(kha_graphics4_ImageShaderPainter.rectVertexBuffer == null) {
			kha_graphics4_ImageShaderPainter.rectVertexBuffer = new kha_graphics4_VertexBuffer(6000,kha_graphics4_ImageShaderPainter.structure,1);
			kha_graphics4_ImageShaderPainter.rectVertices = kha_graphics4_ImageShaderPainter.rectVertexBuffer.lock();
			kha_graphics4_ImageShaderPainter.indexBuffer = new kha_graphics4_IndexBuffer(9000,0);
			var indices = kha_graphics4_ImageShaderPainter.indexBuffer.lock();
			var _g = 0;
			while(_g < 1500) {
				var i = _g++;
				indices[i * 3 * 2] = i * 4;
				indices[i * 3 * 2 + 1] = i * 4 + 1;
				indices[i * 3 * 2 + 2] = i * 4 + 2;
				indices[i * 3 * 2 + 3] = i * 4;
				indices[i * 3 * 2 + 4] = i * 4 + 2;
				indices[i * 3 * 2 + 5] = i * 4 + 3;
			}
			kha_graphics4_ImageShaderPainter.indexBuffer.unlock();
		}
	}
	,drawBuffer: function() {
		kha_graphics4_ImageShaderPainter.rectVertexBuffer.unlock(kha_graphics4_ImageShaderPainter.bufferIndex * 4);
		this.g.setPipeline(this.myPipeline.pipeline);
		this.g.setVertexBuffer(kha_graphics4_ImageShaderPainter.rectVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_ImageShaderPainter.indexBuffer);
		this.g.setTexture(this.myPipeline.textureLocation,kha_graphics4_ImageShaderPainter.lastTexture);
		this.g.setTextureParameters(this.myPipeline.textureLocation,2,2,this.bilinear ? 1 : 0,this.bilinear ? 1 : 0,this.bilinearMipmaps ? 2 : 0);
		this.g.setMatrix(this.myPipeline.projectionLocation,this.projectionMatrix);
		this.g.drawIndexedVertices(0,kha_graphics4_ImageShaderPainter.bufferIndex * 2 * 3);
		this.g.setTexture(this.myPipeline.textureLocation,null);
		kha_graphics4_ImageShaderPainter.bufferIndex = 0;
		kha_graphics4_ImageShaderPainter.rectVertices = kha_graphics4_ImageShaderPainter.rectVertexBuffer.lock();
	}
	,setBilinearFilter: function(bilinear) {
		this.end();
		this.bilinear = bilinear;
	}
	,end: function() {
		if(kha_graphics4_ImageShaderPainter.bufferIndex > 0) {
			this.drawBuffer();
		}
		kha_graphics4_ImageShaderPainter.lastTexture = null;
	}
	,__class__: kha_graphics4_ImageShaderPainter
};
var kha_graphics4_ColoredShaderPainter = function(g4) {
	this.myPipeline = null;
	this.g = g4;
	kha_graphics4_ColoredShaderPainter.bufferIndex = 0;
	kha_graphics4_ColoredShaderPainter.triangleBufferIndex = 0;
	kha_graphics4_ColoredShaderPainter.initShaders();
	this.myPipeline = kha_graphics4_ColoredShaderPainter.standardColorPipeline;
	this.initBuffers();
};
$hxClasses["kha.graphics4.ColoredShaderPainter"] = kha_graphics4_ColoredShaderPainter;
kha_graphics4_ColoredShaderPainter.__name__ = "kha.graphics4.ColoredShaderPainter";
kha_graphics4_ColoredShaderPainter.initShaders = function() {
	if(kha_graphics4_ColoredShaderPainter.structure == null) {
		kha_graphics4_ColoredShaderPainter.structure = kha_graphics4_Graphics2.createColoredVertexStructure();
	}
	if(kha_graphics4_ColoredShaderPainter.standardColorPipeline == null) {
		var pipeline = kha_graphics4_Graphics2.createColoredPipeline(kha_graphics4_ColoredShaderPainter.structure);
		pipeline.compile();
		kha_graphics4_ColoredShaderPainter.standardColorPipeline = new kha_graphics4_PipelineCache(pipeline);
	}
};
kha_graphics4_ColoredShaderPainter.prototype = {
	projectionMatrix: null
	,g: null
	,myPipeline: null
	,setProjection: function(projectionMatrix) {
		this.projectionMatrix = projectionMatrix;
	}
	,initBuffers: function() {
		if(kha_graphics4_ColoredShaderPainter.rectVertexBuffer == null) {
			kha_graphics4_ColoredShaderPainter.rectVertexBuffer = new kha_graphics4_VertexBuffer(4000,kha_graphics4_ColoredShaderPainter.structure,1);
			kha_graphics4_ColoredShaderPainter.rectVertices = kha_graphics4_ColoredShaderPainter.rectVertexBuffer.lock();
			kha_graphics4_ColoredShaderPainter.indexBuffer = new kha_graphics4_IndexBuffer(6000,0);
			var indices = kha_graphics4_ColoredShaderPainter.indexBuffer.lock();
			var _g = 0;
			while(_g < 1000) {
				var i = _g++;
				indices[i * 3 * 2] = i * 4;
				indices[i * 3 * 2 + 1] = i * 4 + 1;
				indices[i * 3 * 2 + 2] = i * 4 + 2;
				indices[i * 3 * 2 + 3] = i * 4;
				indices[i * 3 * 2 + 4] = i * 4 + 2;
				indices[i * 3 * 2 + 5] = i * 4 + 3;
			}
			kha_graphics4_ColoredShaderPainter.indexBuffer.unlock();
			kha_graphics4_ColoredShaderPainter.triangleVertexBuffer = new kha_graphics4_VertexBuffer(3000,kha_graphics4_ColoredShaderPainter.structure,1);
			kha_graphics4_ColoredShaderPainter.triangleVertices = kha_graphics4_ColoredShaderPainter.triangleVertexBuffer.lock();
			kha_graphics4_ColoredShaderPainter.triangleIndexBuffer = new kha_graphics4_IndexBuffer(3000,0);
			var triIndices = kha_graphics4_ColoredShaderPainter.triangleIndexBuffer.lock();
			var _g1 = 0;
			while(_g1 < 1000) {
				var i1 = _g1++;
				triIndices[i1 * 3] = i1 * 3;
				triIndices[i1 * 3 + 1] = i1 * 3 + 1;
				triIndices[i1 * 3 + 2] = i1 * 3 + 2;
			}
			kha_graphics4_ColoredShaderPainter.triangleIndexBuffer.unlock();
		}
	}
	,setRectVertices: function(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.bufferIndex * 7 * 4;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex] = bottomleftx;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 1] = bottomlefty;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 2] = -5.0;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 7] = topleftx;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 8] = toplefty;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 9] = -5.0;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 14] = toprightx;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 15] = toprighty;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 16] = -5.0;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 21] = bottomrightx;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 22] = bottomrighty;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 23] = -5.0;
	}
	,setRectColors: function(opacity,color) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.bufferIndex * 7 * 4;
		var a = opacity * ((color >>> 24) * 0.00392156862745098);
		var r = a * (((color & 16711680) >>> 16) * 0.00392156862745098);
		var g = a * (((color & 65280) >>> 8) * 0.00392156862745098);
		var b = a * ((color & 255) * 0.00392156862745098);
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 3] = r;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 4] = g;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 5] = b;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 6] = a;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 10] = r;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 11] = g;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 12] = b;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 13] = a;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 17] = r;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 18] = g;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 19] = b;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 20] = a;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 24] = r;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 25] = g;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 26] = b;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 27] = a;
	}
	,setTriVertices: function(x1,y1,x2,y2,x3,y3) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 7 * 3;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex] = x1;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 1] = y1;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 2] = -5.0;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 7] = x2;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 8] = y2;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 9] = -5.0;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 14] = x3;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 15] = y3;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 16] = -5.0;
	}
	,setTriColors: function(opacity,color) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 7 * 3;
		var a = opacity * ((color >>> 24) * 0.00392156862745098);
		var r = a * (((color & 16711680) >>> 16) * 0.00392156862745098);
		var g = a * (((color & 65280) >>> 8) * 0.00392156862745098);
		var b = a * ((color & 255) * 0.00392156862745098);
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 3] = r;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 4] = g;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 5] = b;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 6] = a;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 10] = r;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 11] = g;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 12] = b;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 13] = a;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 17] = r;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 18] = g;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 19] = b;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 20] = a;
	}
	,drawBuffer: function(trisDone) {
		if(!trisDone) {
			if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
				this.drawTriBuffer(true);
			}
		}
		kha_graphics4_ColoredShaderPainter.rectVertexBuffer.unlock(kha_graphics4_ColoredShaderPainter.bufferIndex * 4);
		this.g.setPipeline(this.myPipeline.pipeline);
		this.g.setVertexBuffer(kha_graphics4_ColoredShaderPainter.rectVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_ColoredShaderPainter.indexBuffer);
		this.g.setMatrix(this.myPipeline.projectionLocation,this.projectionMatrix);
		this.g.drawIndexedVertices(0,kha_graphics4_ColoredShaderPainter.bufferIndex * 2 * 3);
		kha_graphics4_ColoredShaderPainter.bufferIndex = 0;
		kha_graphics4_ColoredShaderPainter.rectVertices = kha_graphics4_ColoredShaderPainter.rectVertexBuffer.lock();
	}
	,drawTriBuffer: function(rectsDone) {
		if(!rectsDone) {
			if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
				this.drawBuffer(true);
			}
		}
		kha_graphics4_ColoredShaderPainter.triangleVertexBuffer.unlock(kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 3);
		this.g.setPipeline(this.myPipeline.pipeline);
		this.g.setVertexBuffer(kha_graphics4_ColoredShaderPainter.triangleVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_ColoredShaderPainter.triangleIndexBuffer);
		this.g.setMatrix(this.myPipeline.projectionLocation,this.projectionMatrix);
		this.g.drawIndexedVertices(0,kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 3);
		kha_graphics4_ColoredShaderPainter.triangleBufferIndex = 0;
		kha_graphics4_ColoredShaderPainter.triangleVertices = kha_graphics4_ColoredShaderPainter.triangleVertexBuffer.lock();
	}
	,fillRect: function(opacity,color,bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			this.drawTriBuffer(true);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex + 1 >= 1000) {
			this.drawBuffer(false);
		}
		this.setRectColors(opacity,color);
		this.setRectVertices(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty);
		++kha_graphics4_ColoredShaderPainter.bufferIndex;
	}
	,fillTriangle: function(opacity,color,x1,y1,x2,y2,x3,y3) {
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			this.drawBuffer(true);
		}
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex + 1 >= 1000) {
			this.drawTriBuffer(false);
		}
		this.setTriColors(opacity,color);
		this.setTriVertices(x1,y1,x2,y2,x3,y3);
		++kha_graphics4_ColoredShaderPainter.triangleBufferIndex;
	}
	,__class__: kha_graphics4_ColoredShaderPainter
};
var kha_graphics4_TextShaderPainter = function(g4) {
	this.bakedQuadCache = new kha_AlignedQuad();
	this.bilinear = false;
	this.myPipeline = null;
	this.g = g4;
	kha_graphics4_TextShaderPainter.bufferIndex = 0;
	kha_graphics4_TextShaderPainter.initShaders();
	this.myPipeline = kha_graphics4_TextShaderPainter.standardTextPipeline;
	this.initBuffers();
};
$hxClasses["kha.graphics4.TextShaderPainter"] = kha_graphics4_TextShaderPainter;
kha_graphics4_TextShaderPainter.__name__ = "kha.graphics4.TextShaderPainter";
kha_graphics4_TextShaderPainter.initShaders = function() {
	if(kha_graphics4_TextShaderPainter.structure == null) {
		kha_graphics4_TextShaderPainter.structure = kha_graphics4_Graphics2.createTextVertexStructure();
	}
	if(kha_graphics4_TextShaderPainter.standardTextPipeline == null) {
		var pipeline = kha_graphics4_Graphics2.createTextPipeline(kha_graphics4_TextShaderPainter.structure);
		pipeline.compile();
		kha_graphics4_TextShaderPainter.standardTextPipeline = new kha_graphics4_PipelineCache(pipeline);
	}
};
kha_graphics4_TextShaderPainter.findIndex = function(charCode) {
	var blocks = kha_KravurImage.charBlocks;
	var offset = 0;
	var _g = 0;
	var _g1 = blocks.length / 2 | 0;
	while(_g < _g1) {
		var i = _g++;
		var start = blocks[i * 2];
		var end = blocks[i * 2 + 1];
		if(charCode >= start && charCode <= end) {
			return offset + charCode - start;
		}
		offset += end - start + 1;
	}
	return 0;
};
kha_graphics4_TextShaderPainter.prototype = {
	projectionMatrix: null
	,font: null
	,g: null
	,myPipeline: null
	,fontSize: null
	,bilinear: null
	,setProjection: function(projectionMatrix) {
		this.projectionMatrix = projectionMatrix;
	}
	,initBuffers: function() {
		if(kha_graphics4_TextShaderPainter.rectVertexBuffer == null) {
			kha_graphics4_TextShaderPainter.rectVertexBuffer = new kha_graphics4_VertexBuffer(4000,kha_graphics4_TextShaderPainter.structure,1);
			kha_graphics4_TextShaderPainter.rectVertices = kha_graphics4_TextShaderPainter.rectVertexBuffer.lock();
			kha_graphics4_TextShaderPainter.indexBuffer = new kha_graphics4_IndexBuffer(6000,0);
			var indices = kha_graphics4_TextShaderPainter.indexBuffer.lock();
			var _g = 0;
			while(_g < 1000) {
				var i = _g++;
				indices[i * 3 * 2] = i * 4;
				indices[i * 3 * 2 + 1] = i * 4 + 1;
				indices[i * 3 * 2 + 2] = i * 4 + 2;
				indices[i * 3 * 2 + 3] = i * 4;
				indices[i * 3 * 2 + 4] = i * 4 + 2;
				indices[i * 3 * 2 + 5] = i * 4 + 3;
			}
			kha_graphics4_TextShaderPainter.indexBuffer.unlock();
		}
	}
	,setRectVertices: function(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		var baseIndex = kha_graphics4_TextShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex] = bottomleftx;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 1] = bottomlefty;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 2] = -5.0;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 9] = topleftx;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 10] = toplefty;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 11] = -5.0;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 18] = toprightx;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 19] = toprighty;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 20] = -5.0;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 27] = bottomrightx;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 28] = bottomrighty;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 29] = -5.0;
	}
	,setRectTexCoords: function(left,top,right,bottom) {
		var baseIndex = kha_graphics4_TextShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 3] = left;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 4] = bottom;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 12] = left;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 13] = top;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 21] = right;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 22] = top;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 30] = right;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 31] = bottom;
	}
	,setRectColors: function(opacity,color) {
		var baseIndex = kha_graphics4_TextShaderPainter.bufferIndex * 9 * 4;
		var a = opacity * ((color >>> 24) * 0.00392156862745098);
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 5] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 6] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 7] = (color & 255) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 8] = a;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 14] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 15] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 16] = (color & 255) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 17] = a;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 23] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 24] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 25] = (color & 255) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 26] = a;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 32] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 33] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 34] = (color & 255) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 35] = a;
	}
	,drawBuffer: function() {
		kha_graphics4_TextShaderPainter.rectVertexBuffer.unlock(kha_graphics4_TextShaderPainter.bufferIndex * 4);
		this.g.setPipeline(this.myPipeline.pipeline);
		this.g.setVertexBuffer(kha_graphics4_TextShaderPainter.rectVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_TextShaderPainter.indexBuffer);
		this.g.setMatrix(this.myPipeline.projectionLocation,this.projectionMatrix);
		this.g.setTexture(this.myPipeline.textureLocation,kha_graphics4_TextShaderPainter.lastTexture);
		this.g.setTextureParameters(this.myPipeline.textureLocation,2,2,this.bilinear ? 1 : 0,this.bilinear ? 1 : 0,0);
		this.g.drawIndexedVertices(0,kha_graphics4_TextShaderPainter.bufferIndex * 2 * 3);
		this.g.setTexture(this.myPipeline.textureLocation,null);
		kha_graphics4_TextShaderPainter.bufferIndex = 0;
		kha_graphics4_TextShaderPainter.rectVertices = kha_graphics4_TextShaderPainter.rectVertexBuffer.lock();
	}
	,setBilinearFilter: function(bilinear) {
		this.end();
		this.bilinear = bilinear;
	}
	,setFont: function(font) {
		this.font = js_Boot.__cast(font , kha_Kravur);
	}
	,bakedQuadCache: null
	,drawString: function(text,opacity,color,x,y,transformation) {
		var font = this.font._get(this.fontSize);
		var tex = font.getTexture();
		if(kha_graphics4_TextShaderPainter.lastTexture != null && tex != kha_graphics4_TextShaderPainter.lastTexture) {
			this.drawBuffer();
		}
		kha_graphics4_TextShaderPainter.lastTexture = tex;
		var xpos = x;
		var _g = 0;
		var _g1 = text.length;
		while(_g < _g1) {
			var charCode = text.charCodeAt(_g++);
			var q = font.getBakedQuad(this.bakedQuadCache,kha_graphics4_TextShaderPainter.findIndex(charCode),xpos,y);
			if(q != null) {
				if(kha_graphics4_TextShaderPainter.bufferIndex + 1 >= 1000) {
					this.drawBuffer();
				}
				this.setRectColors(opacity,color);
				this.setRectTexCoords(q.s0 * tex.get_width() / tex.get_realWidth(),q.t0 * tex.get_height() / tex.get_realHeight(),q.s1 * tex.get_width() / tex.get_realWidth(),q.t1 * tex.get_height() / tex.get_realHeight());
				var x1 = q.x0;
				var y1 = q.y1;
				if(y1 == null) {
					y1 = 0;
				}
				if(x1 == null) {
					x1 = 0;
				}
				var value_x = x1;
				var value_y = y1;
				var w = transformation._02 * value_x + transformation._12 * value_y + transformation._22;
				var x2 = (transformation._00 * value_x + transformation._10 * value_y + transformation._20) / w;
				var y2 = (transformation._01 * value_x + transformation._11 * value_y + transformation._21) / w;
				var x3 = x2;
				var y3 = y2;
				if(y2 == null) {
					y3 = 0;
				}
				if(x2 == null) {
					x3 = 0;
				}
				var x4 = q.x0;
				var y4 = q.y0;
				if(y4 == null) {
					y4 = 0;
				}
				if(x4 == null) {
					x4 = 0;
				}
				var value_x1 = x4;
				var value_y1 = y4;
				var w1 = transformation._02 * value_x1 + transformation._12 * value_y1 + transformation._22;
				var x5 = (transformation._00 * value_x1 + transformation._10 * value_y1 + transformation._20) / w1;
				var y5 = (transformation._01 * value_x1 + transformation._11 * value_y1 + transformation._21) / w1;
				var x6 = x5;
				var y6 = y5;
				if(y5 == null) {
					y6 = 0;
				}
				if(x5 == null) {
					x6 = 0;
				}
				var x7 = q.x1;
				var y7 = q.y0;
				if(y7 == null) {
					y7 = 0;
				}
				if(x7 == null) {
					x7 = 0;
				}
				var value_x2 = x7;
				var value_y2 = y7;
				var w2 = transformation._02 * value_x2 + transformation._12 * value_y2 + transformation._22;
				var x8 = (transformation._00 * value_x2 + transformation._10 * value_y2 + transformation._20) / w2;
				var y8 = (transformation._01 * value_x2 + transformation._11 * value_y2 + transformation._21) / w2;
				var x9 = x8;
				var y9 = y8;
				if(y8 == null) {
					y9 = 0;
				}
				if(x8 == null) {
					x9 = 0;
				}
				var x10 = q.x1;
				var y10 = q.y1;
				if(y10 == null) {
					y10 = 0;
				}
				if(x10 == null) {
					x10 = 0;
				}
				var value_x3 = x10;
				var value_y3 = y10;
				var w3 = transformation._02 * value_x3 + transformation._12 * value_y3 + transformation._22;
				var x11 = (transformation._00 * value_x3 + transformation._10 * value_y3 + transformation._20) / w3;
				var y11 = (transformation._01 * value_x3 + transformation._11 * value_y3 + transformation._21) / w3;
				var x12 = x11;
				var y12 = y11;
				if(y11 == null) {
					y12 = 0;
				}
				if(x11 == null) {
					x12 = 0;
				}
				this.setRectVertices(x3,y3,x6,y6,x9,y9,x12,y12);
				xpos += q.xadvance;
				++kha_graphics4_TextShaderPainter.bufferIndex;
			}
		}
	}
	,end: function() {
		if(kha_graphics4_TextShaderPainter.bufferIndex > 0) {
			this.drawBuffer();
		}
		kha_graphics4_TextShaderPainter.lastTexture = null;
	}
	,__class__: kha_graphics4_TextShaderPainter
};
var kha_graphics4_Graphics2 = function(canvas) {
	this.myImageScaleQuality = 0;
	kha_graphics2_Graphics.call(this);
	this.set_color(-1);
	this.canvas = canvas;
	this.g = canvas.get_g4();
	this.imagePainter = new kha_graphics4_ImageShaderPainter(this.g);
	this.coloredPainter = new kha_graphics4_ColoredShaderPainter(this.g);
	this.textPainter = new kha_graphics4_TextShaderPainter(this.g);
	this.textPainter.fontSize = this.get_fontSize();
	this.projectionMatrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.setProjection();
	if(kha_graphics4_Graphics2.videoPipeline == null) {
		kha_graphics4_Graphics2.videoPipeline = kha_graphics4_Graphics2.createImagePipeline(kha_graphics4_Graphics2.createImageVertexStructure());
		kha_graphics4_Graphics2.videoPipeline.fragmentShader = kha_Shaders.painter_video_frag;
		kha_graphics4_Graphics2.videoPipeline.vertexShader = kha_Shaders.painter_video_vert;
		kha_graphics4_Graphics2.videoPipeline.compile();
	}
};
$hxClasses["kha.graphics4.Graphics2"] = kha_graphics4_Graphics2;
kha_graphics4_Graphics2.__name__ = "kha.graphics4.Graphics2";
kha_graphics4_Graphics2.upperPowerOfTwo = function(v) {
	--v;
	v |= v >>> 1;
	v |= v >>> 2;
	v |= v >>> 4;
	v |= v >>> 8;
	v |= v >>> 16;
	return ++v;
};
kha_graphics4_Graphics2.createImageVertexStructure = function() {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("vertexPosition",2);
	structure.add("texPosition",1);
	structure.add("vertexColor",3);
	return structure;
};
kha_graphics4_Graphics2.createImagePipeline = function(structure) {
	var shaderPipeline = new kha_graphics4_PipelineState();
	shaderPipeline.fragmentShader = kha_Shaders.painter_image_frag;
	shaderPipeline.vertexShader = kha_Shaders.painter_image_vert;
	shaderPipeline.inputLayout = [structure];
	shaderPipeline.blendSource = 1;
	shaderPipeline.blendDestination = 5;
	shaderPipeline.alphaBlendSource = 1;
	shaderPipeline.alphaBlendDestination = 5;
	return shaderPipeline;
};
kha_graphics4_Graphics2.createColoredVertexStructure = function() {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("vertexPosition",2);
	structure.add("vertexColor",3);
	return structure;
};
kha_graphics4_Graphics2.createColoredPipeline = function(structure) {
	var shaderPipeline = new kha_graphics4_PipelineState();
	shaderPipeline.fragmentShader = kha_Shaders.painter_colored_frag;
	shaderPipeline.vertexShader = kha_Shaders.painter_colored_vert;
	shaderPipeline.inputLayout = [structure];
	shaderPipeline.blendSource = 1;
	shaderPipeline.blendDestination = 5;
	shaderPipeline.alphaBlendSource = 1;
	shaderPipeline.alphaBlendDestination = 5;
	return shaderPipeline;
};
kha_graphics4_Graphics2.createTextVertexStructure = function() {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("vertexPosition",2);
	structure.add("texPosition",1);
	structure.add("vertexColor",3);
	return structure;
};
kha_graphics4_Graphics2.createTextPipeline = function(structure) {
	var shaderPipeline = new kha_graphics4_PipelineState();
	shaderPipeline.fragmentShader = kha_Shaders.painter_text_frag;
	shaderPipeline.vertexShader = kha_Shaders.painter_text_vert;
	shaderPipeline.inputLayout = [structure];
	shaderPipeline.blendSource = 3;
	shaderPipeline.blendDestination = 5;
	shaderPipeline.alphaBlendSource = 3;
	shaderPipeline.alphaBlendDestination = 5;
	return shaderPipeline;
};
kha_graphics4_Graphics2.__super__ = kha_graphics2_Graphics;
kha_graphics4_Graphics2.prototype = $extend(kha_graphics2_Graphics.prototype,{
	myColor: null
	,myFont: null
	,projectionMatrix: null
	,imagePainter: null
	,coloredPainter: null
	,textPainter: null
	,canvas: null
	,g: null
	,setProjection: function() {
		var width = this.canvas.get_width();
		var height = this.canvas.get_height();
		if(((this.canvas) instanceof kha_Framebuffer)) {
			var _this = this.projectionMatrix;
			_this._00 = 2 / width;
			_this._10 = 0;
			_this._20 = 0;
			_this._30 = -width / width;
			_this._01 = 0;
			_this._11 = 2.0 / (0 - height);
			_this._21 = 0;
			_this._31 = -height / (0 - height);
			_this._02 = 0;
			_this._12 = 0;
			_this._22 = -0.002000200020002;
			_this._32 = -1.00020002000200026;
			_this._03 = 0;
			_this._13 = 0;
			_this._23 = 0;
			_this._33 = 1;
		} else {
			if(!kha_Image.get_nonPow2Supported()) {
				width = kha_graphics4_Graphics2.upperPowerOfTwo(width);
				height = kha_graphics4_Graphics2.upperPowerOfTwo(height);
			}
			if(kha_Image.renderTargetsInvertedY()) {
				var _this1 = this.projectionMatrix;
				_this1._00 = 2 / width;
				_this1._10 = 0;
				_this1._20 = 0;
				_this1._30 = -width / width;
				_this1._01 = 0;
				_this1._11 = 2.0 / height;
				_this1._21 = 0;
				_this1._31 = -height / height;
				_this1._02 = 0;
				_this1._12 = 0;
				_this1._22 = -0.002000200020002;
				_this1._32 = -1.00020002000200026;
				_this1._03 = 0;
				_this1._13 = 0;
				_this1._23 = 0;
				_this1._33 = 1;
			} else {
				var _this2 = this.projectionMatrix;
				_this2._00 = 2 / width;
				_this2._10 = 0;
				_this2._20 = 0;
				_this2._30 = -width / width;
				_this2._01 = 0;
				_this2._11 = 2.0 / (0 - height);
				_this2._21 = 0;
				_this2._31 = -height / (0 - height);
				_this2._02 = 0;
				_this2._12 = 0;
				_this2._22 = -0.002000200020002;
				_this2._32 = -1.00020002000200026;
				_this2._03 = 0;
				_this2._13 = 0;
				_this2._23 = 0;
				_this2._33 = 1;
			}
		}
		this.imagePainter.setProjection(this.projectionMatrix);
		this.coloredPainter.setProjection(this.projectionMatrix);
		this.textPainter.setProjection(this.projectionMatrix);
	}
	,drawImage: function(img,x,y) {
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.end();
		var xw = x + img.get_width();
		var yh = y + img.get_height();
		var _this1 = this.transformations[this.transformationIndex];
		var x1 = x;
		var y1 = yh;
		if(yh == null) {
			y1 = 0;
		}
		if(x == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this1._02 * value_x + _this1._12 * value_y + _this1._22;
		var x2 = (_this1._00 * value_x + _this1._10 * value_y + _this1._20) / w;
		var y2 = (_this1._01 * value_x + _this1._11 * value_y + _this1._21) / w;
		var x3 = x2;
		var y3 = y2;
		if(y2 == null) {
			y3 = 0;
		}
		if(x2 == null) {
			x3 = 0;
		}
		var _this2 = this.transformations[this.transformationIndex];
		var x4 = x;
		var y4 = y;
		if(y == null) {
			y4 = 0;
		}
		if(x == null) {
			x4 = 0;
		}
		var value_x1 = x4;
		var value_y1 = y4;
		var w1 = _this2._02 * value_x1 + _this2._12 * value_y1 + _this2._22;
		var x5 = (_this2._00 * value_x1 + _this2._10 * value_y1 + _this2._20) / w1;
		var y5 = (_this2._01 * value_x1 + _this2._11 * value_y1 + _this2._21) / w1;
		var x6 = x5;
		var y6 = y5;
		if(y5 == null) {
			y6 = 0;
		}
		if(x5 == null) {
			x6 = 0;
		}
		var _this3 = this.transformations[this.transformationIndex];
		var x7 = xw;
		var y7 = y;
		if(y == null) {
			y7 = 0;
		}
		if(xw == null) {
			x7 = 0;
		}
		var value_x2 = x7;
		var value_y2 = y7;
		var w2 = _this3._02 * value_x2 + _this3._12 * value_y2 + _this3._22;
		var x8 = (_this3._00 * value_x2 + _this3._10 * value_y2 + _this3._20) / w2;
		var y8 = (_this3._01 * value_x2 + _this3._11 * value_y2 + _this3._21) / w2;
		var x9 = x8;
		var y9 = y8;
		if(y8 == null) {
			y9 = 0;
		}
		if(x8 == null) {
			x9 = 0;
		}
		var _this4 = this.transformations[this.transformationIndex];
		var x10 = xw;
		var y10 = yh;
		if(yh == null) {
			y10 = 0;
		}
		if(xw == null) {
			x10 = 0;
		}
		var value_x3 = x10;
		var value_y3 = y10;
		var w3 = _this4._02 * value_x3 + _this4._12 * value_y3 + _this4._22;
		var x11 = (_this4._00 * value_x3 + _this4._10 * value_y3 + _this4._20) / w3;
		var y11 = (_this4._01 * value_x3 + _this4._11 * value_y3 + _this4._21) / w3;
		var x12 = x11;
		var y12 = y11;
		if(y11 == null) {
			y12 = 0;
		}
		if(x11 == null) {
			x12 = 0;
		}
		var opacity = this.get_opacity();
		var color = this.get_color();
		if(kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && img != kha_graphics4_ImageShaderPainter.lastTexture) {
			this.imagePainter.drawBuffer();
		}
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var a = (color >>> 24) * 0.00392156862745098 * opacity;
		var baseIndex = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 5] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 6] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 7] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 8] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 14] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 15] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 16] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 17] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 23] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 24] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 25] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 26] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 32] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 33] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 34] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 35] = a;
		var right = img.get_width() / img.get_realWidth();
		var bottom = img.get_height() / img.get_realHeight();
		var baseIndex1 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 3] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 4] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 12] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 13] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 21] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 22] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 30] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 31] = bottom;
		var baseIndex2 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2] = x3;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 1] = y3;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 2] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 9] = x6;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 10] = y6;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 11] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 18] = x9;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 19] = y9;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 20] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 27] = x12;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 28] = y12;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 29] = -5.0;
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = img;
	}
	,drawScaledSubImage: function(img,sx,sy,sw,sh,dx,dy,dw,dh) {
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.end();
		var _this1 = this.transformations[this.transformationIndex];
		var x = dx;
		var y = dy + dh;
		if(y == null) {
			y = 0;
		}
		if(dx == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var w = _this1._02 * value_x + _this1._12 * value_y + _this1._22;
		var x1 = (_this1._00 * value_x + _this1._10 * value_y + _this1._20) / w;
		var y1 = (_this1._01 * value_x + _this1._11 * value_y + _this1._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y1 == null) {
			y2 = 0;
		}
		if(x1 == null) {
			x2 = 0;
		}
		var _this2 = this.transformations[this.transformationIndex];
		var x3 = dx;
		var y3 = dy;
		if(dy == null) {
			y3 = 0;
		}
		if(dx == null) {
			x3 = 0;
		}
		var value_x1 = x3;
		var value_y1 = y3;
		var w1 = _this2._02 * value_x1 + _this2._12 * value_y1 + _this2._22;
		var x4 = (_this2._00 * value_x1 + _this2._10 * value_y1 + _this2._20) / w1;
		var y4 = (_this2._01 * value_x1 + _this2._11 * value_y1 + _this2._21) / w1;
		var x5 = x4;
		var y5 = y4;
		if(y4 == null) {
			y5 = 0;
		}
		if(x4 == null) {
			x5 = 0;
		}
		var _this3 = this.transformations[this.transformationIndex];
		var x6 = dx + dw;
		var y6 = dy;
		if(dy == null) {
			y6 = 0;
		}
		if(x6 == null) {
			x6 = 0;
		}
		var value_x2 = x6;
		var value_y2 = y6;
		var w2 = _this3._02 * value_x2 + _this3._12 * value_y2 + _this3._22;
		var x7 = (_this3._00 * value_x2 + _this3._10 * value_y2 + _this3._20) / w2;
		var y7 = (_this3._01 * value_x2 + _this3._11 * value_y2 + _this3._21) / w2;
		var x8 = x7;
		var y8 = y7;
		if(y7 == null) {
			y8 = 0;
		}
		if(x7 == null) {
			x8 = 0;
		}
		var _this4 = this.transformations[this.transformationIndex];
		var x9 = dx + dw;
		var y9 = dy + dh;
		if(y9 == null) {
			y9 = 0;
		}
		if(x9 == null) {
			x9 = 0;
		}
		var value_x3 = x9;
		var value_y3 = y9;
		var w3 = _this4._02 * value_x3 + _this4._12 * value_y3 + _this4._22;
		var x10 = (_this4._00 * value_x3 + _this4._10 * value_y3 + _this4._20) / w3;
		var y10 = (_this4._01 * value_x3 + _this4._11 * value_y3 + _this4._21) / w3;
		var x11 = x10;
		var y11 = y10;
		if(y10 == null) {
			y11 = 0;
		}
		if(x10 == null) {
			x11 = 0;
		}
		var opacity = this.get_opacity();
		var color = this.get_color();
		if(kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && img != kha_graphics4_ImageShaderPainter.lastTexture) {
			this.imagePainter.drawBuffer();
		}
		var left = sx / img.get_realWidth();
		var top = sy / img.get_realHeight();
		var right = (sx + sw) / img.get_realWidth();
		var bottom = (sy + sh) / img.get_realHeight();
		var baseIndex = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 3] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 4] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 12] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 13] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 21] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 22] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 30] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 31] = bottom;
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var a = (color >>> 24) * 0.00392156862745098 * opacity;
		var baseIndex1 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 5] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 6] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 7] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 8] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 14] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 15] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 16] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 17] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 23] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 24] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 25] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 26] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 32] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 33] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 34] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 35] = a;
		var baseIndex2 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2] = x2;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 1] = y2;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 2] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 9] = x5;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 10] = y5;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 11] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 18] = x8;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 19] = y8;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 20] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 27] = x11;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 28] = y11;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 29] = -5.0;
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = img;
	}
	,get_color: function() {
		return this.myColor;
	}
	,set_color: function(color) {
		return this.myColor = color;
	}
	,drawRect: function(x,y,width,height,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.transformations[this.transformationIndex];
		var x1 = x - strength / 2;
		var y1 = y + strength / 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x2 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y2 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x3 = x2;
		var y3 = y2;
		if(y2 == null) {
			y3 = 0;
		}
		if(x2 == null) {
			x3 = 0;
		}
		var p1_x = x3;
		var p1_y = y3;
		var _this1 = this.transformations[this.transformationIndex];
		var x4 = x - strength / 2;
		var y4 = y - strength / 2;
		if(y4 == null) {
			y4 = 0;
		}
		if(x4 == null) {
			x4 = 0;
		}
		var value_x1 = x4;
		var value_y1 = y4;
		var w1 = _this1._02 * value_x1 + _this1._12 * value_y1 + _this1._22;
		var x5 = (_this1._00 * value_x1 + _this1._10 * value_y1 + _this1._20) / w1;
		var y5 = (_this1._01 * value_x1 + _this1._11 * value_y1 + _this1._21) / w1;
		var x6 = x5;
		var y6 = y5;
		if(y5 == null) {
			y6 = 0;
		}
		if(x5 == null) {
			x6 = 0;
		}
		var p2_x = x6;
		var p2_y = y6;
		var _this2 = this.transformations[this.transformationIndex];
		var x7 = x + width + strength / 2;
		var y7 = y - strength / 2;
		if(y7 == null) {
			y7 = 0;
		}
		if(x7 == null) {
			x7 = 0;
		}
		var value_x2 = x7;
		var value_y2 = y7;
		var w2 = _this2._02 * value_x2 + _this2._12 * value_y2 + _this2._22;
		var x8 = (_this2._00 * value_x2 + _this2._10 * value_y2 + _this2._20) / w2;
		var y8 = (_this2._01 * value_x2 + _this2._11 * value_y2 + _this2._21) / w2;
		var x9 = x8;
		var y9 = y8;
		if(y8 == null) {
			y9 = 0;
		}
		if(x8 == null) {
			x9 = 0;
		}
		var p3_x = x9;
		var p3_y = y9;
		var _this3 = this.transformations[this.transformationIndex];
		var x10 = x + width + strength / 2;
		var y10 = y + strength / 2;
		if(y10 == null) {
			y10 = 0;
		}
		if(x10 == null) {
			x10 = 0;
		}
		var value_x3 = x10;
		var value_y3 = y10;
		var w3 = _this3._02 * value_x3 + _this3._12 * value_y3 + _this3._22;
		var x11 = (_this3._00 * value_x3 + _this3._10 * value_y3 + _this3._20) / w3;
		var y11 = (_this3._01 * value_x3 + _this3._11 * value_y3 + _this3._21) / w3;
		var x12 = x11;
		var y12 = y11;
		if(y11 == null) {
			y12 = 0;
		}
		if(x11 == null) {
			x12 = 0;
		}
		var p4_x = x12;
		var p4_y = y12;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
		var _this4 = this.transformations[this.transformationIndex];
		var x13 = x - strength / 2;
		var y13 = y + height - strength / 2;
		if(y13 == null) {
			y13 = 0;
		}
		if(x13 == null) {
			x13 = 0;
		}
		var value_x4 = x13;
		var value_y4 = y13;
		var w4 = _this4._02 * value_x4 + _this4._12 * value_y4 + _this4._22;
		var x14 = (_this4._00 * value_x4 + _this4._10 * value_y4 + _this4._20) / w4;
		var y14 = (_this4._01 * value_x4 + _this4._11 * value_y4 + _this4._21) / w4;
		var x15 = x14;
		var y15 = y14;
		if(y14 == null) {
			y15 = 0;
		}
		if(x14 == null) {
			x15 = 0;
		}
		p1_x = x15;
		p1_y = y15;
		var _this5 = this.transformations[this.transformationIndex];
		var x16 = x - strength / 2;
		var y16 = y + strength / 2;
		if(y16 == null) {
			y16 = 0;
		}
		if(x16 == null) {
			x16 = 0;
		}
		var value_x5 = x16;
		var value_y5 = y16;
		var w5 = _this5._02 * value_x5 + _this5._12 * value_y5 + _this5._22;
		var x17 = (_this5._00 * value_x5 + _this5._10 * value_y5 + _this5._20) / w5;
		var y17 = (_this5._01 * value_x5 + _this5._11 * value_y5 + _this5._21) / w5;
		var x18 = x17;
		var y18 = y17;
		if(y17 == null) {
			y18 = 0;
		}
		if(x17 == null) {
			x18 = 0;
		}
		p2_x = x18;
		p2_y = y18;
		var _this6 = this.transformations[this.transformationIndex];
		var x19 = x + strength / 2;
		var y19 = y + strength / 2;
		if(y19 == null) {
			y19 = 0;
		}
		if(x19 == null) {
			x19 = 0;
		}
		var value_x6 = x19;
		var value_y6 = y19;
		var w6 = _this6._02 * value_x6 + _this6._12 * value_y6 + _this6._22;
		var x20 = (_this6._00 * value_x6 + _this6._10 * value_y6 + _this6._20) / w6;
		var y20 = (_this6._01 * value_x6 + _this6._11 * value_y6 + _this6._21) / w6;
		var x21 = x20;
		var y21 = y20;
		if(y20 == null) {
			y21 = 0;
		}
		if(x20 == null) {
			x21 = 0;
		}
		p3_x = x21;
		p3_y = y21;
		var _this7 = this.transformations[this.transformationIndex];
		var x22 = x + strength / 2;
		var y22 = y + height - strength / 2;
		if(y22 == null) {
			y22 = 0;
		}
		if(x22 == null) {
			x22 = 0;
		}
		var value_x7 = x22;
		var value_y7 = y22;
		var w7 = _this7._02 * value_x7 + _this7._12 * value_y7 + _this7._22;
		var x23 = (_this7._00 * value_x7 + _this7._10 * value_y7 + _this7._20) / w7;
		var y23 = (_this7._01 * value_x7 + _this7._11 * value_y7 + _this7._21) / w7;
		var x24 = x23;
		var y24 = y23;
		if(y23 == null) {
			y24 = 0;
		}
		if(x23 == null) {
			x24 = 0;
		}
		p4_x = x24;
		p4_y = y24;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
		var _this8 = this.transformations[this.transformationIndex];
		var x25 = x - strength / 2;
		var y25 = y + height + strength / 2;
		if(y25 == null) {
			y25 = 0;
		}
		if(x25 == null) {
			x25 = 0;
		}
		var value_x8 = x25;
		var value_y8 = y25;
		var w8 = _this8._02 * value_x8 + _this8._12 * value_y8 + _this8._22;
		var x26 = (_this8._00 * value_x8 + _this8._10 * value_y8 + _this8._20) / w8;
		var y26 = (_this8._01 * value_x8 + _this8._11 * value_y8 + _this8._21) / w8;
		var x27 = x26;
		var y27 = y26;
		if(y26 == null) {
			y27 = 0;
		}
		if(x26 == null) {
			x27 = 0;
		}
		p1_x = x27;
		p1_y = y27;
		var _this9 = this.transformations[this.transformationIndex];
		var x28 = x - strength / 2;
		var y28 = y + height - strength / 2;
		if(y28 == null) {
			y28 = 0;
		}
		if(x28 == null) {
			x28 = 0;
		}
		var value_x9 = x28;
		var value_y9 = y28;
		var w9 = _this9._02 * value_x9 + _this9._12 * value_y9 + _this9._22;
		var x29 = (_this9._00 * value_x9 + _this9._10 * value_y9 + _this9._20) / w9;
		var y29 = (_this9._01 * value_x9 + _this9._11 * value_y9 + _this9._21) / w9;
		var x30 = x29;
		var y30 = y29;
		if(y29 == null) {
			y30 = 0;
		}
		if(x29 == null) {
			x30 = 0;
		}
		p2_x = x30;
		p2_y = y30;
		var _this10 = this.transformations[this.transformationIndex];
		var x31 = x + width + strength / 2;
		var y31 = y + height - strength / 2;
		if(y31 == null) {
			y31 = 0;
		}
		if(x31 == null) {
			x31 = 0;
		}
		var value_x10 = x31;
		var value_y10 = y31;
		var w10 = _this10._02 * value_x10 + _this10._12 * value_y10 + _this10._22;
		var x32 = (_this10._00 * value_x10 + _this10._10 * value_y10 + _this10._20) / w10;
		var y32 = (_this10._01 * value_x10 + _this10._11 * value_y10 + _this10._21) / w10;
		var x33 = x32;
		var y33 = y32;
		if(y32 == null) {
			y33 = 0;
		}
		if(x32 == null) {
			x33 = 0;
		}
		p3_x = x33;
		p3_y = y33;
		var _this11 = this.transformations[this.transformationIndex];
		var x34 = x + width + strength / 2;
		var y34 = y + height + strength / 2;
		if(y34 == null) {
			y34 = 0;
		}
		if(x34 == null) {
			x34 = 0;
		}
		var value_x11 = x34;
		var value_y11 = y34;
		var w11 = _this11._02 * value_x11 + _this11._12 * value_y11 + _this11._22;
		var x35 = (_this11._00 * value_x11 + _this11._10 * value_y11 + _this11._20) / w11;
		var y35 = (_this11._01 * value_x11 + _this11._11 * value_y11 + _this11._21) / w11;
		var x36 = x35;
		var y36 = y35;
		if(y35 == null) {
			y36 = 0;
		}
		if(x35 == null) {
			x36 = 0;
		}
		p4_x = x36;
		p4_y = y36;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
		var _this12 = this.transformations[this.transformationIndex];
		var x37 = x + width - strength / 2;
		var y37 = y + height - strength / 2;
		if(y37 == null) {
			y37 = 0;
		}
		if(x37 == null) {
			x37 = 0;
		}
		var value_x12 = x37;
		var value_y12 = y37;
		var w12 = _this12._02 * value_x12 + _this12._12 * value_y12 + _this12._22;
		var x38 = (_this12._00 * value_x12 + _this12._10 * value_y12 + _this12._20) / w12;
		var y38 = (_this12._01 * value_x12 + _this12._11 * value_y12 + _this12._21) / w12;
		var x39 = x38;
		var y39 = y38;
		if(y38 == null) {
			y39 = 0;
		}
		if(x38 == null) {
			x39 = 0;
		}
		p1_x = x39;
		p1_y = y39;
		var _this13 = this.transformations[this.transformationIndex];
		var x40 = x + width - strength / 2;
		var y40 = y + strength / 2;
		if(y40 == null) {
			y40 = 0;
		}
		if(x40 == null) {
			x40 = 0;
		}
		var value_x13 = x40;
		var value_y13 = y40;
		var w13 = _this13._02 * value_x13 + _this13._12 * value_y13 + _this13._22;
		var x41 = (_this13._00 * value_x13 + _this13._10 * value_y13 + _this13._20) / w13;
		var y41 = (_this13._01 * value_x13 + _this13._11 * value_y13 + _this13._21) / w13;
		var x42 = x41;
		var y42 = y41;
		if(y41 == null) {
			y42 = 0;
		}
		if(x41 == null) {
			x42 = 0;
		}
		p2_x = x42;
		p2_y = y42;
		var _this14 = this.transformations[this.transformationIndex];
		var x43 = x + width + strength / 2;
		var y43 = y + strength / 2;
		if(y43 == null) {
			y43 = 0;
		}
		if(x43 == null) {
			x43 = 0;
		}
		var value_x14 = x43;
		var value_y14 = y43;
		var w14 = _this14._02 * value_x14 + _this14._12 * value_y14 + _this14._22;
		var x44 = (_this14._00 * value_x14 + _this14._10 * value_y14 + _this14._20) / w14;
		var y44 = (_this14._01 * value_x14 + _this14._11 * value_y14 + _this14._21) / w14;
		var x45 = x44;
		var y45 = y44;
		if(y44 == null) {
			y45 = 0;
		}
		if(x44 == null) {
			x45 = 0;
		}
		p3_x = x45;
		p3_y = y45;
		var _this15 = this.transformations[this.transformationIndex];
		var x46 = x + width + strength / 2;
		var y46 = y + height - strength / 2;
		if(y46 == null) {
			y46 = 0;
		}
		if(x46 == null) {
			x46 = 0;
		}
		var value_x15 = x46;
		var value_y15 = y46;
		var w15 = _this15._02 * value_x15 + _this15._12 * value_y15 + _this15._22;
		var x47 = (_this15._00 * value_x15 + _this15._10 * value_y15 + _this15._20) / w15;
		var y47 = (_this15._01 * value_x15 + _this15._11 * value_y15 + _this15._21) / w15;
		var x48 = x47;
		var y48 = y47;
		if(y47 == null) {
			y48 = 0;
		}
		if(x47 == null) {
			x48 = 0;
		}
		p4_x = x48;
		p4_y = y48;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
	}
	,fillRect: function(x,y,width,height) {
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.transformations[this.transformationIndex];
		var x1 = x;
		var y1 = y + height;
		if(y1 == null) {
			y1 = 0;
		}
		if(x == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x2 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y2 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x3 = x2;
		var y3 = y2;
		if(y2 == null) {
			y3 = 0;
		}
		if(x2 == null) {
			x3 = 0;
		}
		var _this1 = this.transformations[this.transformationIndex];
		var x4 = x;
		var y4 = y;
		if(y == null) {
			y4 = 0;
		}
		if(x == null) {
			x4 = 0;
		}
		var value_x1 = x4;
		var value_y1 = y4;
		var w1 = _this1._02 * value_x1 + _this1._12 * value_y1 + _this1._22;
		var x5 = (_this1._00 * value_x1 + _this1._10 * value_y1 + _this1._20) / w1;
		var y5 = (_this1._01 * value_x1 + _this1._11 * value_y1 + _this1._21) / w1;
		var x6 = x5;
		var y6 = y5;
		if(y5 == null) {
			y6 = 0;
		}
		if(x5 == null) {
			x6 = 0;
		}
		var _this2 = this.transformations[this.transformationIndex];
		var x7 = x + width;
		var y7 = y;
		if(y == null) {
			y7 = 0;
		}
		if(x7 == null) {
			x7 = 0;
		}
		var value_x2 = x7;
		var value_y2 = y7;
		var w2 = _this2._02 * value_x2 + _this2._12 * value_y2 + _this2._22;
		var x8 = (_this2._00 * value_x2 + _this2._10 * value_y2 + _this2._20) / w2;
		var y8 = (_this2._01 * value_x2 + _this2._11 * value_y2 + _this2._21) / w2;
		var x9 = x8;
		var y9 = y8;
		if(y8 == null) {
			y9 = 0;
		}
		if(x8 == null) {
			x9 = 0;
		}
		var _this3 = this.transformations[this.transformationIndex];
		var x10 = x + width;
		var y10 = y + height;
		if(y10 == null) {
			y10 = 0;
		}
		if(x10 == null) {
			x10 = 0;
		}
		var value_x3 = x10;
		var value_y3 = y10;
		var w3 = _this3._02 * value_x3 + _this3._12 * value_y3 + _this3._22;
		var x11 = (_this3._00 * value_x3 + _this3._10 * value_y3 + _this3._20) / w3;
		var y11 = (_this3._01 * value_x3 + _this3._11 * value_y3 + _this3._21) / w3;
		var x12 = x11;
		var y12 = y11;
		if(y11 == null) {
			y12 = 0;
		}
		if(x11 == null) {
			x12 = 0;
		}
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),x3,y3,x6,y6,x9,y9,x12,y12);
	}
	,drawString: function(text,x,y) {
		this.imagePainter.end();
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.drawString(text,this.get_opacity(),this.get_color(),x,y,this.transformations[this.transformationIndex]);
	}
	,get_font: function() {
		return this.myFont;
	}
	,set_font: function(font) {
		this.textPainter.setFont(font);
		return this.myFont = font;
	}
	,set_fontSize: function(value) {
		return kha_graphics2_Graphics.prototype.set_fontSize.call(this,this.textPainter.fontSize = value);
	}
	,drawLine: function(x1,y1,x2,y2,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.imagePainter.end();
		this.textPainter.end();
		var vec_x = 0;
		var vec_y = 0;
		if(y2 == y1) {
			vec_x = 0;
			vec_y = -1;
		} else {
			var y = -(x2 - x1) / (y2 - y1);
			if(y == null) {
				y = 0;
			}
			vec_x = 1;
			vec_y = y;
		}
		var currentLength = Math.sqrt(vec_x * vec_x + vec_y * vec_y);
		if(currentLength != 0) {
			var mul = strength / currentLength;
			vec_x *= mul;
			vec_y *= mul;
		}
		var x = x1 + 0.5 * vec_x;
		var y3 = y1 + 0.5 * vec_y;
		if(y3 == null) {
			y3 = 0;
		}
		if(x == null) {
			x = 0;
		}
		var p1_x = x;
		var p1_y = y3;
		var x3 = x2 + 0.5 * vec_x;
		var y4 = y2 + 0.5 * vec_y;
		if(y4 == null) {
			y4 = 0;
		}
		if(x3 == null) {
			x3 = 0;
		}
		var p2_x = x3;
		var p2_y = y4;
		var x4 = p1_x - vec_x;
		var y5 = p1_y - vec_y;
		if(y5 == null) {
			y5 = 0;
		}
		if(x4 == null) {
			x4 = 0;
		}
		var p3_x = x4;
		var p3_y = y5;
		var x5 = p2_x - vec_x;
		var y6 = p2_y - vec_y;
		if(y6 == null) {
			y6 = 0;
		}
		if(x5 == null) {
			x5 = 0;
		}
		var p4_x = x5;
		var p4_y = y6;
		var _this = this.transformations[this.transformationIndex];
		var w = _this._02 * p1_x + _this._12 * p1_y + _this._22;
		var x6 = (_this._00 * p1_x + _this._10 * p1_y + _this._20) / w;
		var y7 = (_this._01 * p1_x + _this._11 * p1_y + _this._21) / w;
		var x7 = x6;
		var y8 = y7;
		if(y7 == null) {
			y8 = 0;
		}
		if(x6 == null) {
			x7 = 0;
		}
		p1_x = x7;
		p1_y = y8;
		var _this1 = this.transformations[this.transformationIndex];
		var w1 = _this1._02 * p2_x + _this1._12 * p2_y + _this1._22;
		var x8 = (_this1._00 * p2_x + _this1._10 * p2_y + _this1._20) / w1;
		var y9 = (_this1._01 * p2_x + _this1._11 * p2_y + _this1._21) / w1;
		var x9 = x8;
		var y10 = y9;
		if(y9 == null) {
			y10 = 0;
		}
		if(x8 == null) {
			x9 = 0;
		}
		p2_x = x9;
		p2_y = y10;
		var _this2 = this.transformations[this.transformationIndex];
		var w2 = _this2._02 * p3_x + _this2._12 * p3_y + _this2._22;
		var x10 = (_this2._00 * p3_x + _this2._10 * p3_y + _this2._20) / w2;
		var y11 = (_this2._01 * p3_x + _this2._11 * p3_y + _this2._21) / w2;
		var x11 = x10;
		var y12 = y11;
		if(y11 == null) {
			y12 = 0;
		}
		if(x10 == null) {
			x11 = 0;
		}
		p3_x = x11;
		p3_y = y12;
		var _this3 = this.transformations[this.transformationIndex];
		var w3 = _this3._02 * p4_x + _this3._12 * p4_y + _this3._22;
		var x12 = (_this3._00 * p4_x + _this3._10 * p4_y + _this3._20) / w3;
		var y13 = (_this3._01 * p4_x + _this3._11 * p4_y + _this3._21) / w3;
		var x13 = x12;
		var y14 = y13;
		if(y13 == null) {
			y14 = 0;
		}
		if(x12 == null) {
			x13 = 0;
		}
		p4_x = x13;
		p4_y = y14;
		this.coloredPainter.fillTriangle(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y);
		this.coloredPainter.fillTriangle(this.get_opacity(),this.get_color(),p3_x,p3_y,p2_x,p2_y,p4_x,p4_y);
	}
	,fillTriangle: function(x1,y1,x2,y2,x3,y3) {
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.transformations[this.transformationIndex];
		var x = x1;
		var y = y1;
		if(y1 == null) {
			y = 0;
		}
		if(x1 == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x4 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y4 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x5 = x4;
		var y5 = y4;
		if(y4 == null) {
			y5 = 0;
		}
		if(x4 == null) {
			x5 = 0;
		}
		var _this1 = this.transformations[this.transformationIndex];
		var x6 = x2;
		var y6 = y2;
		if(y2 == null) {
			y6 = 0;
		}
		if(x2 == null) {
			x6 = 0;
		}
		var value_x1 = x6;
		var value_y1 = y6;
		var w1 = _this1._02 * value_x1 + _this1._12 * value_y1 + _this1._22;
		var x7 = (_this1._00 * value_x1 + _this1._10 * value_y1 + _this1._20) / w1;
		var y7 = (_this1._01 * value_x1 + _this1._11 * value_y1 + _this1._21) / w1;
		var x8 = x7;
		var y8 = y7;
		if(y7 == null) {
			y8 = 0;
		}
		if(x7 == null) {
			x8 = 0;
		}
		var _this2 = this.transformations[this.transformationIndex];
		var x9 = x3;
		var y9 = y3;
		if(y3 == null) {
			y9 = 0;
		}
		if(x3 == null) {
			x9 = 0;
		}
		var value_x2 = x9;
		var value_y2 = y9;
		var w2 = _this2._02 * value_x2 + _this2._12 * value_y2 + _this2._22;
		var x10 = (_this2._00 * value_x2 + _this2._10 * value_y2 + _this2._20) / w2;
		var y10 = (_this2._01 * value_x2 + _this2._11 * value_y2 + _this2._21) / w2;
		var x11 = x10;
		var y11 = y10;
		if(y10 == null) {
			y11 = 0;
		}
		if(x10 == null) {
			x11 = 0;
		}
		this.coloredPainter.fillTriangle(this.get_opacity(),this.get_color(),x5,y5,x8,y8,x11,y11);
	}
	,myImageScaleQuality: null
	,set_imageScaleQuality: function(value) {
		if(value == this.myImageScaleQuality) {
			return value;
		}
		this.imagePainter.setBilinearFilter(value == 1);
		this.textPainter.setBilinearFilter(value == 1);
		return this.myImageScaleQuality = value;
	}
	,begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
		if(kha_graphics4_Graphics2.current == null) {
			kha_graphics4_Graphics2.current = this;
		} else {
			throw new js__$Boot_HaxeError("End before you begin");
		}
		this.g.begin();
		if(clear) {
			this.clear(clearColor);
		}
		this.setProjection();
	}
	,clear: function(color) {
		this.flush();
		this.g.clear(color == null ? -16777216 : color);
	}
	,flush: function() {
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
	}
	,end: function() {
		this.flush();
		this.g.end();
		if(kha_graphics4_Graphics2.current == this) {
			kha_graphics4_Graphics2.current = null;
		} else {
			throw new js__$Boot_HaxeError("Begin before you end");
		}
	}
	,__class__: kha_graphics4_Graphics2
});
var kha_graphics4_IndexBuffer = function(indexCount,usage,canRead) {
	if(canRead == null) {
		canRead = false;
	}
	this.lockEnd = 0;
	this.lockStart = 0;
	this.usage = usage;
	this.mySize = indexCount;
	this.buffer = kha_SystemImpl.gl.createBuffer();
	this._data = new Uint32Array(indexCount);
};
$hxClasses["kha.graphics4.IndexBuffer"] = kha_graphics4_IndexBuffer;
kha_graphics4_IndexBuffer.__name__ = "kha.graphics4.IndexBuffer";
kha_graphics4_IndexBuffer.prototype = {
	buffer: null
	,_data: null
	,mySize: null
	,usage: null
	,lockStart: null
	,lockEnd: null
	,lock: function(start,count) {
		this.lockStart = start != null ? start : 0;
		this.lockEnd = count != null ? start + count : this.mySize;
		return this._data.subarray(this.lockStart,this.lockEnd);
	}
	,unlock: function(count) {
		if(count != null) {
			this.lockEnd = this.lockStart + count;
		}
		kha_SystemImpl.gl.bindBuffer(34963,this.buffer);
		var data = this._data.subarray(this.lockStart,this.lockEnd);
		var glData = kha_SystemImpl.elementIndexUint == null ? new Uint16Array(data) : data;
		kha_SystemImpl.gl.bufferData(34963,glData,this.usage == 1 ? 35048 : 35044);
	}
	,set: function() {
		kha_SystemImpl.gl.bindBuffer(34963,this.buffer);
	}
	,count: function() {
		return this.mySize;
	}
	,__class__: kha_graphics4_IndexBuffer
};
var kha_graphics4_PipelineStateBase = function() {
	this.inputLayout = null;
	this.vertexShader = null;
	this.fragmentShader = null;
	this.geometryShader = null;
	this.tessellationControlShader = null;
	this.tessellationEvaluationShader = null;
	this.cullMode = 2;
	this.depthWrite = false;
	this.depthMode = 0;
	this.stencilMode = 0;
	this.stencilBothPass = 0;
	this.stencilDepthFail = 0;
	this.stencilFail = 0;
	this.stencilReferenceValue = kha_graphics4_StencilValue.Static(0);
	this.stencilReadMask = 255;
	this.stencilWriteMask = 255;
	this.blendSource = 1;
	this.blendDestination = 2;
	this.blendOperation = 0;
	this.alphaBlendSource = 1;
	this.alphaBlendDestination = 2;
	this.alphaBlendOperation = 0;
	this.colorWriteMasksRed = [];
	this.colorWriteMasksGreen = [];
	this.colorWriteMasksBlue = [];
	this.colorWriteMasksAlpha = [];
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.conservativeRasterization = false;
};
$hxClasses["kha.graphics4.PipelineStateBase"] = kha_graphics4_PipelineStateBase;
kha_graphics4_PipelineStateBase.__name__ = "kha.graphics4.PipelineStateBase";
kha_graphics4_PipelineStateBase.prototype = {
	inputLayout: null
	,vertexShader: null
	,fragmentShader: null
	,geometryShader: null
	,tessellationControlShader: null
	,tessellationEvaluationShader: null
	,cullMode: null
	,depthWrite: null
	,depthMode: null
	,stencilMode: null
	,stencilBothPass: null
	,stencilDepthFail: null
	,stencilFail: null
	,stencilReferenceValue: null
	,stencilReadMask: null
	,stencilWriteMask: null
	,blendSource: null
	,blendDestination: null
	,blendOperation: null
	,alphaBlendSource: null
	,alphaBlendDestination: null
	,alphaBlendOperation: null
	,colorWriteMasksRed: null
	,colorWriteMasksGreen: null
	,colorWriteMasksBlue: null
	,colorWriteMasksAlpha: null
	,conservativeRasterization: null
	,__class__: kha_graphics4_PipelineStateBase
};
var kha_graphics4_PipelineState = function() {
	this.program = null;
	kha_graphics4_PipelineStateBase.call(this);
	this.textures = [];
	this.textureValues = [];
};
$hxClasses["kha.graphics4.PipelineState"] = kha_graphics4_PipelineState;
kha_graphics4_PipelineState.__name__ = "kha.graphics4.PipelineState";
kha_graphics4_PipelineState.__super__ = kha_graphics4_PipelineStateBase;
kha_graphics4_PipelineState.prototype = $extend(kha_graphics4_PipelineStateBase.prototype,{
	program: null
	,textures: null
	,textureValues: null
	,compile: function() {
		if(this.program != null) {
			kha_SystemImpl.gl.deleteProgram(this.program);
		}
		this.program = kha_SystemImpl.gl.createProgram();
		this.compileShader(this.vertexShader);
		this.compileShader(this.fragmentShader);
		kha_SystemImpl.gl.attachShader(this.program,this.vertexShader.shader);
		kha_SystemImpl.gl.attachShader(this.program,this.fragmentShader.shader);
		var index = 0;
		var _g = 0;
		var _g1 = this.inputLayout;
		while(_g < _g1.length) {
			var _g2 = 0;
			var _g11 = _g1[_g++].elements;
			while(_g2 < _g11.length) {
				var element = _g11[_g2];
				++_g2;
				kha_SystemImpl.gl.bindAttribLocation(this.program,index,element.name);
				if(element.data == 4) {
					index += 4;
				} else {
					++index;
				}
			}
		}
		kha_SystemImpl.gl.linkProgram(this.program);
		if(!kha_SystemImpl.gl.getProgramParameter(this.program,35714)) {
			throw new js__$Boot_HaxeError("Could not link the shader program:\n" + kha_SystemImpl.gl.getProgramInfoLog(this.program));
		}
	}
	,set: function() {
		kha_SystemImpl.gl.useProgram(this.program);
		var _g = 0;
		var _g1 = this.textureValues.length;
		while(_g < _g1) {
			var index = _g++;
			kha_SystemImpl.gl.uniform1i(this.textureValues[index],index);
		}
		kha_SystemImpl.gl.colorMask(this.colorWriteMasksRed[0],this.colorWriteMasksGreen[0],this.colorWriteMasksBlue[0],this.colorWriteMasksAlpha[0]);
	}
	,compileShader: function(shader) {
		if(shader.shader != null) {
			return;
		}
		var s = kha_SystemImpl.gl.createShader(shader.type);
		var highpSupported = kha_SystemImpl.gl.getShaderPrecisionFormat(35632,36338).precision != 0;
		var files = shader.files;
		var _g = 0;
		var _g1 = files.length;
		while(_g < _g1) {
			var i = _g++;
			if(kha_SystemImpl.gl2) {
				if(files[i].indexOf("-webgl2") >= 0 || files[i].indexOf("runtime-string") >= 0) {
					kha_SystemImpl.gl.shaderSource(s,shader.sources[i]);
					break;
				}
			} else {
				if(!highpSupported && (files[i].indexOf("-relaxed") >= 0 || files[i].indexOf("runtime-string") >= 0)) {
					kha_SystemImpl.gl.shaderSource(s,shader.sources[i]);
					break;
				}
				if(highpSupported && (files[i].indexOf("-relaxed") < 0 || files[i].indexOf("runtime-string") >= 0)) {
					kha_SystemImpl.gl.shaderSource(s,shader.sources[i]);
					break;
				}
			}
		}
		kha_SystemImpl.gl.compileShader(s);
		if(!kha_SystemImpl.gl.getShaderParameter(s,35713)) {
			throw new js__$Boot_HaxeError("Could not compile shader:\n" + kha_SystemImpl.gl.getShaderInfoLog(s));
		}
		shader.shader = s;
	}
	,getConstantLocation: function(name) {
		var location = kha_SystemImpl.gl.getUniformLocation(this.program,name);
		if(location == null) {
			haxe_Log.trace("Warning: Uniform " + name + " not found.",{ fileName : "kha/graphics4/PipelineState.hx", lineNumber : 92, className : "kha.graphics4.PipelineState", methodName : "getConstantLocation"});
		}
		var type = 5126;
		var count = kha_SystemImpl.gl.getProgramParameter(this.program,35718);
		var _g = 0;
		while(_g < count) {
			var info = kha_SystemImpl.gl.getActiveUniform(this.program,_g++);
			if(info.name == name || info.name == name + "[0]") {
				type = info.type;
				break;
			}
		}
		return new kha_js_graphics4_ConstantLocation(location,type);
	}
	,getTextureUnit: function(name) {
		var index = this.findTexture(name);
		if(index < 0) {
			var location = kha_SystemImpl.gl.getUniformLocation(this.program,name);
			if(location == null) {
				haxe_Log.trace("Warning: Sampler " + name + " not found.",{ fileName : "kha/graphics4/PipelineState.hx", lineNumber : 111, className : "kha.graphics4.PipelineState", methodName : "getTextureUnit"});
			}
			index = this.textures.length;
			this.textureValues.push(location);
			this.textures.push(name);
		}
		return new kha_js_graphics4_TextureUnit(index);
	}
	,findTexture: function(name) {
		var _g = 0;
		var _g1 = this.textures.length;
		while(_g < _g1) {
			var index = _g++;
			if(this.textures[index] == name) {
				return index;
			}
		}
		return -1;
	}
	,__class__: kha_graphics4_PipelineState
});
var kha_graphics4_StencilValue = $hxEnums["kha.graphics4.StencilValue"] = { __ename__ : "kha.graphics4.StencilValue", __constructs__ : ["Dynamic","Static"]
	,Dynamic: {_hx_index:0,__enum__:"kha.graphics4.StencilValue",toString:$estr}
	,Static: ($_=function(value) { return {_hx_index:1,value:value,__enum__:"kha.graphics4.StencilValue",toString:$estr}; },$_.__params__ = ["value"],$_)
};
var kha_graphics4_TessellationControlShader = function() { };
$hxClasses["kha.graphics4.TessellationControlShader"] = kha_graphics4_TessellationControlShader;
kha_graphics4_TessellationControlShader.__name__ = "kha.graphics4.TessellationControlShader";
var kha_graphics4_TessellationEvaluationShader = function() { };
$hxClasses["kha.graphics4.TessellationEvaluationShader"] = kha_graphics4_TessellationEvaluationShader;
kha_graphics4_TessellationEvaluationShader.__name__ = "kha.graphics4.TessellationEvaluationShader";
var kha_graphics4_TextureUnit = function() { };
$hxClasses["kha.graphics4.TextureUnit"] = kha_graphics4_TextureUnit;
kha_graphics4_TextureUnit.__name__ = "kha.graphics4.TextureUnit";
kha_graphics4_TextureUnit.__isInterface__ = true;
var kha_graphics4_VertexBuffer = function(vertexCount,structure,usage,instanceDataStepRate,canRead) {
	if(canRead == null) {
		canRead = false;
	}
	if(instanceDataStepRate == null) {
		instanceDataStepRate = 0;
	}
	this.lockEnd = 0;
	this.lockStart = 0;
	this.usage = usage;
	this.instanceDataStepRate = instanceDataStepRate;
	this.mySize = vertexCount;
	this.myStride = 0;
	var _g = 0;
	var _g1 = structure.elements;
	while(_g < _g1.length) switch(_g1[_g++].data) {
	case 0:
		this.myStride += 4;
		break;
	case 1:
		this.myStride += 8;
		break;
	case 2:
		this.myStride += 12;
		break;
	case 3:
		this.myStride += 16;
		break;
	case 4:
		this.myStride += 64;
		break;
	case 5:
		this.myStride += 4;
		break;
	case 6:
		this.myStride += 8;
		break;
	}
	this.buffer = kha_SystemImpl.gl.createBuffer();
	this._data = new Float32Array(vertexCount * this.myStride / 4 | 0);
	this.sizes = [];
	this.offsets = [];
	this.types = [];
	this.sizes[structure.elements.length - 1] = 0;
	this.offsets[structure.elements.length - 1] = 0;
	this.types[structure.elements.length - 1] = 0;
	var offset = 0;
	var index = 0;
	var _g2 = 0;
	var _g3 = structure.elements;
	while(_g2 < _g3.length) {
		var element = _g3[_g2];
		++_g2;
		var size;
		var type;
		switch(element.data) {
		case 0:
			size = 1;
			type = 5126;
			break;
		case 1:
			size = 2;
			type = 5126;
			break;
		case 2:
			size = 3;
			type = 5126;
			break;
		case 3:
			size = 4;
			type = 5126;
			break;
		case 4:
			size = 16;
			type = 5126;
			break;
		case 5:
			size = 2;
			type = 5122;
			break;
		case 6:
			size = 4;
			type = 5122;
			break;
		}
		this.sizes[index] = size;
		this.offsets[index] = offset;
		this.types[index] = type;
		switch(element.data) {
		case 0:
			offset += 4;
			break;
		case 1:
			offset += 8;
			break;
		case 2:
			offset += 12;
			break;
		case 3:
			offset += 16;
			break;
		case 4:
			offset += 64;
			break;
		case 5:
			offset += 4;
			break;
		case 6:
			offset += 8;
			break;
		}
		++index;
	}
};
$hxClasses["kha.graphics4.VertexBuffer"] = kha_graphics4_VertexBuffer;
kha_graphics4_VertexBuffer.__name__ = "kha.graphics4.VertexBuffer";
kha_graphics4_VertexBuffer.prototype = {
	buffer: null
	,_data: null
	,mySize: null
	,myStride: null
	,sizes: null
	,offsets: null
	,types: null
	,usage: null
	,instanceDataStepRate: null
	,lockStart: null
	,lockEnd: null
	,lock: function(start,count) {
		this.lockStart = start != null ? start : 0;
		this.lockEnd = count != null ? start + count : this.mySize;
		return this._data.subarray(this.lockStart * this.stride(),this.lockEnd * this.stride());
	}
	,unlock: function(count) {
		if(count != null) {
			this.lockEnd = this.lockStart + count;
		}
		kha_SystemImpl.gl.bindBuffer(34962,this.buffer);
		kha_SystemImpl.gl.bufferData(34962,this._data.subarray(this.lockStart * this.stride(),this.lockEnd * this.stride()),this.usage == 1 ? 35048 : 35044);
	}
	,stride: function() {
		return this.myStride;
	}
	,set: function(offset) {
		var ext = kha_SystemImpl.gl2 ? true : kha_SystemImpl.gl.getExtension("ANGLE_instanced_arrays");
		kha_SystemImpl.gl.bindBuffer(34962,this.buffer);
		var attributesOffset = 0;
		var _g = 0;
		var _g1 = this.sizes.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.sizes[i] > 4) {
				var size = this.sizes[i];
				var addonOffset = 0;
				while(size > 0) {
					kha_SystemImpl.gl.enableVertexAttribArray(offset + attributesOffset);
					kha_SystemImpl.gl.vertexAttribPointer(offset + attributesOffset,4,5126,false,this.myStride,this.offsets[i] + addonOffset);
					if(ext) {
						if(kha_SystemImpl.gl2) {
							kha_SystemImpl.gl.vertexAttribDivisor(offset + attributesOffset,this.instanceDataStepRate);
						} else {
							ext.vertexAttribDivisorANGLE(offset + attributesOffset,this.instanceDataStepRate);
						}
					}
					size -= 4;
					addonOffset += 16;
					++attributesOffset;
				}
			} else {
				var normalized = this.types[i] == 5126 ? false : true;
				kha_SystemImpl.gl.enableVertexAttribArray(offset + attributesOffset);
				kha_SystemImpl.gl.vertexAttribPointer(offset + attributesOffset,this.sizes[i],this.types[i],normalized,this.myStride,this.offsets[i]);
				if(ext) {
					if(kha_SystemImpl.gl2) {
						kha_SystemImpl.gl.vertexAttribDivisor(offset + attributesOffset,this.instanceDataStepRate);
					} else {
						ext.vertexAttribDivisorANGLE(offset + attributesOffset,this.instanceDataStepRate);
					}
				}
				++attributesOffset;
			}
		}
		return attributesOffset;
	}
	,__class__: kha_graphics4_VertexBuffer
};
var kha_graphics4_VertexElement = function(name,data) {
	this.name = name;
	this.data = data;
};
$hxClasses["kha.graphics4.VertexElement"] = kha_graphics4_VertexElement;
kha_graphics4_VertexElement.__name__ = "kha.graphics4.VertexElement";
kha_graphics4_VertexElement.prototype = {
	name: null
	,data: null
	,__class__: kha_graphics4_VertexElement
};
var kha_graphics4_VertexShader = function(sources,files) {
	this.sources = [];
	var _g = 0;
	while(_g < sources.length) this.sources.push(sources[_g++].toString());
	this.type = 35633;
	this.shader = null;
	this.files = files;
};
$hxClasses["kha.graphics4.VertexShader"] = kha_graphics4_VertexShader;
kha_graphics4_VertexShader.__name__ = "kha.graphics4.VertexShader";
kha_graphics4_VertexShader.prototype = {
	sources: null
	,type: null
	,shader: null
	,files: null
	,__class__: kha_graphics4_VertexShader
};
var kha_graphics4_VertexStructure = function() {
	this.elements = [];
	this.instanced = false;
};
$hxClasses["kha.graphics4.VertexStructure"] = kha_graphics4_VertexStructure;
kha_graphics4_VertexStructure.__name__ = "kha.graphics4.VertexStructure";
kha_graphics4_VertexStructure.prototype = {
	elements: null
	,instanced: null
	,add: function(name,data) {
		this.elements.push(new kha_graphics4_VertexElement(name,data));
	}
	,size: function() {
		return this.elements.length;
	}
	,get: function(index) {
		return this.elements[index];
	}
	,__class__: kha_graphics4_VertexStructure
};
var kha_input_Gamepad = $hx_exports["kha"]["input"]["Gamepad"] = function(index,id) {
	if(id == null) {
		id = "unknown";
	}
	if(index == null) {
		index = 0;
	}
	this.index = index;
	this.axisListeners = [];
	this.buttonListeners = [];
	kha_input_Gamepad.instances[index] = this;
};
$hxClasses["kha.input.Gamepad"] = kha_input_Gamepad;
kha_input_Gamepad.__name__ = "kha.input.Gamepad";
kha_input_Gamepad.get = function(index) {
	if(index == null) {
		index = 0;
	}
	if(index >= kha_input_Gamepad.instances.length) {
		return null;
	}
	return kha_input_Gamepad.instances[index];
};
kha_input_Gamepad.notifyOnConnect = function(connectListener,disconnectListener) {
	if(connectListener != null) {
		kha_input_Gamepad.connectListeners.push(connectListener);
	}
	if(disconnectListener != null) {
		kha_input_Gamepad.disconnectListeners.push(disconnectListener);
	}
};
kha_input_Gamepad.removeConnect = function(connectListener,disconnectListener) {
	if(connectListener != null) {
		HxOverrides.remove(kha_input_Gamepad.connectListeners,connectListener);
	}
	if(disconnectListener != null) {
		HxOverrides.remove(kha_input_Gamepad.disconnectListeners,disconnectListener);
	}
};
kha_input_Gamepad.sendConnectEvent = function(index) {
	kha_input_Gamepad.instances[index].connected = true;
	var _g = 0;
	var _g1 = kha_input_Gamepad.connectListeners;
	while(_g < _g1.length) _g1[_g++](index);
};
kha_input_Gamepad.sendDisconnectEvent = function(index) {
	kha_input_Gamepad.instances[index].connected = false;
	var _g = 0;
	var _g1 = kha_input_Gamepad.disconnectListeners;
	while(_g < _g1.length) _g1[_g++](index);
};
kha_input_Gamepad.prototype = {
	index: null
	,notify: function(axisListener,buttonListener) {
		if(axisListener != null) {
			this.axisListeners.push(axisListener);
		}
		if(buttonListener != null) {
			this.buttonListeners.push(buttonListener);
		}
	}
	,remove: function(axisListener,buttonListener) {
		if(axisListener != null) {
			HxOverrides.remove(this.axisListeners,axisListener);
		}
		if(buttonListener != null) {
			HxOverrides.remove(this.buttonListeners,buttonListener);
		}
	}
	,axisListeners: null
	,buttonListeners: null
	,id: null
	,vendor: null
	,connected: null
	,get_id: function() {
		return kha_SystemImpl.getGamepadId(this.index);
	}
	,get_vendor: function() {
		return kha_SystemImpl.getGamepadVendor(this.index);
	}
	,sendAxisEvent: function(axis,value) {
		var _g = 0;
		var _g1 = this.axisListeners;
		while(_g < _g1.length) _g1[_g++](axis,value);
	}
	,sendButtonEvent: function(button,value) {
		var _g = 0;
		var _g1 = this.buttonListeners;
		while(_g < _g1.length) _g1[_g++](button,value);
	}
	,__class__: kha_input_Gamepad
};
var kha_input_BlockInterventions = $hxEnums["kha.input.BlockInterventions"] = { __ename__ : "kha.input.BlockInterventions", __constructs__ : ["Default","Full","None","Custom"]
	,Default: {_hx_index:0,__enum__:"kha.input.BlockInterventions",toString:$estr}
	,Full: {_hx_index:1,__enum__:"kha.input.BlockInterventions",toString:$estr}
	,None: {_hx_index:2,__enum__:"kha.input.BlockInterventions",toString:$estr}
	,Custom: ($_=function(func) { return {_hx_index:3,func:func,__enum__:"kha.input.BlockInterventions",toString:$estr}; },$_.__params__ = ["func"],$_)
};
var kha_netsync_Controller = function() {
	this.__id = kha_netsync_ControllerBuilder.nextId++;
	this._inputBuffer = new haxe_io_Bytes(new ArrayBuffer(1));
};
$hxClasses["kha.netsync.Controller"] = kha_netsync_Controller;
kha_netsync_Controller.__name__ = "kha.netsync.Controller";
kha_netsync_Controller.prototype = {
	__id: null
	,_inputBufferIndex: null
	,_inputBuffer: null
	,_id: function() {
		return this.__id;
	}
	,__class__: kha_netsync_Controller
};
var kha_input_Keyboard = $hx_exports["kha"]["input"]["Keyboard"] = function() {
	kha_netsync_Controller.call(this);
	this.downListeners = [];
	this.upListeners = [];
	this.pressListeners = [];
	kha_input_Keyboard.instance = this;
};
$hxClasses["kha.input.Keyboard"] = kha_input_Keyboard;
kha_input_Keyboard.__name__ = "kha.input.Keyboard";
kha_input_Keyboard.get = function(num) {
	if(num == null) {
		num = 0;
	}
	return kha_SystemImpl.getKeyboard(num);
};
kha_input_Keyboard.disableSystemInterventions = function(behavior) {
	kha_input_Keyboard.keyBehavior = behavior;
};
kha_input_Keyboard.__super__ = kha_netsync_Controller;
kha_input_Keyboard.prototype = $extend(kha_netsync_Controller.prototype,{
	notify: function(downListener,upListener,pressListener) {
		if(downListener != null) {
			this.downListeners.push(downListener);
		}
		if(upListener != null) {
			this.upListeners.push(upListener);
		}
		if(pressListener != null) {
			this.pressListeners.push(pressListener);
		}
	}
	,remove: function(downListener,upListener,pressListener) {
		if(downListener != null) {
			HxOverrides.remove(this.downListeners,downListener);
		}
		if(upListener != null) {
			HxOverrides.remove(this.upListeners,upListener);
		}
		if(pressListener != null) {
			HxOverrides.remove(this.pressListeners,pressListener);
		}
	}
	,show: function() {
	}
	,hide: function() {
	}
	,downListeners: null
	,upListeners: null
	,pressListeners: null
	,sendDownEvent: function(code) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(5));
			bytes.setInt32(0,0);
			bytes.b[4] = code;
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		var _g = 0;
		var _g1 = this.downListeners;
		while(_g < _g1.length) _g1[_g++](code);
	}
	,sendUpEvent: function(code) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(5));
			bytes.setInt32(0,1);
			bytes.b[4] = code;
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		var _g = 0;
		var _g1 = this.upListeners;
		while(_g < _g1.length) _g1[_g++](code);
	}
	,sendPressEvent: function(char) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(5));
			bytes.setInt32(0,2);
			bytes.b[4] = HxOverrides.cca(char,0);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		var _g = 0;
		var _g1 = this.pressListeners;
		while(_g < _g1.length) _g1[_g++](char);
	}
	,_receive: function(bytes) {
		var funcindex = bytes.getInt32(0);
		if(funcindex == 0) {
			this.sendDownEvent(bytes.b[4]);
			return;
		}
		if(funcindex == 1) {
			this.sendUpEvent(bytes.b[4]);
			return;
		}
		if(funcindex == 2) {
			var code = bytes.b[4];
			this.sendPressEvent(String.fromCodePoint(code));
			return;
		}
	}
	,__class__: kha_input_Keyboard
});
var kha_input_MouseEventBlockBehavior = $hxEnums["kha.input.MouseEventBlockBehavior"] = { __ename__ : "kha.input.MouseEventBlockBehavior", __constructs__ : ["Full","None","Custom"]
	,Full: {_hx_index:0,__enum__:"kha.input.MouseEventBlockBehavior",toString:$estr}
	,None: {_hx_index:1,__enum__:"kha.input.MouseEventBlockBehavior",toString:$estr}
	,Custom: ($_=function(func) { return {_hx_index:2,func:func,__enum__:"kha.input.MouseEventBlockBehavior",toString:$estr}; },$_.__params__ = ["func"],$_)
};
var kha_input_Mouse = $hx_exports["kha"]["input"]["Mouse"] = function() {
	kha_netsync_Controller.call(this);
	kha_input_Mouse.instance = this;
};
$hxClasses["kha.input.Mouse"] = kha_input_Mouse;
kha_input_Mouse.__name__ = "kha.input.Mouse";
kha_input_Mouse.get = function(num) {
	if(num == null) {
		num = 0;
	}
	return kha_SystemImpl.getMouse(num);
};
kha_input_Mouse.setWheelEventBlockBehavior = function(behavior) {
	kha_input_Mouse.wheelEventBlockBehavior = behavior;
};
kha_input_Mouse.__super__ = kha_netsync_Controller;
kha_input_Mouse.prototype = $extend(kha_netsync_Controller.prototype,{
	notify: function(downListener,upListener,moveListener,wheelListener,leaveListener) {
		this.notifyWindowed(0,downListener,upListener,moveListener,wheelListener,leaveListener);
	}
	,remove: function(downListener,upListener,moveListener,wheelListener,leaveListener) {
		this.removeWindowed(0,downListener,upListener,moveListener,wheelListener,leaveListener);
	}
	,notifyWindowed: function(windowId,downListener,upListener,moveListener,wheelListener,leaveListener) {
		if(downListener != null) {
			if(this.windowDownListeners == null) {
				this.windowDownListeners = [];
			}
			while(this.windowDownListeners.length <= windowId) this.windowDownListeners.push([]);
			this.windowDownListeners[windowId].push(downListener);
		}
		if(upListener != null) {
			if(this.windowUpListeners == null) {
				this.windowUpListeners = [];
			}
			while(this.windowUpListeners.length <= windowId) this.windowUpListeners.push([]);
			this.windowUpListeners[windowId].push(upListener);
		}
		if(moveListener != null) {
			if(this.windowMoveListeners == null) {
				this.windowMoveListeners = [];
			}
			while(this.windowMoveListeners.length <= windowId) this.windowMoveListeners.push([]);
			this.windowMoveListeners[windowId].push(moveListener);
		}
		if(wheelListener != null) {
			if(this.windowWheelListeners == null) {
				this.windowWheelListeners = [];
			}
			while(this.windowWheelListeners.length <= windowId) this.windowWheelListeners.push([]);
			this.windowWheelListeners[windowId].push(wheelListener);
		}
		if(leaveListener != null) {
			if(this.windowLeaveListeners == null) {
				this.windowLeaveListeners = [];
			}
			while(this.windowLeaveListeners.length <= windowId) this.windowLeaveListeners.push([]);
			this.windowLeaveListeners[windowId].push(leaveListener);
		}
	}
	,removeWindowed: function(windowId,downListener,upListener,moveListener,wheelListener,leaveListener) {
		if(downListener != null) {
			if(this.windowDownListeners != null) {
				if(windowId < this.windowDownListeners.length) {
					HxOverrides.remove(this.windowDownListeners[windowId],downListener);
				} else {
					haxe_Log.trace("no downListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 130, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no downListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 134, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(upListener != null) {
			if(this.windowUpListeners != null) {
				if(windowId < this.windowUpListeners.length) {
					HxOverrides.remove(this.windowUpListeners[windowId],upListener);
				} else {
					haxe_Log.trace("no upListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 144, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no upListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 148, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(moveListener != null) {
			if(this.windowMoveListeners != null) {
				if(windowId < this.windowMoveListeners.length) {
					HxOverrides.remove(this.windowMoveListeners[windowId],moveListener);
				} else {
					haxe_Log.trace("no moveListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 158, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no moveListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 162, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(wheelListener != null) {
			if(this.windowWheelListeners != null) {
				if(windowId < this.windowWheelListeners.length) {
					HxOverrides.remove(this.windowWheelListeners[windowId],wheelListener);
				} else {
					haxe_Log.trace("no wheelListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 172, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no wheelListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 176, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(leaveListener != null) {
			if(this.windowLeaveListeners != null) {
				if(windowId < this.windowLeaveListeners.length) {
					HxOverrides.remove(this.windowLeaveListeners[windowId],leaveListener);
				} else {
					haxe_Log.trace("no leaveListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 186, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no leaveListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 190, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
	}
	,lock: function() {
	}
	,unlock: function() {
	}
	,canLock: function() {
		return false;
	}
	,isLocked: function() {
		return false;
	}
	,notifyOnLockChange: function(change,error) {
	}
	,removeFromLockChange: function(change,error) {
	}
	,hideSystemCursor: function() {
	}
	,showSystemCursor: function() {
	}
	,windowDownListeners: null
	,windowUpListeners: null
	,windowMoveListeners: null
	,windowWheelListeners: null
	,windowLeaveListeners: null
	,sendLeaveEvent: function(windowId) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(8));
			bytes.setInt32(0,0);
			bytes.setInt32(4,windowId);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowLeaveListeners != null) {
			var _g = 0;
			var _g1 = this.windowLeaveListeners[windowId];
			while(_g < _g1.length) _g1[_g++]();
		}
	}
	,sendDownEvent: function(windowId,button,x,y) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(20));
			bytes.setInt32(0,1);
			bytes.setInt32(4,windowId);
			bytes.setInt32(8,button);
			bytes.setInt32(12,x);
			bytes.setInt32(16,y);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowDownListeners != null) {
			var _g = 0;
			var _g1 = this.windowDownListeners[windowId];
			while(_g < _g1.length) _g1[_g++](button,x,y);
		}
	}
	,sendUpEvent: function(windowId,button,x,y) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(20));
			bytes.setInt32(0,2);
			bytes.setInt32(4,windowId);
			bytes.setInt32(8,button);
			bytes.setInt32(12,x);
			bytes.setInt32(16,y);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowUpListeners != null) {
			var _g = 0;
			var _g1 = this.windowUpListeners[windowId];
			while(_g < _g1.length) _g1[_g++](button,x,y);
		}
	}
	,sendMoveEvent: function(windowId,x,y,movementX,movementY) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(24));
			bytes.setInt32(0,3);
			bytes.setInt32(4,windowId);
			bytes.setInt32(8,x);
			bytes.setInt32(12,y);
			bytes.setInt32(16,movementX);
			bytes.setInt32(20,movementY);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowMoveListeners != null) {
			var _g = 0;
			var _g1 = this.windowMoveListeners[windowId];
			while(_g < _g1.length) _g1[_g++](x,y,movementX,movementY);
		}
	}
	,sendWheelEvent: function(windowId,delta) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(12));
			bytes.setInt32(0,4);
			bytes.setInt32(4,windowId);
			bytes.setInt32(8,delta);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowWheelListeners != null) {
			var _g = 0;
			var _g1 = this.windowWheelListeners[windowId];
			while(_g < _g1.length) _g1[_g++](delta);
		}
	}
	,_receive: function(bytes) {
		var funcindex = bytes.getInt32(0);
		if(funcindex == 0) {
			this.sendLeaveEvent(bytes.getInt32(4));
			return;
		}
		if(funcindex == 1) {
			this.sendDownEvent(bytes.getInt32(4),bytes.getInt32(8),bytes.getInt32(12),bytes.getInt32(16));
			return;
		}
		if(funcindex == 2) {
			this.sendUpEvent(bytes.getInt32(4),bytes.getInt32(8),bytes.getInt32(12),bytes.getInt32(16));
			return;
		}
		if(funcindex == 3) {
			this.sendMoveEvent(bytes.getInt32(4),bytes.getInt32(8),bytes.getInt32(12),bytes.getInt32(16),bytes.getInt32(20));
			return;
		}
		if(funcindex == 4) {
			this.sendWheelEvent(bytes.getInt32(4),bytes.getInt32(8));
			return;
		}
	}
	,__class__: kha_input_Mouse
});
var kha_input_MouseImpl = function() {
	kha_input_Mouse.call(this);
};
$hxClasses["kha.input.MouseImpl"] = kha_input_MouseImpl;
kha_input_MouseImpl.__name__ = "kha.input.MouseImpl";
kha_input_MouseImpl.__super__ = kha_input_Mouse;
kha_input_MouseImpl.prototype = $extend(kha_input_Mouse.prototype,{
	lock: function() {
		kha_SystemImpl.lockMouse();
	}
	,unlock: function() {
		kha_SystemImpl.unlockMouse();
	}
	,canLock: function() {
		return kha_SystemImpl.canLockMouse();
	}
	,isLocked: function() {
		return kha_SystemImpl.isMouseLocked();
	}
	,notifyOnLockChange: function(func,error) {
		kha_SystemImpl.notifyOfMouseLockChange(func,error);
	}
	,removeFromLockChange: function(func,error) {
		kha_SystemImpl.removeFromMouseLockChange(func,error);
	}
	,hideSystemCursor: function() {
		kha_SystemImpl.khanvas.style.cursor = "none";
	}
	,showSystemCursor: function() {
		kha_SystemImpl.khanvas.style.cursor = "default";
	}
	,_receive: function(bytes) {
		bytes.getInt32(0);
	}
	,__class__: kha_input_MouseImpl
});
var kha_input_TouchDownEventBlockBehavior = $hxEnums["kha.input.TouchDownEventBlockBehavior"] = { __ename__ : "kha.input.TouchDownEventBlockBehavior", __constructs__ : ["Full","None","Custom"]
	,Full: {_hx_index:0,__enum__:"kha.input.TouchDownEventBlockBehavior",toString:$estr}
	,None: {_hx_index:1,__enum__:"kha.input.TouchDownEventBlockBehavior",toString:$estr}
	,Custom: ($_=function(func) { return {_hx_index:2,func:func,__enum__:"kha.input.TouchDownEventBlockBehavior",toString:$estr}; },$_.__params__ = ["func"],$_)
};
var kha_input_Surface = $hx_exports["kha"]["input"]["Surface"] = function() {
	this.touchStartListeners = [];
	this.touchEndListeners = [];
	this.moveListeners = [];
	kha_input_Surface.instance = this;
};
$hxClasses["kha.input.Surface"] = kha_input_Surface;
kha_input_Surface.__name__ = "kha.input.Surface";
kha_input_Surface.get = function(num) {
	if(num == null) {
		num = 0;
	}
	if(num != 0) {
		return null;
	}
	return kha_input_Surface.instance;
};
kha_input_Surface.setTouchDownEventBlockBehavior = function(behavior) {
	kha_input_Surface.touchDownEventBlockBehavior = behavior;
};
kha_input_Surface.prototype = {
	notify: function(touchStartListener,touchEndListener,moveListener) {
		if(touchStartListener != null) {
			this.touchStartListeners.push(touchStartListener);
		}
		if(touchEndListener != null) {
			this.touchEndListeners.push(touchEndListener);
		}
		if(moveListener != null) {
			this.moveListeners.push(moveListener);
		}
	}
	,remove: function(touchStartListener,touchEndListener,moveListener) {
		if(touchStartListener != null) {
			HxOverrides.remove(this.touchStartListeners,touchStartListener);
		}
		if(touchEndListener != null) {
			HxOverrides.remove(this.touchEndListeners,touchEndListener);
		}
		if(moveListener != null) {
			HxOverrides.remove(this.moveListeners,moveListener);
		}
	}
	,touchStartListeners: null
	,touchEndListeners: null
	,moveListeners: null
	,sendTouchStartEvent: function(index,x,y) {
		var _g = 0;
		var _g1 = this.touchStartListeners;
		while(_g < _g1.length) _g1[_g++](index,x,y);
	}
	,sendTouchEndEvent: function(index,x,y) {
		var _g = 0;
		var _g1 = this.touchEndListeners;
		while(_g < _g1.length) _g1[_g++](index,x,y);
	}
	,sendMoveEvent: function(index,x,y) {
		var _g = 0;
		var _g1 = this.moveListeners;
		while(_g < _g1.length) _g1[_g++](index,x,y);
	}
	,__class__: kha_input_Surface
};
var kha_internal_BytesBlob = function(bytes) {
	this.bytes = bytes;
};
$hxClasses["kha.internal.BytesBlob"] = kha_internal_BytesBlob;
kha_internal_BytesBlob.__name__ = "kha.internal.BytesBlob";
kha_internal_BytesBlob.__interfaces__ = [kha_Resource];
kha_internal_BytesBlob.fromBytes = function(bytes) {
	return new kha_internal_BytesBlob(bytes);
};
kha_internal_BytesBlob.alloc = function(size) {
	return new kha_internal_BytesBlob(new haxe_io_Bytes(new ArrayBuffer(size)));
};
kha_internal_BytesBlob.prototype = {
	bytes: null
	,length: null
	,get_length: function() {
		return this.bytes.length;
	}
	,writeU8: function(position,value) {
		this.bytes.b[position] = value;
	}
	,readU8: function(position) {
		return this.bytes.b[position++];
	}
	,toString: function() {
		return this.bytes.toString();
	}
	,toBytes: function() {
		return this.bytes;
	}
	,__class__: kha_internal_BytesBlob
};
var kha_internal_HdrFormat = function() { };
$hxClasses["kha.internal.HdrFormat"] = kha_internal_HdrFormat;
kha_internal_HdrFormat.__name__ = "kha.internal.HdrFormat";
kha_internal_HdrFormat.readBuf = function(buf) {
	var bytesRead = 0;
	while(true) {
		buf[bytesRead++] = kha_internal_HdrFormat.buffer[kha_internal_HdrFormat.fileOffset];
		if(!(++kha_internal_HdrFormat.fileOffset < kha_internal_HdrFormat.bufferLength && bytesRead < buf.length)) {
			break;
		}
	}
	return bytesRead;
};
kha_internal_HdrFormat.readBufOffset = function(buf,offset,length) {
	var bytesRead = 0;
	while(true) {
		buf[offset + bytesRead++] = kha_internal_HdrFormat.buffer[kha_internal_HdrFormat.fileOffset];
		if(!(++kha_internal_HdrFormat.fileOffset < kha_internal_HdrFormat.bufferLength && bytesRead < length)) {
			break;
		}
	}
	return bytesRead;
};
kha_internal_HdrFormat.readPixelsRaw = function(buffer,data,offset,numpixels) {
	var numExpected = 4 * numpixels;
	var numRead = kha_internal_HdrFormat.readBufOffset(data,offset,numExpected);
	if(numRead < numExpected) {
		haxe_Log.trace("Error reading raw pixels: got " + numRead + " bytes, expected " + numExpected,{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 43, className : "kha.internal.HdrFormat", methodName : "readPixelsRaw"});
		return;
	}
};
kha_internal_HdrFormat.readPixelsRawRLE = function(buffer,data,offset,scanline_width,num_scanlines) {
	var rgbe = new Uint8Array(4);
	var scanline_buffer = null;
	var ptr;
	var ptr_end;
	var count;
	var buf = new Uint8Array(2);
	while(num_scanlines > 0) {
		if(kha_internal_HdrFormat.readBuf(rgbe) < rgbe.length) {
			haxe_Log.trace("Error reading bytes: expected " + rgbe.length,{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 59, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
			return;
		}
		if(rgbe[0] != 2 || rgbe[1] != 2 || (rgbe[2] & 128) != 0) {
			data[offset++] = rgbe[0];
			data[offset++] = rgbe[1];
			data[offset++] = rgbe[2];
			data[offset++] = rgbe[3];
			kha_internal_HdrFormat.readPixelsRaw(buffer,data,offset,scanline_width * num_scanlines - 1);
			return;
		}
		if(((rgbe[2] & 255) << 8 | rgbe[3] & 255) != scanline_width) {
			haxe_Log.trace("Wrong scanline width " + ((rgbe[2] & 255) << 8 | rgbe[3] & 255) + ", expected " + scanline_width,{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 74, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
			return;
		}
		if(scanline_buffer == null) {
			scanline_buffer = new Uint8Array(4 * scanline_width);
		}
		ptr = 0;
		var _g = 0;
		while(_g < 4) {
			ptr_end = (_g++ + 1) * scanline_width;
			while(ptr < ptr_end) {
				if(kha_internal_HdrFormat.readBuf(buf) < buf.length) {
					haxe_Log.trace("Error reading 2-byte buffer",{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 88, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
					return;
				}
				if((buf[0] & 255) > 128) {
					count = (buf[0] & 255) - 128;
					if(count == 0 || count > ptr_end - ptr) {
						haxe_Log.trace("Bad scanline data",{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 95, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
						return;
					}
					while(count-- > 0) scanline_buffer[ptr++] = buf[1];
				} else {
					count = buf[0] & 255;
					if(count == 0 || count > ptr_end - ptr) {
						haxe_Log.trace("Bad scanline data",{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 106, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
						return;
					}
					scanline_buffer[ptr++] = buf[1];
					if(--count > 0) {
						if(kha_internal_HdrFormat.readBufOffset(scanline_buffer,ptr,count) < count) {
							haxe_Log.trace("Error reading non-run data",{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 112, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
							return;
						}
						ptr += count;
					}
				}
			}
		}
		var _g1 = 0;
		while(_g1 < scanline_width) {
			var i = _g1++;
			data[offset] = scanline_buffer[i];
			data[offset + 1] = scanline_buffer[i + scanline_width];
			data[offset + 2] = scanline_buffer[i + 2 * scanline_width];
			data[offset + 3] = scanline_buffer[i + 3 * scanline_width];
			offset += 4;
		}
		--num_scanlines;
	}
};
kha_internal_HdrFormat.readLine = function() {
	var buf = "";
	while(true) {
		var b = kha_internal_HdrFormat.buffer[kha_internal_HdrFormat.fileOffset];
		if(b == 10) {
			++kha_internal_HdrFormat.fileOffset;
			break;
		}
		buf += String.fromCodePoint(b);
		if(!(++kha_internal_HdrFormat.fileOffset < kha_internal_HdrFormat.bufferLength)) {
			break;
		}
	}
	return buf;
};
kha_internal_HdrFormat.parse = function(bytes) {
	kha_internal_HdrFormat.buffer = haxe_io__$UInt8Array_UInt8Array_$Impl_$.fromBytes(bytes);
	kha_internal_HdrFormat.bufferLength = kha_internal_HdrFormat.buffer.length;
	kha_internal_HdrFormat.fileOffset = 0;
	var width = 0;
	var height = 0;
	var rle = false;
	var _g = 0;
	while(_g < 20) {
		++_g;
		var line = kha_internal_HdrFormat.readLine();
		if(kha_internal_HdrFormat.formatPattern.match(line)) {
			rle = true;
		} else if(kha_internal_HdrFormat.exposurePattern.match(line)) {
			parseFloat(kha_internal_HdrFormat.exposurePattern.matched(1));
		} else if(kha_internal_HdrFormat.widthHeightPattern.match(line)) {
			height = Std.parseInt(kha_internal_HdrFormat.widthHeightPattern.matched(1));
			width = Std.parseInt(kha_internal_HdrFormat.widthHeightPattern.matched(2));
			break;
		}
	}
	if(!rle) {
		haxe_Log.trace("File is not run length encoded!",{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 175, className : "kha.internal.HdrFormat", methodName : "parse"});
		return null;
	}
	var data = new Uint8Array(width * height * 4);
	kha_internal_HdrFormat.readPixelsRawRLE(kha_internal_HdrFormat.buffer,data,0,width,height);
	var floatData = new Float32Array(width * height * 4);
	var offset = 0;
	while(offset < data.length) {
		var r = data[offset] / 255;
		var g = data[offset + 1] / 255;
		var b = data[offset + 2] / 255;
		var f = Math.pow(2.0,data[offset + 3] - 128.0);
		r *= f;
		g *= f;
		b *= f;
		floatData[offset] = r;
		floatData[offset + 1] = g;
		floatData[offset + 2] = b;
		floatData[offset + 3] = 1.0;
		offset += 4;
	}
	return { width : width, height : height, data : floatData};
};
var kha_js_AEAudioChannel = function(element,looping) {
	this.stopped = false;
	this.element = element;
	this.looping = looping;
};
$hxClasses["kha.js.AEAudioChannel"] = kha_js_AEAudioChannel;
kha_js_AEAudioChannel.__name__ = "kha.js.AEAudioChannel";
kha_js_AEAudioChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_js_AEAudioChannel.prototype = {
	element: null
	,stopped: null
	,looping: null
	,play: function() {
		this.stopped = false;
		this.element.play();
	}
	,pause: function() {
		try {
			this.element.pause();
		} catch( e ) {
			haxe_Log.trace(((e) instanceof js__$Boot_HaxeError) ? e.val : e,{ fileName : "kha/js/AEAudioChannel.hx", lineNumber : 26, className : "kha.js.AEAudioChannel", methodName : "pause"});
		}
	}
	,stop: function() {
		try {
			this.element.pause();
			this.element.currentTime = 0;
			this.stopped = true;
		} catch( e ) {
			haxe_Log.trace(((e) instanceof js__$Boot_HaxeError) ? e.val : e,{ fileName : "kha/js/AEAudioChannel.hx", lineNumber : 37, className : "kha.js.AEAudioChannel", methodName : "stop"});
		}
	}
	,length: null
	,get_length: function() {
		if(isFinite(this.element.duration)) {
			return this.element.duration;
		} else {
			return Infinity;
		}
	}
	,get_position: function() {
		return this.element.currentTime;
	}
	,set_position: function(value) {
		return this.element.currentTime = value;
	}
	,get_volume: function() {
		return this.element.volume;
	}
	,set_volume: function(value) {
		return this.element.volume = value;
	}
	,finished: null
	,get_finished: function() {
		if(!this.stopped) {
			if(!this.looping) {
				return this.get_position() >= this.get_length();
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__class__: kha_js_AEAudioChannel
};
var kha_js_AudioElementAudio = function() { };
$hxClasses["kha.js.AudioElementAudio"] = kha_js_AudioElementAudio;
kha_js_AudioElementAudio.__name__ = "kha.js.AudioElementAudio";
kha_js_AudioElementAudio.play = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	return kha_js_AudioElementAudio.stream(sound,loop);
};
kha_js_AudioElementAudio.stream = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	sound.element.loop = loop;
	var channel = new kha_js_AEAudioChannel(sound.element,loop);
	channel.play();
	return channel;
};
var kha_js_CanvasGraphics = function(canvas) {
	this.bakedQuadCache = new kha_AlignedQuad();
	kha_graphics2_Graphics.call(this);
	this.canvas = canvas;
	kha_js_CanvasGraphics.instance = this;
	this.myColor = kha__$Color_Color_$Impl_$.fromBytes(0,0,0);
};
$hxClasses["kha.js.CanvasGraphics"] = kha_js_CanvasGraphics;
kha_js_CanvasGraphics.__name__ = "kha.js.CanvasGraphics";
kha_js_CanvasGraphics.__super__ = kha_graphics2_Graphics;
kha_js_CanvasGraphics.prototype = $extend(kha_graphics2_Graphics.prototype,{
	canvas: null
	,webfont: null
	,myColor: null
	,scaleQuality: null
	,begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
		if(clear) {
			this.clear(clearColor);
		}
	}
	,clear: function(color) {
		if(color == null) {
			color = 0;
		}
		this.canvas.strokeStyle = "rgba(" + ((color & 16711680) >>> 16) + "," + ((color & 65280) >>> 8) + "," + (color & 255) + "," + (color >>> 24) * 0.00392156862745098 + ")";
		this.canvas.fillStyle = "rgba(" + ((color & 16711680) >>> 16) + "," + ((color & 65280) >>> 8) + "," + (color & 255) + "," + (color >>> 24) * 0.00392156862745098 + ")";
		if((color >>> 24) * 0.00392156862745098 == 0) {
			this.canvas.clearRect(0,0,this.canvas.canvas.width,this.canvas.canvas.height);
		} else {
			this.canvas.fillRect(0,0,this.canvas.canvas.width,this.canvas.canvas.height);
		}
		this.set_color(this.myColor);
	}
	,end: function() {
	}
	,drawImage: function(img,x,y) {
		this.canvas.globalAlpha = this.get_opacity();
		this.canvas.drawImage((js_Boot.__cast(img , kha_CanvasImage)).image,x,y);
		this.canvas.globalAlpha = 1;
	}
	,drawScaledSubImage: function(image,sx,sy,sw,sh,dx,dy,dw,dh) {
		this.canvas.globalAlpha = this.get_opacity();
		try {
			if(dw < 0 || dh < 0) {
				this.canvas.save();
				this.canvas.translate(dx,dy);
				var x = 0.0;
				var y = 0.0;
				if(dw < 0) {
					this.canvas.scale(-1,1);
					x = -dw;
				}
				if(dh < 0) {
					this.canvas.scale(1,-1);
					y = -dh;
				}
				this.canvas.drawImage((js_Boot.__cast(image , kha_CanvasImage)).image,sx,sy,sw,sh,x,y,dw,dh);
				this.canvas.restore();
			} else {
				this.canvas.drawImage((js_Boot.__cast(image , kha_CanvasImage)).image,sx,sy,sw,sh,dx,dy,dw,dh);
			}
		} catch( ex ) {
		}
		this.canvas.globalAlpha = 1;
	}
	,set_color: function(color) {
		this.myColor = color;
		this.canvas.strokeStyle = "rgba(" + ((color & 16711680) >>> 16) + "," + ((color & 65280) >>> 8) + "," + (color & 255) + "," + (color >>> 24) * 0.00392156862745098 + ")";
		this.canvas.fillStyle = "rgba(" + ((color & 16711680) >>> 16) + "," + ((color & 65280) >>> 8) + "," + (color & 255) + "," + (color >>> 24) * 0.00392156862745098 + ")";
		return color;
	}
	,get_color: function() {
		return this.myColor;
	}
	,set_imageScaleQuality: function(value) {
		if(value == 0) {
			this.canvas.mozImageSmoothingEnabled = false;
			this.canvas.webkitImageSmoothingEnabled = false;
			this.canvas.msImageSmoothingEnabled = false;
			this.canvas.imageSmoothingEnabled = false;
		} else {
			this.canvas.mozImageSmoothingEnabled = true;
			this.canvas.webkitImageSmoothingEnabled = true;
			this.canvas.msImageSmoothingEnabled = true;
			this.canvas.imageSmoothingEnabled = true;
		}
		return this.scaleQuality = value;
	}
	,drawRect: function(x,y,width,height,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.canvas.beginPath();
		var oldStrength = this.canvas.lineWidth;
		this.canvas.lineWidth = Math.round(strength);
		this.canvas.rect(x,y,width,height);
		this.canvas.stroke();
		this.canvas.lineWidth = oldStrength;
	}
	,fillRect: function(x,y,width,height) {
		this.canvas.globalAlpha = this.get_opacity() * ((this.myColor >>> 24) * 0.00392156862745098);
		this.canvas.fillRect(x,y,width,height);
		this.canvas.globalAlpha = this.get_opacity();
	}
	,bakedQuadCache: null
	,drawString: function(text,x,y) {
		var image = this.webfont.getImage(this.get_fontSize(),this.myColor);
		if(image.width > 0) {
			var xpos = x;
			var _g = 0;
			var _g1 = text.length;
			while(_g < _g1) {
				var q = this.webfont.kravur._get(this.get_fontSize()).getBakedQuad(this.bakedQuadCache,kha_graphics2_Graphics.fontGlyphs.indexOf(HxOverrides.cca(text,_g++)),xpos,y);
				if(q != null) {
					if(q.s1 - q.s0 > 0 && q.t1 - q.t0 > 0 && q.x1 - q.x0 > 0 && q.y1 - q.y0 > 0) {
						this.canvas.drawImage(image,q.s0 * image.width,q.t0 * image.height,(q.s1 - q.s0) * image.width,(q.t1 - q.t0) * image.height,q.x0,q.y0,q.x1 - q.x0,q.y1 - q.y0);
					}
					xpos += q.xadvance;
				}
			}
		}
	}
	,set_font: function(font) {
		this.webfont = js_Boot.__cast(font , kha_js_Font);
		return this.webfont;
	}
	,get_font: function() {
		return this.webfont;
	}
	,drawLine: function(x1,y1,x2,y2,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.canvas.beginPath();
		var oldWith = this.canvas.lineWidth;
		this.canvas.lineWidth = Math.round(strength);
		this.canvas.moveTo(x1,y1);
		this.canvas.lineTo(x2,y2);
		this.canvas.moveTo(0,0);
		this.canvas.stroke();
		this.canvas.lineWidth = oldWith;
	}
	,fillTriangle: function(x1,y1,x2,y2,x3,y3) {
		this.canvas.beginPath();
		this.canvas.moveTo(x1,y1);
		this.canvas.lineTo(x2,y2);
		this.canvas.lineTo(x3,y3);
		this.canvas.closePath();
		this.canvas.fill();
	}
	,setTransformation: function(transformation) {
		this.canvas.setTransform(transformation._00,transformation._01,transformation._10,transformation._11,transformation._20,transformation._21);
	}
	,__class__: kha_js_CanvasGraphics
});
var kha_js_Font = function(blob) {
	this.images = new haxe_ds_IntMap();
	this.kravur = new kha_js_Font.Kravur(blob);
};
$hxClasses["kha.js.Font"] = kha_js_Font;
kha_js_Font.__name__ = "kha.js.Font";
kha_js_Font.__interfaces__ = [kha_Resource];
kha_js_Font.prototype = {
	kravur: null
	,images: null
	,getImage: function(fontSize,color) {
		var imageIndex = fontSize * 10000 + kha_graphics2_Graphics.fontGlyphs.length;
		if(!this.images.h.hasOwnProperty(imageIndex)) {
			this.images.h[imageIndex] = new haxe_ds_IntMap();
		}
		if(!this.images.h[imageIndex].h.hasOwnProperty(color)) {
			var kravur = this.kravur._get(fontSize);
			var canvas = window.document.createElement("canvas");
			canvas.width = kravur.width;
			canvas.height = kravur.height;
			var ctx = canvas.getContext("2d");
			ctx.fillStyle = "black";
			ctx.fillRect(0,0,kravur.width,kravur.height);
			var imageData = ctx.getImageData(0,0,kravur.width,kravur.height);
			var bytes = (js_Boot.__cast(kravur.getTexture() , kha_CanvasImage)).bytes;
			var _g = 0;
			var _g1 = bytes.length;
			while(_g < _g1) {
				var i = _g++;
				imageData.data[i * 4] = (color & 16711680) >>> 16;
				imageData.data[i * 4 + 1] = (color & 65280) >>> 8;
				imageData.data[i * 4 + 2] = color & 255;
				imageData.data[i * 4 + 3] = bytes.b[i];
			}
			ctx.putImageData(imageData,0,0);
			var img = window.document.createElement("img");
			img.src = canvas.toDataURL("image/png");
			this.images.h[imageIndex].h[color] = img;
			return img;
		}
		return this.images.h[imageIndex].h[color];
	}
	,__class__: kha_js_Font
};
var kha_js_MobileWebAudio = function() { };
$hxClasses["kha.js.MobileWebAudio"] = kha_js_MobileWebAudio;
kha_js_MobileWebAudio.__name__ = "kha.js.MobileWebAudio";
kha_js_MobileWebAudio._init = function() {
	try {
		kha_js_MobileWebAudio._context = new AudioContext();
		return;
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
	}
	try {
		this._context = new webkitAudioContext();
		return;
	} catch( e2 ) {
		var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
	}
};
kha_js_MobileWebAudio.play = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	var channel = new kha_js_MobileWebAudioChannel(sound,loop);
	channel.play();
	return channel;
};
kha_js_MobileWebAudio.stream = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	return kha_js_MobileWebAudio.play(sound,loop);
};
var kha_js_MobileWebAudioChannel = function(sound,loop) {
	this.stopped = false;
	this.paused = false;
	this.buffer = sound._buffer;
	this.loop = loop;
	this.createSource();
};
$hxClasses["kha.js.MobileWebAudioChannel"] = kha_js_MobileWebAudioChannel;
kha_js_MobileWebAudioChannel.__name__ = "kha.js.MobileWebAudioChannel";
kha_js_MobileWebAudioChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_js_MobileWebAudioChannel.prototype = {
	buffer: null
	,loop: null
	,source: null
	,gain: null
	,startTime: null
	,pauseTime: null
	,paused: null
	,stopped: null
	,createSource: function() {
		var _gthis = this;
		this.source = kha_js_MobileWebAudio._context.createBufferSource();
		this.source.loop = this.loop;
		this.source.buffer = this.buffer;
		this.source.onended = function() {
			_gthis.stopped = true;
		};
		this.gain = kha_js_MobileWebAudio._context.createGain();
		this.source.connect(this.gain);
		this.gain.connect(kha_js_MobileWebAudio._context.destination);
	}
	,play: function() {
		if(this.paused || this.stopped) {
			this.createSource();
		}
		this.stopped = false;
		if(this.paused) {
			this.paused = false;
			this.startTime = kha_js_MobileWebAudio._context.currentTime - this.pauseTime;
			this.source.start(0,this.pauseTime);
		} else {
			this.startTime = kha_js_MobileWebAudio._context.currentTime;
			this.source.start();
		}
	}
	,pause: function() {
		var wasStopped = this.paused || this.stopped;
		this.pauseTime = kha_js_MobileWebAudio._context.currentTime - this.startTime;
		this.paused = true;
		if(wasStopped) {
			return;
		}
		this.source.stop();
	}
	,stop: function() {
		var wasStopped = this.paused || this.stopped;
		this.paused = false;
		this.stopped = true;
		if(wasStopped) {
			return;
		}
		this.source.stop();
	}
	,length: null
	,get_length: function() {
		return this.source.buffer.duration;
	}
	,get_position: function() {
		if(this.stopped) {
			return this.get_length();
		}
		if(this.paused) {
			return this.pauseTime;
		} else {
			return kha_js_MobileWebAudio._context.currentTime - this.startTime;
		}
	}
	,set_position: function(value) {
		return value;
	}
	,get_volume: function() {
		return this.gain.gain.value;
	}
	,set_volume: function(value) {
		return this.gain.gain.value = value;
	}
	,finished: null
	,get_finished: function() {
		return this.stopped;
	}
	,__class__: kha_js_MobileWebAudioChannel
};
var kha_js_MobileWebAudioSound = function(filename,done,failed) {
	var _gthis = this;
	kha_Sound.call(this);
	var request = new XMLHttpRequest();
	request.open("GET",filename,true);
	request.responseType = "arraybuffer";
	request.onerror = function() {
		failed({ url : filename});
	};
	request.onload = function() {
		_gthis.compressedData = haxe_io_Bytes.ofData(request.response);
		_gthis.uncompressedData = null;
		kha_js_MobileWebAudio._context.decodeAudioData(_gthis.compressedData.b.bufferValue,function(buffer) {
			_gthis.length = buffer.duration;
			_gthis.channels = buffer.numberOfChannels;
			_gthis._buffer = buffer;
			done(_gthis);
		},function() {
			failed({ url : filename, error : "Audio format not supported"});
		});
	};
	request.send(null);
};
$hxClasses["kha.js.MobileWebAudioSound"] = kha_js_MobileWebAudioSound;
kha_js_MobileWebAudioSound.__name__ = "kha.js.MobileWebAudioSound";
kha_js_MobileWebAudioSound.__super__ = kha_Sound;
kha_js_MobileWebAudioSound.prototype = $extend(kha_Sound.prototype,{
	_buffer: null
	,uncompress: function(done) {
		done();
	}
	,__class__: kha_js_MobileWebAudioSound
});
var kha_js_Sound = function(filenames,done,failed) {
	kha_Sound.call(this);
	this.done = done;
	this.failed = failed;
	kha_js_Sound.loading.push(this);
	this.element = window.document.createElement("audio");
	this.filenames = [];
	var _g = 0;
	while(_g < filenames.length) {
		var filename = filenames[_g];
		++_g;
		if(this.element.canPlayType("audio/ogg") != "" && StringTools.endsWith(filename,".ogg")) {
			this.filenames.push(filename);
		}
		if(this.element.canPlayType("audio/mp4") != "" && StringTools.endsWith(filename,".mp4")) {
			this.filenames.push(filename);
		}
		if(this.element.canPlayType("audio/wav") != "" && StringTools.endsWith(filename,".wav")) {
			this.filenames.push(filename);
		}
	}
	this.element.addEventListener("error",$bind(this,this.errorListener),false);
	this.element.addEventListener("canplay",$bind(this,this.canPlayThroughListener),false);
	this.element.src = this.filenames[0];
	this.element.preload = "auto";
	this.element.load();
};
$hxClasses["kha.js.Sound"] = kha_js_Sound;
kha_js_Sound.__name__ = "kha.js.Sound";
kha_js_Sound.__super__ = kha_Sound;
kha_js_Sound.prototype = $extend(kha_Sound.prototype,{
	filenames: null
	,done: null
	,failed: null
	,element: null
	,errorListener: function(eventInfo) {
		if(this.element.error.code == 4) {
			var _g = 0;
			var _g1 = this.filenames.length - 1;
			while(_g < _g1) {
				var i = _g++;
				if(this.element.src == this.filenames[i]) {
					this.element.src = this.filenames[i + 1];
					return;
				}
			}
		}
		this.failed({ url : this.element.src});
		this.finishAsset();
	}
	,canPlayThroughListener: function(eventInfo) {
		this.finishAsset();
	}
	,finishAsset: function() {
		this.element.removeEventListener("error",$bind(this,this.errorListener),false);
		this.element.removeEventListener("canplaythrough",$bind(this,this.canPlayThroughListener),false);
		this.done(this);
		HxOverrides.remove(kha_js_Sound.loading,this);
	}
	,uncompress: function(done) {
		done();
	}
	,__class__: kha_js_Sound
});
var kha_js_Video = function() {
	kha_Video.call(this);
};
$hxClasses["kha.js.Video"] = kha_js_Video;
kha_js_Video.__name__ = "kha.js.Video";
kha_js_Video.fromFile = function(filenames,done) {
	var video = new kha_js_Video();
	video.done = done;
	video.element = window.document.createElement("video");
	video.filenames = [];
	var _g = 0;
	while(_g < filenames.length) {
		var filename = filenames[_g];
		++_g;
		if(video.element.canPlayType("video/webm") != "" && StringTools.endsWith(filename,".webm")) {
			video.filenames.push(filename);
		}
		if(video.element.canPlayType("video/mp4") != "" && StringTools.endsWith(filename,".mp4")) {
			video.filenames.push(filename);
		}
	}
	video.element.addEventListener("error",$bind(video,video.errorListener),false);
	video.element.addEventListener("canplaythrough",$bind(video,video.canPlayThroughListener),false);
	video.element.preload = "auto";
	video.element.src = video.filenames[0];
};
kha_js_Video.__super__ = kha_Video;
kha_js_Video.prototype = $extend(kha_Video.prototype,{
	filenames: null
	,element: null
	,done: null
	,texture: null
	,errorListener: function(eventInfo) {
		if(this.element.error.code == 4) {
			var _g = 0;
			var _g1 = this.filenames.length - 1;
			while(_g < _g1) {
				var i = _g++;
				if(this.element.src == this.filenames[i]) {
					this.element.src = this.filenames[i + 1];
					return;
				}
			}
		}
		haxe_Log.trace("Error loading " + this.element.src,{ fileName : "kha/js/Video.hx", lineNumber : 120, className : "kha.js.Video", methodName : "errorListener"});
		this.finishAsset();
	}
	,canPlayThroughListener: function(eventInfo) {
		this.finishAsset();
	}
	,finishAsset: function() {
		this.element.removeEventListener("error",$bind(this,this.errorListener),false);
		this.element.removeEventListener("canplaythrough",$bind(this,this.canPlayThroughListener),false);
		if(kha_SystemImpl.gl != null) {
			this.texture = kha_Image.fromVideo(this);
		}
		this.done(this);
	}
	,__class__: kha_js_Video
});
var kha_js_WebAudioSound = function(filename,done,failed) {
	var _gthis = this;
	kha_Sound.call(this);
	var request = new XMLHttpRequest();
	request.open("GET",filename,true);
	request.responseType = "arraybuffer";
	request.onerror = function() {
		failed({ url : filename});
	};
	request.onload = function() {
		_gthis.compressedData = haxe_io_Bytes.ofData(request.response);
		_gthis.uncompressedData = null;
		done(_gthis);
	};
	request.send(null);
};
$hxClasses["kha.js.WebAudioSound"] = kha_js_WebAudioSound;
kha_js_WebAudioSound.__name__ = "kha.js.WebAudioSound";
kha_js_WebAudioSound.__super__ = kha_Sound;
kha_js_WebAudioSound.prototype = $extend(kha_Sound.prototype,{
	superUncompress: function(done) {
		kha_Sound.prototype.uncompress.call(this,done);
	}
	,uncompress: function(done) {
		var _gthis = this;
		kha_audio2_Audio._context.decodeAudioData(this.compressedData.b.bufferValue,function(buffer) {
			var ch0 = buffer.getChannelData(0);
			var ch1 = buffer.numberOfChannels == 1 ? ch0 : buffer.getChannelData(1);
			var len = ch0.length;
			_gthis.uncompressedData = new Float32Array(len * 2);
			_gthis.length = buffer.duration;
			_gthis.channels = buffer.numberOfChannels;
			_gthis.sampleRate = Math.round(buffer.sampleRate);
			var idx = 0;
			var i = 0;
			var lidx = len * 2;
			var uncompressInner = null;
			uncompressInner = function() {
				var chk_len = idx + 11025;
				var next_chk = chk_len > lidx ? lidx : chk_len;
				while(idx < next_chk) {
					_gthis.uncompressedData[idx] = ch0[i];
					_gthis.uncompressedData[idx + 1] = ch1[i];
					idx += 2;
					i += 1;
				}
				if(idx < lidx) {
					window.setTimeout(uncompressInner,0);
				} else {
					_gthis.compressedData = null;
					done();
				}
			};
			uncompressInner();
		},function() {
			_gthis.superUncompress(done);
		});
	}
	,__class__: kha_js_WebAudioSound
});
var kha_js_graphics4_ConstantLocation = function(value,type) {
	this.value = value;
	this.type = type;
};
$hxClasses["kha.js.graphics4.ConstantLocation"] = kha_js_graphics4_ConstantLocation;
kha_js_graphics4_ConstantLocation.__name__ = "kha.js.graphics4.ConstantLocation";
kha_js_graphics4_ConstantLocation.__interfaces__ = [kha_graphics4_ConstantLocation];
kha_js_graphics4_ConstantLocation.prototype = {
	value: null
	,type: null
	,__class__: kha_js_graphics4_ConstantLocation
};
var kha_js_graphics4_Graphics = function(renderTarget) {
	this.matrixCache = new Float32Array(16);
	this.useVertexAttributes = 0;
	this.isDepthAttachment = false;
	this.isCubeMap = false;
	this.colorMaskAlpha = true;
	this.colorMaskBlue = true;
	this.colorMaskGreen = true;
	this.colorMaskRed = true;
	this.depthMask = false;
	this.depthTest = false;
	this.currentPipeline = null;
	this.renderTarget = renderTarget;
	this.init();
	if(kha_SystemImpl.gl2) {
		this.instancedExtension = true;
	} else {
		this.instancedExtension = kha_SystemImpl.gl.getExtension("ANGLE_instanced_arrays");
		this.blendMinMaxExtension = kha_SystemImpl.gl.getExtension("EXT_blend_minmax");
	}
};
$hxClasses["kha.js.graphics4.Graphics"] = kha_js_graphics4_Graphics;
kha_js_graphics4_Graphics.__name__ = "kha.js.graphics4.Graphics";
kha_js_graphics4_Graphics.__interfaces__ = [kha_graphics4_Graphics];
kha_js_graphics4_Graphics.getBlendFunc = function(factor) {
	switch(factor) {
	case 1:
		return 1;
	case 0:case 2:
		return 0;
	case 3:
		return 770;
	case 4:
		return 772;
	case 5:
		return 771;
	case 6:
		return 773;
	case 7:
		return 768;
	case 8:
		return 774;
	case 9:
		return 769;
	case 10:
		return 775;
	}
};
kha_js_graphics4_Graphics.getBlendOp = function(op) {
	switch(op) {
	case 0:
		return 32774;
	case 1:
		return 32778;
	case 2:
		return 32779;
	case 3:
		return 32775;
	case 4:
		return 32776;
	}
};
kha_js_graphics4_Graphics.prototype = {
	currentPipeline: null
	,depthTest: null
	,depthMask: null
	,colorMaskRed: null
	,colorMaskGreen: null
	,colorMaskBlue: null
	,colorMaskAlpha: null
	,indicesCount: null
	,renderTarget: null
	,renderTargetFrameBuffer: null
	,renderTargetMSAA: null
	,renderTargetTexture: null
	,isCubeMap: null
	,isDepthAttachment: null
	,instancedExtension: null
	,blendMinMaxExtension: null
	,useVertexAttributes: null
	,init: function() {
		if(this.renderTarget == null) {
			return;
		}
		this.isCubeMap = ((this.renderTarget) instanceof kha_graphics4_CubeMap);
		if(this.isCubeMap) {
			var cubeMap = js_Boot.__cast(this.renderTarget , kha_graphics4_CubeMap);
			this.renderTargetFrameBuffer = cubeMap.frameBuffer;
			this.renderTargetTexture = cubeMap.texture;
			this.isDepthAttachment = cubeMap.isDepthAttachment;
		} else {
			var image = js_Boot.__cast(this.renderTarget , kha_WebGLImage);
			this.renderTargetFrameBuffer = image.frameBuffer;
			this.renderTargetMSAA = image.MSAAFrameBuffer;
			this.renderTargetTexture = image.texture;
		}
	}
	,begin: function(additionalRenderTargets) {
		kha_SystemImpl.gl.enable(3042);
		kha_SystemImpl.gl.blendFunc(770,771);
		if(this.renderTarget == null) {
			kha_SystemImpl.gl.bindFramebuffer(36160,null);
			kha_SystemImpl.gl.viewport(0,0,kha_System.windowWidth(),kha_System.windowHeight());
		} else {
			kha_SystemImpl.gl.bindFramebuffer(36160,this.renderTargetFrameBuffer);
			kha_SystemImpl.gl.viewport(0,0,this.renderTarget.get_width(),this.renderTarget.get_height());
			if(additionalRenderTargets != null) {
				kha_SystemImpl.gl.framebufferTexture2D(36160,kha_SystemImpl.drawBuffers.COLOR_ATTACHMENT0_WEBGL,3553,this.renderTargetTexture,0);
				var _g = 0;
				var _g1 = additionalRenderTargets.length;
				while(_g < _g1) {
					var i = _g++;
					kha_SystemImpl.gl.framebufferTexture2D(36160,kha_SystemImpl.drawBuffers.COLOR_ATTACHMENT0_WEBGL + i + 1,3553,(js_Boot.__cast(additionalRenderTargets[i] , kha_WebGLImage)).texture,0);
				}
				var attachments = [kha_SystemImpl.drawBuffers.COLOR_ATTACHMENT0_WEBGL];
				var _g2 = 0;
				var _g3 = additionalRenderTargets.length;
				while(_g2 < _g3) {
					var i1 = _g2++;
					attachments.push(kha_SystemImpl.drawBuffers.COLOR_ATTACHMENT0_WEBGL + i1 + 1);
				}
				if(kha_SystemImpl.gl2) {
					kha_SystemImpl.gl.drawBuffers(attachments);
				} else {
					kha_SystemImpl.drawBuffers.drawBuffersWEBGL(attachments);
				}
			}
		}
	}
	,end: function() {
		if(this.renderTargetMSAA != null) {
			kha_SystemImpl.gl.bindFramebuffer(kha_SystemImpl.gl.READ_FRAMEBUFFER,this.renderTargetFrameBuffer);
			kha_SystemImpl.gl.bindFramebuffer(kha_SystemImpl.gl.DRAW_FRAMEBUFFER,this.renderTargetMSAA);
			kha_SystemImpl.gl.blitFramebuffer(0,0,this.renderTarget.get_width(),this.renderTarget.get_height(),0,0,this.renderTarget.get_width(),this.renderTarget.get_height(),16384,9728);
		}
	}
	,clear: function(color,depth,stencil) {
		var clearMask = 0;
		if(color != null) {
			clearMask = 16384;
			kha_SystemImpl.gl.colorMask(true,true,true,true);
			kha_SystemImpl.gl.clearColor(((color & 16711680) >>> 16) * 0.00392156862745098,((color & 65280) >>> 8) * 0.00392156862745098,(color & 255) * 0.00392156862745098,(color >>> 24) * 0.00392156862745098);
		}
		if(depth != null) {
			clearMask |= 256;
			kha_SystemImpl.gl.enable(2929);
			kha_SystemImpl.gl.depthMask(true);
			kha_SystemImpl.gl.clearDepth(depth);
		}
		if(stencil != null) {
			clearMask |= 1024;
			kha_SystemImpl.gl.enable(2960);
			kha_SystemImpl.gl.stencilMask(255);
			kha_SystemImpl.gl.clearStencil(stencil);
		}
		kha_SystemImpl.gl.clear(clearMask);
		kha_SystemImpl.gl.colorMask(this.colorMaskRed,this.colorMaskGreen,this.colorMaskBlue,this.colorMaskAlpha);
		if(this.depthTest) {
			kha_SystemImpl.gl.enable(2929);
		} else {
			kha_SystemImpl.gl.disable(2929);
		}
		kha_SystemImpl.gl.depthMask(this.depthMask);
	}
	,setDepthMode: function(write,mode) {
		switch(mode) {
		case 0:
			if(write) {
				kha_SystemImpl.gl.enable(2929);
			} else {
				kha_SystemImpl.gl.disable(2929);
			}
			this.depthTest = write;
			kha_SystemImpl.gl.depthFunc(519);
			break;
		case 1:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(512);
			break;
		case 2:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(514);
			break;
		case 3:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(517);
			break;
		case 4:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(513);
			break;
		case 5:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(515);
			break;
		case 6:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(516);
			break;
		case 7:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(518);
			break;
		}
		kha_SystemImpl.gl.depthMask(write);
		this.depthMask = write;
	}
	,setBlendingMode: function(source,destination,operation,alphaSource,alphaDestination,alphaOperation) {
		if(source == 1 && destination == 2) {
			kha_SystemImpl.gl.disable(3042);
		} else {
			kha_SystemImpl.gl.enable(3042);
			kha_SystemImpl.gl.blendFuncSeparate(kha_js_graphics4_Graphics.getBlendFunc(source),kha_js_graphics4_Graphics.getBlendFunc(destination),kha_js_graphics4_Graphics.getBlendFunc(alphaSource),kha_js_graphics4_Graphics.getBlendFunc(alphaDestination));
			kha_SystemImpl.gl.blendEquationSeparate(kha_js_graphics4_Graphics.getBlendOp(operation),kha_js_graphics4_Graphics.getBlendOp(alphaOperation));
		}
	}
	,setVertexBuffer: function(vertexBuffer) {
		this.useVertexAttributes = (js_Boot.__cast(vertexBuffer , kha_graphics4_VertexBuffer)).set(0);
	}
	,setIndexBuffer: function(indexBuffer) {
		this.indicesCount = indexBuffer.count();
		(js_Boot.__cast(indexBuffer , kha_graphics4_IndexBuffer)).set();
	}
	,setTexture: function(stage,texture) {
		if(texture == null) {
			kha_SystemImpl.gl.activeTexture(33984 + (js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
			kha_SystemImpl.gl.bindTexture(3553,null);
		} else {
			(js_Boot.__cast(texture , kha_WebGLImage)).set((js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
		}
	}
	,setTextureParameters: function(texunit,uAddressing,vAddressing,minificationFilter,magnificationFilter,mipmapFilter) {
		kha_SystemImpl.gl.activeTexture(33984 + (js_Boot.__cast(texunit , kha_js_graphics4_TextureUnit)).value);
		switch(uAddressing) {
		case 0:
			kha_SystemImpl.gl.texParameteri(3553,10242,10497);
			break;
		case 1:
			kha_SystemImpl.gl.texParameteri(3553,10242,33648);
			break;
		case 2:
			kha_SystemImpl.gl.texParameteri(3553,10242,33071);
			break;
		}
		switch(vAddressing) {
		case 0:
			kha_SystemImpl.gl.texParameteri(3553,10243,10497);
			break;
		case 1:
			kha_SystemImpl.gl.texParameteri(3553,10243,33648);
			break;
		case 2:
			kha_SystemImpl.gl.texParameteri(3553,10243,33071);
			break;
		}
		switch(minificationFilter) {
		case 0:
			switch(mipmapFilter) {
			case 0:
				kha_SystemImpl.gl.texParameteri(3553,10241,9728);
				break;
			case 1:
				kha_SystemImpl.gl.texParameteri(3553,10241,9984);
				break;
			case 2:
				kha_SystemImpl.gl.texParameteri(3553,10241,9986);
				break;
			}
			break;
		case 1:case 2:
			switch(mipmapFilter) {
			case 0:
				kha_SystemImpl.gl.texParameteri(3553,10241,9729);
				break;
			case 1:
				kha_SystemImpl.gl.texParameteri(3553,10241,9985);
				break;
			case 2:
				kha_SystemImpl.gl.texParameteri(3553,10241,9987);
				break;
			}
			if(minificationFilter == 2) {
				kha_SystemImpl.gl.texParameteri(3553,kha_SystemImpl.anisotropicFilter.TEXTURE_MAX_ANISOTROPY_EXT,4);
			}
			break;
		}
		switch(magnificationFilter) {
		case 0:
			kha_SystemImpl.gl.texParameteri(3553,10240,9728);
			break;
		case 1:case 2:
			kha_SystemImpl.gl.texParameteri(3553,10240,9729);
			break;
		}
	}
	,setCullMode: function(mode) {
		switch(mode) {
		case 0:
			kha_SystemImpl.gl.enable(2884);
			kha_SystemImpl.gl.cullFace(1029);
			break;
		case 1:
			kha_SystemImpl.gl.enable(2884);
			kha_SystemImpl.gl.cullFace(1028);
			break;
		case 2:
			kha_SystemImpl.gl.disable(2884);
			break;
		}
	}
	,setPipeline: function(pipe) {
		this.setCullMode(pipe.cullMode);
		this.setDepthMode(pipe.depthWrite,pipe.depthMode);
		this.setStencilParameters(pipe.stencilMode,pipe.stencilBothPass,pipe.stencilDepthFail,pipe.stencilFail,pipe.stencilReferenceValue,pipe.stencilReadMask,pipe.stencilWriteMask);
		this.setBlendingMode(pipe.blendSource,pipe.blendDestination,pipe.blendOperation,pipe.alphaBlendSource,pipe.alphaBlendDestination,pipe.alphaBlendOperation);
		this.currentPipeline = pipe;
		pipe.set();
		this.colorMaskRed = pipe.colorWriteMasksRed[0];
		this.colorMaskGreen = pipe.colorWriteMasksGreen[0];
		this.colorMaskBlue = pipe.colorWriteMasksBlue[0];
		this.colorMaskAlpha = pipe.colorWriteMasksAlpha[0];
	}
	,matrixCache: null
	,setMatrix: function(location,matrix) {
		this.matrixCache[0] = matrix._00;
		this.matrixCache[1] = matrix._01;
		this.matrixCache[2] = matrix._02;
		this.matrixCache[3] = matrix._03;
		this.matrixCache[4] = matrix._10;
		this.matrixCache[5] = matrix._11;
		this.matrixCache[6] = matrix._12;
		this.matrixCache[7] = matrix._13;
		this.matrixCache[8] = matrix._20;
		this.matrixCache[9] = matrix._21;
		this.matrixCache[10] = matrix._22;
		this.matrixCache[11] = matrix._23;
		this.matrixCache[12] = matrix._30;
		this.matrixCache[13] = matrix._31;
		this.matrixCache[14] = matrix._32;
		this.matrixCache[15] = matrix._33;
		kha_SystemImpl.gl.uniformMatrix4fv((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,false,this.matrixCache);
	}
	,drawIndexedVertices: function(start,count) {
		if(count == null) {
			count = -1;
		}
		if(start == null) {
			start = 0;
		}
		var type = kha_SystemImpl.elementIndexUint == null ? 5123 : 5125;
		kha_SystemImpl.gl.drawElements(4,count == -1 ? this.indicesCount : count,type,start * (type == 5123 ? 2 : 4));
		var _g = 0;
		var _g1 = this.useVertexAttributes;
		while(_g < _g1) kha_SystemImpl.gl.disableVertexAttribArray(_g++);
	}
	,convertStencilAction: function(action) {
		switch(action) {
		case 0:
			return 7680;
		case 1:
			return 0;
		case 2:
			return 7681;
		case 3:
			return 7682;
		case 4:
			return 34055;
		case 5:
			return 7683;
		case 6:
			return 34056;
		case 7:
			return 5386;
		}
	}
	,convertCompareMode: function(compareMode) {
		switch(compareMode) {
		case 0:
			return 519;
		case 1:
			return 512;
		case 2:
			return 514;
		case 3:
			return 517;
		case 4:
			return 513;
		case 5:
			return 515;
		case 6:
			return 516;
		case 7:
			return 518;
		}
	}
	,setStencilParameters: function(compareMode,bothPass,depthFail,stencilFail,referenceValue,readMask,writeMask) {
		if(writeMask == null) {
			writeMask = 255;
		}
		if(readMask == null) {
			readMask = 255;
		}
		if(compareMode == 0 && bothPass == 0 && depthFail == 0 && stencilFail == 0) {
			kha_SystemImpl.gl.disable(2960);
		} else {
			kha_SystemImpl.gl.enable(2960);
			var stencilFunc = this.convertCompareMode(compareMode);
			kha_SystemImpl.gl.stencilMask(writeMask);
			kha_SystemImpl.gl.stencilOp(this.convertStencilAction(stencilFail),this.convertStencilAction(depthFail),this.convertStencilAction(bothPass));
			switch(referenceValue._hx_index) {
			case 0:
				kha_SystemImpl.gl.stencilFunc(stencilFunc,0,readMask);
				break;
			case 1:
				kha_SystemImpl.gl.stencilFunc(stencilFunc,referenceValue.value,readMask);
				break;
			}
		}
	}
	,__class__: kha_js_graphics4_Graphics
};
var kha_js_graphics4_Graphics2 = function(canvas) {
	kha_graphics4_Graphics2.call(this,canvas);
};
$hxClasses["kha.js.graphics4.Graphics2"] = kha_js_graphics4_Graphics2;
kha_js_graphics4_Graphics2.__name__ = "kha.js.graphics4.Graphics2";
kha_js_graphics4_Graphics2.__super__ = kha_graphics4_Graphics2;
kha_js_graphics4_Graphics2.prototype = $extend(kha_graphics4_Graphics2.prototype,{
	begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
		kha_SystemImpl.gl.colorMask(true,true,true,true);
		kha_SystemImpl.gl.disable(2929);
		kha_SystemImpl.gl.depthFunc(519);
		kha_graphics4_Graphics2.prototype.begin.call(this,clear,clearColor);
	}
	,__class__: kha_js_graphics4_Graphics2
});
var kha_js_graphics4_TextureUnit = function(value) {
	this.value = value;
};
$hxClasses["kha.js.graphics4.TextureUnit"] = kha_js_graphics4_TextureUnit;
kha_js_graphics4_TextureUnit.__name__ = "kha.js.graphics4.TextureUnit";
kha_js_graphics4_TextureUnit.__interfaces__ = [kha_graphics4_TextureUnit];
kha_js_graphics4_TextureUnit.prototype = {
	value: null
	,__class__: kha_js_graphics4_TextureUnit
};
var kha_vr_VrInterface = function() {
};
$hxClasses["kha.vr.VrInterface"] = kha_vr_VrInterface;
kha_vr_VrInterface.__name__ = "kha.vr.VrInterface";
kha_vr_VrInterface.prototype = {
	IsVrEnabled: function() {
		return false;
	}
	,__class__: kha_vr_VrInterface
};
var kha_js_vr_VrInterface = function() {
	this.vrEnabled = false;
	kha_vr_VrInterface.call(this);
};
$hxClasses["kha.js.vr.VrInterface"] = kha_js_vr_VrInterface;
kha_js_vr_VrInterface.__name__ = "kha.js.vr.VrInterface";
kha_js_vr_VrInterface.__super__ = kha_vr_VrInterface;
kha_js_vr_VrInterface.prototype = $extend(kha_vr_VrInterface.prototype,{
	vrEnabled: null
	,IsVrEnabled: function() {
		return this.vrEnabled;
	}
	,__class__: kha_js_vr_VrInterface
});
var kha_math_FastMatrix4 = function(_00,_10,_20,_30,_01,_11,_21,_31,_02,_12,_22,_32,_03,_13,_23,_33) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._30 = _30;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._31 = _31;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
	this._32 = _32;
	this._03 = _03;
	this._13 = _13;
	this._23 = _23;
	this._33 = _33;
};
$hxClasses["kha.math.FastMatrix4"] = kha_math_FastMatrix4;
kha_math_FastMatrix4.__name__ = "kha.math.FastMatrix4";
kha_math_FastMatrix4.prototype = {
	_00: null
	,_10: null
	,_20: null
	,_30: null
	,_01: null
	,_11: null
	,_21: null
	,_31: null
	,_02: null
	,_12: null
	,_22: null
	,_32: null
	,_03: null
	,_13: null
	,_23: null
	,_33: null
	,__class__: kha_math_FastMatrix4
};
var kha_netsync_ControllerBuilder = function() { };
$hxClasses["kha.netsync.ControllerBuilder"] = kha_netsync_ControllerBuilder;
kha_netsync_ControllerBuilder.__name__ = "kha.netsync.ControllerBuilder";
var kha_netsync_Session = function(maxPlayers,address,port) {
	this.controllers = new haxe_ds_IntMap();
	kha_netsync_Session.instance = this;
	this.maxPlayers = maxPlayers;
	this.address = address;
	this.port = port;
};
$hxClasses["kha.netsync.Session"] = kha_netsync_Session;
kha_netsync_Session.__name__ = "kha.netsync.Session";
kha_netsync_Session.the = function() {
	return kha_netsync_Session.instance;
};
kha_netsync_Session.prototype = {
	controllers: null
	,maxPlayers: null
	,address: null
	,port: null
	,sendControllerUpdate: function(id,bytes) {
		if(this.controllers.h.hasOwnProperty(id)) {
			if(this.controllers.h[id]._inputBuffer.length < this.controllers.h[id]._inputBufferIndex + 4 + bytes.length) {
				var newBuffer = new haxe_io_Bytes(new ArrayBuffer(this.controllers.h[id]._inputBufferIndex + 4 + bytes.length));
				newBuffer.blit(0,this.controllers.h[id]._inputBuffer,0,this.controllers.h[id]._inputBufferIndex);
				this.controllers.h[id]._inputBuffer = newBuffer;
			}
			this.controllers.h[id]._inputBuffer.setInt32(this.controllers.h[id]._inputBufferIndex,bytes.length);
			this.controllers.h[id]._inputBuffer.blit(this.controllers.h[id]._inputBufferIndex + 4,bytes,0,bytes.length);
			this.controllers.h[id]._inputBufferIndex += 4 + bytes.length;
		}
	}
	,__class__: kha_netsync_Session
};
var khm_Lang = function() { };
$hxClasses["khm.Lang"] = khm_Lang;
khm_Lang.__name__ = "khm.Lang";
khm_Lang.loadFolder = function(folder) {
	khm_Lang.ids.length = 0;
	khm_Lang.langs.length = 0;
	var fields = Reflect.fields(kha_Assets.blobs);
	var _g = 0;
	while(_g < fields.length) {
		var field = fields[_g];
		++_g;
		if(field.indexOf(folder) == -1) {
			continue;
		}
		var ereg = new EReg(folder + "_([A-z]+)_json$","");
		if(!ereg.match(field)) {
			continue;
		}
		var id = ereg.matched(1);
		khm_Lang.ids.push(id);
		var data = JSON.parse(kha_Assets.blobs.get(field).toString());
		var lang = new haxe_ds_StringMap();
		var keys = Reflect.fields(data);
		var _g1 = 0;
		while(_g1 < keys.length) {
			var key = keys[_g1];
			++_g1;
			var v = Reflect.field(data,key);
			if(__map_reserved[key] != null) {
				lang.setReserved(key,v);
			} else {
				lang.h[key] = v;
			}
		}
		khm_Lang.langs.push(lang);
	}
};
khm_Lang.set = function(code,def) {
	if(def == null) {
		def = "en";
	}
	khm_Lang.iso = code == null ? kha_System.get_language() : code;
	var defId = -1;
	var id = -1;
	var _g = 0;
	var _g1 = khm_Lang.ids.length;
	while(_g < _g1) {
		var i = _g++;
		var lang = khm_Lang.ids[i];
		if(lang == def) {
			defId = i;
		}
		if(lang == khm_Lang.iso) {
			id = i;
		}
	}
	if(defId == -1) {
		throw new js__$Boot_HaxeError("default language file (" + def + ") not found");
	}
	if(id == -1) {
		khm_Lang.iso = def;
		id = defId;
	}
	khm_Lang.current = khm_Lang.langs[id];
	khm_Lang.basic = khm_Lang.langs[defId];
	khm_Lang.setGlyphs();
};
khm_Lang.setGlyphs = function() {
	var code = HxOverrides.substr(khm_Lang.iso,0,2);
	khm_Lang.fontGlyphs = [];
	var _g = 32;
	while(_g < 127) khm_Lang.fontGlyphs.push(_g++);
	if(code == "ru") {
		var _g1 = 1040;
		while(_g1 < 1104) khm_Lang.fontGlyphs.push(_g1++);
		khm_Lang.fontGlyphs.push(1105);
	}
	khm_Lang.fontGlyphs.push(8364);
};
khm_Lang.get = function(id) {
	var _this = khm_Lang.current;
	var s = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
	if(s != null) {
		return s;
	}
	var _this1 = khm_Lang.basic;
	var s1 = __map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id];
	if(s1 != null) {
		return s1;
	}
	return id;
};
var khm_Pointer = function(id) {
	this.isActive = false;
	this.isTouch = false;
	this.isDown = false;
	this.type = 0;
	this.moveY = 0;
	this.moveX = 0;
	this.y = 0;
	this.x = 0;
	this.startY = 0;
	this.startX = 0;
	this.scale = 1.0;
	this.id = id;
};
$hxClasses["khm.Pointer"] = khm_Pointer;
khm_Pointer.__name__ = "khm.Pointer";
khm_Pointer.prototype = {
	id: null
	,scale: null
	,startX: null
	,startY: null
	,x: null
	,y: null
	,moveX: null
	,moveY: null
	,type: null
	,isDown: null
	,isTouch: null
	,isActive: null
	,toGlobalCords: function(scale) {
		this.startX = this.startX * scale | 0;
		this.startY = this.startY * scale | 0;
		this.x = this.x * scale | 0;
		this.y = this.y * scale | 0;
	}
	,toLocalCords: function(scale) {
		this.startX = this.startX / scale | 0;
		this.startY = this.startY / scale | 0;
		this.x = this.x / scale | 0;
		this.y = this.y / scale | 0;
	}
	,__class__: khm_Pointer
};
var khm_ScreenSets = function(isTouch,showFps,defaultScale) {
	this.defaultScale = 1.0;
	this.showFps = false;
	this.isTouch = null;
	if(isTouch != null) {
		this.isTouch = isTouch;
	}
	if(showFps != null) {
		this.showFps = showFps;
	}
	if(defaultScale != null) {
		this.defaultScale = defaultScale;
	}
};
$hxClasses["khm.ScreenSets"] = khm_ScreenSets;
khm_ScreenSets.__name__ = "khm.ScreenSets";
khm_ScreenSets.prototype = {
	isTouch: null
	,showFps: null
	,defaultScale: null
	,__class__: khm_ScreenSets
};
var khm_Settings = function() { };
$hxClasses["khm.Settings"] = khm_Settings;
khm_Settings.__name__ = "khm.Settings";
khm_Settings.init = function(def,upd) {
	khm_Settings.defaults = def;
	khm_Settings.updater = upd;
};
khm_Settings.read = function() {
	return khm_Settings.checkData(kha_Storage.defaultFile().readObject());
};
khm_Settings.checkData = function(data) {
	if(khm_Settings.defaults == null) {
		throw new js__$Boot_HaxeError("read: default data is null");
	}
	if(data == null) {
		return khm_Settings.defaults;
	}
	if(data.version == khm_Settings.defaults.version) {
		return data;
	}
	if(data.version > khm_Settings.defaults.version) {
		throw new js__$Boot_HaxeError("read: current data version is larger than default data version");
	}
	if(khm_Settings.updater == null) {
		throw new js__$Boot_HaxeError("read: updater function is null");
	}
	while(data.version < khm_Settings.defaults.version) {
		data = khm_Settings.updater(data,data.version);
		data.version++;
	}
	khm_Settings.write(data);
	return data;
};
khm_Settings.set = function(sets) {
	var data = khm_Settings.read();
	var fields = Reflect.fields(sets);
	var _g = 0;
	while(_g < fields.length) {
		var field = fields[_g];
		++_g;
		data[field] = Reflect.field(sets,field);
	}
	khm_Settings.write(data);
};
khm_Settings.write = function(data) {
	kha_Storage.defaultFile().writeObject(data);
};
khm_Settings.reset = function() {
	if(khm_Settings.defaults == null) {
		throw new js__$Boot_HaxeError("reset: default data is null");
	}
	khm_Settings.write(khm_Settings.defaults);
};
var khm_editor_Tool = function() { };
$hxClasses["khm.editor.Tool"] = khm_editor_Tool;
khm_editor_Tool.__name__ = "khm.editor.Tool";
khm_editor_Tool.__isInterface__ = true;
khm_editor_Tool.prototype = {
	undo: null
	,redo: null
	,onMouseDown: null
	,onMouseMove: null
	,onMouseUp: null
	,onRender: null
	,onUpdate: null
	,__class__: khm_editor_Tool
};
var khm_editor_Arrow = function(editor,tilemap) {
	this.end = { x : -1, y : -1};
	this.start = { x : -1, y : -1};
	this.editor = editor;
	this.tilemap = tilemap;
};
$hxClasses["khm.editor.Arrow"] = khm_editor_Arrow;
khm_editor_Arrow.__name__ = "khm.editor.Arrow";
khm_editor_Arrow.__interfaces__ = [khm_editor_Tool];
khm_editor_Arrow.prototype = {
	editor: null
	,tilemap: null
	,start: null
	,end: null
	,undo: function() {
	}
	,redo: function() {
	}
	,onMouseDown: function(p,layer,x,y,tile) {
		this.start.x = x;
		this.start.y = y;
		this.end.x = x;
		this.end.y = y;
	}
	,onMouseMove: function(p,layer,x,y,tile) {
		if(!p.isDown) {
			return;
		}
		if(this.end.x == x && this.end.y == y) {
			return;
		}
		this.end.x = x;
		this.end.y = y;
		this.editor.selection = this.makeRect(this.start,this.end);
	}
	,onMouseUp: function(p,layer,x,y,tile) {
		if(this.start.x == x && this.start.y == y) {
			this.editor.selection = null;
			this.action(layer,x,y,tile);
			return;
		}
		this.end.x = x;
		this.end.y = y;
		this.editor.selection = this.makeRect(this.start,this.end);
	}
	,makeRect: function(p,p2) {
		var sx = p.x < p2.x ? p.x : p2.x;
		var sy = p.y < p2.y ? p.y : p2.y;
		return { x : sx, y : sy, w : (p.x < p2.x ? p2.x : p.x) - sx, h : (p.y < p2.y ? p2.y : p.y) - sy};
	}
	,onUpdate: function() {
	}
	,onRender: function(g) {
	}
	,action: function(layer,x,y,tile) {
		var _gthis = this;
		var objs = this.tilemap.getObjects(layer,x,y);
		if(objs.length == 0) {
			var _g = 0;
			var _g1 = this.tilemap.map.layers.length;
			while(_g < _g1) {
				layer = _g++;
				objs = this.tilemap.getObjects(layer,x,y);
				if(objs.length != 0) {
					break;
				}
			}
		}
		if(objs.length == 0) {
			return;
		}
		khm_editor_ui_Modal.prompt("Object:",JSON.stringify(objs,null,"  "),function(data) {
			if(data == null) {
				return;
			}
			var objs1 = JSON.parse(data);
			if(objs1 != null) {
				_gthis.tilemap.setObjects(layer,x,y,objs1);
			}
		});
	}
	,__class__: khm_editor_Arrow
};
var khm_editor_Brush = function(editor,tilemap) {
	this.maxHistory = 50;
	this.redoH = [];
	this.undoH = [];
	this.editor = editor;
	this.tilemap = tilemap;
};
$hxClasses["khm.editor.Brush"] = khm_editor_Brush;
khm_editor_Brush.__name__ = "khm.editor.Brush";
khm_editor_Brush.__interfaces__ = [khm_editor_Tool];
khm_editor_Brush.prototype = {
	undoH: null
	,redoH: null
	,maxHistory: null
	,editor: null
	,tilemap: null
	,addHistory: function(h) {
		this.undoH.push(h);
		if(this.undoH.length > this.maxHistory) {
			this.undoH.shift();
		}
		this.redoH.length = 0;
	}
	,clearHistory: function() {
		this.undoH.length = 0;
		this.redoH.length = 0;
	}
	,history: function(h1,h2) {
		var hid = h1.length - 1;
		if(hid == -1) {
			return;
		}
		var h = h1[hid];
		h2.push({ layer : h.layer, x : h.x, y : h.y, tile : this.tilemap.getTile(h.layer,h.x,h.y)._id, objs : this.tilemap.getObjects(h.layer,h.x,h.y)});
		this.tilemap.setTileId(h.layer,h.x,h.y,h.tile);
		this.tilemap.setObjects(h.layer,h.x,h.y,h.objs);
		h1.pop();
	}
	,undo: function() {
		this.history(this.undoH,this.redoH);
	}
	,redo: function() {
		this.history(this.redoH,this.undoH);
	}
	,onMouseDown: function(p,layer,x,y,tile) {
		this.action(p,layer,x,y,tile);
	}
	,onMouseMove: function(p,layer,x,y,tile) {
		if(!p.isDown) {
			return;
		}
		this.action(p,layer,x,y,tile);
	}
	,onMouseUp: function(p,layer,x,y,tile) {
	}
	,onUpdate: function() {
	}
	,onRender: function(g) {
	}
	,action: function(p,layer,x,y,tile) {
		var old = this.tilemap.getTile(layer,x,y)._id;
		if(old == tile) {
			return;
		}
		this.addHistory({ layer : layer, x : x, y : y, tile : old, objs : this.tilemap.getObjects(layer,x,y)});
		this.tilemap.setTileId(layer,x,y,tile);
		var newObj = this.tilemap.objectTemplate(layer,tile);
		this.tilemap.setObjects(layer,x,y,[newObj]);
	}
	,__class__: khm_editor_Brush
};
var khm_editor_Editor = function(tileset) {
	this.tempMatrix = new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1);
	this.y = 0;
	this.x = 0;
	this.isGridEnabled = false;
	this.eraserMode = { tile : 0, layer : 0};
	this.cursor = { x : 0, y : 0};
	this.tiles = [];
	this.layer = 0;
	this.toolName = "";
	this.ui = new khm_imgui_Imgui(new khm_imgui_ImguiSets(false,null,null));
	this.tilemap = new khm_tilemap_Tilemap(tileset);
	khm_Screen.call(this);
};
$hxClasses["khm.editor.Editor"] = khm_editor_Editor;
khm_editor_Editor.__name__ = "khm.editor.Editor";
khm_editor_Editor.__super__ = khm_Screen;
khm_editor_Editor.prototype = $extend(khm_Screen.prototype,{
	ui: null
	,tilemap: null
	,tilePanel: null
	,arrow: null
	,brush: null
	,fillRect: null
	,pipette: null
	,hand: null
	,toolName: null
	,tool: null
	,set_tool: function(tool) {
		this.tool = tool;
		var cl = js_Boot.getClass(tool);
		var arr = cl.__name__.split(".");
		this.toolName = arr[arr.length - 1];
		return tool;
	}
	,layer: null
	,tiles: null
	,cursor: null
	,eraserMode: null
	,selection: null
	,isGridEnabled: null
	,x: null
	,y: null
	,init: function() {
		khm_utils_FileReference.removeOnDrop($bind(this,this.onFileLoad));
		khm_utils_FileReference.onDrop($bind(this,this.onFileLoad),false);
		var map = this.newMap({ w : 10, h : 10});
		this.tilemap.loadMap(map);
		this.tilePanel = new khm_editor_TilePanel(this,this.tilemap);
		this.arrow = new khm_editor_Arrow(this,this.tilemap);
		this.brush = new khm_editor_Brush(this,this.tilemap);
		this.fillRect = new khm_editor_FillRect(this,this.tilemap);
		this.pipette = new khm_editor_Pipette(this,this.tilemap);
		this.hand = new khm_editor_Hand(this,this.tilemap);
		this.set_tool(this.brush);
		var _g = 0;
		var _g1 = this.tilemap.tileset.tilesLengths;
		while(_g < _g1.length) {
			++_g;
			this.tiles.push(0);
		}
		this.onResize();
	}
	,moveCamera: function(speed) {
		var _g = this.tilemap.camera;
		_g.set_x(_g.get_x() + speed.x);
		var _g1 = this.tilemap.camera;
		_g1.set_y(_g1.get_y() + speed.y);
		this.updateCamera();
	}
	,onKeyDown: function(key) {
		var tmp;
		var _g = this.keys.h[17];
		if(!(_g == null ? false : _g)) {
			var _g1 = this.keys.h[224];
			tmp = _g1 == null ? false : _g1;
		} else {
			tmp = true;
		}
		if(tmp) {
			if(key == 90) {
				var _g2 = this.keys.h[16];
				if(!(_g2 == null ? false : _g2)) {
					this.tool.undo();
				} else {
					this.tool.redo();
				}
			}
			if(key == 89) {
				this.tool.redo();
			}
			if(key == 83) {
				this.keys.h[83] = false;
				this.keys.h[224] = false;
				this.keys.h[17] = false;
				this.save(this.tilemap.map);
			}
		}
		if(khm_utils_ScreenTools.onRescaleKeys(this,key)) {
			return;
		}
		if(key == 37 || key == 39 || key == 38 || key == 40) {
			var _g3 = this.keys.h[16];
			if(!(_g3 == null ? false : _g3)) {
				this.moveCursor(key);
				this.updateCamera();
			}
		}
		if(key == 32) {
			this.tilemap.setTileId(this.layer,this.x,this.y,this.tiles[this.layer]);
		} else if(key == 77) {
			this.set_tool(this.arrow);
		} else if(key == 66) {
			this.set_tool(this.brush);
		} else if(key == 82) {
			this.set_tool(this.fillRect);
		} else if(key == 80) {
			this.set_tool(this.pipette);
		} else if(key == 72) {
			this.set_tool(this.hand);
		} else if(key == 79) {
			this.browse();
		} else if(key == 78) {
			this.createMap();
		} else if(key == 81) {
			this.prevTile();
		} else if(key == 69) {
			this.nextTile();
		} else if(key == 71) {
			this.isGridEnabled = !this.isGridEnabled;
		} else if(key == 188) {
			this.tilePanel.incColumns();
		} else if(key == 190) {
			this.tilePanel.decColumns();
		} else if(key == 48) {
			if(khm_editor_Editor.testMap != null) {
				khm_editor_Editor.testMap(this,this.tilemap);
			}
		} else if(key == 57) {
			this.resizeMap();
		} else if(key == 8) {
			this.clearSelection();
		} else if(key - 49 >= 0 && key - 49 <= 9) {
			var newLayer = key - 49;
			if(newLayer < this.tilemap.map.layers.length) {
				this.layer = newLayer;
			}
		} else if(key == 27) {
			if(!window.confirm(khm_Lang.get("dataWillBeLost") + " " + khm_Lang.get("areYouSure"))) {
				return;
			}
			if(khm_editor_Editor.exit != null) {
				khm_editor_Editor.exit();
			}
		}
	}
	,moveCursor: function(key) {
		if(key == 37) {
			this.x--;
		} else if(key == 39) {
			this.x++;
		} else if(key == 38) {
			this.y--;
		} else if(key == 40) {
			this.y++;
		}
		this.cursorBounds();
		this.tilemap.camera.strictCenter({ x : this.x * this.tilemap.tileset.tileSize, y : this.y * this.tilemap.tileset.tileSize, w : this.tilemap.tileset.tileSize, h : this.tilemap.tileset.tileSize});
	}
	,onKeyUp: function(key) {
	}
	,prevTile: function() {
		var _g = this;
		_g.tiles[_g.layer] -= 1;
		if(this.tiles[this.layer] < 0) {
			this.tiles[this.layer] = this.tilemap.tileset.tilesLengths[this.layer];
		}
		if(this.tiles[this.layer] > this.tilemap.tileset.tilesLengths[this.layer]) {
			this.tiles[this.layer] = 0;
		}
	}
	,nextTile: function() {
		var _g = this;
		_g.tiles[_g.layer] += 1;
		if(this.tiles[this.layer] < 0) {
			this.tiles[this.layer] = this.tilemap.tileset.tilesLengths[this.layer];
		}
		if(this.tiles[this.layer] > this.tilemap.tileset.tilesLengths[this.layer]) {
			this.tiles[this.layer] = 0;
		}
	}
	,createMap: function() {
		var size = JSON.parse(window.prompt("Map Size:",JSON.stringify({ w : 20, h : 20})));
		if(size == null) {
			return;
		}
		this.onMapLoad(this.newMap(size));
	}
	,newMap: function(size) {
		var layersLength = this.tilemap.tileset.layersLength;
		var size1 = size.w;
		var size2 = size.h;
		var _g = [];
		var _g1 = 0;
		while(_g1 < layersLength) {
			var l = _g1++;
			var _g11 = [];
			var _g2 = 0;
			var _g3 = size.h;
			while(_g2 < _g3) {
				++_g2;
				var _g21 = [];
				var _g31 = 0;
				var _g4 = size.w;
				while(_g31 < _g4) {
					++_g31;
					_g21.push(new khm_tilemap_Tile(this.tilemap,l,0));
				}
				_g11.push(_g21);
			}
			_g.push(_g11);
		}
		return { w : size1, h : size2, layers : _g, objects : [], floatObjects : []};
	}
	,resizeMap: function() {
		var size = JSON.parse(window.prompt("Add Size [SX, EX, SY, EY]:",JSON.stringify([0,1,0,1])));
		if(size == null) {
			return;
		}
		var map = this.tilemap.map;
		var _g = 0;
		var _g1 = map.layers.length;
		while(_g < _g1) this.resizeLayer(_g++,size,true);
		var sx = size[0];
		var sy = size[2];
		var newW = map.w + sx + size[1];
		var newH = map.h + sy + size[3];
		var i = 0;
		while(i < map.objects.length) {
			var obj = map.objects[i];
			obj.x += sx;
			obj.y += sy;
			if(obj.x < 0 || obj.y < 0 || obj.x >= newW || obj.y >= newH) {
				HxOverrides.remove(map.objects,obj);
				continue;
			}
			++i;
		}
		map.w = newW;
		map.h = newH;
		this.onMapLoad(map);
	}
	,resizeLayer: function(l,size,isFill) {
		var _gthis = this;
		var layer = this.tilemap.map.layers[l];
		var sx = size[0];
		var ex = size[1];
		var sy = size[2];
		var ey = size[3];
		var len = Math.abs(sy) | 0;
		var _g = 0;
		while(_g < len) {
			++_g;
			if(sy < 0) {
				layer.shift();
			} else {
				layer.unshift([]);
				var _g1 = 0;
				var _g11 = layer[1];
				while(_g1 < _g11.length) {
					var tile = _g11[_g1++];
					var newTile = isFill ? tile.copy() : new khm_tilemap_Tile(_gthis.tilemap,l,0);
					layer[0].push(newTile);
				}
			}
		}
		var len1 = Math.abs(ey) | 0;
		var _g2 = 0;
		while(_g2 < len1) {
			++_g2;
			if(ey < 0) {
				layer.pop();
			} else {
				layer.push([]);
				var h = layer.length - 1;
				var _g21 = 0;
				var _g3 = layer[h - 1];
				while(_g21 < _g3.length) {
					var tile1 = _g3[_g21++];
					var tile2 = isFill ? tile1.copy() : new khm_tilemap_Tile(_gthis.tilemap,l,0);
					layer[h].push(tile2);
				}
			}
		}
		var len2 = Math.abs(sx) | 0;
		var _g4 = 0;
		while(_g4 < len2) {
			++_g4;
			var _g41 = 0;
			var _g5 = layer.length;
			while(_g41 < _g5) {
				var iy = _g41++;
				if(sx < 0) {
					layer[iy].shift();
				} else {
					var tile3 = isFill ? layer[iy][0].copy() : new khm_tilemap_Tile(_gthis.tilemap,l,0);
					layer[iy].unshift(tile3);
				}
			}
		}
		var len3 = Math.abs(ex) | 0;
		var _g6 = 0;
		while(_g6 < len3) {
			++_g6;
			var _g61 = 0;
			var _g7 = layer.length;
			while(_g61 < _g7) {
				var iy1 = _g61++;
				if(ex < 0) {
					layer[iy1].pop();
				} else {
					var id = isFill ? layer[iy1][layer[iy1].length - 1].copy() : new khm_tilemap_Tile(_gthis.tilemap,l,0);
					layer[iy1].push(id);
				}
			}
		}
	}
	,save: function(map,name) {
		if(name == null) {
			name = "map";
		}
		khm_utils_FileReference.saveJson(name,JSON.stringify(this.tilemap.toJSON(map)));
	}
	,browse: function() {
		khm_utils_FileReference.browse($bind(this,this.onFileLoad),false);
	}
	,onFileLoad: function(file,name) {
		var ext = name.split(".").pop();
		var name1 = name.split(".")[0];
		if(ext == null) {
			haxe_Log.trace("unknown file extension " + ext,{ fileName : "khm/editor/Editor.hx", lineNumber : 345, className : "khm.editor.Editor", methodName : "onFileLoad"});
		} else if(ext == "json") {
			this.onMapJSONLoad(JSON.parse(file),name1);
		} else {
			haxe_Log.trace("unknown file extension " + ext,{ fileName : "khm/editor/Editor.hx", lineNumber : 345, className : "khm.editor.Editor", methodName : "onFileLoad"});
		}
	}
	,onMapJSONLoad: function(map,name) {
		this.onMapLoad(this.tilemap.fromJSON(map),name);
	}
	,onMapLoad: function(map,name) {
		if(name != null) {
			map.name = name;
		}
		this.tilemap.loadMap(map);
		this.clearHistory();
	}
	,clearHistory: function() {
		this.brush.clearHistory();
		this.fillRect.clearHistory();
	}
	,clearSelection: function() {
		if(this.selection == null) {
			this.tilemap.setTileId(this.layer,this.x,this.y,0);
			return;
		}
		var rect = this.selection;
		var _g = rect.y;
		var _g1 = rect.y + rect.h + 1;
		while(_g < _g1) {
			var iy = _g++;
			var _g2 = rect.x;
			var _g11 = rect.x + rect.w + 1;
			while(_g2 < _g11) this.tilemap.setTileId(this.layer,_g2++,iy,0);
		}
	}
	,updateCursor: function(pointer) {
		this.cursor.x = pointer.x;
		this.cursor.y = pointer.y;
		this.x = this.cursor.x / this.tilemap.tileset.tileSize - this.tilemap.camera.get_x() / this.tilemap.tileset.tileSize | 0;
		this.y = this.cursor.y / this.tilemap.tileset.tileSize - this.tilemap.camera.get_y() / this.tilemap.tileset.tileSize | 0;
		this.cursorBounds();
	}
	,cursorBounds: function() {
		if(this.x < 0) {
			this.x = 0;
		}
		if(this.y < 0) {
			this.y = 0;
		}
		if(this.x > this.tilemap.map.w - 1) {
			this.x = this.tilemap.map.w - 1;
		}
		if(this.y > this.tilemap.map.h - 1) {
			this.y = this.tilemap.map.h - 1;
		}
	}
	,onMouseDown: function(p) {
		if(this.tilePanel.onDown(p)) {
			return;
		}
		if(this.ui.onPointerDown(p)) {
			return;
		}
		this.updateCursor(p);
		var _g = this.keys.h[18];
		if((_g == null ? false : _g) || p.type == 2) {
			this.tiles[this.layer] = this.tilemap.getTile(this.layer,this.x,this.y)._id;
			return;
		}
		if(p.type == 1) {
			this.enableEraserMode();
		}
		this.tool.onMouseDown(p,this.layer,this.x,this.y,this.tiles[this.layer]);
	}
	,onMouseMove: function(p) {
		if(this.tilePanel.onMove(p)) {
			return;
		}
		if(this.ui.onPointerMove(p)) {
			return;
		}
		this.updateCursor(p);
		this.tool.onMouseMove(p,this.layer,this.x,this.y,this.tiles[this.layer]);
	}
	,onMouseUp: function(p) {
		if(this.tilePanel.onUp(p)) {
			return;
		}
		if(this.ui.onPointerUp(p)) {
			return;
		}
		this.tool.onMouseUp(p,this.layer,this.x,this.y,this.tiles[this.layer]);
		if(p.type == 1) {
			this.disableEraserMode();
		}
	}
	,onMouseWheel: function(delta) {
		if(delta == 1) {
			this.prevTile();
		} else if(delta == -1) {
			this.nextTile();
		}
	}
	,onResize: function() {
		this.tilemap.camera.set_w(khm_Screen.w);
		this.tilemap.camera.set_h(khm_Screen.h);
		this.tilePanel.resize();
	}
	,onUpdate: function() {
		this.tilePanel.update();
		this.tool.onUpdate();
		var sx = 0.0;
		var sy = 0.0;
		var s = this.tilemap.tileset.tileSize / 5;
		var _g = this.keys.h[65];
		if(_g == null ? false : _g) {
			sx = s;
		}
		var _g1 = this.keys.h[68];
		if(_g1 == null ? false : _g1) {
			sx -= s;
		}
		var _g2 = this.keys.h[87];
		if(_g2 == null ? false : _g2) {
			sy = s;
		}
		var _g3 = this.keys.h[83];
		if(_g3 == null ? false : _g3) {
			sy -= s;
		}
		var _g4 = this.keys.h[16];
		if(_g4 == null ? false : _g4) {
			sx *= 2;
			sy *= 2;
			var _g5 = this.keys.h[37];
			if(_g5 == null ? false : _g5) {
				this.moveCursor(37);
			}
			var _g6 = this.keys.h[39];
			if(_g6 == null ? false : _g6) {
				this.moveCursor(39);
			}
			var _g7 = this.keys.h[38];
			if(_g7 == null ? false : _g7) {
				this.moveCursor(38);
			}
			var _g8 = this.keys.h[40];
			if(_g8 == null ? false : _g8) {
				this.moveCursor(40);
			}
		}
		if(sx != 0) {
			var _g9 = this.tilemap.camera;
			_g9.set_x(_g9.get_x() + sx);
		}
		if(sy != 0) {
			var _g10 = this.tilemap.camera;
			_g10.set_y(_g10.get_y() + sy);
		}
		var _g11 = this.keys.h[32];
		if(_g11 == null ? false : _g11) {
			this.tilemap.setTileId(this.layer,this.x,this.y,this.tiles[this.layer]);
		}
		this.updateCamera();
	}
	,updateCamera: function() {
		var w = khm_Screen.w;
		var h = khm_Screen.h;
		var pw = this.tilemap.map.w * this.tilemap.tileset.tileSize;
		var ph = this.tilemap.map.h * this.tilemap.tileset.tileSize;
		var camera = this.tilemap.camera;
		var maxW = w - pw - 48 - this.tilePanel.w * this.tilemap.tileset.tileSize;
		var maxH = h - ph - 48;
		if(camera.get_x() > 48) {
			camera.set_x(48);
		}
		if(camera.get_x() < maxW) {
			camera.set_x(maxW);
		}
		if(camera.get_y() > 48) {
			camera.set_y(48);
		}
		if(camera.get_y() < maxH) {
			camera.set_y(maxH);
		}
		if(pw < w - 96 - this.tilePanel.w * this.tilemap.tileset.tileSize) {
			camera.set_x(w / 2 - pw / 2);
		}
		if(ph < h - 96) {
			camera.set_y(h / 2 - ph / 2);
		}
		camera.set_x(camera.get_x() | 0);
		camera.set_y(camera.get_y() | 0);
	}
	,enableEraserMode: function() {
		this.eraserMode.layer = this.layer;
		this.eraserMode.tile = this.tiles[this.layer];
		this.tiles[this.layer] = 0;
	}
	,disableEraserMode: function() {
		this.layer = this.eraserMode.layer;
		this.tiles[this.layer] = this.eraserMode.tile;
	}
	,tempMatrix: null
	,onRender: function(frame) {
		var g = frame.get_g2();
		g.begin(true,-4340787);
		g.set_color(1342177280);
		g.drawRect(this.tilemap.camera.get_x() - 0.5,this.tilemap.camera.get_y() - 0.5,this.tilemap.map.w * this.tilemap.tileset.tileSize + 1,this.tilemap.map.h * this.tilemap.tileset.tileSize + 1);
		this.tilemap.drawLayers(g);
		this.drawSelection(g);
		this.tool.onRender(g);
		this.drawGrid(g);
		this.drawCursor(g);
		this.drawGUI(g);
		this.tilePanel.render(g);
		g.set_color(-16777216);
		g.set_font(kha_Assets.fonts.OpenSans_Regular);
		g.set_fontSize(24);
		var temp = g.transformations[g.transformationIndex];
		var transformation = this.tempMatrix;
		g.setTransformation(transformation);
		var _this = g.transformations[g.transformationIndex];
		_this._00 = transformation._00;
		_this._10 = transformation._10;
		_this._20 = transformation._20;
		_this._01 = transformation._01;
		_this._11 = transformation._11;
		_this._21 = transformation._21;
		_this._02 = transformation._02;
		_this._12 = transformation._12;
		_this._22 = transformation._22;
		g.drawString("Layer: " + (this.layer + 1) + " | Tile: " + this.tiles[this.layer] + " | Objects: " + this.tilemap.map.objects.length,0,0);
		var fh = g.get_font().height(g.get_fontSize());
		g.drawString("" + this.toolName + " | " + this.x + ", " + this.y,0,fh);
		g.setTransformation(temp);
		var _this1 = g.transformations[g.transformationIndex];
		_this1._00 = temp._00;
		_this1._10 = temp._10;
		_this1._20 = temp._20;
		_this1._01 = temp._01;
		_this1._11 = temp._11;
		_this1._21 = temp._21;
		_this1._02 = temp._02;
		_this1._12 = temp._12;
		_this1._22 = temp._22;
		g.end();
	}
	,drawGrid: function(g) {
		if(!this.isGridEnabled) {
			return;
		}
		g.set_color(352321536);
		var _g = 0;
		var _g1 = this.tilemap.map.w;
		while(_g < _g1) {
			var ix = _g++;
			var _g2 = 0;
			var _g11 = this.tilemap.map.h;
			while(_g2 < _g11) g.drawRect(this.tilemap.camera.get_x() + ix * this.tilemap.tileset.tileSize + 0.5,this.tilemap.camera.get_y() + _g2++ * this.tilemap.tileset.tileSize + 0.5,this.tilemap.tileset.tileSize - 1,this.tilemap.tileset.tileSize - 1);
		}
	}
	,drawSelection: function(g) {
		if(this.selection == null) {
			return;
		}
		var rect = this.selection;
		g.set_color(-1996488960);
		var tileSize = this.tilemap.tileset.tileSize;
		g.drawRect(rect.x * tileSize + this.tilemap.camera.get_x() - 1.5,rect.y * tileSize + this.tilemap.camera.get_y() - 1.5,(rect.w + 1) * tileSize + 3,(rect.h + 1) * tileSize + 3);
	}
	,drawCursor: function(g) {
		if(this.tool == this.hand) {
			return;
		}
		g.set_color(-2013265920);
		var px = this.x * this.tilemap.tileset.tileSize + this.tilemap.camera.get_x();
		var py = this.y * this.tilemap.tileset.tileSize + this.tilemap.camera.get_y();
		g.drawRect(px - 0.5,py - 0.5,this.tilemap.tileset.tileSize + 1,this.tilemap.tileset.tileSize + 1);
		if(this.tool == this.arrow) {
			return;
		}
		if(this.tiles[this.layer] == 0) {
			g.set_color(-1996554240);
			g.drawLine(px,py,px + this.tilemap.tileset.tileSize,py + this.tilemap.tileset.tileSize);
			g.drawLine(px + this.tilemap.tileset.tileSize,py,px,py + this.tilemap.tileset.tileSize);
		}
		g.set_color(-1996488705);
		this.drawTile(g,this.layer,this.x * this.tilemap.tileset.tileSize + this.tilemap.camera.get_x(),this.y * this.tilemap.tileset.tileSize + this.tilemap.camera.get_y(),this.tiles[this.layer]);
	}
	,drawGUI: function(g) {
		this.ui.begin(g);
		var i = kha_Assets.images;
		var h = 48 / this.scale | 0;
		khm_imgui_Widgets.buttonW = h;
		khm_imgui_Widgets.buttonH = h;
		khm_imgui_Widgets.setColors(this.ui,16777215,1157627903,-1996488705,-2145352982,-1);
		if(khm_imgui_Widgets.imageButton(this.ui,0,h,i.editor_arrow)) {
			this.onKeyDown(77);
		}
		if(khm_imgui_Widgets.imageButton(this.ui,0,h * 2,i.editor_paint_brush)) {
			this.onKeyDown(66);
		}
		if(khm_imgui_Widgets.imageButton(this.ui,0,h * 3,i.editor_assembly_area)) {
			this.onKeyDown(82);
		}
		if(khm_imgui_Widgets.imageButton(this.ui,0,h * 4,i.editor_pipette)) {
			this.onKeyDown(80);
		}
		if(khm_editor_Editor.testMap != null) {
			if(khm_imgui_Widgets.imageButton(this.ui,khm_Screen.w - h - this.tilePanel.w * this.tilemap.tileset.tileSize,0,i.editor_play)) {
				this.onKeyDown(48);
			}
		}
		if(khm_Screen.isTouch) {
			if(khm_imgui_Widgets.imageButton(this.ui,0,h * 5,i.editor_hand)) {
				this.onKeyDown(72);
			}
			if(khm_imgui_Widgets.imageButton(this.ui,0,khm_Screen.h - h,i.editor_undo)) {
				this.keys.h[17] = true;
				this.onKeyDown(90);
			}
			if(khm_imgui_Widgets.imageButton(this.ui,h,khm_Screen.h - h,i.editor_redo)) {
				this.keys.h[17] = true;
				this.onKeyDown(89);
			}
		}
		this.ui.end();
	}
	,drawTile: function(g,layer,x,y,id) {
		if(id < 1) {
			return;
		}
		var tileset = this.tilemap.tileset;
		id += tileset.layersOffsets[layer];
		g.drawSubImage(tileset.img,x,y,id % tileset.w * this.tilemap.tileset.tileSize,(id / tileset.w | 0) * this.tilemap.tileset.tileSize,this.tilemap.tileset.tileSize,this.tilemap.tileset.tileSize);
	}
	,__class__: khm_editor_Editor
});
var khm_editor_FillRect = function(editor,tilemap) {
	this.maxHistory = 10;
	this.redoH = [];
	this.undoH = [];
	this.editor = editor;
	this.tilemap = tilemap;
};
$hxClasses["khm.editor.FillRect"] = khm_editor_FillRect;
khm_editor_FillRect.__name__ = "khm.editor.FillRect";
khm_editor_FillRect.__interfaces__ = [khm_editor_Tool];
khm_editor_FillRect.prototype = {
	undoH: null
	,redoH: null
	,maxHistory: null
	,editor: null
	,tilemap: null
	,start: null
	,end: null
	,addHistory: function(h) {
		this.undoH.push(h);
		if(this.undoH.length > this.maxHistory) {
			this.undoH.shift();
		}
		this.redoH.length = 0;
	}
	,clearHistory: function() {
		this.undoH.length = 0;
		this.redoH.length = 0;
	}
	,history: function(h1,h2) {
		var hid = h1.length - 1;
		if(hid == -1) {
			return;
		}
		var h = h1[hid];
		var olds = this.copyRect(h.rect,h.layer);
		this.fillTiles(h.rect,h.layer,h.tiles);
		h2.push({ layer : h.layer, rect : h.rect, tiles : olds});
		h1.pop();
	}
	,undo: function() {
		this.history(this.undoH,this.redoH);
	}
	,redo: function() {
		this.history(this.redoH,this.undoH);
	}
	,onMouseDown: function(p,layer,x,y,tile) {
		this.start = { x : x, y : y};
		this.end = this.start;
	}
	,onMouseMove: function(p,layer,x,y,tile) {
		if(!p.isDown) {
			return;
		}
		this.end = { x : x, y : y};
	}
	,onMouseUp: function(p,layer,x,y,tile) {
		if(this.start == null) {
			this.end = null;
			return;
		}
		this.end = { x : x, y : y};
		this.fill(layer,tile);
		this.start = this.end = null;
	}
	,onUpdate: function() {
	}
	,makeRect: function(p,p2) {
		var sx = p.x < p2.x ? p.x : p2.x;
		var sy = p.y < p2.y ? p.y : p2.y;
		return { x : sx, y : sy, w : (p.x < p2.x ? p2.x : p.x) - sx, h : (p.y < p2.y ? p2.y : p.y) - sy};
	}
	,onRender: function(g) {
		if(this.start == null || this.end == null) {
			return;
		}
		g.set_color(-65281);
		var rect = this.makeRect(this.start,this.end);
		var tileSize = this.tilemap.tileset.tileSize;
		g.drawRect(rect.x * tileSize + this.tilemap.camera.get_x() - 1.5,rect.y * tileSize + this.tilemap.camera.get_y() - 1.5,(rect.w + 1) * tileSize + 3,(rect.h + 1) * tileSize + 3);
	}
	,fill: function(layer,tile) {
		if(this.start == null || this.end == null) {
			return;
		}
		var rect = this.makeRect(this.start,this.end);
		if(this.tilemap.objectTemplate(layer,tile) != null) {
			return;
		}
		var olds = this.copyRect(rect,layer);
		this.fillRect(rect,layer,tile);
		this.addHistory({ layer : layer, rect : rect, tiles : olds});
	}
	,copyRect: function(rect,layer) {
		var arr = [];
		var _g = rect.y;
		var _g1 = rect.y + rect.h + 1;
		while(_g < _g1) {
			var iy = _g++;
			var ty = iy - rect.y;
			arr[ty] = [];
			var _g2 = rect.x;
			var _g11 = rect.x + rect.w + 1;
			while(_g2 < _g11) {
				var ix = _g2++;
				arr[ty][ix - rect.x] = this.tilemap.getTile(layer,ix,iy)._id;
			}
		}
		return arr;
	}
	,fillRect: function(rect,layer,tile) {
		var _g = rect.y;
		var _g1 = rect.y + rect.h + 1;
		while(_g < _g1) {
			var iy = _g++;
			var _g2 = rect.x;
			var _g11 = rect.x + rect.w + 1;
			while(_g2 < _g11) this.tilemap.setTileId(layer,_g2++,iy,tile);
		}
	}
	,fillTiles: function(rect,layer,tiles) {
		var _g = rect.y;
		var _g1 = rect.y + rect.h + 1;
		while(_g < _g1) {
			var iy = _g++;
			var ty = iy - rect.y;
			var _g2 = rect.x;
			var _g11 = rect.x + rect.w + 1;
			while(_g2 < _g11) {
				var ix = _g2++;
				this.tilemap.setTileId(layer,ix,iy,tiles[ty][ix - rect.x]);
			}
		}
	}
	,__class__: khm_editor_FillRect
};
var khm_editor_Hand = function(editor,tilemap) {
	this.isDown = false;
	this.speed = { x : 0, y : 0};
	this.editor = editor;
	this.tilemap = tilemap;
};
$hxClasses["khm.editor.Hand"] = khm_editor_Hand;
khm_editor_Hand.__name__ = "khm.editor.Hand";
khm_editor_Hand.__interfaces__ = [khm_editor_Tool];
khm_editor_Hand.prototype = {
	editor: null
	,tilemap: null
	,speed: null
	,isDown: null
	,undo: function() {
	}
	,redo: function() {
	}
	,onMouseDown: function(p,layer,x,y,tile) {
		this.isDown = true;
	}
	,onMouseMove: function(p,layer,x,y,tile) {
		if(!p.isDown) {
			return;
		}
		this.speed.x = p.moveX;
		this.speed.y = p.moveY;
		this.editor.moveCamera(this.speed);
	}
	,onMouseUp: function(p,layer,x,y,tile) {
		this.isDown = false;
	}
	,onUpdate: function() {
		if(this.isDown) {
			return;
		}
		if(this.speed.x == 0 && this.speed.y == 0) {
			return;
		}
		if(this.speed.x != 0) {
			this.speed.x -= Math.abs(this.speed.x) / this.speed.x | 0;
		}
		if(this.speed.y != 0) {
			this.speed.y -= Math.abs(this.speed.y) / this.speed.y | 0;
		}
		this.editor.moveCamera(this.speed);
	}
	,onRender: function(g) {
	}
	,__class__: khm_editor_Hand
};
var khm_editor_Pipette = function(editor,tilemap) {
	this.editor = editor;
	this.tilemap = tilemap;
};
$hxClasses["khm.editor.Pipette"] = khm_editor_Pipette;
khm_editor_Pipette.__name__ = "khm.editor.Pipette";
khm_editor_Pipette.__interfaces__ = [khm_editor_Tool];
khm_editor_Pipette.prototype = {
	editor: null
	,tilemap: null
	,undo: function() {
	}
	,redo: function() {
	}
	,onMouseDown: function(p,layer,x,y,tile) {
		this.action(layer,x,y,tile);
	}
	,onMouseMove: function(p,layer,x,y,tile) {
		if(p.isDown) {
			this.action(layer,x,y,tile);
		}
	}
	,onMouseUp: function(p,layer,x,y,tile) {
	}
	,onUpdate: function() {
	}
	,onRender: function(g) {
	}
	,action: function(layer,x,y,tile) {
		if(this.tilemap.getTile(layer,x,y)._id == tile) {
			return;
		}
		var _this = this.editor;
		_this.tiles[_this.layer] = this.tilemap.getTile(layer,x,y)._id;
	}
	,__class__: khm_editor_Pipette
};
var khm_editor_TilePanel = function(editor,tilemap) {
	this.current = 0;
	this.customW = 0;
	this.maxW = 10;
	this.minW = 2;
	this.opacity = 0.5;
	this.h = 0;
	this.w = 0;
	this.y = 0;
	this.x = 0;
	this.editor = editor;
	this.tilemap = tilemap;
	this.resize();
};
$hxClasses["khm.editor.TilePanel"] = khm_editor_TilePanel;
khm_editor_TilePanel.__name__ = "khm.editor.TilePanel";
khm_editor_TilePanel.prototype = {
	x: null
	,y: null
	,w: null
	,h: null
	,editor: null
	,tilemap: null
	,get_tileSize: function() {
		return this.tilemap.tileset.tileSize;
	}
	,opacity: null
	,minW: null
	,maxW: null
	,customW: null
	,current: null
	,incColumns: function() {
		if(this.customW < this.w) {
			this.customW = this.w;
		}
		this.customW++;
	}
	,decColumns: function() {
		this.customW--;
		if(this.customW < 0) {
			this.customW = 0;
		}
	}
	,onDown: function(p) {
		var result = false;
		var x = p.x;
		var y = p.y;
		if(x < this.x || x >= this.x + this.w * this.get_tileSize() || y < this.y || y >= this.y + this.h * this.get_tileSize() ? false : true) {
			this.setTile(p);
			result = true;
		}
		return result;
	}
	,setTile: function(p) {
		var pos = this.countTilePos(((p.y - this.y) / this.get_tileSize() | 0) * this.w + ((p.x - this.x) / this.get_tileSize() | 0));
		if(pos.layer == this.editor.tilemap.tileset.tilesLengths.length) {
			return;
		}
		if(pos.tile != 0) {
			this.editor.layer = pos.layer;
		}
		var _this = this.editor;
		_this.tiles[_this.layer] = pos.tile;
	}
	,countTilePos: function(tile) {
		var layer = 0;
		var _g = 0;
		var _g1 = this.editor.tilemap.tileset.tilesLengths;
		while(_g < _g1.length) {
			var len = _g1[_g];
			++_g;
			if(tile > len) {
				tile -= len;
				++layer;
			} else {
				break;
			}
		}
		return { tile : tile, layer : layer};
	}
	,onMove: function(p) {
		var result = false;
		var x = p.x;
		var y = p.y;
		if(x < this.x || x >= this.x + this.w * this.get_tileSize() || y < this.y || y >= this.y + this.h * this.get_tileSize() ? false : true) {
			this.opacity = 1;
			result = true;
		} else {
			this.opacity = 0.5;
		}
		return result;
	}
	,onUp: function(p) {
		var result = false;
		var x = p.x;
		var y = p.y;
		if(x < this.x || x >= this.x + this.w * this.get_tileSize() || y < this.y || y >= this.y + this.h * this.get_tileSize() ? false : true) {
			result = true;
		}
		return result;
	}
	,resize: function() {
		this.update();
	}
	,update: function() {
		var tilesLengths = this.editor.tilemap.tileset.tilesLengths;
		var _this = this.editor;
		var id = _this.tiles[_this.layer];
		var _g = 0;
		var _g1 = this.editor.layer;
		while(_g < _g1) id += tilesLengths[_g++];
		this.current = id;
		var tiles = 1;
		var _g2 = 0;
		var _g11 = this.editor.tilemap.tileset.tilesLengths;
		while(_g2 < _g11.length) tiles += _g11[_g2++];
		this.w = this.minW;
		if(this.customW > 0) {
			this.w = this.customW;
		}
		var _g21 = 0;
		var _g3 = this.maxW - this.w;
		while(_g21 < _g3) {
			++_g21;
			this.h = Math.ceil(tiles / this.w);
			if(this.y + this.h * this.get_tileSize() > khm_Screen.h) {
				this.w++;
			}
		}
		this.h = Math.ceil(tiles / this.w);
		this.x = khm_Screen.w - this.get_tileSize() * this.w;
	}
	,render: function(g) {
		g.set_opacity(this.opacity);
		this.drawBg(g,this.x,this.y,this.w,this.h);
		this.drawGrid(g,this.x,this.y,this.w,this.h);
		this.drawTiles(g,this.x,this.y,this.w,this.h);
		this.drawSelection(g,this.x,this.y,this.w,this.h);
		g.set_opacity(1);
	}
	,drawBg: function(g,x,y,w,h) {
		g.set_color(-1442840576);
		g.fillRect(x - 0.5,y - 0.5,w * this.get_tileSize() + 1,h * this.get_tileSize() + 1);
	}
	,drawTiles: function(g,x,y,w,h) {
		var tilesLengths = this.editor.tilemap.tileset.tilesLengths;
		var offX = this.get_tileSize();
		var tx = 0;
		var ty = 0;
		g.set_color(-1);
		var _g = 0;
		var _g1 = tilesLengths.length;
		while(_g < _g1) {
			var l = _g++;
			var _g2 = 1;
			var _g11 = tilesLengths[l] + 1;
			while(_g2 < _g11) {
				tx = offX % (w * this.get_tileSize());
				ty = (offX / (w * this.get_tileSize()) | 0) * this.get_tileSize();
				this.editor.drawTile(g,l,x + tx,y + ty,_g2++);
				offX += this.get_tileSize();
			}
		}
	}
	,drawGrid: function(g,x,y,w,h) {
		var offX = 0;
		var ix = 0;
		var iy = 0;
		g.set_color(1342177280);
		var _g = 0;
		var _g1 = w * h;
		while(_g < _g1) {
			++_g;
			g.drawRect(x + ix,y + iy,this.get_tileSize(),this.get_tileSize());
			offX += this.get_tileSize();
			ix = offX % (w * this.get_tileSize());
			iy = (offX / (w * this.get_tileSize()) | 0) * this.get_tileSize();
		}
		g.drawLine(x,y,x,y + iy);
	}
	,drawSelection: function(g,x,y,w,h) {
		var _this = this.editor;
		var offX = _this.tiles[_this.layer] == 0 ? 0 : this.current * this.get_tileSize();
		var ix = offX % (w * this.get_tileSize());
		var iy = (offX / (w * this.get_tileSize()) | 0) * this.get_tileSize();
		g.set_color(-1426063361);
		g.drawRect(x + ix,y + iy,this.get_tileSize(),this.get_tileSize());
	}
	,__class__: khm_editor_TilePanel
};
var khm_editor_ui_Modal = function() { };
$hxClasses["khm.editor.ui.Modal"] = khm_editor_ui_Modal;
khm_editor_ui_Modal.__name__ = "khm.editor.ui.Modal";
khm_editor_ui_Modal.prompt = function(name,data,callback) {
	var modal = window.document.createElement("div");
	var form = window.document.createElement("textarea");
	var style = window.document.createElement("style");
	var onCancel = function(e) {
		window.document.body.removeChild(modal);
		window.document.body.removeChild(style);
		e.stopPropagation();
		window.document.querySelector("canvas").focus();
		callback(null);
	};
	var onSave = function(e1) {
		window.document.body.removeChild(modal);
		window.document.body.removeChild(style);
		e1.stopPropagation();
		window.document.querySelector("canvas").focus();
		callback(form.value);
	};
	modal.className = "modal";
	modal.onclick = onCancel;
	var content = window.document.createElement("div");
	content.className = "modal-content";
	content.onclick = function(e2) {
		e2.stopPropagation();
	};
	var title = window.document.createElement("div");
	title.textContent = name;
	form.style.width = "100%";
	form.rows = 15;
	form.value = data;
	var cancel = window.document.createElement("button");
	cancel.innerHTML = "Cancel";
	cancel.onclick = onCancel;
	var save = window.document.createElement("button");
	save.innerHTML = "Save";
	save.onclick = onSave;
	content.appendChild(title);
	content.appendChild(form);
	content.appendChild(window.document.createElement("br"));
	content.appendChild(cancel);
	content.appendChild(save);
	modal.appendChild(content);
	window.document.body.appendChild(modal);
	style.innerHTML = "\n\t\t.modal {\n\t\t\tposition: absolute;\n\t\t\tz-index: 1;\n\t\t\tpadding-top: 100px;\n\t\t\tleft: 0;\n\t\t\ttop: 0;\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t\toverflow: auto;\n\t\t\tbackground-color: rgb(0, 0, 0);\n\t\t\tbackground-color: rgba(0, 0, 0, 0.4);\n\t\t}\n\n\t\t.modal-content {\n\t\t\tbackground-color: #fefefe;\n\t\t\tmargin: auto;\n\t\t\tpadding: 20px;\n\t\t\tborder: 1px solid #888;\n\t\t\twidth: 80%;\n\t\t}";
	window.document.body.appendChild(style);
};
var khm_imgui_Frame = function() {
	this.arr = [];
};
$hxClasses["khm.imgui.Frame"] = khm_imgui_Frame;
khm_imgui_Frame.__name__ = "khm.imgui.Frame";
khm_imgui_Frame.prototype = {
	arr: null
	,__class__: khm_imgui_Frame
};
var khm_imgui_ImguiSets = function(autoNotifyInput,redrawOnEvents,debug) {
	this.debug = false;
	this.redrawOnEvents = false;
	this.autoNotifyInput = true;
	if(autoNotifyInput != null) {
		this.autoNotifyInput = autoNotifyInput;
	}
	if(redrawOnEvents != null) {
		this.redrawOnEvents = redrawOnEvents;
	}
	if(debug != null) {
		this.debug = debug;
	}
};
$hxClasses["khm.imgui.ImguiSets"] = khm_imgui_ImguiSets;
khm_imgui_ImguiSets.__name__ = "khm.imgui.ImguiSets";
khm_imgui_ImguiSets.prototype = {
	autoNotifyInput: null
	,redrawOnEvents: null
	,debug: null
	,__class__: khm_imgui_ImguiSets
};
var khm_imgui_Imgui = function(sets) {
	this.blockKeyPress = false;
	this.id = 0;
	this.scissorEnabled = false;
	this.scissorRect = new khm_imgui_WidgetRect(0,0,0,0,0);
	this.callbacks = [];
	this.frame = new khm_imgui_Frame();
	this.lastFrame = new khm_imgui_Frame();
	this.keys = new haxe_ds_IntMap();
	this.hasBlockedKeys = false;
	this.blockedKeys = new haxe_ds_IntMap();
	var _g = [];
	_g.push(false);
	_g.push(false);
	_g.push(false);
	_g.push(false);
	_g.push(false);
	_g.push(false);
	_g.push(false);
	_g.push(false);
	_g.push(false);
	_g.push(false);
	this.pointersUp = _g;
	var _g1 = [];
	_g1.push(false);
	_g1.push(false);
	_g1.push(false);
	_g1.push(false);
	_g1.push(false);
	_g1.push(false);
	_g1.push(false);
	_g1.push(false);
	_g1.push(false);
	_g1.push(false);
	this.pointersDown = _g1;
	this.isCopyText = false;
	this.isCutText = false;
	this.textToCopy = "";
	this.textToPaste = "";
	this.keyboardFocus = false;
	this.keyChar = "";
	this.mouseWheel = 0;
	this.focusId = 0;
	var _g2 = [];
	_g2.push(0);
	_g2.push(0);
	_g2.push(0);
	_g2.push(0);
	_g2.push(0);
	_g2.push(0);
	_g2.push(0);
	_g2.push(0);
	_g2.push(0);
	_g2.push(0);
	this.widgetGroups = _g2;
	var _g3 = [];
	_g3.push(0);
	_g3.push(0);
	_g3.push(0);
	_g3.push(0);
	_g3.push(0);
	_g3.push(0);
	_g3.push(0);
	_g3.push(0);
	_g3.push(0);
	_g3.push(0);
	this.activeIds = _g3;
	var _g4 = [];
	_g4.push(0);
	_g4.push(0);
	_g4.push(0);
	_g4.push(0);
	_g4.push(0);
	_g4.push(0);
	_g4.push(0);
	_g4.push(0);
	_g4.push(0);
	_g4.push(0);
	this.lastHoverIds = _g4;
	var _g5 = [];
	_g5.push(0);
	_g5.push(0);
	_g5.push(0);
	_g5.push(0);
	_g5.push(0);
	_g5.push(0);
	_g5.push(0);
	_g5.push(0);
	_g5.push(0);
	_g5.push(0);
	this.hoverIds = _g5;
	this.pointers = [];
	this.autoNotifyInput = sets.autoNotifyInput;
	this.redrawOnEvents = sets.redrawOnEvents;
	this.debug = sets.debug;
	if(this.autoNotifyInput) {
		this.initAutoNotifyInput();
	}
	this.pointers.push(new khm_Pointer(0));
	this.pointers.push(new khm_Pointer(1));
	this.pointers.push(new khm_Pointer(2));
	this.pointers.push(new khm_Pointer(3));
	this.pointers.push(new khm_Pointer(4));
	this.pointers.push(new khm_Pointer(5));
	this.pointers.push(new khm_Pointer(6));
	this.pointers.push(new khm_Pointer(7));
	this.pointers.push(new khm_Pointer(8));
	this.pointers.push(new khm_Pointer(9));
	this.initClipboardListeners();
};
$hxClasses["khm.imgui.Imgui"] = khm_imgui_Imgui;
khm_imgui_Imgui.__name__ = "khm.imgui.Imgui";
khm_imgui_Imgui.prototype = {
	pointers: null
	,hoverIds: null
	,lastHoverIds: null
	,activeIds: null
	,widgetGroups: null
	,focusId: null
	,mouseWheel: null
	,keyChar: null
	,keyboardFocus: null
	,g: null
	,textToPaste: null
	,textToCopy: null
	,isCutText: null
	,isCopyText: null
	,autoNotifyInput: null
	,redrawOnEvents: null
	,debug: null
	,pointersDown: null
	,pointersUp: null
	,blockedKeys: null
	,hasBlockedKeys: null
	,keys: null
	,lastFrame: null
	,frame: null
	,callbacks: null
	,scissorRect: null
	,scissorEnabled: null
	,id: null
	,blockKeyPress: null
	,initAutoNotifyInput: function() {
		if(kha_input_Mouse.get() != null) {
			kha_input_Mouse.get().notify($bind(this,this.onMouseDown),$bind(this,this.onMouseUp),$bind(this,this.onMouseMove),$bind(this,this.onMouseWheel));
		}
		if(kha_input_Keyboard.get() != null) {
			kha_input_Keyboard.get().notify($bind(this,this.onKeyDown),$bind(this,this.onKeyUp),$bind(this,this.onKeyPress));
		}
	}
	,initClipboardListeners: function() {
		kha_System.notifyOnCutCopyPaste($bind(this,this.onCut),$bind(this,this.onCopy),$bind(this,this.onPaste));
	}
	,onPointerDown: function(p) {
		p.toGlobalCords(p.scale);
		if(this.pointers[p.id] != p) {
			this.pointers[p.id] = p;
		}
		this.keyboardFocus = false;
		this.pointersDown[p.id] = true;
		if(this.redrawOnEvents) {
			if(p.isTouch) {
				var arr = this.lastFrame.arr;
				var _g_i = 0;
				while(_g_i < arr.length) {
					var id = arr[_g_i];
					var x = arr[_g_i + 1];
					var y = arr[_g_i + 2];
					var w = arr[_g_i + 3];
					var h = arr[_g_i + 4];
					var group = arr[_g_i + 5];
					if(group == null) {
						group = 0;
					}
					var rect_group = group;
					_g_i += 6;
					var p1 = this.isInside(id,x,y,w,h);
					if(p1 != null) {
						if(!this.isWidgetGroupExists(rect_group)) {
							var id1 = p1.id;
							this.widgetGroups[id1] = rect_group;
							this.hoverIds[id1] = id;
							if(this.activeIds[id1] == 0 && this.pointersDown[id1]) {
								this.activeIds[id1] = id;
							}
						}
					}
					if(this.activeIds[p.id] != 0) {
						break;
					}
				}
			} else {
				this.activeIds[p.id] = this.hoverIds[p.id];
			}
		}
		var isBlocked = this.isPointerBlocked(p.id,p.x,p.y);
		p.toLocalCords(p.scale);
		return isBlocked;
	}
	,onPointerMove: function(p) {
		p.toGlobalCords(p.scale);
		if(this.pointers[p.id] != p) {
			this.pointers[p.id] = p;
		}
		var isBlocked = this.isPointerBlocked(p.id,p.x,p.y);
		p.toLocalCords(p.scale);
		return isBlocked;
	}
	,onPointerUp: function(p) {
		p.toGlobalCords(p.scale);
		if(this.pointers[p.id] != p) {
			this.pointers[p.id] = p;
		}
		this.pointersUp[p.id] = true;
		if(this.redrawOnEvents) {
			this.pointersDown[p.id] = false;
			this.pointersUp[p.id] = false;
		}
		var isBlocked = this.isPointerBlocked(p.id,p.x,p.y);
		p.toLocalCords(p.scale);
		return isBlocked;
	}
	,isPointerBlocked: function(id,x,y) {
		if(this.hoverIds[id] > 0) {
			return true;
		}
		var arr = this.lastFrame.arr;
		var _g_i = 0;
		while(_g_i < arr.length) {
			var x1 = arr[_g_i + 1];
			var y1 = arr[_g_i + 2];
			var w = arr[_g_i + 3];
			var h = arr[_g_i + 4];
			var group = arr[_g_i + 5];
			if(group == null) {
				group = 0;
			}
			_g_i += 6;
			if(x >= x1 && y >= y1 && x < x1 + w && y < y1 + h) {
				return true;
			}
		}
		return false;
	}
	,onCut: function() {
		this.isCutText = true;
		if(this.textToCopy == "") {
			return null;
		}
		return this.textToCopy;
	}
	,onCopy: function() {
		this.isCopyText = true;
		if(this.textToCopy == "") {
			return null;
		}
		return this.textToCopy;
	}
	,onPaste: function(s) {
		this.textToPaste = s;
	}
	,onMouseDown: function(button,x,y) {
		this.pointers[0].startX = x;
		this.pointers[0].startY = y;
		this.pointers[0].x = x;
		this.pointers[0].y = y;
		this.pointers[0].type = button;
		this.pointers[0].isDown = true;
		this.pointers[0].isActive = true;
		this.pointers[0].isTouch = false;
		return this.onPointerDown(this.pointers[0]);
	}
	,onMouseMove: function(x,y,mx,my) {
		this.pointers[0].x = x;
		this.pointers[0].y = y;
		this.pointers[0].moveX = mx;
		this.pointers[0].moveY = my;
		this.pointers[0].isActive = true;
		return this.onPointerMove(this.pointers[0]);
	}
	,onMouseUp: function(button,x,y) {
		if(!this.pointers[0].isActive) {
			return false;
		}
		this.pointers[0].x = x;
		this.pointers[0].y = y;
		this.pointers[0].type = button;
		this.pointers[0].isDown = false;
		return this.onPointerUp(this.pointers[0]);
	}
	,onMouseWheel: function(delta) {
		var p = this.pointers[0];
		this.mouseWheel = delta;
		p.toGlobalCords(p.scale);
		var isBlocked = this.isPointerBlocked(0,p.x,p.y);
		p.toLocalCords(p.scale);
		return isBlocked;
	}
	,onKeyDown: function(key) {
		if(this.somethingActive()) {
			return true;
		}
		this.keyboardFocus = true;
		var _g = this.blockedKeys.h[key];
		var hasBlock = _g == null ? false : _g;
		if(hasBlock) {
			this.blockKeyPress = true;
			this.keys.h[key] = true;
		}
		return hasBlock;
	}
	,onKeyUp: function(key) {
		if(this.somethingActive()) {
			return true;
		}
		this.keyboardFocus = true;
		var _g = this.blockedKeys.h[key];
		var hasBlock = _g == null ? false : _g;
		if(hasBlock) {
			this.keys.h[key] = false;
		}
		return hasBlock;
	}
	,onKeyPress: function(char) {
		this.keyChar = char;
		return this.focusId > 0;
	}
	,begin: function(g) {
		this.g = g;
		if(!this.keyboardFocus) {
			this.focusId = 0;
		}
		var _g = 0;
		var _g1 = this.hoverIds.length;
		while(_g < _g1) {
			var i = _g++;
			this.lastHoverIds[i] = this.hoverIds[i];
			this.hoverIds[i] = 0;
			this.widgetGroups[i] = 0;
		}
		if(this.hasBlockedKeys) {
			var i1 = this.blockedKeys.keys();
			while(i1.hasNext()) {
				var i2 = i1.next();
				this.blockedKeys.h[i2] = false;
			}
			this.hasBlockedKeys = false;
		}
		if(this.blockKeyPress) {
			this.keyChar = "";
		}
		this.blockKeyPress = false;
		this.id = 0;
	}
	,end: function() {
		var _g = 0;
		var _g1 = this.pointers;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			if(!this.pointersDown[p.id]) {
				this.activeIds[p.id] = 0;
			} else if(this.activeIds[p.id] == 0) {
				this.activeIds[p.id] = -1;
			}
			if(this.pointersUp[p.id]) {
				this.pointersDown[p.id] = false;
				this.pointersUp[p.id] = false;
			}
		}
		this.mouseWheel = 0;
		this.keyChar = "";
		this.textToPaste = "";
		this.isCutText = false;
		this.isCopyText = false;
		var _this = this.lastFrame;
		var frame = this.frame;
		_this.arr.length = frame.arr.length;
		var _g2 = 0;
		var _g11 = frame.arr.length;
		while(_g2 < _g11) {
			var i = _g2++;
			_this.arr[i] = frame.arr[i];
		}
		this.frame.arr.length = 0;
		if(!this.debug) {
			return;
		}
		var temp__00 = 1;
		var temp__10 = 0;
		var temp__20 = 0;
		var temp__01 = 0;
		var temp__11 = 1;
		var temp__21 = 0;
		var temp__02 = 0;
		var temp__12 = 0;
		var temp__22 = 1;
		var _this1 = this.g;
		var m = _this1.transformations[_this1.transformationIndex];
		temp__00 = m._00;
		temp__10 = m._10;
		temp__20 = m._20;
		temp__01 = m._01;
		temp__11 = m._11;
		temp__21 = m._21;
		temp__02 = m._02;
		temp__12 = m._12;
		temp__22 = m._22;
		var _this2 = this.g;
		var _this3 = _this2.transformations[_this2.transformationIndex];
		_this3._00 = 1;
		_this3._10 = 0;
		_this3._20 = 0;
		_this3._01 = 0;
		_this3._11 = 1;
		_this3._21 = 0;
		_this3._02 = 0;
		_this3._12 = 0;
		_this3._22 = 1;
		var arr = this.lastFrame.arr;
		var _g2_i = 0;
		while(_g2_i < arr.length) {
			var x = arr[_g2_i + 1];
			var y = arr[_g2_i + 2];
			var w = arr[_g2_i + 3];
			var h = arr[_g2_i + 4];
			var group = arr[_g2_i + 5];
			if(group == null) {
				group = 0;
			}
			_g2_i += 6;
			this.g.set_color(-1996554240);
			this.g.drawRect(x + 0.5,y + 0.5,w - 1,h - 1);
		}
		var _g3 = 0;
		var _g4 = this.pointers;
		while(_g3 < _g4.length) {
			var p1 = _g4[_g3];
			++_g3;
			if(!p1.isActive) {
				continue;
			}
			p1.toGlobalCords(p1.scale);
			this.g.fillRect(p1.x,p1.y,3,3);
			p1.toLocalCords(p1.scale);
		}
		var _this4 = this.g;
		var _this5 = _this4.transformations[_this4.transformationIndex];
		_this5._00 = temp__00;
		_this5._10 = temp__10;
		_this5._20 = temp__20;
		_this5._01 = temp__01;
		_this5._11 = temp__11;
		_this5._21 = temp__21;
		_this5._02 = temp__02;
		_this5._12 = temp__12;
		_this5._22 = temp__22;
	}
	,addWidgetData: function(id,x,y,w,h,group) {
		if(this.scissorEnabled) {
			var s = this.scissorRect;
			var difX = s.x - x;
			var difY = s.y - y;
			if(difX > 0) {
				x += difX;
				w -= difX;
			}
			if(difY > 0) {
				y += difY;
				h -= difY;
			}
			var difX1 = w + x - s.w - s.x;
			var difY1 = h + y - s.h - s.y;
			if(difX1 > 0) {
				w -= difX1;
			}
			if(difY1 > 0) {
				h -= difY1;
			}
			if(w < 0) {
				w = 0;
			}
			if(h < 0) {
				h = 0;
			}
		}
		var _this = this.g;
		var scaleX = _this.transformations[_this.transformationIndex]._00;
		var _this1 = this.g;
		var scaleY = _this1.transformations[_this1.transformationIndex]._11;
		x = x * scaleX | 0;
		y = y * scaleY | 0;
		w = w * scaleX | 0;
		h = h * scaleY | 0;
		var group1 = group;
		if(group == null) {
			group1 = 0;
		}
		var _this2 = this.frame;
		_this2.arr.push(id);
		_this2.arr.push(x);
		_this2.arr.push(y);
		_this2.arr.push(w);
		_this2.arr.push(h);
		_this2.arr.push(group1);
	}
	,isWidgetGroupExists: function(group) {
		if(group != 0) {
			var _g = 0;
			var _g1 = this.widgetGroups.length;
			while(_g < _g1) if(this.widgetGroups[_g++] == group) {
				return true;
			}
		}
		return false;
	}
	,isInside: function(id,x,y,w,h) {
		var _g = 0;
		var _g1 = this.pointers;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			if(!this.pointersDown[p.id] && !p.isActive) {
				continue;
			}
			p.toGlobalCords(p.scale);
			if(p.x < x || p.y < y || p.x >= x + w || p.y >= y + h) {
				p.toLocalCords(p.scale);
				continue;
			}
			var arr = this.lastFrame.arr;
			var _g_i = 0;
			while(_g_i < arr.length) {
				var id1 = arr[_g_i];
				var x1 = arr[_g_i + 1];
				var y1 = arr[_g_i + 2];
				var w1 = arr[_g_i + 3];
				var h1 = arr[_g_i + 4];
				var group = arr[_g_i + 5];
				if(group == null) {
					group = 0;
				}
				_g_i += 6;
				if(id1 <= id) {
					continue;
				}
				if(p.x >= x1 && p.y >= y1 && p.x < x1 + w1 && p.y < y1 + h1) {
					p.toLocalCords(p.scale);
					return null;
				}
			}
			p.toLocalCords(p.scale);
			return p;
		}
		return null;
	}
	,isHovered: function(id) {
		var _g = 0;
		var _g1 = this.hoverIds;
		while(_g < _g1.length) if(_g1[_g++] == id) {
			return true;
		}
		return false;
	}
	,isActive: function(id) {
		var _g = 0;
		var _g1 = this.activeIds.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.activeIds[i] == id && (this.hoverIds[i] == id || this.focusId == id)) {
				return true;
			}
		}
		return false;
	}
	,somethingActive: function() {
		var _g = 0;
		var _g1 = this.activeIds;
		while(_g < _g1.length) if(_g1[_g++] > 0) {
			return true;
		}
		return false;
	}
	,isWidgetClicked: function(id) {
		var _g = 0;
		var _g1 = this.pointers;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			if(this.activeIds[p.id] != id) {
				continue;
			}
			if(this.pointersDown[p.id]) {
				continue;
			}
			if(!p.isTouch) {
				if(this.hoverIds[p.id] != id && this.focusId != id) {
					continue;
				}
			} else if(this.lastHoverIds[p.id] != id) {
				continue;
			}
			return true;
		}
		return false;
	}
	,addCallback: function(fn) {
		this.callbacks.push(fn);
	}
	,executeCallbacks: function() {
		if(this.callbacks.length == 0) {
			return;
		}
		var fns = this.callbacks.slice();
		this.callbacks.length = 0;
		var _g = 0;
		while(_g < fns.length) fns[_g++]();
	}
	,__class__: khm_imgui_Imgui
};
var khm_imgui_WidgetRect = function(id,x,y,w,h,group) {
	if(group == null) {
		group = 0;
	}
	this.id = id;
	this.x = x;
	this.y = y;
	this.w = w;
	this.h = h;
	this.group = group;
};
$hxClasses["khm.imgui.WidgetRect"] = khm_imgui_WidgetRect;
khm_imgui_WidgetRect.__name__ = "khm.imgui.WidgetRect";
khm_imgui_WidgetRect.prototype = {
	id: null
	,x: null
	,y: null
	,w: null
	,h: null
	,group: null
	,__class__: khm_imgui_WidgetRect
};
var khm_imgui_WidgetState = $hxEnums["khm.imgui.WidgetState"] = { __ename__ : "khm.imgui.WidgetState", __constructs__ : ["Idle","Hover","Focus","Active"]
	,Idle: {_hx_index:0,__enum__:"khm.imgui.WidgetState",toString:$estr}
	,Hover: {_hx_index:1,__enum__:"khm.imgui.WidgetState",toString:$estr}
	,Focus: {_hx_index:2,__enum__:"khm.imgui.WidgetState",toString:$estr}
	,Active: {_hx_index:3,__enum__:"khm.imgui.WidgetState",toString:$estr}
};
var khm_imgui_Widgets = function() { };
$hxClasses["khm.imgui.Widgets"] = khm_imgui_Widgets;
khm_imgui_Widgets.__name__ = "khm.imgui.Widgets";
khm_imgui_Widgets.setColors = function(ui,bg,hover,active,focus,text) {
	khm_imgui_Widgets.bgColor = bg;
	khm_imgui_Widgets.hoverColor = hover;
	khm_imgui_Widgets.activeColor = active;
	khm_imgui_Widgets.focusColor = focus;
	khm_imgui_Widgets.textColor = text;
};
khm_imgui_Widgets.imageButton = function(ui,x,y,img) {
	var g = ui.g;
	var id = ++ui.id;
	var w = khm_imgui_Widgets.buttonW;
	var h = khm_imgui_Widgets.buttonH;
	var rect_id = id;
	var rect_x = x;
	var rect_y = y;
	var rect_w = w;
	var rect_h = h;
	var rect_group = 0;
	ui.addWidgetData(id,x,y,w,h,0);
	var _this = ui.frame;
	var i = (ui.frame.arr.length / 6 | 0) - 1;
	i *= 6;
	var group = _this.arr[i + 5];
	if(group == null) {
		group = 0;
	}
	rect_id = _this.arr[i];
	rect_x = _this.arr[i + 1];
	rect_y = _this.arr[i + 2];
	rect_w = _this.arr[i + 3];
	rect_h = _this.arr[i + 4];
	rect_group = group;
	var p = ui.isInside(rect_id,rect_x,rect_y,rect_w,rect_h);
	if(p != null) {
		if(!ui.isWidgetGroupExists(rect_group)) {
			var id1 = p.id;
			ui.widgetGroups[id1] = rect_group;
			ui.hoverIds[id1] = rect_id;
			if(ui.activeIds[id1] == 0 && ui.pointersDown[id1]) {
				ui.activeIds[id1] = rect_id;
			}
		}
	}
	if(ui.focusId == id) {
		g.set_color(khm_imgui_Widgets.focusColor);
		g.drawRect(x - 1.,y - 1.,w + 2,h + 2,2);
	}
	var tmp;
	switch((ui.isActive(id) ? khm_imgui_WidgetState.Active : ui.focusId == id ? khm_imgui_WidgetState.Focus : ui.isHovered(id) ? khm_imgui_WidgetState.Hover : khm_imgui_WidgetState.Idle)._hx_index) {
	case 0:
		tmp = khm_imgui_Widgets.bgColor;
		break;
	case 1:case 2:
		tmp = khm_imgui_Widgets.hoverColor;
		break;
	case 3:
		tmp = khm_imgui_Widgets.activeColor;
		break;
	}
	g.set_color(tmp);
	g.fillRect(x,y,w,h);
	g.set_color(-1);
	var imgW = img.get_width() > w ? w : img.get_width();
	var imgH = img.get_height() > h ? h : img.get_height();
	g.drawScaledImage(img,x + w / 2 - imgW / 2,y + h / 2 - imgH / 2,imgW,imgH);
	return ui.isWidgetClicked(id);
};
var khm_tilemap_Camera = function(scale) {
	this.latestShakeY = 0.0;
	this.latestShakeX = 0.0;
	this.shakePower = 0.0;
	this.shakeMaxPower = 0.0;
	this.shakeTime = 0;
	this.shakeMaxTime = 0;
	this.h = 0.0;
	this.w = 0.0;
	this.y = 0.0;
	this.x = 0.0;
	this.smooth = false;
	this.scale = scale;
	this.set_w(kha_System.windowWidth() / scale | 0);
	this.set_h(kha_System.windowHeight() / scale | 0);
};
$hxClasses["khm.tilemap.Camera"] = khm_tilemap_Camera;
khm_tilemap_Camera.__name__ = "khm.tilemap.Camera";
khm_tilemap_Camera.prototype = {
	scale: null
	,smooth: null
	,x: null
	,get_x: function() {
		if(this.smooth) {
			return this.x;
		}
		return (this.x * this.scale | 0) / this.scale;
	}
	,set_x: function(n) {
		return this.x = n;
	}
	,y: null
	,get_y: function() {
		if(this.smooth) {
			return this.y;
		}
		return (this.y * this.scale | 0) / this.scale;
	}
	,set_y: function(n) {
		return this.y = n;
	}
	,w: null
	,get_w: function() {
		if(this.smooth) {
			return this.w;
		}
		return (this.w * this.scale | 0) / this.scale;
	}
	,set_w: function(n) {
		return this.w = n;
	}
	,h: null
	,get_h: function() {
		if(this.smooth) {
			return this.h;
		}
		return (this.h * this.scale | 0) / this.scale;
	}
	,set_h: function(n) {
		return this.h = n;
	}
	,shakeMaxTime: null
	,shakeTime: null
	,shakeMaxPower: null
	,shakePower: null
	,center: function(tilemap,rect) {
		var centerX = this.get_w() / 2 - rect.x - rect.w / 2;
		var centerY = this.get_h() / 2 - rect.y - rect.h / 2;
		var pw = tilemap.map.w * tilemap.tileset.tileSize;
		var ph = tilemap.map.h * tilemap.tileset.tileSize;
		if(pw < this.get_w()) {
			this.set_x(this.get_w() / 2 - pw / 2);
		} else if(this.get_x() != centerX) {
			this.set_x(centerX);
			if(this.get_x() > 0) {
				this.set_x(0);
			}
			if(this.get_x() < this.get_w() - pw) {
				this.set_x(this.get_w() - pw);
			}
		}
		if(ph < this.get_h()) {
			this.set_y(this.get_h() / 2 - ph / 2);
		} else if(this.get_y() != centerY) {
			this.set_y(centerY);
			if(this.get_y() > 0) {
				this.set_y(0);
			}
			if(this.get_y() < this.get_h() - ph) {
				this.set_y(this.get_h() - ph);
			}
		}
		this.update();
	}
	,strictCenter: function(rect) {
		this.set_x(this.get_w() / 2 - rect.x - rect.w / 2);
		this.set_y(this.get_h() / 2 - rect.y - rect.h / 2);
		this.update();
	}
	,update: function() {
		if(this.shakeTime > 0) {
			this.shaking();
		}
	}
	,shake: function(power,time) {
		this.shakeTime = this.shakeMaxTime = time;
		this.shakeMaxPower = power;
		this.shakePower = 0;
	}
	,latestShakeX: null
	,latestShakeY: null
	,shaking: function() {
		var ratio = this.shakeTime / this.shakeMaxTime;
		if(ratio > 0.5) {
			ratio = 1 - ratio;
		}
		this.shakePower = this.shakeMaxPower * ratio;
		var _g = this;
		_g.set_x(_g.get_x() - this.latestShakeX);
		var _g1 = this;
		_g1.set_y(_g1.get_y() - this.latestShakeY);
		this.latestShakeX = Math.random() * this.shakePower * 2 - Math.random() * this.shakePower;
		this.latestShakeY = Math.random() * this.shakePower * 2 - Math.random() * this.shakePower;
		var _g2 = this;
		_g2.set_x(_g2.get_x() + this.latestShakeX);
		var _g3 = this;
		_g3.set_y(_g3.get_y() + this.latestShakeY);
		this.shakeTime--;
	}
	,__class__: khm_tilemap_Camera
};
var khm_tilemap_Tile = function(tilemap,layer,id,props) {
	this.tilemap = tilemap;
	this._layer = layer;
	this._id = id;
	this.frame = 0;
	if(props != null) {
		this.props = props;
	} else {
		this.props = this.tilemap.tileset.props[layer][id];
	}
};
$hxClasses["khm.tilemap.Tile"] = khm_tilemap_Tile;
khm_tilemap_Tile.__name__ = "khm.tilemap.Tile";
khm_tilemap_Tile.prototype = {
	_layer: null
	,_id: null
	,frame: null
	,props: null
	,tilemap: null
	,setFrame: function(frame) {
		this.frame = frame;
		var tileset = this.tilemap.tileset;
		var frameId = tileset.tilesLengths[this._layer];
		frameId += tileset.sprites[this._layer][this._id].firstFrame + frame;
		this.props = tileset.props[this._layer][frameId];
	}
	,copy: function() {
		if(this.props == null) {
			return new khm_tilemap_Tile(this.tilemap,this._layer,this._id);
		}
		var newProps = Reflect.copy(this.props);
		return new khm_tilemap_Tile(this.tilemap,this._layer,this._id,newProps);
	}
	,__class__: khm_tilemap_Tile
};
var khm_tilemap_Tilemap = function(tileset) {
	this.emptyTiles = [];
	this.scale = 1.0;
	this.camera = new khm_tilemap_Camera(1.0);
	this.tileset = tileset;
	this.emptyTiles.length = 0;
	var _g = 0;
	var _g1 = tileset.layersLength;
	while(_g < _g1) this.emptyTiles.push(new khm_tilemap_Tile(this,_g++,0));
};
$hxClasses["khm.tilemap.Tilemap"] = khm_tilemap_Tilemap;
khm_tilemap_Tilemap.__name__ = "khm.tilemap.Tilemap";
khm_tilemap_Tilemap.prototype = {
	map: null
	,camera: null
	,scale: null
	,set_scale: function(scale) {
		this.camera.scale = scale;
		return this.scale = scale;
	}
	,tileset: null
	,emptyTiles: null
	,loadMap: function(map) {
		this.map = this.copyMap(map);
	}
	,loadJSON: function(map) {
		this.map = this.fromJSON(map);
		var _g = [];
		var _g1 = 0;
		var _g2 = map.objects;
		while(_g1 < _g2.length) _g.push(this.copyGameObject(_g2[_g1++]));
		var _g3 = [];
		var _g4 = 0;
		var _g5 = map.floatObjects;
		while(_g4 < _g5.length) _g3.push(this.copyFloatObject(_g5[_g4++]));
		this.map.objects = _g;
		this.map.floatObjects = _g3;
	}
	,copyGameObject: function(obj) {
		var data = obj.data == null ? null : Reflect.copy(obj.data);
		return { type : obj.type, layer : obj.layer, x : obj.x, y : obj.y, data : data};
	}
	,copyFloatObject: function(obj) {
		var data = obj.data == null ? null : Reflect.copy(obj.data);
		return { type : obj.type, rect : obj.rect, data : data};
	}
	,fromJSON: function(map) {
		var _g = [];
		var _g1 = 0;
		var _g2 = map.layers.length;
		while(_g1 < _g2) {
			var l = _g1++;
			var _g11 = [];
			var _g21 = 0;
			var _g3 = map.layers[l].length;
			while(_g21 < _g3) {
				var iy = _g21++;
				var _g22 = [];
				var _g31 = 0;
				var _g4 = map.layers[l][iy].length;
				while(_g31 < _g4) _g22.push(new khm_tilemap_Tile(this,l,map.layers[l][iy][_g31++]));
				_g11.push(_g22);
			}
			_g.push(_g11);
		}
		return { name : map.name, w : map.w, h : map.h, layers : _g, objects : map.objects, floatObjects : map.floatObjects};
	}
	,toJSON: function(map) {
		var _g = [];
		var _g1 = 0;
		var _g2 = map.layers.length;
		while(_g1 < _g2) {
			var l = _g1++;
			var _g11 = [];
			var _g21 = 0;
			var _g3 = map.layers[l].length;
			while(_g21 < _g3) {
				var iy = _g21++;
				var _g22 = [];
				var _g31 = 0;
				var _g4 = map.layers[l][iy].length;
				while(_g31 < _g4) _g22.push(map.layers[l][iy][_g31++]._id);
				_g11.push(_g22);
			}
			_g.push(_g11);
		}
		return { name : map.name, w : map.w, h : map.h, layers : _g, objects : map.objects, floatObjects : map.floatObjects};
	}
	,copyMap: function(map) {
		var _g = [];
		var _g1 = 0;
		var _g2 = map.layers;
		while(_g1 < _g2.length) {
			var l = _g2[_g1];
			++_g1;
			var _g11 = [];
			var _g21 = 0;
			var _g3 = l.length;
			while(_g21 < _g3) {
				var iy = _g21++;
				var _g22 = [];
				var _g31 = 0;
				var _g4 = l[iy].length;
				while(_g31 < _g4) _g22.push(l[iy][_g31++].copy());
				_g11.push(_g22);
			}
			_g.push(_g11);
		}
		var _g32 = [];
		var _g41 = 0;
		var _g5 = map.objects;
		while(_g41 < _g5.length) _g32.push(this.copyGameObject(_g5[_g41++]));
		var _g6 = [];
		var _g7 = 0;
		var _g8 = map.floatObjects;
		while(_g7 < _g8.length) _g6.push(this.copyFloatObject(_g8[_g7++]));
		return { name : map.name, w : map.w, h : map.h, layers : _g, objects : _g32, floatObjects : _g6};
	}
	,getTile: function(layer,x,y) {
		if(!(x > -1 && y > -1 && x < this.map.w && y < this.map.h)) {
			return this.emptyTiles[layer];
		}
		return this.map.layers[layer][y][x];
	}
	,setTileId: function(layer,x,y,id) {
		if(!(x > -1 && y > -1 && x < this.map.w && y < this.map.h)) {
			return;
		}
		var _this = this.map.layers[layer][y][x];
		_this._id = id;
		_this.frame = 0;
		_this.props = _this.tilemap.tileset.props[_this._layer][id];
	}
	,drawLayer: function(g,l) {
		var ctx = -(this.camera.get_x() / this.tileset.tileSize | 0);
		var cty = -(this.camera.get_y() / this.tileset.tileSize | 0);
		var ctw = ctx + (Math.ceil(this.camera.get_w() / this.tileset.tileSize) + 1);
		var cth = cty + (Math.ceil(this.camera.get_h() / this.tileset.tileSize) + 1);
		var camX = this.camera.get_x();
		var camY = this.camera.get_y();
		var sx = ctx < 0 ? 0 : ctx;
		var ex = ctw > this.map.w ? this.map.w : ctw;
		var ey = cth > this.map.h ? this.map.h : cth;
		g.set_color(-1);
		var _g = cty < 0 ? 0 : cty;
		var _g1 = ey;
		while(_g < _g1) {
			var iy = _g++;
			var _g2 = sx;
			var _g11 = ex;
			while(_g2 < _g11) {
				var ix = _g2++;
				var tile = this.map.layers[l][iy][ix];
				var id = tile._id;
				if(id > 0) {
					var layer = tile._layer;
					if(tile.frame > 0) {
						id = this.tileset.layersOffsets[layer];
						id += this.tileset.tilesLengths[layer];
						id += this.tileset.sprites[layer][tile._id].firstFrame + tile.frame;
					} else {
						id += this.tileset.layersOffsets[layer];
					}
					g.drawSubImage(this.tileset.img,ix * this.tileset.tileSize + camX,iy * this.tileset.tileSize + camY,id % this.tileset.w * this.tileset.tileSize,(id / this.tileset.w | 0) * this.tileset.tileSize,this.tileset.tileSize,this.tileset.tileSize);
				}
			}
		}
	}
	,drawLayers: function(g) {
		var _g = 0;
		var _g1 = this.map.layers.length;
		while(_g < _g1) this.drawLayer(g,_g++);
	}
	,getObjects: function(layer,x,y) {
		var arr = [];
		var _g = 0;
		var _g1 = this.map.objects;
		while(_g < _g1.length) {
			var obj = _g1[_g];
			++_g;
			if(obj.x == x && obj.y == y && obj.layer == layer) {
				arr.push(obj);
			}
		}
		return arr;
	}
	,setObjects: function(layer,x,y,objs) {
		var oldObjs = this.getObjects(layer,x,y);
		var _g = 0;
		while(_g < oldObjs.length) HxOverrides.remove(this.map.objects,oldObjs[_g++]);
		var _g1 = 0;
		while(_g1 < objs.length) {
			var obj = objs[_g1];
			++_g1;
			if(obj != null) {
				if(obj.layer != layer) {
					obj.layer = layer;
				}
				if(obj.x != x) {
					obj.x = x;
				}
				if(obj.y != y) {
					obj.y = y;
				}
				this.map.objects.push(obj);
			}
		}
	}
	,objectTemplate: function(layer,tile) {
		return this.tileset.custom.objectTemplate(layer,tile);
	}
	,__class__: khm_tilemap_Tilemap
};
var khm_tilemap_Tileset = function(data,customizer) {
	this.custom = customizer == null ? new khm_tilemap_TsCustomizer() : customizer;
	var json = JSON.parse(data.toString());
	var ts = new khm_tilemap__$Tileset_TilesetGenerator().fromJSON(json,this.custom);
	this.tileSize = ts.tileSize;
	this.layersOffsets = ts.layersOffsets;
	this.tilesLengths = ts.tilesLengths;
	this.layersLength = ts.layersLength;
	this.sprites = ts.sprites;
	this.props = ts.props;
	this.img = ts.img;
	this.w = ts.w;
	this.h = ts.h;
};
$hxClasses["khm.tilemap.Tileset"] = khm_tilemap_Tileset;
khm_tilemap_Tileset.__name__ = "khm.tilemap.Tileset";
khm_tilemap_Tileset.prototype = {
	props: null
	,layersOffsets: null
	,tilesLengths: null
	,layersLength: null
	,sprites: null
	,img: null
	,w: null
	,h: null
	,tileSize: null
	,custom: null
	,setCustomTexture: function(img) {
		this.img = img;
	}
	,__class__: khm_tilemap_Tileset
};
var khm_tilemap__$Tileset_TilesetGenerator = function() {
	this.next = { file : "", x : 0, y : 0};
	this.y = 0;
	this.x = 0;
	this.offset = 0;
	this.tileSize = -1;
	this.h = -1;
	this.w = -1;
	this.props = [];
};
$hxClasses["khm.tilemap._Tileset.TilesetGenerator"] = khm_tilemap__$Tileset_TilesetGenerator;
khm_tilemap__$Tileset_TilesetGenerator.__name__ = "khm.tilemap._Tileset.TilesetGenerator";
khm_tilemap__$Tileset_TilesetGenerator.prototype = {
	custom: null
	,props: null
	,w: null
	,h: null
	,tileSize: null
	,offset: null
	,x: null
	,y: null
	,next: null
	,fromJSON: function(json,custom) {
		this.custom = custom;
		this.tileSize = json.tileSize;
		var _g = [];
		var _g1 = 0;
		var _g2 = json.layers;
		while(_g1 < _g2.length) {
			var layer = _g2[_g1];
			++_g1;
			var _g11 = [];
			var _g21 = 0;
			var _g3 = layer.length;
			while(_g21 < _g3) {
				var id = _g21++;
				_g11.push(this.fillProps(layer[id],id));
			}
			_g.push(_g11);
		}
		var layersLength = _g.length;
		var layersOffsets = [0];
		var _g31 = [];
		var _g4 = 0;
		while(_g4 < _g.length) _g31.push(_g[_g4++].length - 1);
		var _g5 = [];
		var _g6 = 0;
		while(_g6 < _g.length) {
			++_g6;
			_g5.push([]);
		}
		var _g7 = [];
		var _g8 = 0;
		while(_g8 < _g.length) {
			++_g8;
			_g7.push([]);
		}
		this.props = _g7;
		var tilesCount = this.countTiles(_g);
		this.w = 2048 / this.tileSize | 0;
		this.h = Math.ceil(tilesCount / this.w);
		var img = kha_Image.createRenderTarget(this.w * this.tileSize,this.h * this.tileSize);
		var g = img.get_g2();
		g.begin(true,0);
		this.pushOffset();
		var _g9 = 0;
		while(_g9 < layersLength) {
			var l = _g9++;
			var layer1 = _g[l];
			var empty = layer1.shift();
			if(empty == null) {
				throw new js__$Boot_HaxeError("first tile is null (layer " + l + ")");
			}
			this.addProps(l,empty);
			var _g91 = 0;
			while(_g91 < layer1.length) this.addTile(g,l,layer1[_g91++]);
			var spritesN = 0;
			var spriteOffset = 0;
			var _g10 = 0;
			while(_g10 < layer1.length) {
				var tile = layer1[_g10];
				++_g10;
				var len = tile.frames.length;
				if(len == 0) {
					continue;
				}
				_g5[l][tile.id] = { firstFrame : spriteOffset, length : len, id : tile.id};
				spriteOffset += len;
				var _g101 = 0;
				var _g111 = tile.frames;
				while(_g101 < _g111.length) {
					this.addTile(g,l,_g111[_g101++]);
					++spritesN;
				}
			}
			layersOffsets.push(layersOffsets[layersOffsets.length - 1] + layer1.length + spritesN);
		}
		g.end();
		return { tileSize : this.tileSize, layersOffsets : layersOffsets, tilesLengths : _g31, layersLength : layersLength, sprites : _g5, props : this.props, img : img, w : this.w, h : this.h};
	}
	,fillProps: function(tile,id) {
		if(tile.props == null) {
			tile.props = { };
		}
		if(tile.id == null) {
			tile.id = id;
		}
		if(tile.frames == null) {
			tile.frames = [];
		}
		if(id == 0) {
			return tile;
		}
		this.initFilePath(tile);
		this.initTileCords(tile);
		var _g = 0;
		var _g1 = tile.frames;
		while(_g < _g1.length) {
			var frame = _g1[_g];
			++_g;
			if(frame.props == null) {
				frame.props = { };
			}
			this.initFilePath(frame);
			this.initTileCords(frame);
		}
		return tile;
	}
	,initFilePath: function(tile) {
		if(tile.file != null) {
			var _this_r = new RegExp("(-|/)","g".split("u").join(""));
			tile.file = tile.file.replace(_this_r,"_");
			if(this.next.file != tile.file) {
				this.next.x = 0;
				this.next.y = 0;
			}
			this.next.file = tile.file;
		} else {
			tile.file = this.next.file;
			if(kha_Assets.images.get(tile.file) == null) {
				haxe_Log.trace(tile,{ fileName : "khm/tilemap/Tileset.hx", lineNumber : 248, className : "khm.tilemap._Tileset.TilesetGenerator", methodName : "initFilePath"});
			}
		}
	}
	,initTileCords: function(tile) {
		var img = kha_Assets.images.get(this.next.file);
		if(tile.x == null && tile.y == null) {
			if(tile.tx != null && tile.ty != null) {
				tile.x = tile.tx * this.tileSize;
				tile.y = tile.ty * this.tileSize;
			} else {
				tile.x = this.next.x;
				tile.y = this.next.y;
			}
		}
		this.next.x = tile.x + this.tileSize;
		this.next.y = tile.y;
		if(this.next.x > img.get_width() - this.tileSize) {
			this.next.x = 0;
			this.next.y += this.tileSize;
		}
	}
	,addTile: function(g,l,tile) {
		this.setTransformation(g,tile.transformation);
		this.drawTile(g,tile);
		var _this = g.transformations[g.transformationIndex];
		_this._00 = 1;
		_this._10 = 0;
		_this._20 = 0;
		_this._01 = 0;
		_this._11 = 1;
		_this._21 = 0;
		_this._02 = 0;
		_this._12 = 0;
		_this._22 = 1;
		this.addProps(l,tile);
		this.pushOffset();
	}
	,setTransformation: function(g,transform) {
		if(transform == null) {
			return;
		}
		if(transform == null) {
			throw new js__$Boot_HaxeError("unknown transformation: " + transform);
		} else {
			switch(transform) {
			case "flipX":
				this.setFlipX(g);
				break;
			case "flipY":
				this.setFlipY(g);
				break;
			case "rotate180":case "rotate270":case "rotate90":
				var angle;
				switch(transform) {
				case "rotate180":
					angle = 180;
					break;
				case "rotate270":
					angle = 270;
					break;
				case "rotate90":
					angle = 90;
					break;
				default:
					throw new js__$Boot_HaxeError("wrong transformation: " + transform);
				}
				this.setRotation(g,angle);
				break;
			default:
				throw new js__$Boot_HaxeError("unknown transformation: " + transform);
			}
		}
	}
	,countTiles: function(layers) {
		var count = 1;
		var _g = 0;
		while(_g < layers.length) {
			var layer = layers[_g];
			++_g;
			var _g1 = 0;
			while(_g1 < layer.length) count += 1 + layer[_g1++].frames.length;
		}
		return count;
	}
	,drawTile: function(g,tile) {
		g.drawSubImage(kha_Assets.images.get(tile.file),this.x,this.y,tile.x,tile.y,this.tileSize,this.tileSize);
	}
	,setRotation: function(g,angle) {
		var _this = g.transformations[g.transformationIndex];
		var _this1 = g.transformations[g.transformationIndex];
		var angle1 = angle * Math.PI / 180;
		var centerX = this.x + this.tileSize / 2;
		var centerY = this.y + this.tileSize / 2;
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var _00 = Math.cos(angle1);
		var _10 = -Math.sin(angle1);
		var _01 = Math.sin(angle1);
		var _11 = Math.cos(angle1);
		var m__20 = 0;
		var m__21 = 0;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var _001 = _this__00 * _00 + _this__10 * _01 + centerX * m__02;
		var _101 = _this__00 * _10 + _this__10 * _11 + centerX * m__12;
		var _20 = _this__00 * m__20 + _this__10 * m__21 + centerX * m__22;
		var _011 = _this__01 * _00 + _this__11 * _01 + centerY * m__02;
		var _111 = _this__01 * _10 + _this__11 * _11 + centerY * m__12;
		var _21 = _this__01 * m__20 + _this__11 * m__21 + centerY * m__22;
		var _02 = _this__02 * _00 + _this__12 * _01 + _this__22 * m__02;
		var _12 = _this__02 * _10 + _this__12 * _11 + _this__22 * m__12;
		var _22 = _this__02 * m__20 + _this__12 * m__21 + _this__22 * m__22;
		var m__00 = 1;
		var m__10 = 0;
		var m__201 = -centerX;
		var m__01 = 0;
		var m__11 = 1;
		var m__211 = -centerY;
		var m__021 = 0;
		var m__121 = 0;
		var m__221 = 1;
		var _002 = _001 * m__00 + _101 * m__01 + _20 * m__021;
		var _102 = _001 * m__10 + _101 * m__11 + _20 * m__121;
		var _201 = _001 * m__201 + _101 * m__211 + _20 * m__221;
		var _012 = _011 * m__00 + _111 * m__01 + _21 * m__021;
		var _112 = _011 * m__10 + _111 * m__11 + _21 * m__121;
		var _211 = _011 * m__201 + _111 * m__211 + _21 * m__221;
		var _021 = _02 * m__00 + _12 * m__01 + _22 * m__021;
		var _121 = _02 * m__10 + _12 * m__11 + _22 * m__121;
		var _221 = _02 * m__201 + _12 * m__211 + _22 * m__221;
		var _103 = _this1._00 * _102 + _this1._10 * _112 + _this1._20 * _121;
		var _202 = _this1._00 * _201 + _this1._10 * _211 + _this1._20 * _221;
		var _113 = _this1._01 * _102 + _this1._11 * _112 + _this1._21 * _121;
		var _212 = _this1._01 * _201 + _this1._11 * _211 + _this1._21 * _221;
		var _122 = _this1._02 * _102 + _this1._12 * _112 + _this1._22 * _121;
		var _222 = _this1._02 * _201 + _this1._12 * _211 + _this1._22 * _221;
		_this._00 = _this1._00 * _002 + _this1._10 * _012 + _this1._20 * _021;
		_this._10 = _103;
		_this._20 = _202;
		_this._01 = _this1._01 * _002 + _this1._11 * _012 + _this1._21 * _021;
		_this._11 = _113;
		_this._21 = _212;
		_this._02 = _this1._02 * _002 + _this1._12 * _012 + _this1._22 * _021;
		_this._12 = _122;
		_this._22 = _222;
	}
	,setFlipX: function(g) {
		var _this = g.transformations[g.transformationIndex];
		var _this1 = g.transformations[g.transformationIndex];
		var _20 = this.x * 2 + this.tileSize;
		var m__00 = -1;
		var m__10 = 0;
		var m__01 = 0;
		var m__11 = 1;
		var m__21 = 0;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var _10 = _this1._00 * m__10 + _this1._10 * m__11 + _this1._20 * m__12;
		var _201 = _this1._00 * _20 + _this1._10 * m__21 + _this1._20 * m__22;
		var _11 = _this1._01 * m__10 + _this1._11 * m__11 + _this1._21 * m__12;
		var _21 = _this1._01 * _20 + _this1._11 * m__21 + _this1._21 * m__22;
		var _12 = _this1._02 * m__10 + _this1._12 * m__11 + _this1._22 * m__12;
		var _22 = _this1._02 * _20 + _this1._12 * m__21 + _this1._22 * m__22;
		_this._00 = _this1._00 * m__00 + _this1._10 * m__01 + _this1._20 * m__02;
		_this._10 = _10;
		_this._20 = _201;
		_this._01 = _this1._01 * m__00 + _this1._11 * m__01 + _this1._21 * m__02;
		_this._11 = _11;
		_this._21 = _21;
		_this._02 = _this1._02 * m__00 + _this1._12 * m__01 + _this1._22 * m__02;
		_this._12 = _12;
		_this._22 = _22;
	}
	,setFlipY: function(g) {
		var _this = g.transformations[g.transformationIndex];
		var _this1 = g.transformations[g.transformationIndex];
		var _21 = this.y * 2 + this.tileSize;
		var m__00 = 1;
		var m__10 = 0;
		var m__20 = 0;
		var m__01 = 0;
		var m__11 = -1;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var _10 = _this1._00 * m__10 + _this1._10 * m__11 + _this1._20 * m__12;
		var _20 = _this1._00 * m__20 + _this1._10 * _21 + _this1._20 * m__22;
		var _11 = _this1._01 * m__10 + _this1._11 * m__11 + _this1._21 * m__12;
		var _211 = _this1._01 * m__20 + _this1._11 * _21 + _this1._21 * m__22;
		var _12 = _this1._02 * m__10 + _this1._12 * m__11 + _this1._22 * m__12;
		var _22 = _this1._02 * m__20 + _this1._12 * _21 + _this1._22 * m__22;
		_this._00 = _this1._00 * m__00 + _this1._10 * m__01 + _this1._20 * m__02;
		_this._10 = _10;
		_this._20 = _20;
		_this._01 = _this1._01 * m__00 + _this1._11 * m__01 + _this1._21 * m__02;
		_this._11 = _11;
		_this._21 = _211;
		_this._02 = _this1._02 * m__00 + _this1._12 * m__01 + _this1._22 * m__02;
		_this._12 = _12;
		_this._22 = _22;
	}
	,pushOffset: function() {
		this.offset += this.tileSize;
		this.x = this.offset % (this.w * this.tileSize);
		this.y = (this.offset / (this.w * this.tileSize) | 0) * this.tileSize;
	}
	,addProps: function(l,tile) {
		if(this.custom == null) {
			throw new js__$Boot_HaxeError("customizer not found");
		}
		var tileProps = this.custom.initProps(tile);
		this.props[l].push(tileProps);
	}
	,__class__: khm_tilemap__$Tileset_TilesetGenerator
};
var khm_utils_AtlasProps = function(scale,widths) {
	this.widths = null;
	this.scale = 1.0;
	if(scale != null) {
		this.scale = scale;
	}
	if(widths != null) {
		this.widths = widths;
	}
};
$hxClasses["khm.utils.AtlasProps"] = khm_utils_AtlasProps;
khm_utils_AtlasProps.__name__ = "khm.utils.AtlasProps";
khm_utils_AtlasProps.prototype = {
	scale: null
	,widths: null
	,__class__: khm_utils_AtlasProps
};
var khm_utils_Atlas = function() { };
$hxClasses["khm.utils.Atlas"] = khm_utils_Atlas;
khm_utils_Atlas.__name__ = "khm.utils.Atlas";
khm_utils_Atlas.init = function(imgFilter,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	khm_utils_Atlas.initImagesMap(imgFilter);
	khm_utils_Atlas.keys.sort(function(a,b) {
		var size = kha_Assets.images.get(a).get_height();
		var size2 = kha_Assets.images.get(b).get_height();
		if(size > size2) {
			return -1;
		} else if(size < size2) {
			return 1;
		}
		return 0;
	});
	var _g = new haxe_ds_ObjectMap();
	var _g1 = 0;
	var _g2 = khm_utils_Atlas.keys.length;
	while(_g1 < _g2) {
		var i = _g1++;
		_g.set(kha_Assets.images.get(khm_utils_Atlas.keys[i]),i);
	}
	khm_utils_Atlas.map = _g;
	khm_utils_Atlas.offsX.length = 0;
	khm_utils_Atlas.offsY.length = 0;
	khm_utils_Atlas.sizesW.length = 0;
	khm_utils_Atlas.sizesH.length = 0;
	if(khm_utils_Atlas.atlas == null) {
		khm_utils_Atlas.atlas = kha_Image.createRenderTarget(khm_utils_Atlas.maxSize,khm_utils_Atlas.maxSize);
	}
	var g = khm_utils_Atlas.atlas.get_g2();
	var blockW = 0;
	var blockY = 0;
	var lineY = y;
	var lineH = 0;
	g.begin(true,0);
	g.set_imageScaleQuality(1);
	var _g3 = 0;
	var _g4 = khm_utils_Atlas.keys.length;
	while(_g3 < _g4) {
		var i1 = _g3++;
		var name = khm_utils_Atlas.keys[i1];
		var img = kha_Assets.images.get(name);
		var _this = khm_utils_Atlas.props;
		var props = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		var props1 = props == null ? khm_utils_Atlas.defaultProps : props;
		var imgW = khm_utils_Atlas.getImageW(img,props1);
		var imgH = Math.ceil(img.get_height() * props1.scale);
		if(props1.widths == null) {
			g.drawScaledImage(img,x,y,imgW,imgH);
		} else {
			props1.widths = props1.widths.slice();
			var subX = 0;
			var offX = x;
			var _g31 = 0;
			var _g41 = props1.widths.length;
			while(_g31 < _g41) {
				var i2 = _g31++;
				var w = props1.widths[i2];
				var scaledW = Math.ceil(w * props1.scale);
				g.drawScaledSubImage(img,subX,0,w,img.get_height(),offX,y,scaledW,imgH);
				props1.widths[i2] = offX;
				offX += scaledW + 1;
				subX += w;
			}
		}
		khm_utils_Atlas.offsX.push(x);
		khm_utils_Atlas.offsY.push(y);
		khm_utils_Atlas.sizesW.push(imgW);
		khm_utils_Atlas.sizesH.push(imgH);
		if(i1 == khm_utils_Atlas.keys.length - 1) {
			break;
		}
		var name1 = khm_utils_Atlas.keys[i1 + 1];
		var next = kha_Assets.images.get(name1);
		var _this1 = khm_utils_Atlas.props;
		var props2 = __map_reserved[name1] != null ? _this1.getReserved(name1) : _this1.h[name1];
		var props3 = props2 == null ? khm_utils_Atlas.defaultProps : props2;
		var nextW = khm_utils_Atlas.getImageW(next,props3);
		if(lineH < imgH) {
			lineH = imgH;
		}
		if(blockW < imgW) {
			blockW = imgW;
		}
		blockY += imgH + 1;
		if(blockY + Math.ceil(next.get_height() * props3.scale) < lineH) {
			y = lineY + blockY;
			if(blockW < nextW) {
				blockW = nextW;
			}
		} else {
			x += blockW + 1;
			y = lineY;
			blockW = nextW;
			blockY = 0;
		}
		if(x + nextW >= khm_utils_Atlas.maxSize) {
			lineY += lineH + 1;
			x = 0;
			y = lineY;
			blockW = nextW;
			blockY = 0;
			lineH = 0;
		}
	}
	g.end();
};
khm_utils_Atlas.getImageW = function(img,props) {
	if(props.widths == null) {
		return Math.ceil(img.get_width() * props.scale);
	}
	var width = props.widths.length;
	var _g = 0;
	var _g1 = props.widths;
	while(_g < _g1.length) width += Math.ceil(_g1[_g++] * props.scale) + 1;
	return width;
};
khm_utils_Atlas.initImagesMap = function(imgFilter) {
	khm_utils_Atlas.keys.length = 0;
	khm_utils_Atlas.props = new haxe_ds_StringMap();
	var fields = Reflect.fields(kha_Assets.images);
	var _g = 0;
	while(_g < fields.length) {
		var field = fields[_g];
		++_g;
		if(new EReg("(Name|Description|names)$","").match(field)) {
			continue;
		}
		if(imgFilter == null) {
			khm_utils_Atlas.keys.push(field);
			continue;
		}
		if(!imgFilter(field)) {
			continue;
		}
		khm_utils_Atlas.keys.push(field);
	}
};
khm_utils_Atlas.isInside = function(g,x,y,w,h) {
	if(g.transformations[g.transformationIndex]._20 != 0 || g.transformations[g.transformationIndex]._21 != 0) {
		return true;
	}
	if(g.transformations[g.transformationIndex]._10 != 0 || g.transformations[g.transformationIndex]._01 != 0) {
		return true;
	}
	var scaleX = g.transformations[g.transformationIndex]._00;
	var scaleY = g.transformations[g.transformationIndex]._11;
	return !(x + w < 0 || y + h < 0 || x > kha_System.windowWidth() / scaleX || y > kha_System.windowHeight() / scaleY);
};
khm_utils_Atlas.drawImage = function(g,img,x,y) {
	var id = khm_utils_Atlas.map.h[img.__id__];
	if(!khm_utils_Atlas.isInside(g,x,y,khm_utils_Atlas.sizesW[id],khm_utils_Atlas.sizesH[id])) {
		return;
	}
	g.drawSubImage(khm_utils_Atlas.atlas,x,y,khm_utils_Atlas.offsX[id],khm_utils_Atlas.offsY[id],khm_utils_Atlas.sizesW[id],khm_utils_Atlas.sizesH[id]);
};
khm_utils_Atlas.drawSubImage = function(g,img,x,y,sx,sy,sw,sh) {
	if(!khm_utils_Atlas.isInside(g,x,y,sw,sh)) {
		return;
	}
	var id = khm_utils_Atlas.map.h[img.__id__];
	var _this = khm_utils_Atlas.props;
	var key = khm_utils_Atlas.keys[id];
	var props = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
	var scale = (props == null ? khm_utils_Atlas.defaultProps : props).scale;
	g.drawSubImage(khm_utils_Atlas.atlas,x,y,khm_utils_Atlas.offsX[id] + sx * scale,khm_utils_Atlas.offsY[id] + sy * scale,sw,sh);
};
khm_utils_Atlas.drawScaledImage = function(g,img,x,y,w,h) {
	if(!khm_utils_Atlas.isInside(g,x,y,w,h)) {
		return;
	}
	var id = khm_utils_Atlas.map.h[img.__id__];
	g.drawScaledSubImage(khm_utils_Atlas.atlas,khm_utils_Atlas.offsX[id],khm_utils_Atlas.offsY[id],khm_utils_Atlas.sizesW[id],khm_utils_Atlas.sizesH[id],x,y,w,h);
};
khm_utils_Atlas.drawScaledSubImage = function(g,img,sx,sy,sw,sh,x,y,w,h) {
	if(!khm_utils_Atlas.isInside(g,x,y,w,h)) {
		return;
	}
	var id = khm_utils_Atlas.map.h[img.__id__];
	var _this = khm_utils_Atlas.props;
	var key = khm_utils_Atlas.keys[id];
	var props = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
	var scale = (props == null ? khm_utils_Atlas.defaultProps : props).scale;
	g.drawScaledSubImage(khm_utils_Atlas.atlas,sx * scale + khm_utils_Atlas.offsX[id],sy * scale + khm_utils_Atlas.offsY[id],sw * scale,sh * scale,x,y,w,h);
};
khm_utils_Atlas.drawScaledSubImagePart = function(g,img,part,sx,sy,sw,sh,x,y,w,h) {
	if(!khm_utils_Atlas.isInside(g,x,y,w,h)) {
		return;
	}
	var id = khm_utils_Atlas.map.h[img.__id__];
	var _this = khm_utils_Atlas.props;
	var key = khm_utils_Atlas.keys[id];
	var props = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
	var props1 = props == null ? khm_utils_Atlas.defaultProps : props;
	if(props1.widths == null) {
		throw new js__$Boot_HaxeError("props.widths is null on " + khm_utils_Atlas.keys[id]);
	}
	var scale = props1.scale;
	g.drawScaledSubImage(khm_utils_Atlas.atlas,props1.widths[part],sy * scale + khm_utils_Atlas.offsY[id],sw * scale,sh * scale,x,y,w,h);
};
var khm_utils_FileReference = function() { };
$hxClasses["khm.utils.FileReference"] = khm_utils_FileReference;
khm_utils_FileReference.__name__ = "khm.utils.FileReference";
khm_utils_FileReference.onDrop = function(onFileLoad,isBinary) {
	if(isBinary == null) {
		isBinary = true;
	}
	var drop = function(e) {
		var file = e.dataTransfer.files[0];
		var reader = new FileReader();
		reader.onload = function(event) {
			onFileLoad(event.target.result,file.name);
		};
		e.preventDefault();
		if(isBinary) {
			reader.readAsArrayBuffer(file);
		} else {
			reader.readAsText(file);
		}
	};
	window.ondragenter = function(e1) {
		e1.preventDefault();
	};
	window.ondragover = function(e2) {
		e2.preventDefault();
	};
	window.ondrop = drop;
};
khm_utils_FileReference.removeOnDrop = function(onFileLoad) {
	window.ondrop = function() {
		return false;
	};
};
khm_utils_FileReference.browse = function(onFileLoad,isBinary) {
	if(isBinary == null) {
		isBinary = true;
	}
	var input = window.document.createElement("input");
	input.style.visibility = "hidden";
	input.setAttribute("type","file");
	input.id = "browse";
	input.onclick = function(e) {
		e.cancelBubble = true;
		e.stopPropagation();
	};
	input.onchange = function() {
		var file = input.files[0];
		var reader = new FileReader();
		reader.onload = function(e1) {
			onFileLoad(e1.target.result,file.name);
			window.document.body.removeChild(input);
		};
		if(isBinary) {
			reader.readAsArrayBuffer(file);
		} else {
			reader.readAsText(file);
		}
	};
	window.document.body.appendChild(input);
	input.click();
};
khm_utils_FileReference.saveJson = function(name,json) {
	var blob = new Blob([json],{ type : "application/json"});
	var url = URL.createObjectURL(blob);
	var a = window.document.createElement("a");
	a.download = name + ".json";
	a.href = url;
	a.onclick = function(e) {
		e.cancelBubble = true;
		e.stopPropagation();
	};
	window.document.body.appendChild(a);
	a.click();
	window.document.body.removeChild(a);
	URL.revokeObjectURL(url);
};
var khm_utils_ScreenTools = function() { };
$hxClasses["khm.utils.ScreenTools"] = khm_utils_ScreenTools;
khm_utils_ScreenTools.__name__ = "khm.utils.ScreenTools";
khm_utils_ScreenTools.onRescaleKeys = function(screen,key) {
	var scale = screen.scale;
	if(key == 189 || key == 173) {
		if(scale > 1) {
			screen.setScale(scale - 1);
		}
		return true;
	} else if(key == 187 || key == 61 || key == 171) {
		if(scale < 9) {
			screen.setScale(scale + 1);
		}
		return true;
	}
	return false;
};
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_ds_ObjectMap.count = 0;
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
Crashlytics.keys = new haxe_ds_StringMap();
Loader.isAdsRemoved = false;
Loader.admobInterstitialId = "ca-app-pub-3940256099942544/1033173712";
Loader.defSlot = { type : 0, level : 0, inventory : [{ id : 0, count : 99},{ id : 19, count : 3},{ id : 17, count : 2},{ id : 15, count : 2}], stats : { missionTimes : [0], shots : 0, damage : 0, mileage : 0, exp : 0}, research : { extraInterest : 0, shellResearch : 0, artilleryResearch : 0, missileResearch : 0, mineResearch : 0, dynamiteResearch : 0, armorResearch : 0, powerFieldResearch : 0, airRaidResearch : 0, allyTankResearch : 0}, exChassis : false, lives : 4, money : 30, stars : 1, armor : 0, tempArmor : 0, shield : 0};
Music.isEnabled = false;
Music.volume = 1.0;
Sound.soundVolume = 0.0;
Sound.sounds = [];
game_Base.SPAWN_TIMEOUT = 60;
game_Base.tankTypes = ["light","light","light","kamikaze","heavy","heavy","siege","heavy"];
game_Base.hps = [3,3,5,3,5,5,7,9,8,7,6,8,9,9,7,1,3,3,5,1,8,10,12,16,60,8,10,12,16,2,5,10,15,30,90,20,30,40,90,150];
game_Base.shieldHps = [0,0,0,4,0,0,0,0,5,0,0,0,3,7,0,0,0,0,0,0,0,3,4,8,10,0,3,5,8,30,0,3,5,10,30,7,15,20,40,60];
game_Base.speedBonuses = [1,2,2,2,3,1,1,1,1,1,1,1,1,1,1,1,1,2,3,3,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1];
game_Base.bulletTypes = [0,0,0,1,1,0,0,0,2,0,1,1,1,3,6,0,0,0,0,0,2,2,2,4,2,3,3,3,5,3,0,0,0,0,0,2,3,4,6,5];
game_Tank.killScores = [4,8,10,15,10,8,12,15,20,10,12,15,18,20,20,10,15,20,20,20,18,20,20,25,80,20,25,30,35,35,15,20,20,55,95,150,200,250,350,350];
game_Bot.PATH_COOLDOWN = 120;
game_Dijkstra.costs = [[]];
game_Dijkstra.visited = [[]];
game_Dijkstra.added = [[]];
game_Dijkstra.offX = [1,-1,0,0];
game_Dijkstra.offY = [0,0,1,-1];
game_Bullet.pool = new khm_utils_Pool_$game_$Bullet(function() {
	return new game_Bullet();
});
khm_Screen.w = 0;
khm_Screen.h = 0;
khm_Screen.isTouch = false;
khm_Screen.showFps = false;
khm_Screen.defaultScale = 1.0;
khm_Screen.fps = new khm__$Screen_Fps();
khm_Screen.taskId = -1;
khm_Screen.isInited = false;
khm_Screen.gamepads = (function($this) {
	var $r;
	var _g = [];
	{
		_g.push(false);
		_g.push(false);
		_g.push(false);
		_g.push(false);
	}
	$r = _g;
	return $r;
}(this));
khm_Screen.gamepadDeadZone = 0.1;
game_Game.vibrationEnabled = false;
game_Game.smoothingEnabled = false;
game_Game.trasnparentGui = false;
game_Game.cloudsEnabled = true;
game_Practice.slot = { level : 0, inventory : [{ id : 0, count : 99},{ id : 1, count : 30},{ id : 2, count : 20},{ id : 6, count : 4},{ id : 7, count : 2},{ id : 8, count : 2},{ id : 11, count : 5},{ id : 13, count : 2},{ id : 9, count : 1},{ id : 19, count : 3},{ id : 17, count : 2},{ id : 15, count : 1},{ id : 20, count : 4},{ id : 25, count : 1}], stats : { missionTimes : [0], shots : 0, damage : 0, mileage : 0, exp : 0}, research : { extraInterest : 0, shellResearch : 0, artilleryResearch : 5, missileResearch : 0, mineResearch : 0, dynamiteResearch : 0, armorResearch : 0, powerFieldResearch : 0, airRaidResearch : 3, allyTankResearch : 0}, exChassis : false, lives : 4, money : 30, stars : 1, armor : 0, tempArmor : 0, shield : 0};
game_Sprite.pool = new khm_utils_Pool_$game_$Sprite(function() {
	return new game_Sprite();
});
game_Turret.enemyHps = [8,15,8,15,15,15,20,25,35,50];
game_Turret.allyHps = [5,10,5,10,10,10,12,12,15,15];
game_Turret.bulletTypes = [0,0,1,1,2,3,4,5,6,6];
game_Turret.killScores = [20,25,25,30,35,40,45,50,50,70];
game_effects_Cloud.pool = new khm_utils_Pool_$game_$effects_$Cloud(function() {
	return new game_effects_Cloud();
});
game_effects_ExplEffect.pool = new khm_utils_Pool_$game_$effects_$ExplEffect(function() {
	return new game_effects_ExplEffect();
});
game_effects_RocketSmoke.pool = new khm_utils_Pool_$game_$effects_$RocketSmoke(function() {
	return new game_effects_RocketSmoke();
});
game_effects_Smoke.pool = new khm_utils_Pool_$game_$effects_$Smoke(function() {
	return new game_effects_Smoke();
});
game_effects_Trace.pool = new khm_utils_Pool_$game_$effects_$Trace(function() {
	return new game_effects_Trace();
});
game_gui_Menu.showNews = false;
game_gui_Menu.mapsPage = 0;
game_gui_MoneyWindow.iapState = 0;
game_gui_MoneyWindow.products = [];
game_gui_MoneyWindow.isConsumed = true;
game_gui_OfferScreen.iapState = 0;
game_gui_OfferScreen.products = [];
game_gui_SmoothScroll.speeds = (function($this) {
	var $r;
	var _g = [];
	{
		_g.push(0.0);
		_g.push(0.0);
		_g.push(0.0);
	}
	$r = _g;
	return $r;
}(this));
game_gui_Text.numbersX = [0,72,111,179,247,319,387,460,529,601,673,776,842,914,987,1047];
game_gui_Text.numbersW = [72,39,68,68,72,68,73,69,72,72,103,66,72,73,60,37];
game_gui_Text.maxNumberW = 73;
game_gui_Text.numberScale = 0.125;
game_gui_Text.iconsData = [];
game_gui_Text.fontSize = 14;
game_gui_Text.transformation = new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1);
game_gui_Touch.isReversed = false;
game_gui_Touch.controlType = 1;
game_gui_TouchStick.JOY_NORMAL_VECTOR2 = new kha_math_Vector2(-1,-1);
game_gui_Ui.offY = 0;
game_gui_Ui.camY = 0;
game_gui_Ui.maxCamY = 0;
game_gui_Widgets.bgColor = 0;
game_gui_Widgets.hoverColor = 822083583;
game_gui_Widgets.activeColor = 1627389951;
game_gui_Widgets.focusColor = -2145352982;
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_io_FPHelper.helper = new DataView(new ArrayBuffer(8));
kha_Assets.images = new kha__$Assets_ImageList();
kha_Assets.sounds = new kha__$Assets_SoundList();
kha_Assets.blobs = new kha__$Assets_BlobList();
kha_Assets.fonts = new kha__$Assets_FontList();
kha_Assets.videos = new kha__$Assets_VideoList();
kha_Display.instance = new kha_Display();
kha_Scheduler.DIF_COUNT = 3;
kha_Scheduler.maxframetime = 0.5;
kha_Scheduler.startTime = 0;
kha_Shaders.painter_colored_fragData0 = "s198:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdmFyeWluZyBoaWdocCB2ZWM0IGZyYWdtZW50Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9GcmFnRGF0YVswXSA9IGZyYWdtZW50Q29sb3I7Cn0KCg";
kha_Shaders.painter_colored_fragData1 = "s192:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp2YXJ5aW5nIHZlYzQgZnJhZ21lbnRDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGdsX0ZyYWdEYXRhWzBdID0gZnJhZ21lbnRDb2xvcjsKfQoK";
kha_Shaders.painter_colored_fragData2 = "s223:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKb3V0IGhpZ2hwIHZlYzQgRnJhZ0NvbG9yOwppbiBoaWdocCB2ZWM0IGZyYWdtZW50Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBGcmFnQ29sb3IgPSBmcmFnbWVudENvbG9yOwp9Cgo";
kha_Shaders.painter_colored_vertData0 = "s331:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzQgZnJhZ21lbnRDb2xvcjsKYXR0cmlidXRlIHZlYzQgdmVydGV4Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiB2ZWM0KHZlcnRleFBvc2l0aW9uLCAxLjApOwogICAgZnJhZ21lbnRDb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_colored_vertData1 = "s374:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1lZGl1bXAgbWF0NCBwcm9qZWN0aW9uTWF0cml4OwoKYXR0cmlidXRlIG1lZGl1bXAgdmVjMyB2ZXJ0ZXhQb3NpdGlvbjsKdmFyeWluZyBtZWRpdW1wIHZlYzQgZnJhZ21lbnRDb2xvcjsKYXR0cmlidXRlIG1lZGl1bXAgdmVjNCB2ZXJ0ZXhDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIHZlYzQodmVydGV4UG9zaXRpb24sIDEuMCk7CiAgICBmcmFnbWVudENvbG9yID0gdmVydGV4Q29sb3I7Cn0KCg";
kha_Shaders.painter_colored_vertData2 = "s311:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWM0IGZyYWdtZW50Q29sb3I7CmluIHZlYzQgdmVydGV4Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiB2ZWM0KHZlcnRleFBvc2l0aW9uLCAxLjApOwogICAgZnJhZ21lbnRDb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_image_fragData0 = "s471:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKdmFyeWluZyBoaWdocCB2ZWMyIHRleENvb3JkOwp2YXJ5aW5nIGhpZ2hwIHZlYzQgY29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IHRleGNvbG9yID0gdGV4dHVyZTJEKHRleCwgdGV4Q29vcmQpICogY29sb3I7CiAgICBoaWdocCB2ZWMzIF8zMiA9IHRleGNvbG9yLnh5eiAqIGNvbG9yLnc7CiAgICB0ZXhjb2xvciA9IHZlYzQoXzMyLngsIF8zMi55LCBfMzIueiwgdGV4Y29sb3Iudyk7CiAgICBnbF9GcmFnRGF0YVswXSA9IHRleGNvbG9yOwp9Cgo";
kha_Shaders.painter_image_fragData1 = "s444:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp1bmlmb3JtIG1lZGl1bXAgc2FtcGxlcjJEIHRleDsKCnZhcnlpbmcgdmVjMiB0ZXhDb29yZDsKdmFyeWluZyB2ZWM0IGNvbG9yOwoKdm9pZCBtYWluKCkKewogICAgdmVjNCB0ZXhjb2xvciA9IHRleHR1cmUyRCh0ZXgsIHRleENvb3JkKSAqIGNvbG9yOwogICAgdmVjMyBfMzIgPSB0ZXhjb2xvci54eXogKiBjb2xvci53OwogICAgdGV4Y29sb3IgPSB2ZWM0KF8zMi54LCBfMzIueSwgXzMyLnosIHRleGNvbG9yLncpOwogICAgZ2xfRnJhZ0RhdGFbMF0gPSB0ZXhjb2xvcjsKfQoK";
kha_Shaders.painter_image_fragData2 = "s487:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKaW4gaGlnaHAgdmVjMiB0ZXhDb29yZDsKaW4gaGlnaHAgdmVjNCBjb2xvcjsKb3V0IGhpZ2hwIHZlYzQgRnJhZ0NvbG9yOwoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjNCB0ZXhjb2xvciA9IHRleHR1cmUodGV4LCB0ZXhDb29yZCkgKiBjb2xvcjsKICAgIGhpZ2hwIHZlYzMgXzMyID0gdGV4Y29sb3IueHl6ICogY29sb3IudzsKICAgIHRleGNvbG9yID0gdmVjNChfMzIueCwgXzMyLnksIF8zMi56LCB0ZXhjb2xvci53KTsKICAgIEZyYWdDb2xvciA9IHRleGNvbG9yOwp9Cgo";
kha_Shaders.painter_image_vertData0 = "s415:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSB2ZWMyIHRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzQgY29sb3I7CmF0dHJpYnV0ZSB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdGV4UG9zaXRpb247CiAgICBjb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_image_vertData1 = "s479:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1lZGl1bXAgbWF0NCBwcm9qZWN0aW9uTWF0cml4OwoKYXR0cmlidXRlIG1lZGl1bXAgdmVjMyB2ZXJ0ZXhQb3NpdGlvbjsKdmFyeWluZyBtZWRpdW1wIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSBtZWRpdW1wIHZlYzIgdGV4UG9zaXRpb247CnZhcnlpbmcgbWVkaXVtcCB2ZWM0IGNvbG9yOwphdHRyaWJ1dGUgbWVkaXVtcCB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdGV4UG9zaXRpb247CiAgICBjb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_image_vertData2 = "s380:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHRleFBvc2l0aW9uOwpvdXQgdmVjNCBjb2xvcjsKaW4gdmVjNCB2ZXJ0ZXhDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIHZlYzQodmVydGV4UG9zaXRpb24sIDEuMCk7CiAgICB0ZXhDb29yZCA9IHRleFBvc2l0aW9uOwogICAgY29sb3IgPSB2ZXJ0ZXhDb2xvcjsKfQoK";
kha_Shaders.painter_text_fragData0 = "s351:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKdmFyeWluZyBoaWdocCB2ZWM0IGZyYWdtZW50Q29sb3I7CnZhcnlpbmcgaGlnaHAgdmVjMiB0ZXhDb29yZDsKCnZvaWQgbWFpbigpCnsKICAgIGdsX0ZyYWdEYXRhWzBdID0gdmVjNChmcmFnbWVudENvbG9yLnh5eiwgdGV4dHVyZTJEKHRleCwgdGV4Q29vcmQpLnggKiBmcmFnbWVudENvbG9yLncpOwp9Cgo";
kha_Shaders.painter_text_fragData1 = "s340:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp1bmlmb3JtIG1lZGl1bXAgc2FtcGxlcjJEIHRleDsKCnZhcnlpbmcgdmVjNCBmcmFnbWVudENvbG9yOwp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9GcmFnRGF0YVswXSA9IHZlYzQoZnJhZ21lbnRDb2xvci54eXosIHRleHR1cmUyRCh0ZXgsIHRleENvb3JkKS54ICogZnJhZ21lbnRDb2xvci53KTsKfQoK";
kha_Shaders.painter_text_fragData2 = "s367:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKb3V0IGhpZ2hwIHZlYzQgRnJhZ0NvbG9yOwppbiBoaWdocCB2ZWM0IGZyYWdtZW50Q29sb3I7CmluIGhpZ2hwIHZlYzIgdGV4Q29vcmQ7Cgp2b2lkIG1haW4oKQp7CiAgICBGcmFnQ29sb3IgPSB2ZWM0KGZyYWdtZW50Q29sb3IueHl6LCB0ZXh0dXJlKHRleCwgdGV4Q29vcmQpLnggKiBmcmFnbWVudENvbG9yLncpOwp9Cgo";
kha_Shaders.painter_text_vertData0 = "s436:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSB2ZWMyIHRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzQgZnJhZ21lbnRDb2xvcjsKYXR0cmlidXRlIHZlYzQgdmVydGV4Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiB2ZWM0KHZlcnRleFBvc2l0aW9uLCAxLjApOwogICAgdGV4Q29vcmQgPSB0ZXhQb3NpdGlvbjsKICAgIGZyYWdtZW50Q29sb3IgPSB2ZXJ0ZXhDb2xvcjsKfQoK";
kha_Shaders.painter_text_vertData1 = "s500:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1lZGl1bXAgbWF0NCBwcm9qZWN0aW9uTWF0cml4OwoKYXR0cmlidXRlIG1lZGl1bXAgdmVjMyB2ZXJ0ZXhQb3NpdGlvbjsKdmFyeWluZyBtZWRpdW1wIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSBtZWRpdW1wIHZlYzIgdGV4UG9zaXRpb247CnZhcnlpbmcgbWVkaXVtcCB2ZWM0IGZyYWdtZW50Q29sb3I7CmF0dHJpYnV0ZSBtZWRpdW1wIHZlYzQgdmVydGV4Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiB2ZWM0KHZlcnRleFBvc2l0aW9uLCAxLjApOwogICAgdGV4Q29vcmQgPSB0ZXhQb3NpdGlvbjsKICAgIGZyYWdtZW50Q29sb3IgPSB2ZXJ0ZXhDb2xvcjsKfQoK";
kha_Shaders.painter_text_vertData2 = "s402:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHRleFBvc2l0aW9uOwpvdXQgdmVjNCBmcmFnbWVudENvbG9yOwppbiB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdGV4UG9zaXRpb247CiAgICBmcmFnbWVudENvbG9yID0gdmVydGV4Q29sb3I7Cn0KCg";
kha_Shaders.painter_video_fragData0 = "s471:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKdmFyeWluZyBoaWdocCB2ZWMyIHRleENvb3JkOwp2YXJ5aW5nIGhpZ2hwIHZlYzQgY29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IHRleGNvbG9yID0gdGV4dHVyZTJEKHRleCwgdGV4Q29vcmQpICogY29sb3I7CiAgICBoaWdocCB2ZWMzIF8zMiA9IHRleGNvbG9yLnh5eiAqIGNvbG9yLnc7CiAgICB0ZXhjb2xvciA9IHZlYzQoXzMyLngsIF8zMi55LCBfMzIueiwgdGV4Y29sb3Iudyk7CiAgICBnbF9GcmFnRGF0YVswXSA9IHRleGNvbG9yOwp9Cgo";
kha_Shaders.painter_video_fragData1 = "s444:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp1bmlmb3JtIG1lZGl1bXAgc2FtcGxlcjJEIHRleDsKCnZhcnlpbmcgdmVjMiB0ZXhDb29yZDsKdmFyeWluZyB2ZWM0IGNvbG9yOwoKdm9pZCBtYWluKCkKewogICAgdmVjNCB0ZXhjb2xvciA9IHRleHR1cmUyRCh0ZXgsIHRleENvb3JkKSAqIGNvbG9yOwogICAgdmVjMyBfMzIgPSB0ZXhjb2xvci54eXogKiBjb2xvci53OwogICAgdGV4Y29sb3IgPSB2ZWM0KF8zMi54LCBfMzIueSwgXzMyLnosIHRleGNvbG9yLncpOwogICAgZ2xfRnJhZ0RhdGFbMF0gPSB0ZXhjb2xvcjsKfQoK";
kha_Shaders.painter_video_fragData2 = "s487:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKaW4gaGlnaHAgdmVjMiB0ZXhDb29yZDsKaW4gaGlnaHAgdmVjNCBjb2xvcjsKb3V0IGhpZ2hwIHZlYzQgRnJhZ0NvbG9yOwoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjNCB0ZXhjb2xvciA9IHRleHR1cmUodGV4LCB0ZXhDb29yZCkgKiBjb2xvcjsKICAgIGhpZ2hwIHZlYzMgXzMyID0gdGV4Y29sb3IueHl6ICogY29sb3IudzsKICAgIHRleGNvbG9yID0gdmVjNChfMzIueCwgXzMyLnksIF8zMi56LCB0ZXhjb2xvci53KTsKICAgIEZyYWdDb2xvciA9IHRleGNvbG9yOwp9Cgo";
kha_Shaders.painter_video_vertData0 = "s415:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSB2ZWMyIHRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzQgY29sb3I7CmF0dHJpYnV0ZSB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdGV4UG9zaXRpb247CiAgICBjb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_video_vertData1 = "s479:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1lZGl1bXAgbWF0NCBwcm9qZWN0aW9uTWF0cml4OwoKYXR0cmlidXRlIG1lZGl1bXAgdmVjMyB2ZXJ0ZXhQb3NpdGlvbjsKdmFyeWluZyBtZWRpdW1wIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSBtZWRpdW1wIHZlYzIgdGV4UG9zaXRpb247CnZhcnlpbmcgbWVkaXVtcCB2ZWM0IGNvbG9yOwphdHRyaWJ1dGUgbWVkaXVtcCB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdGV4UG9zaXRpb247CiAgICBjb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_video_vertData2 = "s380:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHRleFBvc2l0aW9uOwpvdXQgdmVjNCBjb2xvcjsKaW4gdmVjNCB2ZXJ0ZXhDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIHZlYzQodmVydGV4UG9zaXRpb24sIDEuMCk7CiAgICB0ZXhDb29yZCA9IHRleFBvc2l0aW9uOwogICAgY29sb3IgPSB2ZXJ0ZXhDb2xvcjsKfQoK";
kha_System.renderListeners = [];
kha_System.foregroundListeners = [];
kha_System.backgroundListeners = [];
kha_System.shutdownListeners = [];
kha_SystemImpl.mobile = false;
kha_SystemImpl.ios = false;
kha_SystemImpl.mobileAudioPlaying = false;
kha_SystemImpl.chrome = false;
kha_SystemImpl.firefox = false;
kha_SystemImpl.ie = false;
kha_SystemImpl.insideInputEvent = false;
kha_SystemImpl.minimumScroll = 999;
kha_SystemImpl.lastFirstTouchX = 0;
kha_SystemImpl.lastFirstTouchY = 0;
kha_SystemImpl.iosSoundEnabled = false;
kha_SystemImpl.soundEnabled = false;
kha_SystemImpl.iosTouchs = [];
kha_Window.windows = [];
kha_audio2_Audio.disableGcInteractions = false;
kha_audio2_Audio.intBox = new kha_internal_IntBox(0);
kha_audio2_Audio.virtualChannels = [];
kha_audio2_Audio1.lastAllocationCount = 0;
kha_audio2_ogg_vorbis_VorbisTools.INVERSE_DB_TABLE = [1.0649863e-07,1.1341951e-07,1.2079015e-07,1.2863978e-07,1.3699951e-07,1.4590251e-07,1.5538408e-07,1.6548181e-07,1.7623575e-07,1.8768855e-07,1.9988561e-07,2.1287530e-07,2.2670913e-07,2.4144197e-07,2.5713223e-07,2.7384213e-07,2.9163793e-07,3.1059021e-07,3.3077411e-07,3.5226968e-07,3.7516214e-07,3.9954229e-07,4.2550680e-07,4.5315863e-07,4.8260743e-07,5.1396998e-07,5.4737065e-07,5.8294187e-07,6.2082472e-07,6.6116941e-07,7.0413592e-07,7.4989464e-07,7.9862701e-07,8.5052630e-07,9.0579828e-07,9.6466216e-07,1.0273513e-06,1.0941144e-06,1.1652161e-06,1.2409384e-06,1.3215816e-06,1.4074654e-06,1.4989305e-06,1.5963394e-06,1.7000785e-06,1.8105592e-06,1.9282195e-06,2.0535261e-06,2.1869758e-06,2.3290978e-06,2.4804557e-06,2.6416497e-06,2.8133190e-06,2.9961443e-06,3.1908506e-06,3.3982101e-06,3.6190449e-06,3.8542308e-06,4.1047004e-06,4.3714470e-06,4.6555282e-06,4.9580707e-06,5.2802740e-06,5.6234160e-06,5.9888572e-06,6.3780469e-06,6.7925283e-06,7.2339451e-06,7.7040476e-06,8.2047000e-06,8.7378876e-06,9.3057248e-06,9.9104632e-06,1.0554501e-05,1.1240392e-05,1.1970856e-05,1.2748789e-05,1.3577278e-05,1.4459606e-05,1.5399272e-05,1.6400004e-05,1.7465768e-05,1.8600792e-05,1.9809576e-05,2.1096914e-05,2.2467911e-05,2.3928002e-05,2.5482978e-05,2.7139006e-05,2.8902651e-05,3.0780908e-05,3.2781225e-05,3.4911534e-05,3.7180282e-05,3.9596466e-05,4.2169667e-05,4.4910090e-05,4.7828601e-05,5.0936773e-05,5.4246931e-05,5.7772202e-05,6.1526565e-05,6.5524908e-05,6.9783085e-05,7.4317983e-05,7.9147585e-05,8.4291040e-05,8.9768747e-05,9.5602426e-05,0.00010181521,0.00010843174,0.00011547824,0.00012298267,0.00013097477,0.00013948625,0.00014855085,0.00015820453,0.00016848555,0.00017943469,0.00019109536,0.00020351382,0.00021673929,0.00023082423,0.00024582449,0.00026179955,0.00027881276,0.00029693158,0.00031622787,0.00033677814,0.00035866388,0.00038197188,0.00040679456,0.00043323036,0.00046138411,0.00049136745,0.00052329927,0.00055730621,0.00059352311,0.00063209358,0.00067317058,0.00071691700,0.00076350630,0.00081312324,0.00086596457,0.00092223983,0.00098217216,0.0010459992,0.0011139742,0.0011863665,0.0012634633,0.0013455702,0.0014330129,0.0015261382,0.0016253153,0.0017309374,0.0018434235,0.0019632195,0.0020908006,0.0022266726,0.0023713743,0.0025254795,0.0026895994,0.0028643847,0.0030505286,0.0032487691,0.0034598925,0.0036847358,0.0039241906,0.0041792066,0.0044507950,0.0047400328,0.0050480668,0.0053761186,0.0057254891,0.0060975636,0.0064938176,0.0069158225,0.0073652516,0.0078438871,0.0083536271,0.0088964928,0.009474637,0.010090352,0.010746080,0.011444421,0.012188144,0.012980198,0.013823725,0.014722068,0.015678791,0.016697687,0.017782797,0.018938423,0.020169149,0.021479854,0.022875735,0.024362330,0.025945531,0.027631618,0.029427276,0.031339626,0.033376252,0.035545228,0.037855157,0.040315199,0.042935108,0.045725273,0.048696758,0.051861348,0.055231591,0.058820850,0.062643361,0.066714279,0.071049749,0.075666962,0.080584227,0.085821044,0.091398179,0.097337747,0.10366330,0.11039993,0.11757434,0.12521498,0.13335215,0.14201813,0.15124727,0.16107617,0.17154380,0.18269168,0.19456402,0.20720788,0.22067342,0.23501402,0.25028656,0.26655159,0.28387361,0.30232132,0.32196786,0.34289114,0.36517414,0.38890521,0.41417847,0.44109412,0.46975890,0.50028648,0.53279791,0.56742212,0.60429640,0.64356699,0.68538959,0.72993007,0.77736504,0.82788260,0.88168307,0.9389798,1.0];
kha_graphics2_Graphics.fontGlyphs = (function($this) {
	var $r;
	var _g = [];
	{
		var _g1 = 32;
		while(_g1 < 256) _g.push(_g1++);
	}
	$r = _g;
	return $r;
}(this));
kha_input_Gamepad.__meta__ = { statics : { sendConnectEvent : { input : null}, sendDisconnectEvent : { input : null}}, fields : { sendAxisEvent : { input : null}, sendButtonEvent : { input : null}}};
kha_input_Gamepad.instances = [];
kha_input_Gamepad.connectListeners = [];
kha_input_Gamepad.disconnectListeners = [];
kha_input_Keyboard.__meta__ = { fields : { sendDownEvent : { input : null}, sendUpEvent : { input : null}, sendPressEvent : { input : null}}};
kha_input_Keyboard.keyBehavior = kha_input_BlockInterventions.Default;
kha_input_Mouse.__meta__ = { fields : { sendLeaveEvent : { input : null}, sendDownEvent : { input : null}, sendUpEvent : { input : null}, sendMoveEvent : { input : null}, sendWheelEvent : { input : null}}};
kha_input_Mouse.wheelEventBlockBehavior = kha_input_MouseEventBlockBehavior.Full;
kha_input_Surface.touchDownEventBlockBehavior = kha_input_TouchDownEventBlockBehavior.Full;
kha_internal_HdrFormat.exposurePattern = new EReg("EXPOSURE=\\s*([0-9]*[.][0-9]*)","i");
kha_internal_HdrFormat.formatPattern = new EReg("FORMAT=32-bit_rle_rgbe","i");
kha_internal_HdrFormat.widthHeightPattern = new EReg("-Y ([0-9]+) \\+X ([0-9]+)","i");
kha_js_Sound.loading = [];
kha_netsync_ControllerBuilder.nextId = 0;
khm_Lang.ids = [];
khm_Lang.langs = [];
khm_Lang.iso = "en";
khm_Lang.fontGlyphs = [];
khm_Lang.current = new haxe_ds_StringMap();
khm_Lang.basic = new haxe_ds_StringMap();
khm_imgui_Widgets.bgColor = -15461351;
khm_imgui_Widgets.hoverColor = -11184811;
khm_imgui_Widgets.activeColor = -1408480;
khm_imgui_Widgets.focusColor = -2145352982;
khm_imgui_Widgets.textColor = -1;
khm_imgui_Widgets.buttonW = 70;
khm_imgui_Widgets.buttonH = 40;
khm_utils_Atlas.maxSize = 2048;
khm_utils_Atlas.keys = [];
khm_utils_Atlas.props = new haxe_ds_StringMap();
khm_utils_Atlas.map = new haxe_ds_ObjectMap();
khm_utils_Atlas.offsX = [];
khm_utils_Atlas.offsY = [];
khm_utils_Atlas.sizesW = [];
khm_utils_Atlas.sizesH = [];
khm_utils_Atlas.defaultProps = new khm_utils_AtlasProps(null,null);
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
